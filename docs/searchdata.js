var SearchFiles = ["GUID-01A0A1D8-EC9B-4EFF-B8E4-D154B555FEF2.html",
							"GUID-2561DB16-7947-4C02-97DC-A0BFC17070C9.html",
							"GUID-45F06B75-B37F-41E2-81C1-B463535CC07D.html",
							"GUID-45F06B75-B37F-41E2-81C1-B463535CC07D.html",
							"GUID-45F06B75-B37F-41E2-81C1-B463535CC07D.html",
							"GUID-45F06B75-B37F-41E2-81C1-B463535CC07D.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-DD1359E2-FCD4-4F82-8E75-EB78A2E1E7EF.html",
							"GUID-455343FF-D0C5-45F1-B7C2-C566D20C8D95.html",
							"GUID-455343FF-D0C5-45F1-B7C2-C566D20C8D95.html",
							"GUID-455343FF-D0C5-45F1-B7C2-C566D20C8D95.html",
							"GUID-455343FF-D0C5-45F1-B7C2-C566D20C8D95.html",
							"GUID-AE6B35B3-8C2A-4FB7-BC76-38B4F9F3CBD5.html",
							"GUID-AE6B35B3-8C2A-4FB7-BC76-38B4F9F3CBD5.html",
							"GUID-AE6B35B3-8C2A-4FB7-BC76-38B4F9F3CBD5.html",
							"GUID-AE6B35B3-8C2A-4FB7-BC76-38B4F9F3CBD5.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-7499888A-AA54-4A66-8081-A446FCC0DB37.html",
							"GUID-5D55A772-A20A-478C-B885-4FE4984D0725.html",
							"GUID-5D55A772-A20A-478C-B885-4FE4984D0725.html",
							"GUID-5D55A772-A20A-478C-B885-4FE4984D0725.html",
							"GUID-9A0666DA-6B06-4C37-B365-9537F3BCFD78.html",
							"GUID-9A0666DA-6B06-4C37-B365-9537F3BCFD78.html",
							"GUID-9A0666DA-6B06-4C37-B365-9537F3BCFD78.html",
							"GUID-9A0666DA-6B06-4C37-B365-9537F3BCFD78.html",
							"GUID-9A0666DA-6B06-4C37-B365-9537F3BCFD78.html",
							"GUID-9A0666DA-6B06-4C37-B365-9537F3BCFD78.html",
							"GUID-3DCBF1EB-5623-4419-B244-DDD9B01704EE.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-7161C177-734B-469A-9143-4C88FC11C85D.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-C6B8DB57-E903-42F6-9515-21BB0F5E1070.html",
							"GUID-234EC358-0CE1-43BF-BA84-993715DE198D.html",
							"GUID-234EC358-0CE1-43BF-BA84-993715DE198D.html",
							"GUID-234EC358-0CE1-43BF-BA84-993715DE198D.html",
							"GUID-234EC358-0CE1-43BF-BA84-993715DE198D.html",
							"GUID-234EC358-0CE1-43BF-BA84-993715DE198D.html",
							"GUID-65CE7526-616B-443D-9B42-44FA26F81697.html",
							"GUID-65CE7526-616B-443D-9B42-44FA26F81697.html",
							"GUID-65CE7526-616B-443D-9B42-44FA26F81697.html",
							"GUID-65CE7526-616B-443D-9B42-44FA26F81697.html",
							"GUID-65CE7526-616B-443D-9B42-44FA26F81697.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-2F3E4434-0B2E-4059-AF87-A2F5B95E7938.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-AAD576E7-85F8-4C15-88C1-266019B0D71B.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-08E039FC-538F-40F5-85D1-987205EDA6D6.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-EE09064C-478A-4CE7-85A7-5D304FE2A8D4.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-79671133-697D-41F2-B607-BFA7F86B1F10.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-0D2E65B8-EE01-4CE7-BA12-3A7355A87596.html",
							"GUID-E8EEC0F0-1924-451B-ABCF-1BBAD449C4F5.html",
							"GUID-E8EEC0F0-1924-451B-ABCF-1BBAD449C4F5.html",
							"GUID-E8EEC0F0-1924-451B-ABCF-1BBAD449C4F5.html",
							"GUID-E8EEC0F0-1924-451B-ABCF-1BBAD449C4F5.html",
							"GUID-9E113802-9285-489D-859D-4D21BD2E186E.html",
							"GUID-9E113802-9285-489D-859D-4D21BD2E186E.html",
							"GUID-9E113802-9285-489D-859D-4D21BD2E186E.html",
							"GUID-9E113802-9285-489D-859D-4D21BD2E186E.html",
							"GUID-9E113802-9285-489D-859D-4D21BD2E186E.html",
							"GUID-A9EE533F-5EAF-4E72-93FB-1AE557FE2B9E.html",
							"GUID-A9EE533F-5EAF-4E72-93FB-1AE557FE2B9E.html",
							"GUID-A9EE533F-5EAF-4E72-93FB-1AE557FE2B9E.html",
							"GUID-A9EE533F-5EAF-4E72-93FB-1AE557FE2B9E.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-7CD7785A-0273-4BB7-A83B-BA45E6B1D424.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-C726B4C4-41B2-43E9-BCD1-E6268F980E7E.html",
							"GUID-4FC75886-D79B-4FCD-8122-4737B2FDEF8F.html",
							"GUID-4FC75886-D79B-4FCD-8122-4737B2FDEF8F.html",
							"GUID-4FC75886-D79B-4FCD-8122-4737B2FDEF8F.html",
							"GUID-4FC75886-D79B-4FCD-8122-4737B2FDEF8F.html",
							"GUID-4FC75886-D79B-4FCD-8122-4737B2FDEF8F.html",
							"GUID-4FC75886-D79B-4FCD-8122-4737B2FDEF8F.html",
							"GUID-BD72E118-CD30-4DC9-B225-7D7070380635.html",
							"GUID-BD72E118-CD30-4DC9-B225-7D7070380635.html",
							"GUID-BD72E118-CD30-4DC9-B225-7D7070380635.html",
							"GUID-BD72E118-CD30-4DC9-B225-7D7070380635.html",
							"GUID-8F283FF4-09EC-49BD-AE31-9E558EA3E4C9.html",
							"GUID-8F283FF4-09EC-49BD-AE31-9E558EA3E4C9.html",
							"GUID-8F283FF4-09EC-49BD-AE31-9E558EA3E4C9.html",
							"GUID-8F283FF4-09EC-49BD-AE31-9E558EA3E4C9.html",
							"GUID-8F283FF4-09EC-49BD-AE31-9E558EA3E4C9.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-700B1BDA-09F9-4346-8F0B-D98C6BB5161E.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-BF9C82C4-9CAB-4E2B-971A-737BFB1E43B1.html",
							"GUID-A9CD3E3D-0BF0-4167-B5CF-DAF2B1C9577E.html",
							"GUID-A9CD3E3D-0BF0-4167-B5CF-DAF2B1C9577E.html",
							"GUID-A9CD3E3D-0BF0-4167-B5CF-DAF2B1C9577E.html",
							"GUID-A9CD3E3D-0BF0-4167-B5CF-DAF2B1C9577E.html",
							"GUID-A9CD3E3D-0BF0-4167-B5CF-DAF2B1C9577E.html",
							"GUID-EB4703E7-B19F-4204-B20F-7806F4FECFEC.html",
							"GUID-EB4703E7-B19F-4204-B20F-7806F4FECFEC.html",
							"GUID-EB4703E7-B19F-4204-B20F-7806F4FECFEC.html",
							"GUID-EB4703E7-B19F-4204-B20F-7806F4FECFEC.html",
							"GUID-EB4703E7-B19F-4204-B20F-7806F4FECFEC.html",
							"GUID-EB4703E7-B19F-4204-B20F-7806F4FECFEC.html",
							"GUID-5F35C98C-EC8E-40FF-9B62-3B31D508F820.html",
							"GUID-948E4BCA-DEFF-4D16-8C7C-7883A23A43B5.html",
							"GUID-948E4BCA-DEFF-4D16-8C7C-7883A23A43B5.html",
							"GUID-948E4BCA-DEFF-4D16-8C7C-7883A23A43B5.html",
							"GUID-06287551-3A6E-45AC-9C23-A05694E3730E.html",
							"GUID-06287551-3A6E-45AC-9C23-A05694E3730E.html",
							"GUID-06287551-3A6E-45AC-9C23-A05694E3730E.html",
							"GUID-5E911A41-614E-4483-A423-F1175B67C1AC.html",
							"GUID-5E911A41-614E-4483-A423-F1175B67C1AC.html",
							"GUID-5E911A41-614E-4483-A423-F1175B67C1AC.html",
							"GUID-98F113E7-4D55-4A56-975B-D13D48A699D8.html",
							"GUID-98F113E7-4D55-4A56-975B-D13D48A699D8.html",
							"GUID-98F113E7-4D55-4A56-975B-D13D48A699D8.html",
							"GUID-7A5B7065-BB5E-4978-ACAA-7AEA8AD0FCCC.html",
							"GUID-7A5B7065-BB5E-4978-ACAA-7AEA8AD0FCCC.html",
							"GUID-7A5B7065-BB5E-4978-ACAA-7AEA8AD0FCCC.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-72996086-347E-450C-AE92-7FFEC4F0DEE9.html",
							"GUID-326795EA-FDDC-4363-B867-C433491D0411.html",
							"GUID-326795EA-FDDC-4363-B867-C433491D0411.html",
							"GUID-326795EA-FDDC-4363-B867-C433491D0411.html",
							"GUID-F6CD1F7F-172B-4867-A730-A12658524A73.html",
							"GUID-F6CD1F7F-172B-4867-A730-A12658524A73.html",
							"GUID-F6CD1F7F-172B-4867-A730-A12658524A73.html",
							"GUID-00FB632B-9A9E-40C2-ACD7-9B27D19A02EF.html",
							"GUID-00FB632B-9A9E-40C2-ACD7-9B27D19A02EF.html",
							"GUID-00FB632B-9A9E-40C2-ACD7-9B27D19A02EF.html",
							"GUID-22734096-CC4D-4780-B175-EB65DBE280A6.html",
							"GUID-22734096-CC4D-4780-B175-EB65DBE280A6.html",
							"GUID-22734096-CC4D-4780-B175-EB65DBE280A6.html",
							"GUID-22734096-CC4D-4780-B175-EB65DBE280A6.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-D253B912-3678-4674-894E-241ADF9B0F34.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-42D88D3B-9B1E-4A3A-B4A8-05E33BEF3880.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-D5DE007C-B070-4908-9A30-8975397F8873.html",
							"GUID-654A0A2B-B86A-4C16-9DCA-2E065EB4AFA9.html",
							"GUID-654A0A2B-B86A-4C16-9DCA-2E065EB4AFA9.html",
							"GUID-654A0A2B-B86A-4C16-9DCA-2E065EB4AFA9.html",
							"GUID-A649C295-8263-4543-9694-BC000C960293.html",
							"GUID-A649C295-8263-4543-9694-BC000C960293.html",
							"GUID-A649C295-8263-4543-9694-BC000C960293.html",
							"GUID-A0BDAD39-C2D0-4738-AAFA-16760C5182FC.html",
							"GUID-A0BDAD39-C2D0-4738-AAFA-16760C5182FC.html",
							"GUID-A0BDAD39-C2D0-4738-AAFA-16760C5182FC.html",
							"GUID-18EE021F-87DD-4DF8-B023-2346755E0BBE.html",
							"GUID-18EE021F-87DD-4DF8-B023-2346755E0BBE.html",
							"GUID-18EE021F-87DD-4DF8-B023-2346755E0BBE.html",
							"GUID-D67F9164-CEE8-4AA7-904D-D4972A674516.html",
							"GUID-D67F9164-CEE8-4AA7-904D-D4972A674516.html",
							"GUID-D67F9164-CEE8-4AA7-904D-D4972A674516.html",
							"GUID-FFE97C7D-C926-45F2-ADDC-8DABCD225421.html",
							"GUID-FFE97C7D-C926-45F2-ADDC-8DABCD225421.html",
							"GUID-FFE97C7D-C926-45F2-ADDC-8DABCD225421.html",
							"GUID-9502DFAF-4BDF-4BA7-98E9-E47CF74A4B13.html",
							"GUID-9502DFAF-4BDF-4BA7-98E9-E47CF74A4B13.html",
							"GUID-9502DFAF-4BDF-4BA7-98E9-E47CF74A4B13.html",
							"GUID-63B0ABBD-7EF9-4541-AEAC-56A68BF8A3CB.html",
							"GUID-63B0ABBD-7EF9-4541-AEAC-56A68BF8A3CB.html",
							"GUID-63B0ABBD-7EF9-4541-AEAC-56A68BF8A3CB.html",
							"GUID-CC9C2877-3B32-4836-AD07-7B7A730FA2D2.html",
							"GUID-CC9C2877-3B32-4836-AD07-7B7A730FA2D2.html",
							"GUID-CC9C2877-3B32-4836-AD07-7B7A730FA2D2.html",
							"GUID-EC3A55D6-CC2A-4167-A05C-9B7714D8B9F0.html",
							"GUID-EC3A55D6-CC2A-4167-A05C-9B7714D8B9F0.html",
							"GUID-EC3A55D6-CC2A-4167-A05C-9B7714D8B9F0.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-5E681416-39F1-45DD-8996-465E32E46030.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-D5524C05-886B-46E1-89D1-D874C4B3B4AB.html",
							"GUID-1CC08285-019B-4577-BF6C-E21D481B41FD.html",
							"GUID-1CC08285-019B-4577-BF6C-E21D481B41FD.html",
							"GUID-1CC08285-019B-4577-BF6C-E21D481B41FD.html",
							"GUID-1CC08285-019B-4577-BF6C-E21D481B41FD.html",
							"GUID-1CC08285-019B-4577-BF6C-E21D481B41FD.html",
							"GUID-1CC08285-019B-4577-BF6C-E21D481B41FD.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-5D32E98E-5DC7-433C-964D-2F6A6CBFFDBC.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-C669F62C-8C6F-4D76-B390-F6DA0E452C6D.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-9B4C7612-0F04-43CF-B6CF-6EA9A0DD2145.html",
							"GUID-FDC47A16-9CB8-4026-BC5A-6BA077766D9B.html",
							"GUID-FDC47A16-9CB8-4026-BC5A-6BA077766D9B.html",
							"GUID-FDC47A16-9CB8-4026-BC5A-6BA077766D9B.html",
							"GUID-3B965ED0-98F5-4D8C-BB55-9338298ABDDA.html",
							"GUID-3B965ED0-98F5-4D8C-BB55-9338298ABDDA.html",
							"GUID-3B965ED0-98F5-4D8C-BB55-9338298ABDDA.html",
							"GUID-8BD37D32-19CF-4C4E-BE10-07CDCDAF294B.html",
							"GUID-8BD37D32-19CF-4C4E-BE10-07CDCDAF294B.html",
							"GUID-8BD37D32-19CF-4C4E-BE10-07CDCDAF294B.html",
							"GUID-8BD37D32-19CF-4C4E-BE10-07CDCDAF294B.html",
							"GUID-E8063A4C-9310-4E83-9C87-00408C02C74A.html",
							"GUID-E8063A4C-9310-4E83-9C87-00408C02C74A.html",
							"GUID-E8063A4C-9310-4E83-9C87-00408C02C74A.html",
							"GUID-D0C43765-EA61-42CD-864E-6E702DA69D18.html",
							"GUID-D0C43765-EA61-42CD-864E-6E702DA69D18.html",
							"GUID-D0C43765-EA61-42CD-864E-6E702DA69D18.html",
							"GUID-B665DD97-5496-4B2C-88C1-94075F030C7B.html",
							"GUID-B665DD97-5496-4B2C-88C1-94075F030C7B.html",
							"GUID-B665DD97-5496-4B2C-88C1-94075F030C7B.html",
							"GUID-B665DD97-5496-4B2C-88C1-94075F030C7B.html",
							"GUID-A200B90D-426C-451D-88D9-318F9E196437.html",
							"GUID-A200B90D-426C-451D-88D9-318F9E196437.html",
							"GUID-A200B90D-426C-451D-88D9-318F9E196437.html",
							"GUID-15DCD471-0066-4EEA-A08A-E2CA14AD4045.html",
							"GUID-15DCD471-0066-4EEA-A08A-E2CA14AD4045.html",
							"GUID-15DCD471-0066-4EEA-A08A-E2CA14AD4045.html",
							"GUID-34E051F1-4921-449A-A1BA-E1EF1692CC94.html",
							"GUID-34E051F1-4921-449A-A1BA-E1EF1692CC94.html",
							"GUID-34E051F1-4921-449A-A1BA-E1EF1692CC94.html",
							"GUID-A93250CC-2629-4D29-8130-EC9504AF4917.html",
							"GUID-A93250CC-2629-4D29-8130-EC9504AF4917.html",
							"GUID-A93250CC-2629-4D29-8130-EC9504AF4917.html",
							"GUID-5ECBDC64-36BD-4349-ADB7-92DD3BA7A5EC.html",
							"GUID-5ECBDC64-36BD-4349-ADB7-92DD3BA7A5EC.html",
							"GUID-5ECBDC64-36BD-4349-ADB7-92DD3BA7A5EC.html",
							"GUID-9078BE1B-48EC-41BD-A482-5F71246EED3B.html",
							"GUID-9078BE1B-48EC-41BD-A482-5F71246EED3B.html",
							"GUID-9078BE1B-48EC-41BD-A482-5F71246EED3B.html",
							"GUID-D74284FF-5065-4BC5-9E60-7D08C942CDBC.html",
							"GUID-D74284FF-5065-4BC5-9E60-7D08C942CDBC.html",
							"GUID-D74284FF-5065-4BC5-9E60-7D08C942CDBC.html",
							"GUID-D8ECB653-53B3-4CF9-A369-8B9AEDE8A2C8.html",
							"GUID-D8ECB653-53B3-4CF9-A369-8B9AEDE8A2C8.html",
							"GUID-D8ECB653-53B3-4CF9-A369-8B9AEDE8A2C8.html",
							"GUID-DCFB2B85-E195-41FA-96E6-15B74024A91B.html",
							"GUID-DCFB2B85-E195-41FA-96E6-15B74024A91B.html",
							"GUID-DCFB2B85-E195-41FA-96E6-15B74024A91B.html",
							"GUID-BC88FD8C-4760-41FF-8905-F8710FFAC2FB.html",
							"GUID-BC88FD8C-4760-41FF-8905-F8710FFAC2FB.html",
							"GUID-BC88FD8C-4760-41FF-8905-F8710FFAC2FB.html",
							"GUID-B495E926-CE82-4BA1-9D9F-C0072D02AC66.html",
							"GUID-B495E926-CE82-4BA1-9D9F-C0072D02AC66.html",
							"GUID-B495E926-CE82-4BA1-9D9F-C0072D02AC66.html",
							"GUID-138CB8E2-7A8E-499D-96E0-207D64309281.html",
							"GUID-138CB8E2-7A8E-499D-96E0-207D64309281.html",
							"GUID-138CB8E2-7A8E-499D-96E0-207D64309281.html",
							"GUID-A3CEED75-FCEE-4BBB-886E-1709118B1593.html",
							"GUID-A3CEED75-FCEE-4BBB-886E-1709118B1593.html",
							"GUID-A3CEED75-FCEE-4BBB-886E-1709118B1593.html",
							"GUID-3622A87D-7DEC-4649-87E7-2375CE78BB13.html",
							"GUID-3622A87D-7DEC-4649-87E7-2375CE78BB13.html",
							"GUID-3622A87D-7DEC-4649-87E7-2375CE78BB13.html",
							"GUID-2486F77B-B4BA-45A3-8294-C85F434ACF2E.html",
							"GUID-2486F77B-B4BA-45A3-8294-C85F434ACF2E.html",
							"GUID-2486F77B-B4BA-45A3-8294-C85F434ACF2E.html",
							"GUID-5406A986-55E4-493C-AFEB-EFB3EBD2A598.html",
							"GUID-5406A986-55E4-493C-AFEB-EFB3EBD2A598.html",
							"GUID-5406A986-55E4-493C-AFEB-EFB3EBD2A598.html",
							"GUID-51E0C342-9050-40F5-9101-560645FA5950.html",
							"GUID-51E0C342-9050-40F5-9101-560645FA5950.html",
							"GUID-51E0C342-9050-40F5-9101-560645FA5950.html",
							"GUID-871731A7-9639-4367-AB6F-84BBE9AE1C11.html",
							"GUID-871731A7-9639-4367-AB6F-84BBE9AE1C11.html",
							"GUID-871731A7-9639-4367-AB6F-84BBE9AE1C11.html",
							"GUID-52B74250-085A-4B9B-8325-4820EF5B9CF2.html",
							"GUID-52B74250-085A-4B9B-8325-4820EF5B9CF2.html",
							"GUID-52B74250-085A-4B9B-8325-4820EF5B9CF2.html",
							"GUID-3CB70D90-B644-4EAC-8FF1-7620A2ADD8BF.html",
							"GUID-3CB70D90-B644-4EAC-8FF1-7620A2ADD8BF.html",
							"GUID-3CB70D90-B644-4EAC-8FF1-7620A2ADD8BF.html",
							"GUID-FEBA79BB-883C-4FC8-81A5-7E2AF9C95557.html",
							"GUID-FEBA79BB-883C-4FC8-81A5-7E2AF9C95557.html",
							"GUID-FEBA79BB-883C-4FC8-81A5-7E2AF9C95557.html",
							"GUID-79C9E2B1-1D4B-4872-9F85-473AB1727C15.html",
							"GUID-79C9E2B1-1D4B-4872-9F85-473AB1727C15.html",
							"GUID-79C9E2B1-1D4B-4872-9F85-473AB1727C15.html",
							"GUID-76741EFE-342E-4BBE-8D2B-2637B6DDBAB8.html",
							"GUID-76741EFE-342E-4BBE-8D2B-2637B6DDBAB8.html",
							"GUID-76741EFE-342E-4BBE-8D2B-2637B6DDBAB8.html",
							"GUID-875DA8B3-C880-487A-AB02-50702C77560B.html",
							"GUID-875DA8B3-C880-487A-AB02-50702C77560B.html",
							"GUID-875DA8B3-C880-487A-AB02-50702C77560B.html",
							"GUID-78F420D8-1FC9-475F-A765-056CDFE31B23.html",
							"GUID-78F420D8-1FC9-475F-A765-056CDFE31B23.html",
							"GUID-78F420D8-1FC9-475F-A765-056CDFE31B23.html",
							"GUID-78F420D8-1FC9-475F-A765-056CDFE31B23.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-385B0867-B937-48D7-A881-83FE2681238D.html",
							"GUID-C192E44D-BC57-44B0-A3C2-5369D450349E.html",
							"GUID-C192E44D-BC57-44B0-A3C2-5369D450349E.html",
							"GUID-C192E44D-BC57-44B0-A3C2-5369D450349E.html",
							"GUID-69815B29-49C7-4B1F-909D-6C9D2CDC27D0.html",
							"GUID-69815B29-49C7-4B1F-909D-6C9D2CDC27D0.html",
							"GUID-69815B29-49C7-4B1F-909D-6C9D2CDC27D0.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-06EA623C-5A27-4AA8-BD11-3AAD59833715.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-1F44223B-4338-4643-8820-4E67D79BB857.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-739C2A7B-0290-41CF-91EE-E82F65EE641B.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-81316D75-5D0A-49B2-8266-2DF84A520AC1.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-C2BCE051-E53A-43C0-9C4D-B27359C79AA0.html",
							"GUID-0141B187-105A-4CF6-9968-4E989A0F774C.html",
							"GUID-0141B187-105A-4CF6-9968-4E989A0F774C.html",
							"GUID-0141B187-105A-4CF6-9968-4E989A0F774C.html",
							"GUID-8A4DFE95-9E3A-4D86-987D-12660E0B2C21.html",
							"GUID-8A4DFE95-9E3A-4D86-987D-12660E0B2C21.html",
							"GUID-8A4DFE95-9E3A-4D86-987D-12660E0B2C21.html",
							"GUID-874E3954-A0C6-42AD-BF95-19EBFDE1A9EB.html",
							"GUID-874E3954-A0C6-42AD-BF95-19EBFDE1A9EB.html",
							"GUID-874E3954-A0C6-42AD-BF95-19EBFDE1A9EB.html",
							"GUID-D95F67A0-5843-427A-A9CA-3FC6F4BDEF9C.html",
							"GUID-D95F67A0-5843-427A-A9CA-3FC6F4BDEF9C.html",
							"GUID-D95F67A0-5843-427A-A9CA-3FC6F4BDEF9C.html",
							"GUID-CB1F2EFB-0DB6-4501-A815-67747E613877.html",
							"GUID-CB1F2EFB-0DB6-4501-A815-67747E613877.html",
							"GUID-CB1F2EFB-0DB6-4501-A815-67747E613877.html",
							"GUID-807A339D-F8C1-4528-9EDB-4F5A1908D99F.html",
							"GUID-807A339D-F8C1-4528-9EDB-4F5A1908D99F.html",
							"GUID-807A339D-F8C1-4528-9EDB-4F5A1908D99F.html",
							"GUID-0B38F2BB-4B54-4FFD-A7CC-4AAD732CB4F7.html",
							"GUID-0B38F2BB-4B54-4FFD-A7CC-4AAD732CB4F7.html",
							"GUID-0B38F2BB-4B54-4FFD-A7CC-4AAD732CB4F7.html",
							"GUID-E368D60C-EFC5-494D-B7C8-4852FE635F54.html",
							"GUID-E368D60C-EFC5-494D-B7C8-4852FE635F54.html",
							"GUID-E368D60C-EFC5-494D-B7C8-4852FE635F54.html",
							"GUID-F497CC64-1974-4B8D-A611-F22E1AAF2917.html",
							"GUID-F497CC64-1974-4B8D-A611-F22E1AAF2917.html",
							"GUID-F497CC64-1974-4B8D-A611-F22E1AAF2917.html",
							"GUID-7EB1F067-2E76-4420-9D55-B8B11B339534.html",
							"GUID-7EB1F067-2E76-4420-9D55-B8B11B339534.html",
							"GUID-7EB1F067-2E76-4420-9D55-B8B11B339534.html",
							"GUID-26D1C662-730E-419D-AF20-DF083DDCCCC8.html",
							"GUID-26D1C662-730E-419D-AF20-DF083DDCCCC8.html",
							"GUID-26D1C662-730E-419D-AF20-DF083DDCCCC8.html",
							"GUID-1BF25707-B518-4BD3-8F5A-69B0EBB387D1.html",
							"GUID-1BF25707-B518-4BD3-8F5A-69B0EBB387D1.html",
							"GUID-1BF25707-B518-4BD3-8F5A-69B0EBB387D1.html",
							"GUID-A94D80E9-1348-4545-9537-646C42EDC74A.html",
							"GUID-A94D80E9-1348-4545-9537-646C42EDC74A.html",
							"GUID-A94D80E9-1348-4545-9537-646C42EDC74A.html",
							"GUID-536CE867-03C9-4E3F-AAEB-5546F875CE0F.html",
							"GUID-536CE867-03C9-4E3F-AAEB-5546F875CE0F.html",
							"GUID-536CE867-03C9-4E3F-AAEB-5546F875CE0F.html",
							"GUID-0AEBD81D-40E3-4A79-B822-F14422D72883.html",
							"GUID-0AEBD81D-40E3-4A79-B822-F14422D72883.html",
							"GUID-0AEBD81D-40E3-4A79-B822-F14422D72883.html",
							"GUID-5FD24A9C-E246-485D-8022-32EB58B86019.html",
							"GUID-5FD24A9C-E246-485D-8022-32EB58B86019.html",
							"GUID-5FD24A9C-E246-485D-8022-32EB58B86019.html",
							"GUID-5FD24A9C-E246-485D-8022-32EB58B86019.html",
							"GUID-68D68740-9D0A-4402-A960-1156015DB3F3.html",
							"GUID-68D68740-9D0A-4402-A960-1156015DB3F3.html",
							"GUID-68D68740-9D0A-4402-A960-1156015DB3F3.html",
							"GUID-008EECE5-9E49-408E-9D25-6EC020D3BBA2.html",
							"GUID-008EECE5-9E49-408E-9D25-6EC020D3BBA2.html",
							"GUID-008EECE5-9E49-408E-9D25-6EC020D3BBA2.html",
							"GUID-008EECE5-9E49-408E-9D25-6EC020D3BBA2.html",
							"GUID-25D92FD5-DB0E-4812-B93B-54D91FE4F8F7.html",
							"GUID-25D92FD5-DB0E-4812-B93B-54D91FE4F8F7.html",
							"GUID-25D92FD5-DB0E-4812-B93B-54D91FE4F8F7.html",
							"GUID-E9805013-EAB9-4597-8A21-4E0CCF4BDC0D.html",
							"GUID-E9805013-EAB9-4597-8A21-4E0CCF4BDC0D.html",
							"GUID-E9805013-EAB9-4597-8A21-4E0CCF4BDC0D.html",
							"GUID-E9805013-EAB9-4597-8A21-4E0CCF4BDC0D.html",
							"GUID-7C947C91-B278-4F7E-AA29-7B5C94C2D3DE.html",
							"GUID-7C947C91-B278-4F7E-AA29-7B5C94C2D3DE.html",
							"GUID-7C947C91-B278-4F7E-AA29-7B5C94C2D3DE.html",
							"GUID-623336CD-A7A1-4E11-A332-7AC77291942F.html",
							"GUID-623336CD-A7A1-4E11-A332-7AC77291942F.html",
							"GUID-623336CD-A7A1-4E11-A332-7AC77291942F.html",
							"GUID-623336CD-A7A1-4E11-A332-7AC77291942F.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-7992CCCE-0909-471E-A604-0260C63B5B94.html",
							"GUID-DE71AB16-2E33-4DC2-B6EF-8E07416A46B5.html",
							"GUID-DE71AB16-2E33-4DC2-B6EF-8E07416A46B5.html",
							"GUID-DE71AB16-2E33-4DC2-B6EF-8E07416A46B5.html",
							"GUID-910A9784-771F-4B00-9891-A9515C0B34A4.html",
							"GUID-910A9784-771F-4B00-9891-A9515C0B34A4.html",
							"GUID-910A9784-771F-4B00-9891-A9515C0B34A4.html",
							"GUID-3C993F99-405E-49EB-931F-2BB94DD0E8E7.html",
							"GUID-3C993F99-405E-49EB-931F-2BB94DD0E8E7.html",
							"GUID-3C993F99-405E-49EB-931F-2BB94DD0E8E7.html",
							"GUID-44B3F123-A04B-4C85-A6E4-F1E7153C1318.html",
							"GUID-44B3F123-A04B-4C85-A6E4-F1E7153C1318.html",
							"GUID-44B3F123-A04B-4C85-A6E4-F1E7153C1318.html",
							"GUID-BEDE30B8-9E04-45B0-81BF-DFFAF8AE22E9.html",
							"GUID-BEDE30B8-9E04-45B0-81BF-DFFAF8AE22E9.html",
							"GUID-BEDE30B8-9E04-45B0-81BF-DFFAF8AE22E9.html",
							"GUID-71366BF3-F342-4C9D-82D8-604BF66C8FAF.html",
							"GUID-71366BF3-F342-4C9D-82D8-604BF66C8FAF.html",
							"GUID-71366BF3-F342-4C9D-82D8-604BF66C8FAF.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-88538B1E-780C-4DF4-96DD-1C2C3E4D92E3.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-BD267020-02EC-409E-87A1-1698991A5E6C.html",
							"GUID-2BA71B3F-6EAF-44A6-808C-51E49243D0F2.html",
							"GUID-2BA71B3F-6EAF-44A6-808C-51E49243D0F2.html",
							"GUID-2BA71B3F-6EAF-44A6-808C-51E49243D0F2.html",
							"GUID-2BA71B3F-6EAF-44A6-808C-51E49243D0F2.html",
							"GUID-2BA71B3F-6EAF-44A6-808C-51E49243D0F2.html",
							"GUID-2BA71B3F-6EAF-44A6-808C-51E49243D0F2.html",
							"GUID-6D0ED7D6-B863-4E31-8AE4-6502383000FE.html",
							"GUID-6D0ED7D6-B863-4E31-8AE4-6502383000FE.html",
							"GUID-6D0ED7D6-B863-4E31-8AE4-6502383000FE.html",
							"GUID-9356D53B-4F42-4E1E-B051-90F7C4D448E6.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-D7AFD2EF-A67F-417D-B3F2-B430B5EEB050.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-6D657280-1551-4998-9C0B-55B3D44B50CD.html",
							"GUID-215936A1-6B64-4BE0-A869-C855B77F456E.html",
							"GUID-215936A1-6B64-4BE0-A869-C855B77F456E.html",
							"GUID-215936A1-6B64-4BE0-A869-C855B77F456E.html",
							"GUID-76832053-CAD2-46D5-9AD5-FC26C6E0316B.html",
							"GUID-76832053-CAD2-46D5-9AD5-FC26C6E0316B.html",
							"GUID-76832053-CAD2-46D5-9AD5-FC26C6E0316B.html",
							"GUID-76832053-CAD2-46D5-9AD5-FC26C6E0316B.html",
							"GUID-5E4E3379-019F-4C00-8019-0D3C134EF852.html",
							"GUID-5E4E3379-019F-4C00-8019-0D3C134EF852.html",
							"GUID-5E4E3379-019F-4C00-8019-0D3C134EF852.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-D8FE96DB-44FF-4D34-BFAD-65D10AAE0F8C.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-CEC95AE4-8643-4D20-AB08-D3B716C13279.html",
							"GUID-487990F4-7070-4E79-9738-3A088AD13DD6.html",
							"GUID-487990F4-7070-4E79-9738-3A088AD13DD6.html",
							"GUID-487990F4-7070-4E79-9738-3A088AD13DD6.html",
							"GUID-487990F4-7070-4E79-9738-3A088AD13DD6.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-DBD7F5E4-D8F8-4709-946B-43721484684F.html",
							"GUID-C0C0BEED-30C2-48F5-A0E9-1FD47DC8186C.html",
							"GUID-C0C0BEED-30C2-48F5-A0E9-1FD47DC8186C.html",
							"GUID-C0C0BEED-30C2-48F5-A0E9-1FD47DC8186C.html",
							"GUID-C0C0BEED-30C2-48F5-A0E9-1FD47DC8186C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-2A45F0EE-A52A-4143-B91C-7300A1B9156C.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-F54F6813-6646-4E0C-A080-B168BC161ED5.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-C7BB0AD1-75F0-4433-9D7C-275A7198955B.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-56BC9832-3FC3-46D6-9573-F3A81C543CC3.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-6D863B8C-E295-4B65-9A8B-8D467258E1F8.html",
							"GUID-8038944F-7C27-43D4-804D-1EDFE1B38AD5.html",
							"GUID-8038944F-7C27-43D4-804D-1EDFE1B38AD5.html",
							"GUID-8038944F-7C27-43D4-804D-1EDFE1B38AD5.html",
							"GUID-8038944F-7C27-43D4-804D-1EDFE1B38AD5.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-85823332-73F9-4E54-97E9-B92708A8048D.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-AC7B0B1C-815C-406B-8997-8AAFF92AE6CE.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-797ADA4A-8A29-42FC-9F8E-19B4D99ACF02.html",
							"GUID-C696821D-AA0B-4D49-9962-3B9EA7323813.html",
							"GUID-C696821D-AA0B-4D49-9962-3B9EA7323813.html",
							"GUID-C696821D-AA0B-4D49-9962-3B9EA7323813.html",
							"GUID-C696821D-AA0B-4D49-9962-3B9EA7323813.html",
							"GUID-C78B7BDE-B79E-463C-BC97-9322BC69D1C4.html",
							"GUID-C78B7BDE-B79E-463C-BC97-9322BC69D1C4.html",
							"GUID-C78B7BDE-B79E-463C-BC97-9322BC69D1C4.html",
							"GUID-C78B7BDE-B79E-463C-BC97-9322BC69D1C4.html",
							"GUID-C78B7BDE-B79E-463C-BC97-9322BC69D1C4.html",
							"GUID-C78B7BDE-B79E-463C-BC97-9322BC69D1C4.html",
							"GUID-27C514CD-DE28-4215-BB75-6C8EA971E12E.html",
							"GUID-088770E9-EA3A-4AEA-A328-D70523609360.html",
							"GUID-088770E9-EA3A-4AEA-A328-D70523609360.html",
							"GUID-088770E9-EA3A-4AEA-A328-D70523609360.html",
							"GUID-088770E9-EA3A-4AEA-A328-D70523609360.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-CC0DE8A5-7934-4838-97B7-59137819501A.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-C4CD3F53-E57A-4E19-A8BA-ED96180C8ED1.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-57290915-F64F-4FA3-80F5-3F61074D86BA.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-21001124-9CE0-4D32-B195-ED3B69AEF28A.html",
							"GUID-AB42E2A0-98A7-4AC7-BCD8-4FEBAD6FD2FD.html",
							"GUID-AB42E2A0-98A7-4AC7-BCD8-4FEBAD6FD2FD.html",
							"GUID-AB42E2A0-98A7-4AC7-BCD8-4FEBAD6FD2FD.html",
							"GUID-AB42E2A0-98A7-4AC7-BCD8-4FEBAD6FD2FD.html",
							"GUID-1E64BC34-AD66-494E-B1DD-CB0B4715145A.html",
							"GUID-1E64BC34-AD66-494E-B1DD-CB0B4715145A.html",
							"GUID-1E64BC34-AD66-494E-B1DD-CB0B4715145A.html",
							"GUID-1E64BC34-AD66-494E-B1DD-CB0B4715145A.html",
							"GUID-14BB0D8F-F47E-45B7-B70B-DA689313D9D7.html",
							"GUID-14BB0D8F-F47E-45B7-B70B-DA689313D9D7.html",
							"GUID-14BB0D8F-F47E-45B7-B70B-DA689313D9D7.html",
							"GUID-14BB0D8F-F47E-45B7-B70B-DA689313D9D7.html",
							"GUID-14BB0D8F-F47E-45B7-B70B-DA689313D9D7.html",
							"GUID-14BB0D8F-F47E-45B7-B70B-DA689313D9D7.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-4D83D14D-F726-4FE8-B61E-17E9CB9C92AC.html",
							"GUID-7331FDCC-3800-490B-9496-10202260E785.html",
							"GUID-7331FDCC-3800-490B-9496-10202260E785.html",
							"GUID-7331FDCC-3800-490B-9496-10202260E785.html",
							"GUID-7331FDCC-3800-490B-9496-10202260E785.html",
							"GUID-6AB7C2A7-4C32-4E18-9204-F39B1365EF4C.html",
							"GUID-6AB7C2A7-4C32-4E18-9204-F39B1365EF4C.html",
							"GUID-6AB7C2A7-4C32-4E18-9204-F39B1365EF4C.html",
							"GUID-6AB7C2A7-4C32-4E18-9204-F39B1365EF4C.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-49B5D6B0-6CA1-4B6B-894B-88324C6E48CF.html",
							"GUID-6BA9DFB7-8062-4262-8751-6D45D3CF21E4.html",
							"GUID-6BA9DFB7-8062-4262-8751-6D45D3CF21E4.html",
							"GUID-6BA9DFB7-8062-4262-8751-6D45D3CF21E4.html",
							"GUID-6BA9DFB7-8062-4262-8751-6D45D3CF21E4.html",
							"GUID-6BA9DFB7-8062-4262-8751-6D45D3CF21E4.html",
							"GUID-6BA9DFB7-8062-4262-8751-6D45D3CF21E4.html",
							"GUID-EE292D18-2DE6-478E-AAE1-74C69A31459E.html",
							"GUID-D61246B7-D771-4B3D-BEEB-66589A4A45D8.html",
							"GUID-D61246B7-D771-4B3D-BEEB-66589A4A45D8.html",
							"GUID-D61246B7-D771-4B3D-BEEB-66589A4A45D8.html",
							"GUID-D61246B7-D771-4B3D-BEEB-66589A4A45D8.html",
							"GUID-EBF7C270-D8FA-48AE-8F0F-BB49142CADCE.html",
							"GUID-EBF7C270-D8FA-48AE-8F0F-BB49142CADCE.html",
							"GUID-EBF7C270-D8FA-48AE-8F0F-BB49142CADCE.html",
							"GUID-EBF7C270-D8FA-48AE-8F0F-BB49142CADCE.html",
							"GUID-6EFA49D3-5456-4615-83D8-52877638459E.html",
							"GUID-6EFA49D3-5456-4615-83D8-52877638459E.html",
							"GUID-6EFA49D3-5456-4615-83D8-52877638459E.html",
							"GUID-6EFA49D3-5456-4615-83D8-52877638459E.html",
							"GUID-7F4F9FCA-E3C2-47FF-BC0C-8174C68FCDE1.html",
							"GUID-7F4F9FCA-E3C2-47FF-BC0C-8174C68FCDE1.html",
							"GUID-7F4F9FCA-E3C2-47FF-BC0C-8174C68FCDE1.html",
							"GUID-7F4F9FCA-E3C2-47FF-BC0C-8174C68FCDE1.html",
							"GUID-7F4F9FCA-E3C2-47FF-BC0C-8174C68FCDE1.html",
							"GUID-ECDD8777-5AD1-4A94-993F-7822E2DD61FB.html",
							"GUID-ECDD8777-5AD1-4A94-993F-7822E2DD61FB.html",
							"GUID-ECDD8777-5AD1-4A94-993F-7822E2DD61FB.html",
							"GUID-ECDD8777-5AD1-4A94-993F-7822E2DD61FB.html",
							"GUID-ECDD8777-5AD1-4A94-993F-7822E2DD61FB.html",
							"GUID-DC4CB281-3F3A-4F1C-BD5D-0DC0C4A94259.html",
							"GUID-DC4CB281-3F3A-4F1C-BD5D-0DC0C4A94259.html",
							"GUID-DC4CB281-3F3A-4F1C-BD5D-0DC0C4A94259.html",
							"GUID-DC4CB281-3F3A-4F1C-BD5D-0DC0C4A94259.html",
							"GUID-DC4CB281-3F3A-4F1C-BD5D-0DC0C4A94259.html",
							"GUID-D7DD45C0-B121-407E-B796-36FBC02DBF1A.html",
							"GUID-D7DD45C0-B121-407E-B796-36FBC02DBF1A.html",
							"GUID-D7DD45C0-B121-407E-B796-36FBC02DBF1A.html",
							"GUID-4BE7A1A1-381E-4DC9-A0D4-72EA9B56165A.html",
							"GUID-4BE7A1A1-381E-4DC9-A0D4-72EA9B56165A.html",
							"GUID-4BE7A1A1-381E-4DC9-A0D4-72EA9B56165A.html",
							"GUID-4BE7A1A1-381E-4DC9-A0D4-72EA9B56165A.html",
							"GUID-F4B6992A-1C29-48A9-9EA3-EDE9F88B7677.html",
							"GUID-F4B6992A-1C29-48A9-9EA3-EDE9F88B7677.html",
							"GUID-F4B6992A-1C29-48A9-9EA3-EDE9F88B7677.html",
							"GUID-F4B6992A-1C29-48A9-9EA3-EDE9F88B7677.html",
							"GUID-7229E3C2-66B4-4EA1-816D-85C09249A5DE.html",
							"GUID-7229E3C2-66B4-4EA1-816D-85C09249A5DE.html",
							"GUID-7229E3C2-66B4-4EA1-816D-85C09249A5DE.html",
							"GUID-7229E3C2-66B4-4EA1-816D-85C09249A5DE.html",
							"GUID-7229E3C2-66B4-4EA1-816D-85C09249A5DE.html",
							"GUID-96ADA561-AD37-4BAD-8C07-2B45663C7BCD.html",
							"GUID-96ADA561-AD37-4BAD-8C07-2B45663C7BCD.html",
							"GUID-96ADA561-AD37-4BAD-8C07-2B45663C7BCD.html",
							"GUID-96ADA561-AD37-4BAD-8C07-2B45663C7BCD.html",
							"GUID-96ADA561-AD37-4BAD-8C07-2B45663C7BCD.html",
							"GUID-D8AA42C0-A142-490C-85FA-0CED7BA562CF.html",
							"GUID-D8AA42C0-A142-490C-85FA-0CED7BA562CF.html",
							"GUID-D8AA42C0-A142-490C-85FA-0CED7BA562CF.html",
							"GUID-D8AA42C0-A142-490C-85FA-0CED7BA562CF.html",
							"GUID-2BD782B1-B532-41BD-B4A7-6BC09C717E9F.html",
							"GUID-2BD782B1-B532-41BD-B4A7-6BC09C717E9F.html",
							"GUID-2BD782B1-B532-41BD-B4A7-6BC09C717E9F.html",
							"GUID-2BD782B1-B532-41BD-B4A7-6BC09C717E9F.html",
							"GUID-2BD782B1-B532-41BD-B4A7-6BC09C717E9F.html",
							"GUID-D1BAA1C2-EC47-4DD3-8F9E-F57F42EA215C.html",
							"GUID-D1BAA1C2-EC47-4DD3-8F9E-F57F42EA215C.html",
							"GUID-D1BAA1C2-EC47-4DD3-8F9E-F57F42EA215C.html",
							"GUID-D1BAA1C2-EC47-4DD3-8F9E-F57F42EA215C.html",
							"GUID-03F0FC1F-4D34-404C-A5D5-A286B61DC7A3.html",
							"GUID-03F0FC1F-4D34-404C-A5D5-A286B61DC7A3.html",
							"GUID-03F0FC1F-4D34-404C-A5D5-A286B61DC7A3.html",
							"GUID-03F0FC1F-4D34-404C-A5D5-A286B61DC7A3.html",
							"GUID-C4E6D5B7-24EE-45C4-888A-C3A67F4144AA.html",
							"GUID-C4E6D5B7-24EE-45C4-888A-C3A67F4144AA.html",
							"GUID-C4E6D5B7-24EE-45C4-888A-C3A67F4144AA.html",
							"GUID-C4E6D5B7-24EE-45C4-888A-C3A67F4144AA.html",
							"GUID-E1712D45-7A1B-41B6-A61D-4DD50A9FDB02.html",
							"GUID-E1712D45-7A1B-41B6-A61D-4DD50A9FDB02.html",
							"GUID-E1712D45-7A1B-41B6-A61D-4DD50A9FDB02.html",
							"GUID-E1712D45-7A1B-41B6-A61D-4DD50A9FDB02.html",
							"GUID-E1712D45-7A1B-41B6-A61D-4DD50A9FDB02.html",
							"GUID-CB7D4F5F-5213-4E6E-9F9A-ACA1B11A9BD1.html",
							"GUID-CB7D4F5F-5213-4E6E-9F9A-ACA1B11A9BD1.html",
							"GUID-CB7D4F5F-5213-4E6E-9F9A-ACA1B11A9BD1.html",
							"GUID-CB7D4F5F-5213-4E6E-9F9A-ACA1B11A9BD1.html",
							"GUID-CB7D4F5F-5213-4E6E-9F9A-ACA1B11A9BD1.html",
							"GUID-412C87A5-C2E5-463A-94E3-5C2D08950144.html",
							"GUID-412C87A5-C2E5-463A-94E3-5C2D08950144.html",
							"GUID-412C87A5-C2E5-463A-94E3-5C2D08950144.html",
							"GUID-412C87A5-C2E5-463A-94E3-5C2D08950144.html",
							"GUID-412C87A5-C2E5-463A-94E3-5C2D08950144.html",
							"GUID-ABA88D9B-9D58-4C7C-BB13-9E7CF60D028C.html",
							"GUID-ABA88D9B-9D58-4C7C-BB13-9E7CF60D028C.html",
							"GUID-ABA88D9B-9D58-4C7C-BB13-9E7CF60D028C.html",
							"GUID-ABA88D9B-9D58-4C7C-BB13-9E7CF60D028C.html",
							"GUID-B7229C8D-5E90-4347-96DA-B9DC7E138091.html",
							"GUID-B7229C8D-5E90-4347-96DA-B9DC7E138091.html",
							"GUID-B7229C8D-5E90-4347-96DA-B9DC7E138091.html",
							"GUID-B7229C8D-5E90-4347-96DA-B9DC7E138091.html",
							"GUID-B7229C8D-5E90-4347-96DA-B9DC7E138091.html",
							"GUID-D8E507AA-5287-43A5-8758-6D848C86325C.html",
							"GUID-D8E507AA-5287-43A5-8758-6D848C86325C.html",
							"GUID-D8E507AA-5287-43A5-8758-6D848C86325C.html",
							"GUID-D8E507AA-5287-43A5-8758-6D848C86325C.html",
							"GUID-D8E507AA-5287-43A5-8758-6D848C86325C.html",
							"GUID-725CB883-355E-4F5B-94FB-E5623A6FCBEC.html",
							"GUID-725CB883-355E-4F5B-94FB-E5623A6FCBEC.html",
							"GUID-725CB883-355E-4F5B-94FB-E5623A6FCBEC.html",
							"GUID-725CB883-355E-4F5B-94FB-E5623A6FCBEC.html",
							"GUID-725CB883-355E-4F5B-94FB-E5623A6FCBEC.html",
							"GUID-C0D40AEB-10C7-401C-AFB5-B8086E0D4BBF.html",
							"GUID-C0D40AEB-10C7-401C-AFB5-B8086E0D4BBF.html",
							"GUID-C0D40AEB-10C7-401C-AFB5-B8086E0D4BBF.html",
							"GUID-C0D40AEB-10C7-401C-AFB5-B8086E0D4BBF.html",
							"GUID-792A7A92-BA79-472A-A354-DE0A4C5A3C03.html",
							"GUID-792A7A92-BA79-472A-A354-DE0A4C5A3C03.html",
							"GUID-792A7A92-BA79-472A-A354-DE0A4C5A3C03.html",
							"GUID-792A7A92-BA79-472A-A354-DE0A4C5A3C03.html",
							"GUID-B26527F2-8540-497D-8B40-6C8FC2F0C1E2.html",
							"GUID-B26527F2-8540-497D-8B40-6C8FC2F0C1E2.html",
							"GUID-B26527F2-8540-497D-8B40-6C8FC2F0C1E2.html",
							"GUID-B26527F2-8540-497D-8B40-6C8FC2F0C1E2.html",
							"GUID-740B62BA-47D1-4D62-B043-95A26A781015.html",
							"GUID-740B62BA-47D1-4D62-B043-95A26A781015.html",
							"GUID-740B62BA-47D1-4D62-B043-95A26A781015.html",
							"GUID-740B62BA-47D1-4D62-B043-95A26A781015.html",
							"GUID-2D2D0BFD-B3FF-427E-BB13-BB457049436C.html",
							"GUID-2D2D0BFD-B3FF-427E-BB13-BB457049436C.html",
							"GUID-2D2D0BFD-B3FF-427E-BB13-BB457049436C.html",
							"GUID-2D2D0BFD-B3FF-427E-BB13-BB457049436C.html",
							"GUID-2D2D0BFD-B3FF-427E-BB13-BB457049436C.html",
							"GUID-50D5318B-86E9-4C2C-8991-900F173D26A6.html",
							"GUID-50D5318B-86E9-4C2C-8991-900F173D26A6.html",
							"GUID-50D5318B-86E9-4C2C-8991-900F173D26A6.html",
							"GUID-50D5318B-86E9-4C2C-8991-900F173D26A6.html",
							"GUID-50D5318B-86E9-4C2C-8991-900F173D26A6.html",
							"GUID-0B7ADACD-E078-4FE5-BC6A-B7CABFE390D3.html",
							"GUID-09E89594-CEE4-416C-AA22-94163ADC3288.html",
							"GUID-09E89594-CEE4-416C-AA22-94163ADC3288.html",
							"GUID-09E89594-CEE4-416C-AA22-94163ADC3288.html",
							"GUID-09E89594-CEE4-416C-AA22-94163ADC3288.html",
							"GUID-DEEB88DB-09E4-49D3-9C30-8AE37EFDAB61.html",
							"GUID-DEEB88DB-09E4-49D3-9C30-8AE37EFDAB61.html",
							"GUID-DEEB88DB-09E4-49D3-9C30-8AE37EFDAB61.html",
							"GUID-DEEB88DB-09E4-49D3-9C30-8AE37EFDAB61.html",
							"GUID-46507245-B606-4FAC-A271-E16B75D0AFF6.html",
							"GUID-46507245-B606-4FAC-A271-E16B75D0AFF6.html",
							"GUID-46507245-B606-4FAC-A271-E16B75D0AFF6.html",
							"GUID-2B94D8DC-F66E-42B0-A5F1-B1B08B4AB4FC.html",
							"GUID-2B94D8DC-F66E-42B0-A5F1-B1B08B4AB4FC.html",
							"GUID-2B94D8DC-F66E-42B0-A5F1-B1B08B4AB4FC.html",
							"GUID-2B94D8DC-F66E-42B0-A5F1-B1B08B4AB4FC.html",
							"GUID-70D8E98F-3144-4603-B461-67C6984BC7AF.html",
							"GUID-70D8E98F-3144-4603-B461-67C6984BC7AF.html",
							"GUID-70D8E98F-3144-4603-B461-67C6984BC7AF.html",
							"GUID-70D8E98F-3144-4603-B461-67C6984BC7AF.html",
							"GUID-9EE792A4-EB2B-450B-8B8D-57A0349B19C5.html",
							"GUID-9EE792A4-EB2B-450B-8B8D-57A0349B19C5.html",
							"GUID-9EE792A4-EB2B-450B-8B8D-57A0349B19C5.html",
							"GUID-10534810-0762-4960-AE26-56DE1D7DD789.html",
							"GUID-10534810-0762-4960-AE26-56DE1D7DD789.html",
							"GUID-10534810-0762-4960-AE26-56DE1D7DD789.html",
							"GUID-800C9F7A-8BC9-4380-A34D-B55104C248E4.html",
							"GUID-800C9F7A-8BC9-4380-A34D-B55104C248E4.html",
							"GUID-800C9F7A-8BC9-4380-A34D-B55104C248E4.html",
							"GUID-A829F90A-B87E-4D7A-AF95-995663011C53.html",
							"GUID-A829F90A-B87E-4D7A-AF95-995663011C53.html",
							"GUID-A829F90A-B87E-4D7A-AF95-995663011C53.html",
							"GUID-A41AF18F-0941-44E1-9916-A0D4D4DD11F3.html",
							"GUID-A41AF18F-0941-44E1-9916-A0D4D4DD11F3.html",
							"GUID-A41AF18F-0941-44E1-9916-A0D4D4DD11F3.html",
							"GUID-A41AF18F-0941-44E1-9916-A0D4D4DD11F3.html",
							"GUID-3ED7B96E-A9A1-4459-A472-92E365DF153F.html",
							"GUID-3ED7B96E-A9A1-4459-A472-92E365DF153F.html",
							"GUID-3ED7B96E-A9A1-4459-A472-92E365DF153F.html",
							"GUID-3ED7B96E-A9A1-4459-A472-92E365DF153F.html",
							"GUID-D4956D34-D487-4FBC-A935-A544006FAFCA.html",
							"GUID-D4956D34-D487-4FBC-A935-A544006FAFCA.html",
							"GUID-D4956D34-D487-4FBC-A935-A544006FAFCA.html",
							"GUID-D4956D34-D487-4FBC-A935-A544006FAFCA.html",
							"GUID-B40EC5AF-8799-44D4-A699-8C43DFD55FD1.html",
							"GUID-B40EC5AF-8799-44D4-A699-8C43DFD55FD1.html",
							"GUID-B40EC5AF-8799-44D4-A699-8C43DFD55FD1.html",
							"GUID-B40EC5AF-8799-44D4-A699-8C43DFD55FD1.html",
							"GUID-85B9925E-AA71-4A5E-9275-CC6267C8DBBA.html",
							"GUID-85B9925E-AA71-4A5E-9275-CC6267C8DBBA.html",
							"GUID-85B9925E-AA71-4A5E-9275-CC6267C8DBBA.html",
							"GUID-85B9925E-AA71-4A5E-9275-CC6267C8DBBA.html",
							"GUID-19749A72-2807-4F85-8A5E-7233683ADF4E.html",
							"GUID-19749A72-2807-4F85-8A5E-7233683ADF4E.html",
							"GUID-19749A72-2807-4F85-8A5E-7233683ADF4E.html",
							"GUID-FBD41634-4315-405A-9D6D-7AF2296096AF.html",
							"GUID-FBD41634-4315-405A-9D6D-7AF2296096AF.html",
							"GUID-FBD41634-4315-405A-9D6D-7AF2296096AF.html",
							"GUID-FBD41634-4315-405A-9D6D-7AF2296096AF.html",
							"GUID-E2DEB76F-6641-4D1B-B4EC-51928467F76B.html",
							"GUID-E2DEB76F-6641-4D1B-B4EC-51928467F76B.html",
							"GUID-E2DEB76F-6641-4D1B-B4EC-51928467F76B.html",
							"GUID-E2DEB76F-6641-4D1B-B4EC-51928467F76B.html",
							"GUID-5F32ED54-4485-4649-82C5-C9015AA3C709.html",
							"GUID-5F32ED54-4485-4649-82C5-C9015AA3C709.html",
							"GUID-5F32ED54-4485-4649-82C5-C9015AA3C709.html",
							"GUID-5F32ED54-4485-4649-82C5-C9015AA3C709.html",
							"GUID-5F32ED54-4485-4649-82C5-C9015AA3C709.html",
							"GUID-5F32ED54-4485-4649-82C5-C9015AA3C709.html",
							"GUID-0F97E7D9-ED50-45F3-AEA3-3C0B2F7E2E79.html",
							"GUID-0F97E7D9-ED50-45F3-AEA3-3C0B2F7E2E79.html",
							"GUID-0F97E7D9-ED50-45F3-AEA3-3C0B2F7E2E79.html",
							"GUID-D15C8F84-C30C-451F-8AB7-F8E62AD494C2.html",
							"GUID-0E27BF3F-0F22-406F-B8BF-A06BB82B0681.html",
							"GUID-0E27BF3F-0F22-406F-B8BF-A06BB82B0681.html",
							"GUID-0E27BF3F-0F22-406F-B8BF-A06BB82B0681.html",
							"GUID-6CEFB266-0BD0-4C0E-AD2C-D054CA502682.html",
							"GUID-6CEFB266-0BD0-4C0E-AD2C-D054CA502682.html",
							"GUID-6CEFB266-0BD0-4C0E-AD2C-D054CA502682.html",
							"GUID-A02509EB-5D47-4F15-9624-DF4B347C58F2.html",
							"GUID-A02509EB-5D47-4F15-9624-DF4B347C58F2.html",
							"GUID-A02509EB-5D47-4F15-9624-DF4B347C58F2.html",
							"GUID-CD63EC26-3D34-4898-901D-90B16F42BA0E.html",
							"GUID-CD63EC26-3D34-4898-901D-90B16F42BA0E.html",
							"GUID-CD63EC26-3D34-4898-901D-90B16F42BA0E.html",
							"GUID-32CEAFDF-9937-4EAA-80F8-4582953EB286.html",
							"GUID-32CEAFDF-9937-4EAA-80F8-4582953EB286.html",
							"GUID-32CEAFDF-9937-4EAA-80F8-4582953EB286.html",
							"GUID-4CC6E754-D7DA-499C-81A5-20DEFFB63D25.html",
							"GUID-4CC6E754-D7DA-499C-81A5-20DEFFB63D25.html",
							"GUID-4CC6E754-D7DA-499C-81A5-20DEFFB63D25.html",
							"GUID-FDCC89BA-55AA-441D-B734-CB3EA482EDE4.html",
							"GUID-FDCC89BA-55AA-441D-B734-CB3EA482EDE4.html",
							"GUID-FDCC89BA-55AA-441D-B734-CB3EA482EDE4.html",
							"GUID-8E122275-7175-409E-920E-1C72D335CEEF.html",
							"GUID-8E122275-7175-409E-920E-1C72D335CEEF.html",
							"GUID-8E122275-7175-409E-920E-1C72D335CEEF.html",
							"GUID-8E122275-7175-409E-920E-1C72D335CEEF.html",
							"GUID-8E122275-7175-409E-920E-1C72D335CEEF.html",
							"GUID-608D53C9-C51D-405E-8113-C8B2AA011198.html",
							"GUID-608D53C9-C51D-405E-8113-C8B2AA011198.html",
							"GUID-608D53C9-C51D-405E-8113-C8B2AA011198.html",
							"GUID-0E293EBD-6A94-44B6-9917-EBA8F444F9DF.html",
							"GUID-0E293EBD-6A94-44B6-9917-EBA8F444F9DF.html",
							"GUID-0E293EBD-6A94-44B6-9917-EBA8F444F9DF.html",
							"GUID-9EA99835-9E73-4F37-A1CB-D6E0B063F7E9.html",
							"GUID-9EA99835-9E73-4F37-A1CB-D6E0B063F7E9.html",
							"GUID-9EA99835-9E73-4F37-A1CB-D6E0B063F7E9.html",
							"GUID-4D261A34-344C-4CF2-8AF9-3C32257BA720.html",
							"GUID-4D261A34-344C-4CF2-8AF9-3C32257BA720.html",
							"GUID-4D261A34-344C-4CF2-8AF9-3C32257BA720.html",
							"GUID-4D261A34-344C-4CF2-8AF9-3C32257BA720.html",
							"GUID-4D261A34-344C-4CF2-8AF9-3C32257BA720.html",
							"GUID-4E3E9377-68EA-48AA-98EB-46D8991416A5.html",
							"GUID-4E3E9377-68EA-48AA-98EB-46D8991416A5.html",
							"GUID-4E3E9377-68EA-48AA-98EB-46D8991416A5.html",
							"GUID-B1D8044C-E1A5-4436-8E8E-38D34314BE07.html",
							"GUID-B1D8044C-E1A5-4436-8E8E-38D34314BE07.html",
							"GUID-B1D8044C-E1A5-4436-8E8E-38D34314BE07.html",
							"GUID-18AFB3BA-C9CD-4F3A-ADCA-2B80AFE88533.html",
							"GUID-18AFB3BA-C9CD-4F3A-ADCA-2B80AFE88533.html",
							"GUID-18AFB3BA-C9CD-4F3A-ADCA-2B80AFE88533.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-35E80DC1-C40F-40AE-88AB-4316ADEF228A.html",
							"GUID-ADB87FB8-A110-467D-9863-27F5B113A7C2.html",
							"GUID-ADB87FB8-A110-467D-9863-27F5B113A7C2.html",
							"GUID-ADB87FB8-A110-467D-9863-27F5B113A7C2.html",
							"GUID-ADB87FB8-A110-467D-9863-27F5B113A7C2.html",
							"GUID-ADB87FB8-A110-467D-9863-27F5B113A7C2.html",
							"GUID-ADB87FB8-A110-467D-9863-27F5B113A7C2.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-4642776A-7413-4A77-9C0C-9A2E5789B1BE.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-20C3F443-5880-4DC7-BC60-D32CC338D577.html",
							"GUID-2B48A7AD-86F6-4711-93E4-E9A1118EDFC0.html",
							"GUID-2B48A7AD-86F6-4711-93E4-E9A1118EDFC0.html",
							"GUID-2B48A7AD-86F6-4711-93E4-E9A1118EDFC0.html",
							"GUID-2B48A7AD-86F6-4711-93E4-E9A1118EDFC0.html",
							"GUID-2B48A7AD-86F6-4711-93E4-E9A1118EDFC0.html",
							"GUID-7820ED03-0BDB-4786-AB0E-75F76144F569.html",
							"GUID-7820ED03-0BDB-4786-AB0E-75F76144F569.html",
							"GUID-7820ED03-0BDB-4786-AB0E-75F76144F569.html",
							"GUID-7820ED03-0BDB-4786-AB0E-75F76144F569.html",
							"GUID-7820ED03-0BDB-4786-AB0E-75F76144F569.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-25CE1982-3A3C-4B85-9E3D-AA4B7E4B6FB4.html",
							"GUID-4C6B8A89-9CD3-4698-BF46-0AD17288090B.html",
							"GUID-4C6B8A89-9CD3-4698-BF46-0AD17288090B.html",
							"GUID-4C6B8A89-9CD3-4698-BF46-0AD17288090B.html",
							"GUID-4C6B8A89-9CD3-4698-BF46-0AD17288090B.html",
							"GUID-4C6B8A89-9CD3-4698-BF46-0AD17288090B.html",
							"GUID-8C9E82DC-7C04-4972-8DBD-089F22E171B0.html",
							"GUID-8C9E82DC-7C04-4972-8DBD-089F22E171B0.html",
							"GUID-8C9E82DC-7C04-4972-8DBD-089F22E171B0.html",
							"GUID-8C9E82DC-7C04-4972-8DBD-089F22E171B0.html",
							"GUID-8C9E82DC-7C04-4972-8DBD-089F22E171B0.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-AD5DAF5B-5EA9-4CA5-92A2-2AD3E1473A93.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-58077ADE-51A1-4E08-B1F4-BF617D2F3518.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-4DF2541D-DF50-45F1-A4E8-1233E5161579.html",
							"GUID-AAA58362-D612-464F-940A-A03BDA302B48.html",
							"GUID-AAA58362-D612-464F-940A-A03BDA302B48.html",
							"GUID-AAA58362-D612-464F-940A-A03BDA302B48.html",
							"GUID-AAA58362-D612-464F-940A-A03BDA302B48.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-D059B873-04CB-4F6C-B2D7-2D87A82824D6.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-610DA949-0CAF-4DC7-AA73-F73300E87110.html",
							"GUID-47111128-D371-4827-B15C-7E852623495C.html",
							"GUID-47111128-D371-4827-B15C-7E852623495C.html",
							"GUID-47111128-D371-4827-B15C-7E852623495C.html",
							"GUID-47111128-D371-4827-B15C-7E852623495C.html",
							"GUID-47111128-D371-4827-B15C-7E852623495C.html",
							"GUID-47111128-D371-4827-B15C-7E852623495C.html",
							"GUID-4E898CC0-B8B1-4130-9FC4-86CBA68A57C1.html",
							"GUID-4E898CC0-B8B1-4130-9FC4-86CBA68A57C1.html",
							"GUID-4E898CC0-B8B1-4130-9FC4-86CBA68A57C1.html",
							"GUID-4E898CC0-B8B1-4130-9FC4-86CBA68A57C1.html",
							"GUID-4E898CC0-B8B1-4130-9FC4-86CBA68A57C1.html",
							"GUID-4E898CC0-B8B1-4130-9FC4-86CBA68A57C1.html",
							"GUID-4B19C888-F3A6-4680-8508-BBC4BA473F08.html",
							"GUID-4B19C888-F3A6-4680-8508-BBC4BA473F08.html",
							"GUID-4B19C888-F3A6-4680-8508-BBC4BA473F08.html",
							"GUID-4B19C888-F3A6-4680-8508-BBC4BA473F08.html",
							"GUID-4B19C888-F3A6-4680-8508-BBC4BA473F08.html",
							"GUID-4B19C888-F3A6-4680-8508-BBC4BA473F08.html",
							"GUID-669AB372-B432-43BD-9DF2-76C13A93F1CD.html",
							"GUID-669AB372-B432-43BD-9DF2-76C13A93F1CD.html",
							"GUID-669AB372-B432-43BD-9DF2-76C13A93F1CD.html",
							"GUID-669AB372-B432-43BD-9DF2-76C13A93F1CD.html",
							"GUID-669AB372-B432-43BD-9DF2-76C13A93F1CD.html",
							"GUID-669AB372-B432-43BD-9DF2-76C13A93F1CD.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-6CBFB260-A020-4046-9311-CA8D9CB62FC8.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-46C3BA25-A36F-4BA7-82B4-19DB6A5DAC82.html",
							"GUID-C3770C12-D928-4ACF-97E7-B80D6EB08DCE.html",
							"GUID-C3770C12-D928-4ACF-97E7-B80D6EB08DCE.html",
							"GUID-C3770C12-D928-4ACF-97E7-B80D6EB08DCE.html",
							"GUID-C3770C12-D928-4ACF-97E7-B80D6EB08DCE.html",
							"GUID-C3770C12-D928-4ACF-97E7-B80D6EB08DCE.html",
							"GUID-9A3C3F1A-4F48-40BD-B84C-C6EF22144F74.html",
							"GUID-9A3C3F1A-4F48-40BD-B84C-C6EF22144F74.html",
							"GUID-9A3C3F1A-4F48-40BD-B84C-C6EF22144F74.html",
							"GUID-9A3C3F1A-4F48-40BD-B84C-C6EF22144F74.html",
							"GUID-9A3C3F1A-4F48-40BD-B84C-C6EF22144F74.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-3D0BA10F-4BC9-4755-9042-7B7A1861E748.html",
							"GUID-987D1913-E20A-467D-9E57-DEC60B2EBE5D.html",
							"GUID-C06046DF-729E-4D4F-9E86-FB915B181195.html",
							"GUID-C06046DF-729E-4D4F-9E86-FB915B181195.html",
							"GUID-C06046DF-729E-4D4F-9E86-FB915B181195.html",
							"GUID-B5B66C8F-584E-4375-B51E-6EBEBAFAE841.html",
							"GUID-B5B66C8F-584E-4375-B51E-6EBEBAFAE841.html",
							"GUID-B5B66C8F-584E-4375-B51E-6EBEBAFAE841.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-E2E8B3F6-F88A-4869-9429-FB7C7B050578.html",
							"GUID-8F0815F6-929D-4B80-9547-C7035B35D7B1.html",
							"GUID-8F0815F6-929D-4B80-9547-C7035B35D7B1.html",
							"GUID-8F0815F6-929D-4B80-9547-C7035B35D7B1.html",
							"GUID-56D47863-AE1C-4329-B74E-94172AF0D4F1.html",
							"GUID-56D47863-AE1C-4329-B74E-94172AF0D4F1.html",
							"GUID-56D47863-AE1C-4329-B74E-94172AF0D4F1.html",
							"GUID-D2E8B76C-19A7-4B1D-9DA1-735E139DB379.html",
							"GUID-D2E8B76C-19A7-4B1D-9DA1-735E139DB379.html",
							"GUID-D2E8B76C-19A7-4B1D-9DA1-735E139DB379.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-FBBEF335-E6EC-41FA-A1D2-0FBC410116DE.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-6011D21B-FB7C-4248-A6F2-038D1D0E7DE6.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-2064EE48-95D8-4992-996D-4279F6E5C32F.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-9E580BCC-6867-4F1F-9FD8-FE486EF6BCEE.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-EF8AE58F-3351-4E3E-AE4B-E3A4517DCEB8.html",
							"GUID-6A6C2AF6-6618-41DE-8AFA-493D780C7823.html",
							"GUID-6A6C2AF6-6618-41DE-8AFA-493D780C7823.html",
							"GUID-6A6C2AF6-6618-41DE-8AFA-493D780C7823.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-C75ABC2F-EA35-400D-839B-EDEF4F05E892.html",
							"GUID-37B0B645-1F9E-4705-8666-626A7FFDED10.html",
							"GUID-37B0B645-1F9E-4705-8666-626A7FFDED10.html",
							"GUID-37B0B645-1F9E-4705-8666-626A7FFDED10.html",
							"GUID-37B0B645-1F9E-4705-8666-626A7FFDED10.html",
							"GUID-37B0B645-1F9E-4705-8666-626A7FFDED10.html",
							"GUID-5771D5D7-6DD6-4FD4-A195-E0CFD94A9AAE.html",
							"GUID-5771D5D7-6DD6-4FD4-A195-E0CFD94A9AAE.html",
							"GUID-5771D5D7-6DD6-4FD4-A195-E0CFD94A9AAE.html",
							"GUID-E3B76693-13F4-4614-93C6-B8679E7B4982.html",
							"GUID-E3B76693-13F4-4614-93C6-B8679E7B4982.html",
							"GUID-E3B76693-13F4-4614-93C6-B8679E7B4982.html",
							"GUID-E3B76693-13F4-4614-93C6-B8679E7B4982.html",
							"GUID-E3B76693-13F4-4614-93C6-B8679E7B4982.html",
							"GUID-10455BA3-2082-4058-923C-B15397D8799C.html",
							"GUID-10455BA3-2082-4058-923C-B15397D8799C.html",
							"GUID-10455BA3-2082-4058-923C-B15397D8799C.html",
							"GUID-10455BA3-2082-4058-923C-B15397D8799C.html",
							"GUID-10455BA3-2082-4058-923C-B15397D8799C.html",
							"GUID-10455BA3-2082-4058-923C-B15397D8799C.html",
							"GUID-2F42CC18-01BE-49A7-9B22-5A7799D26839.html",
							"GUID-2F42CC18-01BE-49A7-9B22-5A7799D26839.html",
							"GUID-2F42CC18-01BE-49A7-9B22-5A7799D26839.html",
							"GUID-9C5742A6-7A5F-4DA2-A10B-3E6827E3466B.html",
							"GUID-9C5742A6-7A5F-4DA2-A10B-3E6827E3466B.html",
							"GUID-9C5742A6-7A5F-4DA2-A10B-3E6827E3466B.html",
							"GUID-2F39A35D-A741-49F8-BAA9-3B3C9B665486.html",
							"GUID-86CC02C8-D745-4FA0-997C-B159841754D1.html",
							"GUID-86CC02C8-D745-4FA0-997C-B159841754D1.html",
							"GUID-86CC02C8-D745-4FA0-997C-B159841754D1.html",
							"GUID-7BC86480-5549-4770-8972-AF0F26B986FB.html",
							"GUID-7BC86480-5549-4770-8972-AF0F26B986FB.html",
							"GUID-7BC86480-5549-4770-8972-AF0F26B986FB.html",
							"GUID-7BC86480-5549-4770-8972-AF0F26B986FB.html",
							"GUID-7BC86480-5549-4770-8972-AF0F26B986FB.html",
							"GUID-379E8A57-2BF6-41A8-8311-BF809E290BED.html",
							"GUID-379E8A57-2BF6-41A8-8311-BF809E290BED.html",
							"GUID-379E8A57-2BF6-41A8-8311-BF809E290BED.html",
							"GUID-379E8A57-2BF6-41A8-8311-BF809E290BED.html",
							"GUID-572B3F57-64AE-455D-8E24-BF2529ED80A5.html",
							"GUID-572B3F57-64AE-455D-8E24-BF2529ED80A5.html",
							"GUID-572B3F57-64AE-455D-8E24-BF2529ED80A5.html",
							"GUID-572B3F57-64AE-455D-8E24-BF2529ED80A5.html",
							"GUID-116454BB-4CFC-454C-8A9F-78F592665C35.html",
							"GUID-116454BB-4CFC-454C-8A9F-78F592665C35.html",
							"GUID-116454BB-4CFC-454C-8A9F-78F592665C35.html",
							"GUID-CFF83565-2B45-45E6-98B4-818917BFDA20.html",
							"GUID-CFF83565-2B45-45E6-98B4-818917BFDA20.html",
							"GUID-CFF83565-2B45-45E6-98B4-818917BFDA20.html",
							"GUID-CFF83565-2B45-45E6-98B4-818917BFDA20.html",
							"GUID-CFF83565-2B45-45E6-98B4-818917BFDA20.html",
							"GUID-5DCE3C18-37C0-4BA2-B508-EAF38C636474.html",
							"GUID-5DCE3C18-37C0-4BA2-B508-EAF38C636474.html",
							"GUID-5DCE3C18-37C0-4BA2-B508-EAF38C636474.html",
							"GUID-5DCE3C18-37C0-4BA2-B508-EAF38C636474.html",
							"GUID-5DCE3C18-37C0-4BA2-B508-EAF38C636474.html",
							"GUID-A66340B9-1452-42AC-A631-2F9EA573AD31.html",
							"GUID-A66340B9-1452-42AC-A631-2F9EA573AD31.html",
							"GUID-A66340B9-1452-42AC-A631-2F9EA573AD31.html",
							"GUID-A66340B9-1452-42AC-A631-2F9EA573AD31.html",
							"GUID-A66340B9-1452-42AC-A631-2F9EA573AD31.html",
							"GUID-A66340B9-1452-42AC-A631-2F9EA573AD31.html",
							"GUID-B0554782-C0D1-4F61-9058-D2CD5A521A88.html",
							"GUID-B0554782-C0D1-4F61-9058-D2CD5A521A88.html",
							"GUID-B0554782-C0D1-4F61-9058-D2CD5A521A88.html",
							"GUID-B0554782-C0D1-4F61-9058-D2CD5A521A88.html",
							"GUID-B0554782-C0D1-4F61-9058-D2CD5A521A88.html",
							"GUID-AAC41CD0-1737-4B46-BDDE-AB089B69ECAB.html",
							"GUID-AAC41CD0-1737-4B46-BDDE-AB089B69ECAB.html",
							"GUID-AAC41CD0-1737-4B46-BDDE-AB089B69ECAB.html",
							"GUID-AAC41CD0-1737-4B46-BDDE-AB089B69ECAB.html",
							"GUID-AAC41CD0-1737-4B46-BDDE-AB089B69ECAB.html",
							"GUID-474FCB42-ED87-4467-918F-826F4E11F025.html",
							"GUID-474FCB42-ED87-4467-918F-826F4E11F025.html",
							"GUID-474FCB42-ED87-4467-918F-826F4E11F025.html",
							"GUID-474FCB42-ED87-4467-918F-826F4E11F025.html",
							"GUID-474FCB42-ED87-4467-918F-826F4E11F025.html",
							"GUID-766BE7AD-BF8C-413A-90F1-0BAC0BF710DD.html",
							"GUID-766BE7AD-BF8C-413A-90F1-0BAC0BF710DD.html",
							"GUID-766BE7AD-BF8C-413A-90F1-0BAC0BF710DD.html",
							"GUID-766BE7AD-BF8C-413A-90F1-0BAC0BF710DD.html",
							"GUID-766BE7AD-BF8C-413A-90F1-0BAC0BF710DD.html",
							"GUID-CE11EBFA-49BD-4D91-86C5-FFD24810B03C.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E7F98138-D21D-4905-BDB8-A8B43E45D4C2.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-E4E2AC3E-7D56-4051-A3BD-91424F6BD8AD.html",
							"GUID-CB2C39EF-B05F-4F05-8F23-EFD26506588E.html",
							"GUID-CB2C39EF-B05F-4F05-8F23-EFD26506588E.html",
							"GUID-CB2C39EF-B05F-4F05-8F23-EFD26506588E.html",
							"GUID-CB2C39EF-B05F-4F05-8F23-EFD26506588E.html",
							"GUID-648F95E9-C78B-4CA1-9C73-EEFAC8866F0F.html",
							"GUID-648F95E9-C78B-4CA1-9C73-EEFAC8866F0F.html",
							"GUID-648F95E9-C78B-4CA1-9C73-EEFAC8866F0F.html",
							"GUID-46FA29F7-2B23-4A12-8246-9C556FF4A702.html",
							"GUID-46FA29F7-2B23-4A12-8246-9C556FF4A702.html",
							"GUID-46FA29F7-2B23-4A12-8246-9C556FF4A702.html",
							"GUID-46FA29F7-2B23-4A12-8246-9C556FF4A702.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-0CB358FC-2147-431A-B631-5D317979902F.html",
							"GUID-B28545BC-3FF4-43D7-B23D-C8333D64F141.html",
							"GUID-B28545BC-3FF4-43D7-B23D-C8333D64F141.html",
							"GUID-B28545BC-3FF4-43D7-B23D-C8333D64F141.html",
							"GUID-B28545BC-3FF4-43D7-B23D-C8333D64F141.html",
							"GUID-B28545BC-3FF4-43D7-B23D-C8333D64F141.html",
							"GUID-B5AF6611-CC8F-4189-A4A7-1A1B3E1D3218.html",
							"GUID-B5AF6611-CC8F-4189-A4A7-1A1B3E1D3218.html",
							"GUID-B5AF6611-CC8F-4189-A4A7-1A1B3E1D3218.html",
							"GUID-B5AF6611-CC8F-4189-A4A7-1A1B3E1D3218.html",
							"GUID-B5AF6611-CC8F-4189-A4A7-1A1B3E1D3218.html",
							"GUID-63CDCBA1-75F9-41A0-B717-A0E91087AA4F.html",
							"GUID-63CDCBA1-75F9-41A0-B717-A0E91087AA4F.html",
							"GUID-63CDCBA1-75F9-41A0-B717-A0E91087AA4F.html",
							"GUID-63CDCBA1-75F9-41A0-B717-A0E91087AA4F.html",
							"GUID-63CDCBA1-75F9-41A0-B717-A0E91087AA4F.html",
							"GUID-A7EAC349-CEFC-454D-93D4-1709EF01BF15.html",
							"GUID-A7EAC349-CEFC-454D-93D4-1709EF01BF15.html",
							"GUID-A7EAC349-CEFC-454D-93D4-1709EF01BF15.html",
							"GUID-A7EAC349-CEFC-454D-93D4-1709EF01BF15.html",
							"GUID-A7EAC349-CEFC-454D-93D4-1709EF01BF15.html",
							"GUID-F93DE752-D623-45C5-B9E3-70E0ACB0AAAC.html",
							"GUID-F93DE752-D623-45C5-B9E3-70E0ACB0AAAC.html",
							"GUID-F93DE752-D623-45C5-B9E3-70E0ACB0AAAC.html",
							"GUID-F93DE752-D623-45C5-B9E3-70E0ACB0AAAC.html",
							"GUID-F93DE752-D623-45C5-B9E3-70E0ACB0AAAC.html",
							"GUID-F93DE752-D623-45C5-B9E3-70E0ACB0AAAC.html",
							"GUID-B4C4F419-F2B6-48B7-8A05-DFA1051042AC.html",
							"GUID-B4C4F419-F2B6-48B7-8A05-DFA1051042AC.html",
							"GUID-B4C4F419-F2B6-48B7-8A05-DFA1051042AC.html",
							"GUID-B4C4F419-F2B6-48B7-8A05-DFA1051042AC.html",
							"GUID-B4C4F419-F2B6-48B7-8A05-DFA1051042AC.html",
							"GUID-124DD3FE-D90D-4A58-88B0-1DC07D07E79E.html",
							"GUID-124DD3FE-D90D-4A58-88B0-1DC07D07E79E.html",
							"GUID-124DD3FE-D90D-4A58-88B0-1DC07D07E79E.html",
							"GUID-124DD3FE-D90D-4A58-88B0-1DC07D07E79E.html",
							"GUID-0FE405EA-6425-404B-9681-A09DD4974FB0.html",
							"GUID-0FE405EA-6425-404B-9681-A09DD4974FB0.html",
							"GUID-0FE405EA-6425-404B-9681-A09DD4974FB0.html",
							"GUID-621D1432-960F-4139-B51F-A08987C9A8B8.html",
							"GUID-621D1432-960F-4139-B51F-A08987C9A8B8.html",
							"GUID-621D1432-960F-4139-B51F-A08987C9A8B8.html",
							"GUID-4011D1B2-FEE8-4890-A55D-45D3134C7C31.html",
							"GUID-4011D1B2-FEE8-4890-A55D-45D3134C7C31.html",
							"GUID-4011D1B2-FEE8-4890-A55D-45D3134C7C31.html",
							"GUID-4011D1B2-FEE8-4890-A55D-45D3134C7C31.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-A7ABF350-934E-4254-BAD6-FBA750E3EE54.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-09409820-BC3E-4F11-9616-8063B9D35079.html",
							"GUID-54BFB776-2DFE-4296-9603-7760590DF59B.html",
							"GUID-54BFB776-2DFE-4296-9603-7760590DF59B.html",
							"GUID-54BFB776-2DFE-4296-9603-7760590DF59B.html",
							"GUID-54BFB776-2DFE-4296-9603-7760590DF59B.html",
							"GUID-BA573797-42BC-4075-9DE4-03EF1D9CA99D.html",
							"GUID-BA573797-42BC-4075-9DE4-03EF1D9CA99D.html",
							"GUID-BA573797-42BC-4075-9DE4-03EF1D9CA99D.html",
							"GUID-BA573797-42BC-4075-9DE4-03EF1D9CA99D.html",
							"GUID-BA573797-42BC-4075-9DE4-03EF1D9CA99D.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-F3D092A1-8D3D-467E-AF78-3AAE439474C9.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-14875BD4-5F0C-41F8-A790-3B9A91786FF2.html",
							"GUID-D0E98345-8F2F-493D-8EEF-76D4FBE8E04A.html",
							"GUID-D0E98345-8F2F-493D-8EEF-76D4FBE8E04A.html",
							"GUID-D0E98345-8F2F-493D-8EEF-76D4FBE8E04A.html",
							"GUID-D0E98345-8F2F-493D-8EEF-76D4FBE8E04A.html",
							"GUID-D0E98345-8F2F-493D-8EEF-76D4FBE8E04A.html",
							"GUID-D0E98345-8F2F-493D-8EEF-76D4FBE8E04A.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-5A855F77-7C80-404B-A6DC-38C1D9CC480F.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-963E24E3-0CE4-406B-9AB6-B4984A4E4837.html",
							"GUID-C2A77639-820F-46A5-A78D-484811F750CE.html",
							"GUID-C2A77639-820F-46A5-A78D-484811F750CE.html",
							"GUID-C2A77639-820F-46A5-A78D-484811F750CE.html",
							"GUID-C2A77639-820F-46A5-A78D-484811F750CE.html",
							"GUID-C2A77639-820F-46A5-A78D-484811F750CE.html",
							"GUID-C2A77639-820F-46A5-A78D-484811F750CE.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-83A70C26-967F-4957-B625-A7ED570FCD7A.html",
							"GUID-240EA42B-16F1-4F79-B8D1-BDF5EA8C39D4.html",
							"GUID-240EA42B-16F1-4F79-B8D1-BDF5EA8C39D4.html",
							"GUID-240EA42B-16F1-4F79-B8D1-BDF5EA8C39D4.html",
							"GUID-21013906-295C-497D-8ADA-FA529C958C51.html",
							"GUID-21013906-295C-497D-8ADA-FA529C958C51.html",
							"GUID-21013906-295C-497D-8ADA-FA529C958C51.html",
							"GUID-21013906-295C-497D-8ADA-FA529C958C51.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-B3A79EBF-406C-43C7-B0F2-D13F4E136FC4.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-745D4804-2A6E-4498-8E2C-ED84DD1AD82F.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-6185D641-B8D1-4C7E-99BE-DD45181A2C64.html",
							"GUID-F072945C-8587-42FA-B473-E2D96465A622.html",
							"GUID-F072945C-8587-42FA-B473-E2D96465A622.html",
							"GUID-F072945C-8587-42FA-B473-E2D96465A622.html",
							"GUID-F072945C-8587-42FA-B473-E2D96465A622.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-7D83AD1B-8FF4-4B5E-80B9-7BA87E050A10.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-A9829294-E1D9-417B-BA30-4F96F1009538.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-5982B986-4373-458A-A367-BEAB88CE59F2.html",
							"GUID-6F2DA513-3283-4D24-9A88-AF97E09B19A1.html",
							"GUID-6F2DA513-3283-4D24-9A88-AF97E09B19A1.html",
							"GUID-6F2DA513-3283-4D24-9A88-AF97E09B19A1.html",
							"GUID-6F2DA513-3283-4D24-9A88-AF97E09B19A1.html",
							"GUID-6F2DA513-3283-4D24-9A88-AF97E09B19A1.html",
							"GUID-6F2DA513-3283-4D24-9A88-AF97E09B19A1.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-C9DF71BD-18FA-485B-BBB6-A2574971D6D3.html",
							"GUID-D12487C5-F4A3-4080-8723-1D1D011FC0FF.html",
							"GUID-D12487C5-F4A3-4080-8723-1D1D011FC0FF.html",
							"GUID-D12487C5-F4A3-4080-8723-1D1D011FC0FF.html",
							"GUID-D12487C5-F4A3-4080-8723-1D1D011FC0FF.html",
							"GUID-D12487C5-F4A3-4080-8723-1D1D011FC0FF.html",
							"GUID-D8008A28-B2A8-49D1-A41E-3B47217C042D.html",
							"GUID-D8008A28-B2A8-49D1-A41E-3B47217C042D.html",
							"GUID-D8008A28-B2A8-49D1-A41E-3B47217C042D.html",
							"GUID-D8008A28-B2A8-49D1-A41E-3B47217C042D.html",
							"GUID-D8008A28-B2A8-49D1-A41E-3B47217C042D.html",
							"GUID-D8008A28-B2A8-49D1-A41E-3B47217C042D.html",
							"GUID-FA70041E-B99C-45F8-A3CB-B80D6F5B5052.html",
							"GUID-FA70041E-B99C-45F8-A3CB-B80D6F5B5052.html",
							"GUID-FA70041E-B99C-45F8-A3CB-B80D6F5B5052.html",
							"GUID-64BC953E-11F7-4C2F-8401-3005E8D20B9C.html",
							"GUID-64BC953E-11F7-4C2F-8401-3005E8D20B9C.html",
							"GUID-64BC953E-11F7-4C2F-8401-3005E8D20B9C.html",
							"GUID-628D147C-7712-4F5C-83AA-F213675472B9.html",
							"GUID-628D147C-7712-4F5C-83AA-F213675472B9.html",
							"GUID-628D147C-7712-4F5C-83AA-F213675472B9.html",
							"GUID-628D147C-7712-4F5C-83AA-F213675472B9.html",
							"GUID-3FB7E1A3-E2CF-43D2-B8BB-8E306C170FF3.html",
							"GUID-16F5A03B-47F0-4952-A3F9-305ED76E2118.html",
							"GUID-16F5A03B-47F0-4952-A3F9-305ED76E2118.html",
							"GUID-16F5A03B-47F0-4952-A3F9-305ED76E2118.html",
							"GUID-16F5A03B-47F0-4952-A3F9-305ED76E2118.html",
							"GUID-16F5A03B-47F0-4952-A3F9-305ED76E2118.html",
							"GUID-F975E40B-3D00-4C7D-B0B3-8049012CF086.html",
							"GUID-F975E40B-3D00-4C7D-B0B3-8049012CF086.html",
							"GUID-F975E40B-3D00-4C7D-B0B3-8049012CF086.html",
							"GUID-F975E40B-3D00-4C7D-B0B3-8049012CF086.html",
							"GUID-F975E40B-3D00-4C7D-B0B3-8049012CF086.html",
							"GUID-F975E40B-3D00-4C7D-B0B3-8049012CF086.html",
							"GUID-1892D05F-4E46-4A63-8D3F-37FD6BFF051E.html",
							"GUID-1892D05F-4E46-4A63-8D3F-37FD6BFF051E.html",
							"GUID-1892D05F-4E46-4A63-8D3F-37FD6BFF051E.html",
							"GUID-25A4CF50-2F8F-47E7-A90C-ABFA52814459.html",
							"GUID-F8590EEC-B394-4BEE-8F0A-6C4D04BDB52B.html",
							"GUID-F8590EEC-B394-4BEE-8F0A-6C4D04BDB52B.html",
							"GUID-F8590EEC-B394-4BEE-8F0A-6C4D04BDB52B.html",
							"GUID-1296ADD5-28BD-4482-A85F-B0DC62C24C9C.html",
							"GUID-1296ADD5-28BD-4482-A85F-B0DC62C24C9C.html",
							"GUID-1296ADD5-28BD-4482-A85F-B0DC62C24C9C.html",
							"GUID-1296ADD5-28BD-4482-A85F-B0DC62C24C9C.html",
							"GUID-D257BC7E-C3ED-427F-8A98-AF136AF09534.html",
							"GUID-D257BC7E-C3ED-427F-8A98-AF136AF09534.html",
							"GUID-D257BC7E-C3ED-427F-8A98-AF136AF09534.html",
							"GUID-D257BC7E-C3ED-427F-8A98-AF136AF09534.html",
							"GUID-1D3D9E04-C631-448B-B130-B17523874376.html",
							"GUID-1D3D9E04-C631-448B-B130-B17523874376.html",
							"GUID-1D3D9E04-C631-448B-B130-B17523874376.html",
							"GUID-1D3D9E04-C631-448B-B130-B17523874376.html",
							"GUID-D2B619C5-F5F0-4E41-93A6-87E3B886BE8E.html",
							"GUID-D2B619C5-F5F0-4E41-93A6-87E3B886BE8E.html",
							"GUID-D2B619C5-F5F0-4E41-93A6-87E3B886BE8E.html",
							"GUID-D2B619C5-F5F0-4E41-93A6-87E3B886BE8E.html",
							"GUID-93387E84-709B-4C17-990D-C40C5A02738E.html",
							"GUID-93387E84-709B-4C17-990D-C40C5A02738E.html",
							"GUID-93387E84-709B-4C17-990D-C40C5A02738E.html",
							"GUID-93387E84-709B-4C17-990D-C40C5A02738E.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-7C8119F3-BB7C-4628-84FD-28F840D4F76A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-57180070-C84B-44CE-848B-39793B28459A.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-F8369E46-D7EB-4FC0-810C-BC5641CFC4BA.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-272AB059-2FE4-4FF1-A32F-C791D4B47E36.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-ADDDC06C-ACF4-450E-ADC3-4359BE293DBD.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-48CB3F61-A4F6-4497-A547-8F85DA2D3500.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-F0ACFDB6-C345-4549-A292-A001FFC4C503.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-B615FBBA-3FC3-44D0-B68D-3089877C6720.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-AB48F72E-A95D-4BAB-9EB5-22E2A7B6DAFE.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-5665E20F-AE83-454B-906E-95A458C3854C.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-B78FDE15-1A3A-42F9-8937-4C7FA5E2D0A0.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-1ABC7F69-88BA-4F38-9006-04D20631CAC1.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-CDA81419-BA93-4763-804E-1DEB3222E05C.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-A66BAE9B-C0F6-410E-B59B-790ABE49043A.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-7EF0555E-936C-48E3-92FA-BA52D2EAD359.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-58B829B5-0010-44C5-8FD2-BA53884B60C1.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-C4336C08-C6A8-4798-8BD3-C5ACA7BA120C.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-FE739F59-787D-4D3E-8A4C-DD7DD7405D5E.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-0FA985FE-0D89-43F2-B84D-A75A26F89EC1.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-4B6DA909-656C-487D-91BC-12B0AB06A672.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-BD9755D4-1089-4F9B-9EDC-84CFFD899191.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-42E17488-1EC2-4F8C-9919-30CC6D0F812F.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-B69B050F-701C-41A0-9C16-E6DD1B667FBE.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-FF74BB5A-2DAB-4D3B-847D-0D5CA0734D98.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-6EA2118B-F0EF-4A59-9B7E-1A232F6CB4F5.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-D601F033-B6C7-4C41-A24D-D681019A86F4.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-FAB54690-5400-44CA-879C-52C16B4B9745.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-7D6B1A4A-09BC-4B80-B426-B0614F5AF051.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-21A8F8C9-91C3-45AE-B61D-F1BD242CC08D.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-F684C26E-366D-47B0-8E91-BC5409837F2F.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-472B1332-63C7-405D-9396-B75872D19FD7.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-05F1C6C9-DEA3-4A98-AA37-BE58E0FD8548.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-2446C06E-6837-4E6C-8C7B-F62C758D480E.html",
							"GUID-CCEB8932-DFFD-42B7-87B7-3CD138098D81.html",
							"GUID-CCEB8932-DFFD-42B7-87B7-3CD138098D81.html",
							"GUID-CCEB8932-DFFD-42B7-87B7-3CD138098D81.html",
							"GUID-CCEB8932-DFFD-42B7-87B7-3CD138098D81.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-0744D225-DBCC-460A-BBD9-5CC7B00686E2.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-E7A711DE-6A93-43F1-8966-0205520C0CCE.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-A477C6E3-0E32-4BBB-A50D-585BA9D587F9.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-E2791B70-E859-4754-A3CA-AACC0BFE9DF1.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-450F196C-1A6C-4CFA-9C1B-EB42BD3F1E49.html",
							"GUID-93867F57-950F-4F08-BC55-77CA37E43E4D.html",
							"GUID-93867F57-950F-4F08-BC55-77CA37E43E4D.html",
							"GUID-93867F57-950F-4F08-BC55-77CA37E43E4D.html",
							"GUID-93867F57-950F-4F08-BC55-77CA37E43E4D.html",
							"GUID-93867F57-950F-4F08-BC55-77CA37E43E4D.html",
							"GUID-93867F57-950F-4F08-BC55-77CA37E43E4D.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-6DC8E96C-37D7-4D81-A29A-EF52BEF52F88.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-E57BDE76-15C6-471D-9ED1-20BE3799E496.html",
							"GUID-4EFEB885-ECF8-44B5-8F23-1D05952E1845.html",
							"GUID-2B8CFDE8-2E18-48B2-A291-091F5C596CFD.html",
							"GUID-2B8CFDE8-2E18-48B2-A291-091F5C596CFD.html",
							"GUID-2B8CFDE8-2E18-48B2-A291-091F5C596CFD.html",
							"GUID-4EC4A087-FE22-4E4F-A1D8-A037640F4A7A.html",
							"GUID-4EC4A087-FE22-4E4F-A1D8-A037640F4A7A.html",
							"GUID-4EC4A087-FE22-4E4F-A1D8-A037640F4A7A.html",
							"GUID-4EC4A087-FE22-4E4F-A1D8-A037640F4A7A.html",
							"GUID-4EC4A087-FE22-4E4F-A1D8-A037640F4A7A.html",
							"GUID-22EEE12A-8095-4263-A16B-6EB1BE211BFC.html",
							"GUID-22EEE12A-8095-4263-A16B-6EB1BE211BFC.html",
							"GUID-22EEE12A-8095-4263-A16B-6EB1BE211BFC.html",
							"GUID-22EEE12A-8095-4263-A16B-6EB1BE211BFC.html",
							"GUID-22EEE12A-8095-4263-A16B-6EB1BE211BFC.html",
							"GUID-E8DD11CF-127A-464E-8684-3F9602872DA8.html",
							"GUID-E8DD11CF-127A-464E-8684-3F9602872DA8.html",
							"GUID-E8DD11CF-127A-464E-8684-3F9602872DA8.html",
							"GUID-E8DD11CF-127A-464E-8684-3F9602872DA8.html",
							"GUID-E8DD11CF-127A-464E-8684-3F9602872DA8.html",
							"GUID-78D816B5-80FB-448C-862E-4EAB327B951D.html",
							"GUID-78D816B5-80FB-448C-862E-4EAB327B951D.html",
							"GUID-78D816B5-80FB-448C-862E-4EAB327B951D.html",
							"GUID-78D816B5-80FB-448C-862E-4EAB327B951D.html",
							"GUID-78D816B5-80FB-448C-862E-4EAB327B951D.html",
							"GUID-3EB90173-AE2B-4B3F-BE07-7BA9E443A82C.html",
							"GUID-3EB90173-AE2B-4B3F-BE07-7BA9E443A82C.html",
							"GUID-3EB90173-AE2B-4B3F-BE07-7BA9E443A82C.html",
							"GUID-3EB90173-AE2B-4B3F-BE07-7BA9E443A82C.html",
							"GUID-3EB90173-AE2B-4B3F-BE07-7BA9E443A82C.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-FCAE4AE8-9FF9-46FC-AA47-3AF9E35F1763.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-81628E5E-DA0C-4D2A-801B-319CC0432EDD.html",
							"GUID-743CF905-4A75-4FD2-AA75-781FE5A66CF4.html",
							"GUID-743CF905-4A75-4FD2-AA75-781FE5A66CF4.html",
							"GUID-743CF905-4A75-4FD2-AA75-781FE5A66CF4.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-204D92AD-4B7A-4F86-ACC7-D685A54835DB.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-646813C0-3BE6-4298-A3E0-6FDA23E38392.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-19CA1625-9912-4247-BC29-1346DB85056C.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-A55F1CC6-EB49-4F88-863C-2E7789CDC962.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-F53C26EA-02E1-4A28-AFDE-D6899CC24A82.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-B019DCF4-7677-4AA0-87CD-94705943F14A.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-77E3B633-27B7-4B00-84F8-2ADB12C4497C.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-7645CE81-674E-46E5-9299-201CE93A0DB5.html",
							"GUID-4B6D3FBF-37B0-4452-B11D-E9F23D830CE1.html",
							"GUID-4B6D3FBF-37B0-4452-B11D-E9F23D830CE1.html",
							"GUID-4B6D3FBF-37B0-4452-B11D-E9F23D830CE1.html",
							"GUID-4B6D3FBF-37B0-4452-B11D-E9F23D830CE1.html",
							"GUID-4B6D3FBF-37B0-4452-B11D-E9F23D830CE1.html",
							"GUID-4B6D3FBF-37B0-4452-B11D-E9F23D830CE1.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-9A7BDDC3-1994-4804-A724-FE1590E504F5.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-0303C1A0-F9D1-44B6-A8DC-A3C82369CD36.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-C22ADF63-1E80-4E6E-8566-7F263E5CA8A3.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-9FAAF46E-46AA-4A7B-BE01-F2D8FF635A2D.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-869379C7-2E76-4AF2-B4E9-B268AB55F7FC.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-ED48CCA1-93DB-4F99-8ECB-CE1874AE2414.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-CC4E1A18-4325-47FB-AF6B-FDEED3BA4D8D.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-F45EEB2E-070E-474F-BFFA-1ACB41751BB2.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-AB9D49A8-5234-4C22-A9A7-A9FA8BF21F23.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-A7728F7D-46D9-4089-A9A8-3B446B322E63.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-F811235C-7F42-45CF-8A73-2BC279A97F08.html",
							"GUID-241A3E46-D4D6-4380-A754-1FFAE8BF89D5.html",
							"GUID-241A3E46-D4D6-4380-A754-1FFAE8BF89D5.html",
							"GUID-241A3E46-D4D6-4380-A754-1FFAE8BF89D5.html",
							"GUID-241A3E46-D4D6-4380-A754-1FFAE8BF89D5.html",
							"GUID-241A3E46-D4D6-4380-A754-1FFAE8BF89D5.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-C5E9B002-20FC-4712-A0C1-FB75538DA2CC.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-6F4B31B8-AF16-4486-984A-E3B14BB588A8.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-4442D4BA-8525-4E52-92DE-7492FEC95509.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-38561CC8-76E8-48BA-93B5-B308EBC5D409.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-B48BB488-DB27-4BC0-8217-2C2A2E9A2ACA.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-C341DC5D-0DD5-40D1-B8C1-3DAB33D15327.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-14572904-72C8-4FEA-9C5C-55F4A7794723.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-CD7B84FD-F56B-4DB7-956C-101907684AE5.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-571D37CC-1208-420E-8098-12DB6C4D39E1.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-B0B218E3-BE98-416E-B734-FC88BB176B7B.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-65E03364-0D0C-4608-9CA9-788C7D69E2FB.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-30DF66DB-246B-4D1C-B7D0-B71D86DE145E.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-8EDFDD03-F79D-41A4-BA86-90DDDF65C1C7.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-BDAD3375-4B9E-475C-A7BE-E51C89360AC8.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-8F3FAFA4-F46C-417E-B212-34A6C28AEA3D.html",
							"GUID-678252B9-1A23-48D6-8843-1AED6826E8BB.html",
							"GUID-678252B9-1A23-48D6-8843-1AED6826E8BB.html",
							"GUID-678252B9-1A23-48D6-8843-1AED6826E8BB.html",
							"GUID-678252B9-1A23-48D6-8843-1AED6826E8BB.html",
							"GUID-678252B9-1A23-48D6-8843-1AED6826E8BB.html",
							"GUID-F7857D7E-1D81-43D5-B705-788309082A19.html",
							"GUID-F7857D7E-1D81-43D5-B705-788309082A19.html",
							"GUID-F7857D7E-1D81-43D5-B705-788309082A19.html",
							"GUID-F7857D7E-1D81-43D5-B705-788309082A19.html",
							"GUID-59C7F6E7-5E5A-4142-822B-28D920D95FDA.html",
							"GUID-59C7F6E7-5E5A-4142-822B-28D920D95FDA.html",
							"GUID-59C7F6E7-5E5A-4142-822B-28D920D95FDA.html",
							"GUID-59C7F6E7-5E5A-4142-822B-28D920D95FDA.html",
							"GUID-8E81C406-F9B6-484F-A826-09C470DDA57A.html",
							"GUID-8E81C406-F9B6-484F-A826-09C470DDA57A.html",
							"GUID-8E81C406-F9B6-484F-A826-09C470DDA57A.html",
							"GUID-8E81C406-F9B6-484F-A826-09C470DDA57A.html",
							"GUID-201C1000-E273-4BB9-BFD9-446B81D266C7.html",
							"GUID-201C1000-E273-4BB9-BFD9-446B81D266C7.html",
							"GUID-201C1000-E273-4BB9-BFD9-446B81D266C7.html",
							"GUID-201C1000-E273-4BB9-BFD9-446B81D266C7.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-9572D9BA-CE2C-4C4C-9860-F6ABB4D79D6F.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9677C23-CF61-4D8D-98C0-BDF0783F8A01.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-F9E03BA6-6E20-4AB5-8F60-9C17E98E36FD.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-12D0A16F-A3EB-49E2-B710-8C30734C6275.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-64C0C411-DB7C-445C-8F9C-2E54B7F3BE98.html",
							"GUID-50C1896B-DB0D-40D0-A254-9CDC74F60D59.html",
							"GUID-50C1896B-DB0D-40D0-A254-9CDC74F60D59.html",
							"GUID-50C1896B-DB0D-40D0-A254-9CDC74F60D59.html",
							"GUID-50C1896B-DB0D-40D0-A254-9CDC74F60D59.html",
							"GUID-6222B855-ECB7-4F9B-8C5A-3A948AC136C2.html",
							"GUID-6222B855-ECB7-4F9B-8C5A-3A948AC136C2.html",
							"GUID-6222B855-ECB7-4F9B-8C5A-3A948AC136C2.html",
							"GUID-6222B855-ECB7-4F9B-8C5A-3A948AC136C2.html",
							"GUID-6222B855-ECB7-4F9B-8C5A-3A948AC136C2.html",
							"GUID-6222B855-ECB7-4F9B-8C5A-3A948AC136C2.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-4BFC71FD-058B-4267-95E7-CA41C886D179.html",
							"GUID-36437C8B-F52A-4073-80EB-BF0BDCE50D0A.html",
							"GUID-36437C8B-F52A-4073-80EB-BF0BDCE50D0A.html",
							"GUID-36437C8B-F52A-4073-80EB-BF0BDCE50D0A.html",
							"GUID-36437C8B-F52A-4073-80EB-BF0BDCE50D0A.html",
							"GUID-36437C8B-F52A-4073-80EB-BF0BDCE50D0A.html",
							"GUID-324BD12A-4C52-4EB1-9DB8-6AAF52888A22.html",
							"GUID-324BD12A-4C52-4EB1-9DB8-6AAF52888A22.html",
							"GUID-324BD12A-4C52-4EB1-9DB8-6AAF52888A22.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-698DCD9B-D267-47B4-9483-1ECC2149D2A9.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-CE8E1F8C-AD43-4349-90C3-1AB8F2FDAFC3.html",
							"GUID-58C75B00-D8C2-44F9-B3A3-DA128722BEE1.html",
							"GUID-58C75B00-D8C2-44F9-B3A3-DA128722BEE1.html",
							"GUID-58C75B00-D8C2-44F9-B3A3-DA128722BEE1.html",
							"GUID-58C75B00-D8C2-44F9-B3A3-DA128722BEE1.html",
							"GUID-58C75B00-D8C2-44F9-B3A3-DA128722BEE1.html",
							"GUID-C832BF63-CCA3-42D7-B086-378DC5389728.html",
							"GUID-C832BF63-CCA3-42D7-B086-378DC5389728.html",
							"GUID-C832BF63-CCA3-42D7-B086-378DC5389728.html",
							"GUID-C832BF63-CCA3-42D7-B086-378DC5389728.html",
							"GUID-C832BF63-CCA3-42D7-B086-378DC5389728.html",
							"GUID-F3E078F7-6F1D-4D25-A999-F0F3E40A5971.html",
							"GUID-544C3F55-CCD8-4195-BD7B-86B26C43512E.html",
							"GUID-544C3F55-CCD8-4195-BD7B-86B26C43512E.html",
							"GUID-544C3F55-CCD8-4195-BD7B-86B26C43512E.html",
							"GUID-8D0E3797-6098-4DFD-9992-850020D09858.html",
							"GUID-8D0E3797-6098-4DFD-9992-850020D09858.html",
							"GUID-8D0E3797-6098-4DFD-9992-850020D09858.html",
							"GUID-8D0E3797-6098-4DFD-9992-850020D09858.html",
							"GUID-516D5B0D-BD25-459C-B12E-2FDDADAADBDC.html",
							"GUID-516D5B0D-BD25-459C-B12E-2FDDADAADBDC.html",
							"GUID-516D5B0D-BD25-459C-B12E-2FDDADAADBDC.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-0C5C3BCE-72E8-4053-B164-937B308F8E26.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-45C0E86E-9D4C-416C-80EA-B3C01158086A.html",
							"GUID-E0BAEEB0-E90D-43E5-80F6-B01432C82D69.html",
							"GUID-E0BAEEB0-E90D-43E5-80F6-B01432C82D69.html",
							"GUID-E0BAEEB0-E90D-43E5-80F6-B01432C82D69.html",
							"GUID-E0BAEEB0-E90D-43E5-80F6-B01432C82D69.html",
							"GUID-1C75AA10-811B-4F46-A428-19F9A50F4F57.html",
							"GUID-1C75AA10-811B-4F46-A428-19F9A50F4F57.html",
							"GUID-1C75AA10-811B-4F46-A428-19F9A50F4F57.html",
							"GUID-1C75AA10-811B-4F46-A428-19F9A50F4F57.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-16262C6E-46B3-47F5-A6DB-23BC83862AAF.html",
							"GUID-BC8B9023-E991-4837-87BE-790B9EFA8D2D.html",
							"GUID-BC8B9023-E991-4837-87BE-790B9EFA8D2D.html",
							"GUID-BC8B9023-E991-4837-87BE-790B9EFA8D2D.html",
							"GUID-BC8B9023-E991-4837-87BE-790B9EFA8D2D.html",
							"GUID-BC8B9023-E991-4837-87BE-790B9EFA8D2D.html",
							"GUID-BC8B9023-E991-4837-87BE-790B9EFA8D2D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-27C6EDE2-7EE7-404E-A08E-B56360F7D44D.html",
							"GUID-F498D777-A055-406B-9DF6-6F0AA6502AED.html",
							"GUID-F498D777-A055-406B-9DF6-6F0AA6502AED.html",
							"GUID-F498D777-A055-406B-9DF6-6F0AA6502AED.html",
							"GUID-F498D777-A055-406B-9DF6-6F0AA6502AED.html",
							"GUID-2DEBAEA2-8E8F-4B37-B9F5-648F6D47C436.html",
							"GUID-2DEBAEA2-8E8F-4B37-B9F5-648F6D47C436.html",
							"GUID-2DEBAEA2-8E8F-4B37-B9F5-648F6D47C436.html",
							"GUID-8D907A4D-1C8C-4857-B0AD-4F6CB8F7C4E9.html",
							"GUID-8D907A4D-1C8C-4857-B0AD-4F6CB8F7C4E9.html",
							"GUID-8D907A4D-1C8C-4857-B0AD-4F6CB8F7C4E9.html",
							"GUID-8D907A4D-1C8C-4857-B0AD-4F6CB8F7C4E9.html",
							"GUID-8D907A4D-1C8C-4857-B0AD-4F6CB8F7C4E9.html",
							"GUID-8D907A4D-1C8C-4857-B0AD-4F6CB8F7C4E9.html",
							"GUID-4C21649D-F597-4151-8607-5281DF9F04CC.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-D879B0D8-C229-4375-B515-581659067E0B.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3AD3867B-D9DE-42C2-885E-C8CF0E03F6D7.html",
							"GUID-3555C6B6-C107-4BF6-A32C-F8058B608078.html",
							"GUID-3555C6B6-C107-4BF6-A32C-F8058B608078.html",
							"GUID-3555C6B6-C107-4BF6-A32C-F8058B608078.html",
							"GUID-3555C6B6-C107-4BF6-A32C-F8058B608078.html",
							"GUID-3555C6B6-C107-4BF6-A32C-F8058B608078.html",
							"GUID-3555C6B6-C107-4BF6-A32C-F8058B608078.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-A6A76AE5-5C3B-4584-82E0-8F3AE37EBA55.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-84F85A64-1E7B-45A1-BB68-F35B5FD4E974.html",
							"GUID-7105DF7F-60A9-4F2E-A7E5-784499DF37BF.html",
							"GUID-7105DF7F-60A9-4F2E-A7E5-784499DF37BF.html",
							"GUID-7105DF7F-60A9-4F2E-A7E5-784499DF37BF.html",
							"GUID-DCB13BC6-B7A2-45CA-89E7-9474EAF05EFB.html",
							"GUID-9F3B95DE-F127-481D-8456-3405E093B3B5.html",
							"GUID-9F3B95DE-F127-481D-8456-3405E093B3B5.html",
							"GUID-9F3B95DE-F127-481D-8456-3405E093B3B5.html",
							"GUID-9F3B95DE-F127-481D-8456-3405E093B3B5.html",
							"GUID-9F3B95DE-F127-481D-8456-3405E093B3B5.html",
							"GUID-FF2D219A-C393-4997-BB07-0E154846FA02.html",
							"GUID-FF2D219A-C393-4997-BB07-0E154846FA02.html",
							"GUID-FF2D219A-C393-4997-BB07-0E154846FA02.html",
							"GUID-FF2D219A-C393-4997-BB07-0E154846FA02.html",
							"GUID-FF2D219A-C393-4997-BB07-0E154846FA02.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-077C63BB-3BEF-4AD0-912B-54F67EFCD6F3.html",
							"GUID-3FB194B0-D981-437C-A414-589E2F6AA6B1.html",
							"GUID-3FB194B0-D981-437C-A414-589E2F6AA6B1.html",
							"GUID-3FB194B0-D981-437C-A414-589E2F6AA6B1.html",
							"GUID-3FB194B0-D981-437C-A414-589E2F6AA6B1.html",
							"GUID-3FB194B0-D981-437C-A414-589E2F6AA6B1.html",
							"GUID-3677FC08-B717-4AF7-A6F7-0255D4A37ECB.html",
							"GUID-3677FC08-B717-4AF7-A6F7-0255D4A37ECB.html",
							"GUID-3677FC08-B717-4AF7-A6F7-0255D4A37ECB.html",
							"GUID-3677FC08-B717-4AF7-A6F7-0255D4A37ECB.html",
							"GUID-3677FC08-B717-4AF7-A6F7-0255D4A37ECB.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-31B86115-03F3-41B6-B2A0-77E01FE35D84.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-613CC0F0-8DDF-4B50-ABF5-12633AE21D65.html",
							"GUID-EB4FEDE2-B865-4A2B-A345-CE10E6447167.html",
							"GUID-EB4FEDE2-B865-4A2B-A345-CE10E6447167.html",
							"GUID-EB4FEDE2-B865-4A2B-A345-CE10E6447167.html",
							"GUID-EB4FEDE2-B865-4A2B-A345-CE10E6447167.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-717CE47B-9DA1-4C30-AFBE-1807B04FCFC4.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-CD5B40E8-2DB7-4F6A-BC85-4178EC2A05E9.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-5096062A-E0FC-47ED-84D7-2B89E4D066A5.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-87849350-1F04-4175-887F-0EB875774E92.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-6144796B-8069-4B41-BF89-981E67656516.html",
							"GUID-77B72E29-93E6-4604-ADED-4A3D10585673.html",
							"GUID-77B72E29-93E6-4604-ADED-4A3D10585673.html",
							"GUID-77B72E29-93E6-4604-ADED-4A3D10585673.html",
							"GUID-77B72E29-93E6-4604-ADED-4A3D10585673.html",
							"GUID-77B72E29-93E6-4604-ADED-4A3D10585673.html",
							"GUID-949459F3-589F-4E96-A337-0A34DD9A8F1F.html",
							"GUID-949459F3-589F-4E96-A337-0A34DD9A8F1F.html",
							"GUID-949459F3-589F-4E96-A337-0A34DD9A8F1F.html",
							"GUID-949459F3-589F-4E96-A337-0A34DD9A8F1F.html",
							"GUID-949459F3-589F-4E96-A337-0A34DD9A8F1F.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-A97488A2-3063-4B2C-98A3-085563D4CA3C.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-587A9A50-323B-4310-A7D0-CDA58E9123CB.html",
							"GUID-2C68C719-82B4-46CC-A8D8-5B9205D81E6F.html",
							"GUID-2C68C719-82B4-46CC-A8D8-5B9205D81E6F.html",
							"GUID-2C68C719-82B4-46CC-A8D8-5B9205D81E6F.html",
							"GUID-2C68C719-82B4-46CC-A8D8-5B9205D81E6F.html",
							"GUID-2C68C719-82B4-46CC-A8D8-5B9205D81E6F.html",
							"GUID-2C68C719-82B4-46CC-A8D8-5B9205D81E6F.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-C2B672F3-CF8F-44EB-9942-706F420D5CC2.html",
							"GUID-338BE6D4-6407-4074-804F-803059F7212B.html",
							"GUID-DDDF381F-DB67-450E-92F3-E5811C712FC6.html",
							"GUID-DDDF381F-DB67-450E-92F3-E5811C712FC6.html",
							"GUID-DDDF381F-DB67-450E-92F3-E5811C712FC6.html",
							"GUID-DDDF381F-DB67-450E-92F3-E5811C712FC6.html",
							"GUID-DDDF381F-DB67-450E-92F3-E5811C712FC6.html",
							"GUID-DDDF381F-DB67-450E-92F3-E5811C712FC6.html",
							"GUID-EA29E72F-4194-41F9-9F19-D8BBA00D62F2.html",
							"GUID-294A1E08-C9B5-46B6-A6AD-3ED80AC102E0.html",
							"GUID-294A1E08-C9B5-46B6-A6AD-3ED80AC102E0.html",
							"GUID-294A1E08-C9B5-46B6-A6AD-3ED80AC102E0.html",
							"GUID-294A1E08-C9B5-46B6-A6AD-3ED80AC102E0.html",
							"GUID-294A1E08-C9B5-46B6-A6AD-3ED80AC102E0.html",
							"GUID-294A1E08-C9B5-46B6-A6AD-3ED80AC102E0.html",
							"GUID-7E1845C5-6129-448A-B724-95B5568EAE8E.html",
							"GUID-7E1845C5-6129-448A-B724-95B5568EAE8E.html",
							"GUID-7E1845C5-6129-448A-B724-95B5568EAE8E.html",
							"GUID-7E1845C5-6129-448A-B724-95B5568EAE8E.html",
							"GUID-010C57FD-E0AA-4ACD-B266-4E88CACE7E12.html",
							"GUID-010C57FD-E0AA-4ACD-B266-4E88CACE7E12.html",
							"GUID-010C57FD-E0AA-4ACD-B266-4E88CACE7E12.html",
							"GUID-010C57FD-E0AA-4ACD-B266-4E88CACE7E12.html",
							"GUID-010C57FD-E0AA-4ACD-B266-4E88CACE7E12.html",
							"GUID-010C57FD-E0AA-4ACD-B266-4E88CACE7E12.html",
							"GUID-6C8B6BC1-3D96-4634-A4FB-A3204D833C70.html",
							"GUID-6C8B6BC1-3D96-4634-A4FB-A3204D833C70.html",
							"GUID-6C8B6BC1-3D96-4634-A4FB-A3204D833C70.html",
							"GUID-6C8B6BC1-3D96-4634-A4FB-A3204D833C70.html",
							"GUID-6C8B6BC1-3D96-4634-A4FB-A3204D833C70.html",
							"GUID-6C8B6BC1-3D96-4634-A4FB-A3204D833C70.html",
							"GUID-6F5F61EF-AA8B-483C-84B0-D79136FFF642.html",
							"GUID-6F5F61EF-AA8B-483C-84B0-D79136FFF642.html",
							"GUID-6F5F61EF-AA8B-483C-84B0-D79136FFF642.html",
							"GUID-6F5F61EF-AA8B-483C-84B0-D79136FFF642.html",
							"GUID-6F5F61EF-AA8B-483C-84B0-D79136FFF642.html",
							"GUID-6F5F61EF-AA8B-483C-84B0-D79136FFF642.html",
							"GUID-3B98E7AD-FA02-4354-B414-567671FF81C8.html",
							"GUID-3B98E7AD-FA02-4354-B414-567671FF81C8.html",
							"GUID-3B98E7AD-FA02-4354-B414-567671FF81C8.html",
							"GUID-3B98E7AD-FA02-4354-B414-567671FF81C8.html",
							"GUID-3B98E7AD-FA02-4354-B414-567671FF81C8.html",
							"GUID-3B98E7AD-FA02-4354-B414-567671FF81C8.html",
							"GUID-A0A662A8-3004-4630-A785-8E75E56AAAE8.html",
							"GUID-A0A662A8-3004-4630-A785-8E75E56AAAE8.html",
							"GUID-A0A662A8-3004-4630-A785-8E75E56AAAE8.html",
							"GUID-A0A662A8-3004-4630-A785-8E75E56AAAE8.html",
							"GUID-A0A662A8-3004-4630-A785-8E75E56AAAE8.html",
							"GUID-A0A662A8-3004-4630-A785-8E75E56AAAE8.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-1ACCD0A5-886F-4EDC-AA64-CE28D24B1B05.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-62D66294-D55A-4B90-88E6-1985A474CA1D.html",
							"GUID-7349956C-2B03-47E9-ADA4-9BA8092B9CC7.html",
							"GUID-7349956C-2B03-47E9-ADA4-9BA8092B9CC7.html",
							"GUID-7349956C-2B03-47E9-ADA4-9BA8092B9CC7.html",
							"GUID-7349956C-2B03-47E9-ADA4-9BA8092B9CC7.html",
							"GUID-7349956C-2B03-47E9-ADA4-9BA8092B9CC7.html",
							"GUID-7349956C-2B03-47E9-ADA4-9BA8092B9CC7.html",
							"GUID-045814CB-0269-4B52-A4DD-AADA86648D1B.html",
							"GUID-045814CB-0269-4B52-A4DD-AADA86648D1B.html",
							"GUID-045814CB-0269-4B52-A4DD-AADA86648D1B.html",
							"GUID-045814CB-0269-4B52-A4DD-AADA86648D1B.html",
							"GUID-045814CB-0269-4B52-A4DD-AADA86648D1B.html",
							"GUID-045814CB-0269-4B52-A4DD-AADA86648D1B.html",
							"GUID-4616AADB-34DF-45A4-9EFB-954AE15A3F90.html",
							"GUID-4616AADB-34DF-45A4-9EFB-954AE15A3F90.html",
							"GUID-4616AADB-34DF-45A4-9EFB-954AE15A3F90.html",
							"GUID-4616AADB-34DF-45A4-9EFB-954AE15A3F90.html",
							"GUID-4616AADB-34DF-45A4-9EFB-954AE15A3F90.html",
							"GUID-4616AADB-34DF-45A4-9EFB-954AE15A3F90.html",
							"GUID-26C19D35-294B-4543-89ED-C1418AF48EB2.html",
							"GUID-26C19D35-294B-4543-89ED-C1418AF48EB2.html",
							"GUID-26C19D35-294B-4543-89ED-C1418AF48EB2.html",
							"GUID-26C19D35-294B-4543-89ED-C1418AF48EB2.html",
							"GUID-26C19D35-294B-4543-89ED-C1418AF48EB2.html",
							"GUID-26C19D35-294B-4543-89ED-C1418AF48EB2.html",
							"GUID-E4DF3595-C450-47FD-A097-39A8A57C54F6.html",
							"GUID-E4DF3595-C450-47FD-A097-39A8A57C54F6.html",
							"GUID-E4DF3595-C450-47FD-A097-39A8A57C54F6.html",
							"GUID-E4DF3595-C450-47FD-A097-39A8A57C54F6.html",
							"GUID-E4DF3595-C450-47FD-A097-39A8A57C54F6.html",
							"GUID-E4DF3595-C450-47FD-A097-39A8A57C54F6.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-927AA99C-9ACD-4B21-ABCA-71378BD4823C.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-FE08C0E8-8C57-4909-A9B7-CED7BD8CBDC4.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-0F26FB06-082B-49F7-A822-BF9F1D0E5414.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-D0E31302-0F9D-4BFD-AE81-A5EFB7F8D7E2.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-4B92A36F-F27E-44A4-8CA7-9CAF2B84559C.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-401DB0EE-4E91-43C7-B2F8-C95944BFE726.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-92B34162-C30A-4FB4-8382-30FBF4922B9F.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-69AEA514-74C4-495D-9033-9ED0078BBB71.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-24C32539-9847-4830-B5FF-D2D02A6C052A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-0318BF37-F1D9-4AE0-8BD4-8A2F5096747A.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-B4BA04F1-F65B-4233-989A-6E18C8EC1CF1.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-21CF9F9F-F67F-4388-94AE-D77E1D631214.html",
							"GUID-F3938B34-ED7E-4E29-BA14-7A320B60F587.html",
							"GUID-F3938B34-ED7E-4E29-BA14-7A320B60F587.html",
							"GUID-F3938B34-ED7E-4E29-BA14-7A320B60F587.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-0ABA3B87-C37C-49F9-A042-67FCEBE28854.html",
							"GUID-7E47881C-C806-4CAC-89B0-99E15F8FD5DE.html",
							"GUID-7E47881C-C806-4CAC-89B0-99E15F8FD5DE.html",
							"GUID-7E47881C-C806-4CAC-89B0-99E15F8FD5DE.html",
							"GUID-7E47881C-C806-4CAC-89B0-99E15F8FD5DE.html",
							"GUID-7E47881C-C806-4CAC-89B0-99E15F8FD5DE.html",
							"GUID-7E47881C-C806-4CAC-89B0-99E15F8FD5DE.html",
							"GUID-F2484EF9-7914-43EE-A5B7-4FFDC27C8135.html",
							"GUID-521D9159-797C-4B43-BF77-E1D2D0536CD7.html",
							"GUID-521D9159-797C-4B43-BF77-E1D2D0536CD7.html",
							"GUID-521D9159-797C-4B43-BF77-E1D2D0536CD7.html",
							"GUID-521D9159-797C-4B43-BF77-E1D2D0536CD7.html",
							"GUID-521D9159-797C-4B43-BF77-E1D2D0536CD7.html",
							"GUID-5FC5F67B-7C87-4FBC-860C-6CA22065CCC0.html",
							"GUID-5FC5F67B-7C87-4FBC-860C-6CA22065CCC0.html",
							"GUID-5FC5F67B-7C87-4FBC-860C-6CA22065CCC0.html",
							"GUID-5FC5F67B-7C87-4FBC-860C-6CA22065CCC0.html",
							"GUID-5FC5F67B-7C87-4FBC-860C-6CA22065CCC0.html",
							"GUID-5FC5F67B-7C87-4FBC-860C-6CA22065CCC0.html",
							"GUID-1F0A9F83-78A5-4F0F-A957-379861E2AEFA.html",
							"GUID-1F0A9F83-78A5-4F0F-A957-379861E2AEFA.html",
							"GUID-1F0A9F83-78A5-4F0F-A957-379861E2AEFA.html",
							"GUID-1F0A9F83-78A5-4F0F-A957-379861E2AEFA.html",
							"GUID-5BB5AACD-118C-40CC-BE01-30EEAE286DB8.html",
							"GUID-5BB5AACD-118C-40CC-BE01-30EEAE286DB8.html",
							"GUID-5BB5AACD-118C-40CC-BE01-30EEAE286DB8.html",
							"GUID-5BB5AACD-118C-40CC-BE01-30EEAE286DB8.html",
							"GUID-CF81482A-0347-4640-9715-FD9D425BDEEE.html",
							"GUID-CF81482A-0347-4640-9715-FD9D425BDEEE.html",
							"GUID-CF81482A-0347-4640-9715-FD9D425BDEEE.html",
							"GUID-2E31B416-72D7-4E99-A278-3550AE90357C.html",
							"GUID-2E31B416-72D7-4E99-A278-3550AE90357C.html",
							"GUID-2E31B416-72D7-4E99-A278-3550AE90357C.html",
							"GUID-A185E54B-88C8-473F-9C6B-6659008AFCAF.html",
							"GUID-A185E54B-88C8-473F-9C6B-6659008AFCAF.html",
							"GUID-A185E54B-88C8-473F-9C6B-6659008AFCAF.html",
							"GUID-2EBE4199-A79F-4C93-8E07-2FAC2C6C0F3E.html",
							"GUID-2EBE4199-A79F-4C93-8E07-2FAC2C6C0F3E.html",
							"GUID-2EBE4199-A79F-4C93-8E07-2FAC2C6C0F3E.html",
							"GUID-CFB606B7-ADFE-4011-BC93-3FBF6E56C544.html",
							"GUID-CFB606B7-ADFE-4011-BC93-3FBF6E56C544.html",
							"GUID-CFB606B7-ADFE-4011-BC93-3FBF6E56C544.html",
							"GUID-CFB606B7-ADFE-4011-BC93-3FBF6E56C544.html",
							"GUID-CFB606B7-ADFE-4011-BC93-3FBF6E56C544.html",
							"GUID-12FE1022-BB7D-4268-A36C-D30F79A6D5F5.html",
							"GUID-12FE1022-BB7D-4268-A36C-D30F79A6D5F5.html",
							"GUID-12FE1022-BB7D-4268-A36C-D30F79A6D5F5.html",
							"GUID-12FE1022-BB7D-4268-A36C-D30F79A6D5F5.html",
							"GUID-1EFF8A7F-F61B-483C-922D-A90479736453.html",
							"GUID-1EFF8A7F-F61B-483C-922D-A90479736453.html",
							"GUID-1EFF8A7F-F61B-483C-922D-A90479736453.html",
							"GUID-1EFF8A7F-F61B-483C-922D-A90479736453.html",
							"GUID-1EFF8A7F-F61B-483C-922D-A90479736453.html",
							"GUID-E58E8D41-415B-4D3A-889A-039690926BB8.html",
							"GUID-E58E8D41-415B-4D3A-889A-039690926BB8.html",
							"GUID-E58E8D41-415B-4D3A-889A-039690926BB8.html",
							"GUID-FFCA82E1-BD8B-4E37-88A0-A2EEFD1C1B47.html",
							"GUID-FFCA82E1-BD8B-4E37-88A0-A2EEFD1C1B47.html",
							"GUID-FFCA82E1-BD8B-4E37-88A0-A2EEFD1C1B47.html",
							"GUID-29AE27DA-535A-437D-B901-883C884CCB58.html",
							"GUID-29AE27DA-535A-437D-B901-883C884CCB58.html",
							"GUID-29AE27DA-535A-437D-B901-883C884CCB58.html",
							"GUID-60457E64-AF8C-4471-A05E-13AFC7EAFADA.html",
							"GUID-60457E64-AF8C-4471-A05E-13AFC7EAFADA.html",
							"GUID-60457E64-AF8C-4471-A05E-13AFC7EAFADA.html",
							"GUID-7A28F2C9-46BA-43FA-B0E0-03988231D060.html",
							"GUID-7A28F2C9-46BA-43FA-B0E0-03988231D060.html",
							"GUID-7A28F2C9-46BA-43FA-B0E0-03988231D060.html",
							"GUID-84AD5E92-CF3A-47A9-B081-BF6BC7122F56.html",
							"GUID-84AD5E92-CF3A-47A9-B081-BF6BC7122F56.html",
							"GUID-84AD5E92-CF3A-47A9-B081-BF6BC7122F56.html",
							"GUID-84AD5E92-CF3A-47A9-B081-BF6BC7122F56.html",
							"GUID-84AD5E92-CF3A-47A9-B081-BF6BC7122F56.html",
							"GUID-1D426D0A-D57A-499D-A7B0-7950B1FF306F.html",
							"GUID-1D426D0A-D57A-499D-A7B0-7950B1FF306F.html",
							"GUID-1D426D0A-D57A-499D-A7B0-7950B1FF306F.html",
							"GUID-2607797F-B898-48D2-87BF-F41312C0C255.html",
							"GUID-2607797F-B898-48D2-87BF-F41312C0C255.html",
							"GUID-2607797F-B898-48D2-87BF-F41312C0C255.html",
							"GUID-2607797F-B898-48D2-87BF-F41312C0C255.html",
							"GUID-2607797F-B898-48D2-87BF-F41312C0C255.html",
							"GUID-F5A63CE1-2732-41BE-9F62-8284FBDE4FFD.html",
							"GUID-F5A63CE1-2732-41BE-9F62-8284FBDE4FFD.html",
							"GUID-F5A63CE1-2732-41BE-9F62-8284FBDE4FFD.html",
							"GUID-F5A63CE1-2732-41BE-9F62-8284FBDE4FFD.html",
							"GUID-F5A63CE1-2732-41BE-9F62-8284FBDE4FFD.html",
							"GUID-F5A63CE1-2732-41BE-9F62-8284FBDE4FFD.html",
							"GUID-229F2A7B-50AF-4F9F-AD23-47824A8B773B.html",
							"GUID-229F2A7B-50AF-4F9F-AD23-47824A8B773B.html",
							"GUID-229F2A7B-50AF-4F9F-AD23-47824A8B773B.html",
							"GUID-229F2A7B-50AF-4F9F-AD23-47824A8B773B.html",
							"GUID-229F2A7B-50AF-4F9F-AD23-47824A8B773B.html",
							"GUID-B5E4619F-6A29-45B3-B455-EE7FDCF2F1E8.html",
							"GUID-B5E4619F-6A29-45B3-B455-EE7FDCF2F1E8.html",
							"GUID-B5E4619F-6A29-45B3-B455-EE7FDCF2F1E8.html",
							"GUID-B5E4619F-6A29-45B3-B455-EE7FDCF2F1E8.html",
							"GUID-96C035A3-003B-4C27-8A56-14F6DC0D5B56.html",
							"GUID-96C035A3-003B-4C27-8A56-14F6DC0D5B56.html",
							"GUID-96C035A3-003B-4C27-8A56-14F6DC0D5B56.html",
							"GUID-EA4EEF60-25F7-4135-B144-5A6A01DB1D0B.html",
							"GUID-EA4EEF60-25F7-4135-B144-5A6A01DB1D0B.html",
							"GUID-EA4EEF60-25F7-4135-B144-5A6A01DB1D0B.html",
							"GUID-E4C52DC2-E752-4537-9468-4AE1C0C9FEFF.html",
							"GUID-E4C52DC2-E752-4537-9468-4AE1C0C9FEFF.html",
							"GUID-E4C52DC2-E752-4537-9468-4AE1C0C9FEFF.html",
							"GUID-E4C52DC2-E752-4537-9468-4AE1C0C9FEFF.html",
							"GUID-437FBA33-13E8-4E89-B92F-E5E9AAFAFA90.html",
							"GUID-437FBA33-13E8-4E89-B92F-E5E9AAFAFA90.html",
							"GUID-437FBA33-13E8-4E89-B92F-E5E9AAFAFA90.html",
							"GUID-1E38C9BF-E9B6-40A5-A8B6-1D522B9C6A81.html",
							"GUID-1E38C9BF-E9B6-40A5-A8B6-1D522B9C6A81.html",
							"GUID-1E38C9BF-E9B6-40A5-A8B6-1D522B9C6A81.html",
							"GUID-A23F1082-F8DD-41B6-B489-C1B2515F2F1F.html",
							"GUID-A23F1082-F8DD-41B6-B489-C1B2515F2F1F.html",
							"GUID-A23F1082-F8DD-41B6-B489-C1B2515F2F1F.html",
							"GUID-B09E7918-C7C4-45CB-81E2-965D3294E95D.html",
							"GUID-B09E7918-C7C4-45CB-81E2-965D3294E95D.html",
							"GUID-B09E7918-C7C4-45CB-81E2-965D3294E95D.html",
							"GUID-AC8BD761-06A7-4A57-BD01-7E54E6AA9739.html",
							"GUID-AC8BD761-06A7-4A57-BD01-7E54E6AA9739.html",
							"GUID-AC8BD761-06A7-4A57-BD01-7E54E6AA9739.html",
							"GUID-6FF90021-66FF-49D3-9420-42FB43F599DE.html",
							"GUID-6FF90021-66FF-49D3-9420-42FB43F599DE.html",
							"GUID-6FF90021-66FF-49D3-9420-42FB43F599DE.html",
							"GUID-C23CA7A2-1B83-478C-B581-9D989DAD0816.html",
							"GUID-C23CA7A2-1B83-478C-B581-9D989DAD0816.html",
							"GUID-C23CA7A2-1B83-478C-B581-9D989DAD0816.html",
							"GUID-C23CA7A2-1B83-478C-B581-9D989DAD0816.html",
							"GUID-C23CA7A2-1B83-478C-B581-9D989DAD0816.html",
							"GUID-5FF87290-1801-4BA3-A188-BC03CE18EDDF.html",
							"GUID-5FF87290-1801-4BA3-A188-BC03CE18EDDF.html",
							"GUID-5FF87290-1801-4BA3-A188-BC03CE18EDDF.html",
							"GUID-5FF87290-1801-4BA3-A188-BC03CE18EDDF.html",
							"GUID-5FF87290-1801-4BA3-A188-BC03CE18EDDF.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-833EE614-43F8-4723-A982-10F407BCF36D.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-7BB52DE1-29D2-412C-8F77-80092B18A749.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-10D2DC81-88D8-4ECF-96A0-7CF6C01FD388.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-F2866270-6C0F-4DD8-8F21-629B5D01F42D.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-DEFFE509-AA4D-46A6-AFD7-C6679F415C62.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-35B61D12-0656-4FB6-A5F3-E0BC4C83E2D3.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-82812F3E-3749-45EF-90A7-A32BE900B638.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-1FCEF5D4-22F5-414B-BF0F-E07E8A6122CF.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-55CEB648-6627-45B9-A882-AC2DD80892C0.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-E3F25204-AFB7-438F-AAF4-126896DC2171.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-0F56AEC4-82A7-4A8A-98BB-B988B9A062BA.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-1E4CCA85-AF3B-43B7-9161-D6243C918736.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-BE0C1081-916F-4859-90D0-356F5D42E3EE.html",
							"GUID-F9877B54-0920-42F5-BF63-A234CAAF3673.html",
							"GUID-F9877B54-0920-42F5-BF63-A234CAAF3673.html",
							"GUID-F9877B54-0920-42F5-BF63-A234CAAF3673.html",
							"GUID-F9877B54-0920-42F5-BF63-A234CAAF3673.html",
							"GUID-F9877B54-0920-42F5-BF63-A234CAAF3673.html",
							"GUID-F9877B54-0920-42F5-BF63-A234CAAF3673.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-BA8E4747-D164-45A3-9E11-9BB8694C4576.html",
							"GUID-B6BBF09F-09E4-49A1-8E06-780429BBEF8D.html",
							"GUID-B6BBF09F-09E4-49A1-8E06-780429BBEF8D.html",
							"GUID-B6BBF09F-09E4-49A1-8E06-780429BBEF8D.html",
							"GUID-B6BBF09F-09E4-49A1-8E06-780429BBEF8D.html",
							"GUID-B6BBF09F-09E4-49A1-8E06-780429BBEF8D.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-ECE26595-BE89-43D8-99A6-EED06D60F483.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-0BA795A7-6D48-48CF-A925-30288A33D19C.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-D2E5A710-25A0-4A46-8838-728A17478011.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-4E827157-E3AF-4465-92B2-BED2A2B801B4.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-B8FDDB51-973C-4C74-8ACA-C6249AC9EE65.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-2DAF0DBE-3943-48A6-A38F-8C0A510B528D.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-283E141E-5C2A-4977-B6E1-180215D04795.html",
							"GUID-9EB90A68-DF37-4610-A38C-5ED82ACACB78.html",
							"GUID-9EB90A68-DF37-4610-A38C-5ED82ACACB78.html",
							"GUID-9EB90A68-DF37-4610-A38C-5ED82ACACB78.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-AC2E9422-6951-4421-A4B2-E2560BBD2688.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-92902367-AA36-4F8C-8E8F-2A4380D2FFB0.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-EC27AF9F-AF72-4DD7-A104-8E7991699A1B.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-5097A05F-94BE-41A9-8E92-4C81A9EF8CA4.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-B2DE133C-C875-40B3-BACE-9073D63DE82C.html",
							"GUID-99BCAA38-D478-406B-85D1-88639F4C8D1E.html",
							"GUID-99BCAA38-D478-406B-85D1-88639F4C8D1E.html",
							"GUID-99BCAA38-D478-406B-85D1-88639F4C8D1E.html",
							"GUID-99BCAA38-D478-406B-85D1-88639F4C8D1E.html",
							"GUID-99BCAA38-D478-406B-85D1-88639F4C8D1E.html",
							"GUID-99BCAA38-D478-406B-85D1-88639F4C8D1E.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-D10D7083-A933-42A7-BA90-CB60C95FC6F6.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-52BB79ED-7CC3-4194-A27A-D493A366DD19.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-7079544C-E6F0-4693-B31F-C5B70B4ABC67.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-03AFA467-86F9-4F5A-A106-7129B71494FE.html",
							"GUID-0C1AF471-66D4-472F-84AF-212E9E18B21D.html",
							"GUID-F1036B24-FE86-4897-BC92-70F7118DECB1.html",
							"GUID-F1036B24-FE86-4897-BC92-70F7118DECB1.html",
							"GUID-F1036B24-FE86-4897-BC92-70F7118DECB1.html",
							"GUID-F1036B24-FE86-4897-BC92-70F7118DECB1.html",
							"GUID-F1036B24-FE86-4897-BC92-70F7118DECB1.html",
							"GUID-A3992A9B-88BD-4049-AA62-38DC5FDECE42.html",
							"GUID-A3992A9B-88BD-4049-AA62-38DC5FDECE42.html",
							"GUID-A3992A9B-88BD-4049-AA62-38DC5FDECE42.html",
							"GUID-A3992A9B-88BD-4049-AA62-38DC5FDECE42.html",
							"GUID-A3992A9B-88BD-4049-AA62-38DC5FDECE42.html",
							"GUID-B0009EA6-72FB-445C-A8EE-5129D9684EA5.html",
							"GUID-B0009EA6-72FB-445C-A8EE-5129D9684EA5.html",
							"GUID-B0009EA6-72FB-445C-A8EE-5129D9684EA5.html",
							"GUID-B0009EA6-72FB-445C-A8EE-5129D9684EA5.html",
							"GUID-B0009EA6-72FB-445C-A8EE-5129D9684EA5.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-6270C381-E98B-4BAB-BA01-B32A743BC23F.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-8CC6912D-FBFC-4CC0-8562-9B9D199A55AD.html",
							"GUID-F4967D82-E900-429B-900D-A7C6E07A5E11.html",
							"GUID-F4967D82-E900-429B-900D-A7C6E07A5E11.html",
							"GUID-F4967D82-E900-429B-900D-A7C6E07A5E11.html",
							"GUID-F4967D82-E900-429B-900D-A7C6E07A5E11.html",
							"GUID-F4967D82-E900-429B-900D-A7C6E07A5E11.html",
							"GUID-F4967D82-E900-429B-900D-A7C6E07A5E11.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-5DFFD672-0F33-4E85-8496-3D6436EF56C4.html",
							"GUID-82848107-4CE4-436A-9B50-75B5767E03FD.html",
							"GUID-82848107-4CE4-436A-9B50-75B5767E03FD.html",
							"GUID-82848107-4CE4-436A-9B50-75B5767E03FD.html",
							"GUID-82848107-4CE4-436A-9B50-75B5767E03FD.html",
							"GUID-82848107-4CE4-436A-9B50-75B5767E03FD.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-ED921CF6-88DA-4AA8-95D6-66595A339764.html",
							"GUID-240F79CF-4468-4AB3-9D4E-E23C2E281EBC.html",
							"GUID-240F79CF-4468-4AB3-9D4E-E23C2E281EBC.html",
							"GUID-240F79CF-4468-4AB3-9D4E-E23C2E281EBC.html",
							"GUID-240F79CF-4468-4AB3-9D4E-E23C2E281EBC.html",
							"GUID-240F79CF-4468-4AB3-9D4E-E23C2E281EBC.html",
							"GUID-240F79CF-4468-4AB3-9D4E-E23C2E281EBC.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-CFC1B350-191B-49F9-9623-D76D3191F19C.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-ACB6878A-9028-4D7E-A354-7D97A8659D2B.html",
							"GUID-99C3B0B4-7B5A-4987-90BD-81B3DDA72693.html",
							"GUID-99C3B0B4-7B5A-4987-90BD-81B3DDA72693.html",
							"GUID-99C3B0B4-7B5A-4987-90BD-81B3DDA72693.html",
							"GUID-9D764E72-812D-4552-AA42-553CD03EF776.html",
							"GUID-9D764E72-812D-4552-AA42-553CD03EF776.html",
							"GUID-9D764E72-812D-4552-AA42-553CD03EF776.html",
							"GUID-9D764E72-812D-4552-AA42-553CD03EF776.html",
							"GUID-9D764E72-812D-4552-AA42-553CD03EF776.html",
							"GUID-9D764E72-812D-4552-AA42-553CD03EF776.html",
							"GUID-E66A0D7F-2E87-45A4-9EBE-6EC9E53E76EF.html",
							"GUID-E66A0D7F-2E87-45A4-9EBE-6EC9E53E76EF.html",
							"GUID-E66A0D7F-2E87-45A4-9EBE-6EC9E53E76EF.html",
							"GUID-435E5152-700F-47EC-ABAB-B2E33D885E55.html",
							"GUID-435E5152-700F-47EC-ABAB-B2E33D885E55.html",
							"GUID-435E5152-700F-47EC-ABAB-B2E33D885E55.html",
							"GUID-435E5152-700F-47EC-ABAB-B2E33D885E55.html",
							"GUID-435E5152-700F-47EC-ABAB-B2E33D885E55.html",
							"GUID-66C50FB3-A837-493C-ABA8-EE47D795A3F4.html",
							"GUID-66C50FB3-A837-493C-ABA8-EE47D795A3F4.html",
							"GUID-66C50FB3-A837-493C-ABA8-EE47D795A3F4.html",
							"GUID-BB9A0D7A-5766-47C0-8A90-0915F9673A3D.html",
							"GUID-BB9A0D7A-5766-47C0-8A90-0915F9673A3D.html",
							"GUID-BB9A0D7A-5766-47C0-8A90-0915F9673A3D.html",
							"GUID-BB9A0D7A-5766-47C0-8A90-0915F9673A3D.html",
							"GUID-83ADCBF6-480E-4531-B0EE-9B20CCA80F24.html",
							"GUID-83ADCBF6-480E-4531-B0EE-9B20CCA80F24.html",
							"GUID-83ADCBF6-480E-4531-B0EE-9B20CCA80F24.html",
							"GUID-83ADCBF6-480E-4531-B0EE-9B20CCA80F24.html",
							"GUID-83ADCBF6-480E-4531-B0EE-9B20CCA80F24.html",
							"GUID-63FAACBB-2EBB-417D-A026-9E80B2A3E1F5.html",
							"GUID-63FAACBB-2EBB-417D-A026-9E80B2A3E1F5.html",
							"GUID-63FAACBB-2EBB-417D-A026-9E80B2A3E1F5.html",
							"GUID-F993B8B1-BE2B-42E7-85BC-D5D6D2EA611B.html",
							"GUID-F993B8B1-BE2B-42E7-85BC-D5D6D2EA611B.html",
							"GUID-F993B8B1-BE2B-42E7-85BC-D5D6D2EA611B.html",
							"GUID-F993B8B1-BE2B-42E7-85BC-D5D6D2EA611B.html",
							"GUID-F993B8B1-BE2B-42E7-85BC-D5D6D2EA611B.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-5B11FD5C-585A-4122-B97D-C79FCAEEFD1D.html",
							"GUID-ED1CD7AF-39DA-44D2-9B94-837CA0567DC6.html",
							"GUID-ED1CD7AF-39DA-44D2-9B94-837CA0567DC6.html",
							"GUID-ED1CD7AF-39DA-44D2-9B94-837CA0567DC6.html",
							"GUID-ED1CD7AF-39DA-44D2-9B94-837CA0567DC6.html",
							"GUID-ED1CD7AF-39DA-44D2-9B94-837CA0567DC6.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-A83F474A-DE5B-4880-B658-1F57D6076DC3.html",
							"GUID-1B433A94-8264-4250-B59C-CA1CBCDA1A29.html",
							"GUID-1B433A94-8264-4250-B59C-CA1CBCDA1A29.html",
							"GUID-1B433A94-8264-4250-B59C-CA1CBCDA1A29.html",
							"GUID-1B433A94-8264-4250-B59C-CA1CBCDA1A29.html",
							"GUID-1B433A94-8264-4250-B59C-CA1CBCDA1A29.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-0C9F3261-AB84-44F4-88C6-DE1B62F1ECCC.html",
							"GUID-3B3A4A57-7E7D-4FE9-8838-B9C0CB9816CC.html",
							"GUID-3B3A4A57-7E7D-4FE9-8838-B9C0CB9816CC.html",
							"GUID-3B3A4A57-7E7D-4FE9-8838-B9C0CB9816CC.html",
							"GUID-3B3A4A57-7E7D-4FE9-8838-B9C0CB9816CC.html",
							"GUID-3B3A4A57-7E7D-4FE9-8838-B9C0CB9816CC.html",
							"GUID-B9C2FD26-9793-4F5D-AC70-6D230309EFD0.html",
							"GUID-B9C2FD26-9793-4F5D-AC70-6D230309EFD0.html",
							"GUID-B9C2FD26-9793-4F5D-AC70-6D230309EFD0.html",
							"GUID-B9C2FD26-9793-4F5D-AC70-6D230309EFD0.html",
							"GUID-B9C2FD26-9793-4F5D-AC70-6D230309EFD0.html",
							"GUID-80F5FFAB-C6FD-41C2-AC19-85BDD5D274E4.html",
							"GUID-80F5FFAB-C6FD-41C2-AC19-85BDD5D274E4.html",
							"GUID-80F5FFAB-C6FD-41C2-AC19-85BDD5D274E4.html",
							"GUID-80F5FFAB-C6FD-41C2-AC19-85BDD5D274E4.html",
							"GUID-80F5FFAB-C6FD-41C2-AC19-85BDD5D274E4.html",
							"GUID-0BACDF8E-626D-4123-A257-F504D698660F.html",
							"GUID-0BACDF8E-626D-4123-A257-F504D698660F.html",
							"GUID-0BACDF8E-626D-4123-A257-F504D698660F.html",
							"GUID-0BACDF8E-626D-4123-A257-F504D698660F.html",
							"GUID-B2F1424A-5396-49FB-89C2-77A497BEF5ED.html",
							"GUID-B2F1424A-5396-49FB-89C2-77A497BEF5ED.html",
							"GUID-B2F1424A-5396-49FB-89C2-77A497BEF5ED.html",
							"GUID-B2F1424A-5396-49FB-89C2-77A497BEF5ED.html",
							"GUID-B2F1424A-5396-49FB-89C2-77A497BEF5ED.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-940DE310-D484-4698-B02D-714E9D9DC366.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-1339D3C8-2300-49CC-8764-D48BA075046E.html",
							"GUID-617EB7BE-435D-467D-950C-0C06E88C12F6.html",
							"GUID-617EB7BE-435D-467D-950C-0C06E88C12F6.html",
							"GUID-617EB7BE-435D-467D-950C-0C06E88C12F6.html",
							"GUID-617EB7BE-435D-467D-950C-0C06E88C12F6.html",
							"GUID-617EB7BE-435D-467D-950C-0C06E88C12F6.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-7B4519E8-35DC-42A1-AA46-A7C1B15DB5EC.html",
							"GUID-8C6170E5-0E7A-49D1-959C-07B748E4F398.html",
							"GUID-8C6170E5-0E7A-49D1-959C-07B748E4F398.html",
							"GUID-8C6170E5-0E7A-49D1-959C-07B748E4F398.html",
							"GUID-8C6170E5-0E7A-49D1-959C-07B748E4F398.html",
							"GUID-8C6170E5-0E7A-49D1-959C-07B748E4F398.html",
							"GUID-C3D5ADDA-C160-4FA9-A43C-02EC4D2B1F17.html",
							"GUID-C3D5ADDA-C160-4FA9-A43C-02EC4D2B1F17.html",
							"GUID-C3D5ADDA-C160-4FA9-A43C-02EC4D2B1F17.html",
							"GUID-C3D5ADDA-C160-4FA9-A43C-02EC4D2B1F17.html",
							"GUID-C3D5ADDA-C160-4FA9-A43C-02EC4D2B1F17.html",
							"GUID-C3D5ADDA-C160-4FA9-A43C-02EC4D2B1F17.html",
							"GUID-64650216-4E2E-417F-8C9D-8C10AE03E7D4.html",
							"GUID-64650216-4E2E-417F-8C9D-8C10AE03E7D4.html",
							"GUID-64650216-4E2E-417F-8C9D-8C10AE03E7D4.html",
							"GUID-64650216-4E2E-417F-8C9D-8C10AE03E7D4.html",
							"GUID-64650216-4E2E-417F-8C9D-8C10AE03E7D4.html",
							"GUID-64650216-4E2E-417F-8C9D-8C10AE03E7D4.html",
							"GUID-C3415D33-F49B-4FAE-8D75-AD7F15A0B60C.html",
							"GUID-C3415D33-F49B-4FAE-8D75-AD7F15A0B60C.html",
							"GUID-C3415D33-F49B-4FAE-8D75-AD7F15A0B60C.html",
							"GUID-391BB945-3CE5-41D7-8678-43CA3010FF3D.html",
							"GUID-391BB945-3CE5-41D7-8678-43CA3010FF3D.html",
							"GUID-391BB945-3CE5-41D7-8678-43CA3010FF3D.html",
							"GUID-391BB945-3CE5-41D7-8678-43CA3010FF3D.html",
							"GUID-391BB945-3CE5-41D7-8678-43CA3010FF3D.html",
							"GUID-391BB945-3CE5-41D7-8678-43CA3010FF3D.html",
							"GUID-95D7899C-A605-4BFE-9465-472B8982B8E1.html",
							"GUID-95D7899C-A605-4BFE-9465-472B8982B8E1.html",
							"GUID-95D7899C-A605-4BFE-9465-472B8982B8E1.html",
							"GUID-0B22E607-0077-4838-8920-8CA7DC7EEC31.html",
							"GUID-0B22E607-0077-4838-8920-8CA7DC7EEC31.html",
							"GUID-0B22E607-0077-4838-8920-8CA7DC7EEC31.html",
							"GUID-0B22E607-0077-4838-8920-8CA7DC7EEC31.html",
							"GUID-0B22E607-0077-4838-8920-8CA7DC7EEC31.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-C54433C1-2180-430D-953B-46C028083162.html",
							"GUID-BF936DCC-3D24-4119-A9C0-64BCB4DCA45E.html",
							"GUID-BF936DCC-3D24-4119-A9C0-64BCB4DCA45E.html",
							"GUID-BF936DCC-3D24-4119-A9C0-64BCB4DCA45E.html",
							"GUID-BF936DCC-3D24-4119-A9C0-64BCB4DCA45E.html",
							"GUID-BF936DCC-3D24-4119-A9C0-64BCB4DCA45E.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-891D7233-73AB-4DBB-AFC9-428A7531FAA9.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-8220824F-9A66-4AC1-9AFC-ED4D12C1B54C.html",
							"GUID-1980D629-290B-40FF-9F0B-53EFB5590951.html",
							"GUID-1980D629-290B-40FF-9F0B-53EFB5590951.html",
							"GUID-1980D629-290B-40FF-9F0B-53EFB5590951.html",
							"GUID-1980D629-290B-40FF-9F0B-53EFB5590951.html",
							"GUID-1980D629-290B-40FF-9F0B-53EFB5590951.html",
							"GUID-1BD642EC-B24E-4589-9473-BF0EB35C1FCC.html",
							"GUID-1BD642EC-B24E-4589-9473-BF0EB35C1FCC.html",
							"GUID-1BD642EC-B24E-4589-9473-BF0EB35C1FCC.html",
							"GUID-1BD642EC-B24E-4589-9473-BF0EB35C1FCC.html",
							"GUID-1BD642EC-B24E-4589-9473-BF0EB35C1FCC.html",
							"GUID-B7731681-A36F-473A-AA6E-E35653662542.html",
							"GUID-B7731681-A36F-473A-AA6E-E35653662542.html",
							"GUID-B7731681-A36F-473A-AA6E-E35653662542.html",
							"GUID-B7731681-A36F-473A-AA6E-E35653662542.html",
							"GUID-B7731681-A36F-473A-AA6E-E35653662542.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-4AD197E5-65ED-4509-A821-E27387114EE0.html",
							"GUID-34C8E0E9-2425-480C-9FF0-72C5E55B3F34.html",
							"GUID-34C8E0E9-2425-480C-9FF0-72C5E55B3F34.html",
							"GUID-34C8E0E9-2425-480C-9FF0-72C5E55B3F34.html",
							"GUID-34C8E0E9-2425-480C-9FF0-72C5E55B3F34.html",
							"GUID-34C8E0E9-2425-480C-9FF0-72C5E55B3F34.html",
							"GUID-FB1FB11A-61F5-4B63-9F79-57A68BD28438.html",
							"GUID-FB1FB11A-61F5-4B63-9F79-57A68BD28438.html",
							"GUID-FB1FB11A-61F5-4B63-9F79-57A68BD28438.html",
							"GUID-FB1FB11A-61F5-4B63-9F79-57A68BD28438.html",
							"GUID-FB1FB11A-61F5-4B63-9F79-57A68BD28438.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-5F0D6218-4F51-4152-8122-EF952E394EE6.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-1E150278-093E-400D-9828-68D108F78FB8.html",
							"GUID-17ECBC22-66EA-4544-B1EB-4ADD77C15F73.html",
							"GUID-17ECBC22-66EA-4544-B1EB-4ADD77C15F73.html",
							"GUID-17ECBC22-66EA-4544-B1EB-4ADD77C15F73.html",
							"GUID-17ECBC22-66EA-4544-B1EB-4ADD77C15F73.html",
							"GUID-17ECBC22-66EA-4544-B1EB-4ADD77C15F73.html",
							"GUID-749C3475-16E5-4047-A835-95F9A8471691.html",
							"GUID-749C3475-16E5-4047-A835-95F9A8471691.html",
							"GUID-749C3475-16E5-4047-A835-95F9A8471691.html",
							"GUID-749C3475-16E5-4047-A835-95F9A8471691.html",
							"GUID-749C3475-16E5-4047-A835-95F9A8471691.html",
							"GUID-749C3475-16E5-4047-A835-95F9A8471691.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-8809CAF2-BA3B-4D2C-8EDE-CD19481195A8.html",
							"GUID-395EDA67-22AD-40AC-AF69-BFA3D8B61F6F.html",
							"GUID-395EDA67-22AD-40AC-AF69-BFA3D8B61F6F.html",
							"GUID-395EDA67-22AD-40AC-AF69-BFA3D8B61F6F.html",
							"GUID-395EDA67-22AD-40AC-AF69-BFA3D8B61F6F.html",
							"GUID-395EDA67-22AD-40AC-AF69-BFA3D8B61F6F.html",
							"GUID-38D8B7F7-F948-49E9-ADC6-58D7EC45CA41.html",
							"GUID-38D8B7F7-F948-49E9-ADC6-58D7EC45CA41.html",
							"GUID-38D8B7F7-F948-49E9-ADC6-58D7EC45CA41.html",
							"GUID-38D8B7F7-F948-49E9-ADC6-58D7EC45CA41.html",
							"GUID-38D8B7F7-F948-49E9-ADC6-58D7EC45CA41.html",
							"GUID-6B6C990B-1359-470E-AC2C-11771DEC02D1.html",
							"GUID-6B6C990B-1359-470E-AC2C-11771DEC02D1.html",
							"GUID-6B6C990B-1359-470E-AC2C-11771DEC02D1.html",
							"GUID-6B6C990B-1359-470E-AC2C-11771DEC02D1.html",
							"GUID-0B60C5DD-9B61-49A7-83B2-7792F425BEF6.html",
							"GUID-0B60C5DD-9B61-49A7-83B2-7792F425BEF6.html",
							"GUID-0B60C5DD-9B61-49A7-83B2-7792F425BEF6.html",
							"GUID-0B60C5DD-9B61-49A7-83B2-7792F425BEF6.html",
							"GUID-0B60C5DD-9B61-49A7-83B2-7792F425BEF6.html",
							"GUID-C26A1C84-59C1-434B-AB56-3FF3DE15FA3F.html",
							"GUID-C26A1C84-59C1-434B-AB56-3FF3DE15FA3F.html",
							"GUID-C26A1C84-59C1-434B-AB56-3FF3DE15FA3F.html",
							"GUID-C26A1C84-59C1-434B-AB56-3FF3DE15FA3F.html",
							"GUID-1C6C58A7-003E-4C91-8385-E762D4CA7F79.html",
							"GUID-1C6C58A7-003E-4C91-8385-E762D4CA7F79.html",
							"GUID-1C6C58A7-003E-4C91-8385-E762D4CA7F79.html",
							"GUID-1C6C58A7-003E-4C91-8385-E762D4CA7F79.html",
							"GUID-B37C4F4C-DC2D-48D9-9909-AACBA987B57A.html",
							"GUID-2F8F95F8-C947-4540-BD50-952613FACF05.html",
							"GUID-2F8F95F8-C947-4540-BD50-952613FACF05.html",
							"GUID-2F8F95F8-C947-4540-BD50-952613FACF05.html",
							"GUID-46322265-3A95-4FFC-8EFE-BC410F8C8A31.html",
							"GUID-46322265-3A95-4FFC-8EFE-BC410F8C8A31.html",
							"GUID-46322265-3A95-4FFC-8EFE-BC410F8C8A31.html",
							"GUID-283B4B5C-2894-4C43-B264-436B46EA69F0.html",
							"GUID-283B4B5C-2894-4C43-B264-436B46EA69F0.html",
							"GUID-283B4B5C-2894-4C43-B264-436B46EA69F0.html",
							"GUID-A75996C6-067E-4462-A86A-4EC05528DC77.html",
							"GUID-A75996C6-067E-4462-A86A-4EC05528DC77.html",
							"GUID-A75996C6-067E-4462-A86A-4EC05528DC77.html",
							"GUID-A75996C6-067E-4462-A86A-4EC05528DC77.html",
							"GUID-A75996C6-067E-4462-A86A-4EC05528DC77.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-694C6E9D-E570-4398-94F5-B49A04A8C96C.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-FCA5F18C-18CF-436D-9050-AD57B705A8E9.html",
							"GUID-62EC969A-A8DA-490C-9CA3-8CDB5E41D08F.html",
							"GUID-62EC969A-A8DA-490C-9CA3-8CDB5E41D08F.html",
							"GUID-62EC969A-A8DA-490C-9CA3-8CDB5E41D08F.html",
							"GUID-62EC969A-A8DA-490C-9CA3-8CDB5E41D08F.html",
							"GUID-62EC969A-A8DA-490C-9CA3-8CDB5E41D08F.html",
							"GUID-62EC969A-A8DA-490C-9CA3-8CDB5E41D08F.html",
							"GUID-18319F8A-E30C-4BD0-B85B-F66B70C1EB51.html",
							"GUID-18319F8A-E30C-4BD0-B85B-F66B70C1EB51.html",
							"GUID-18319F8A-E30C-4BD0-B85B-F66B70C1EB51.html",
							"GUID-DFB63280-015A-471A-9A04-C11C47F9A6A5.html",
							"GUID-DFB63280-015A-471A-9A04-C11C47F9A6A5.html",
							"GUID-DFB63280-015A-471A-9A04-C11C47F9A6A5.html",
							"GUID-1A4F0B14-A85A-4C9F-AC0A-D688F09C7E86.html",
							"GUID-1A4F0B14-A85A-4C9F-AC0A-D688F09C7E86.html",
							"GUID-1A4F0B14-A85A-4C9F-AC0A-D688F09C7E86.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-55B68821-A274-44F0-B2D9-9C12D85F6F51.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-24FC9E41-3466-48F6-A06D-D8EE58E41449.html",
							"GUID-E685F7FD-F66F-46C5-AA31-23417CB67780.html",
							"GUID-E685F7FD-F66F-46C5-AA31-23417CB67780.html",
							"GUID-E685F7FD-F66F-46C5-AA31-23417CB67780.html",
							"GUID-A1DC8B70-9EAD-48F3-B86B-F8BF2AC71585.html",
							"GUID-A1DC8B70-9EAD-48F3-B86B-F8BF2AC71585.html",
							"GUID-A1DC8B70-9EAD-48F3-B86B-F8BF2AC71585.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-F0687E5F-50D9-4E2D-8281-39B30D488230.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-055CF601-37B7-43DF-AA7D-6A55C687FE49.html",
							"GUID-990162EC-DD14-462F-8336-B5D2B089AE87.html",
							"GUID-990162EC-DD14-462F-8336-B5D2B089AE87.html",
							"GUID-990162EC-DD14-462F-8336-B5D2B089AE87.html",
							"GUID-B4D41F33-BB5D-4A3F-A2FF-4AEA0FEB2372.html",
							"GUID-B4D41F33-BB5D-4A3F-A2FF-4AEA0FEB2372.html",
							"GUID-B4D41F33-BB5D-4A3F-A2FF-4AEA0FEB2372.html",
							"GUID-261D3A77-3851-4DA2-8CD7-5E5420F6E71F.html",
							"GUID-261D3A77-3851-4DA2-8CD7-5E5420F6E71F.html",
							"GUID-261D3A77-3851-4DA2-8CD7-5E5420F6E71F.html",
							"GUID-05D1A6F5-39B8-4726-B6AA-C20DB2C696AE.html",
							"GUID-05D1A6F5-39B8-4726-B6AA-C20DB2C696AE.html",
							"GUID-05D1A6F5-39B8-4726-B6AA-C20DB2C696AE.html",
							"GUID-94B64443-29E3-4B31-98FF-279E1626C22C.html",
							"GUID-94B64443-29E3-4B31-98FF-279E1626C22C.html",
							"GUID-94B64443-29E3-4B31-98FF-279E1626C22C.html",
							"GUID-DA0AF76A-1428-4889-AAAF-21FE2A10B2FC.html",
							"GUID-DA0AF76A-1428-4889-AAAF-21FE2A10B2FC.html",
							"GUID-DA0AF76A-1428-4889-AAAF-21FE2A10B2FC.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-91AA78F3-377B-479E-8B41-BEDF662C201C.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-7283A146-83D0-485D-9A58-307266046894.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-FC9871E4-046B-4E18-B026-4B0237848D30.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-31B65FA8-3006-400B-8C92-CDEDE2B938FC.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-7798753E-5953-45DE-9E0F-FF6EA043E124.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-A1BE117B-3066-4131-A622-A1018B8AEA86.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-5358F353-839E-4D94-B6D9-FACF57A53EB2.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-B320800F-2E77-4D0A-BABE-36E417E0EC71.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-DB7FF793-16EC-4766-8C2F-F53C44BD44A9.html",
							"GUID-751A65BB-A8A4-41BB-8888-6F92E2B6D511.html",
							"GUID-751A65BB-A8A4-41BB-8888-6F92E2B6D511.html",
							"GUID-751A65BB-A8A4-41BB-8888-6F92E2B6D511.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-D4D7486A-7AD8-44E9-874D-F8569A499FE4.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-E10CF207-A406-40AA-AC13-A6C69CF32285.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-74B3E36D-F31D-4FF9-81AE-F536511AFB2D.html",
							"GUID-C89ABCA4-B0CE-4510-9C1D-A0E9A15DD1C5.html",
							"GUID-C89ABCA4-B0CE-4510-9C1D-A0E9A15DD1C5.html",
							"GUID-C89ABCA4-B0CE-4510-9C1D-A0E9A15DD1C5.html",
							"GUID-90D1F0E4-81C0-43A8-9E5D-099F5E63C835.html",
							"GUID-90D1F0E4-81C0-43A8-9E5D-099F5E63C835.html",
							"GUID-90D1F0E4-81C0-43A8-9E5D-099F5E63C835.html",
							"GUID-90D1F0E4-81C0-43A8-9E5D-099F5E63C835.html",
							"GUID-90D1F0E4-81C0-43A8-9E5D-099F5E63C835.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-55FA4C69-CFF5-4C45-9269-E64A9F995E5C.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-AA215625-E4A7-4921-8AF1-6B318699201A.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-E4B2C61A-89A3-4D7B-A7B1-A35443FD57AE.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-6A97CE3B-076A-4EDE-B53D-E8C62ED03406.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-DCEBAF5C-5CC2-44B7-AB7C-CEA8D11A491D.html",
							"GUID-06EB7E2C-E72B-4633-94E2-B8330020A036.html",
							"GUID-06EB7E2C-E72B-4633-94E2-B8330020A036.html",
							"GUID-06EB7E2C-E72B-4633-94E2-B8330020A036.html",
							"GUID-06EB7E2C-E72B-4633-94E2-B8330020A036.html",
							"GUID-06EB7E2C-E72B-4633-94E2-B8330020A036.html",
							"GUID-A3B3EFA8-4DBC-46CC-BEB1-896D4B5BF9F2.html",
							"GUID-A3B3EFA8-4DBC-46CC-BEB1-896D4B5BF9F2.html",
							"GUID-A3B3EFA8-4DBC-46CC-BEB1-896D4B5BF9F2.html",
							"GUID-A3B3EFA8-4DBC-46CC-BEB1-896D4B5BF9F2.html",
							"GUID-A3B3EFA8-4DBC-46CC-BEB1-896D4B5BF9F2.html",
							"GUID-DBD0596C-894B-4108-964E-E51E43D9EF22.html",
							"GUID-DBD0596C-894B-4108-964E-E51E43D9EF22.html",
							"GUID-DBD0596C-894B-4108-964E-E51E43D9EF22.html",
							"GUID-DBD0596C-894B-4108-964E-E51E43D9EF22.html",
							"GUID-DBD0596C-894B-4108-964E-E51E43D9EF22.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-75EF7F93-F4BC-4BED-B58A-80FA9E8FD2E0.html",
							"GUID-D287E269-82F2-43B8-A149-F8D3BDCC32AB.html",
							"GUID-D287E269-82F2-43B8-A149-F8D3BDCC32AB.html",
							"GUID-D287E269-82F2-43B8-A149-F8D3BDCC32AB.html",
							"GUID-D287E269-82F2-43B8-A149-F8D3BDCC32AB.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-8E0841B0-D052-4CCA-BD91-6A04641B4432.html",
							"GUID-7FD0C77D-7855-4FC0-A2CA-96ADBBC79CCD.html",
							"GUID-7FD0C77D-7855-4FC0-A2CA-96ADBBC79CCD.html",
							"GUID-7FD0C77D-7855-4FC0-A2CA-96ADBBC79CCD.html",
							"GUID-7FD0C77D-7855-4FC0-A2CA-96ADBBC79CCD.html",
							"GUID-7FD0C77D-7855-4FC0-A2CA-96ADBBC79CCD.html",
							"GUID-7FD0C77D-7855-4FC0-A2CA-96ADBBC79CCD.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-488FF282-E9CC-4548-8140-E3C76AEBEF61.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-869E8FAE-90E5-4359-BF3E-75605CA82E73.html",
							"GUID-1898B92C-FB85-462A-A0E7-17213981E7E5.html",
							"GUID-1898B92C-FB85-462A-A0E7-17213981E7E5.html",
							"GUID-1898B92C-FB85-462A-A0E7-17213981E7E5.html",
							"GUID-1898B92C-FB85-462A-A0E7-17213981E7E5.html",
							"GUID-1898B92C-FB85-462A-A0E7-17213981E7E5.html",
							"GUID-8A824AA3-4E4C-4C37-9500-79FC5B8D6BF4.html",
							"GUID-8A824AA3-4E4C-4C37-9500-79FC5B8D6BF4.html",
							"GUID-8A824AA3-4E4C-4C37-9500-79FC5B8D6BF4.html",
							"GUID-8A824AA3-4E4C-4C37-9500-79FC5B8D6BF4.html",
							"GUID-8A824AA3-4E4C-4C37-9500-79FC5B8D6BF4.html",
							"GUID-8A824AA3-4E4C-4C37-9500-79FC5B8D6BF4.html",
							"GUID-3447E5F3-4B4F-4BCB-B899-C7DC2903D957.html",
							"GUID-3447E5F3-4B4F-4BCB-B899-C7DC2903D957.html",
							"GUID-3447E5F3-4B4F-4BCB-B899-C7DC2903D957.html",
							"GUID-3447E5F3-4B4F-4BCB-B899-C7DC2903D957.html",
							"GUID-3447E5F3-4B4F-4BCB-B899-C7DC2903D957.html",
							"GUID-3447E5F3-4B4F-4BCB-B899-C7DC2903D957.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-8DA21A5F-888A-4335-991A-63C8DBA52DF6.html",
							"GUID-6DF9F69D-E6E7-4570-B1C2-110CCB0395EE.html",
							"GUID-6DF9F69D-E6E7-4570-B1C2-110CCB0395EE.html",
							"GUID-6DF9F69D-E6E7-4570-B1C2-110CCB0395EE.html",
							"GUID-6DF9F69D-E6E7-4570-B1C2-110CCB0395EE.html",
							"GUID-6DF9F69D-E6E7-4570-B1C2-110CCB0395EE.html",
							"GUID-6DF9F69D-E6E7-4570-B1C2-110CCB0395EE.html",
							"GUID-B8F99ECD-7F8D-4D3F-84DF-6286DEBC968B.html",
							"GUID-B8F99ECD-7F8D-4D3F-84DF-6286DEBC968B.html",
							"GUID-B8F99ECD-7F8D-4D3F-84DF-6286DEBC968B.html",
							"GUID-B8F99ECD-7F8D-4D3F-84DF-6286DEBC968B.html",
							"GUID-B8F99ECD-7F8D-4D3F-84DF-6286DEBC968B.html",
							"GUID-B8F99ECD-7F8D-4D3F-84DF-6286DEBC968B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-5963FE64-3A2B-4A3C-BD88-77A533DF882B.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-E938DC01-4BA2-4CD7-B16F-BDA586847122.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-715E33FC-50B7-4837-AFB1-55BCD0D15884.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-D76B51D2-8422-4DEA-BA25-6106A4C02D7A.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-E5FEA58A-6877-488F-A347-63728F777CDC.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-C720F980-BF70-46B0-A03D-727DF79A7714.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-92879E40-8A1F-42B2-A9AB-C0FF32184F2A.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-B7D9F946-C7E1-4054-B8FF-30934B80350E.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-0848A8D1-F2A5-4B53-94C1-1E78F7FB5E24.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-6A8B96F2-9F5F-4D1C-A35D-0B3EF3B2FC70.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-E7A44303-FFAE-49EC-B989-02201197DE9E.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-B5EBA2EA-F93C-474F-B24A-8FB0591EDE55.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-4D827C17-9623-4A0D-B3B2-9D58016C4859.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-C192D8F2-C86F-4CFE-AFF7-FB63CBB34A78.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-41573635-4285-44CF-9670-BFC3104F657B.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-7B19DEA3-70DD-4DD6-8A58-89A6C62B494F.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-81D408B7-8548-4EC8-A955-C5B136C1D921.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-079F091B-9D66-4E75-8600-092EDC9EB19E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-EDB7B286-21C6-4C78-A40C-3F49946A933E.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-81B09C27-C145-4FB9-9025-F5986566841D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-6C4EA2C1-CD13-481B-ACBF-2EB77E7CFF3D.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-7C3A21A5-3499-4AE5-A6B0-63F9D83F2A17.html",
							"GUID-EF46A6E9-E73E-4228-BD7E-FFFF27B07096.html",
							"GUID-EF46A6E9-E73E-4228-BD7E-FFFF27B07096.html",
							"GUID-EF46A6E9-E73E-4228-BD7E-FFFF27B07096.html",
							"GUID-EF46A6E9-E73E-4228-BD7E-FFFF27B07096.html",
							"GUID-EF46A6E9-E73E-4228-BD7E-FFFF27B07096.html",
							"GUID-EF46A6E9-E73E-4228-BD7E-FFFF27B07096.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-5A16EA54-44B2-4444-97F0-7BF4D756E430.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-142C96D7-5850-49D7-A472-A6476E209175.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-1063D7A8-FA74-4F24-815B-FB44CC5F88BF.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-DDD32672-28E9-4E86-9C2E-4FC04877C4E9.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-B183E319-7BDA-4453-8677-7D5BD046FB86.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-227A05EB-3744-4516-8DAD-E3BCC78691B5.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-234477DB-5BB9-4A5D-8765-9B295575F9D8.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-3327D2C7-8C69-48E0-817A-65C7282FFFDF.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-703BC1FC-C9DB-4AF8-B1B8-E4457C8311B9.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-780F540D-D266-4F0B-BC42-09955B80F4A4.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-696B13AA-788B-45E4-A916-8EAC98896853.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-469981DB-5DBF-4E8B-BFFE-6EB386F32BB2.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-26EDA78F-3A2B-491C-8C31-41635D1D08F5.html",
							"GUID-6003DBC5-C656-4E47-B6C5-EBE5B35226E7.html",
							"GUID-6003DBC5-C656-4E47-B6C5-EBE5B35226E7.html",
							"GUID-6003DBC5-C656-4E47-B6C5-EBE5B35226E7.html",
							"GUID-6003DBC5-C656-4E47-B6C5-EBE5B35226E7.html",
							"GUID-6003DBC5-C656-4E47-B6C5-EBE5B35226E7.html",
							"GUID-6003DBC5-C656-4E47-B6C5-EBE5B35226E7.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-9D96E9B8-75C1-40F1-B918-C38B500E2B46.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-8A346581-6B4A-4831-9E5E-4E33235E3036.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-FC4974C8-56F6-430F-AE98-9409FDE066CF.html",
							"GUID-A8B35265-E439-4CEB-94F0-55E2DAF9668D.html",
							"GUID-A8B35265-E439-4CEB-94F0-55E2DAF9668D.html",
							"GUID-A8B35265-E439-4CEB-94F0-55E2DAF9668D.html",
							"GUID-A8B35265-E439-4CEB-94F0-55E2DAF9668D.html",
							"GUID-A8B35265-E439-4CEB-94F0-55E2DAF9668D.html",
							"GUID-A8B35265-E439-4CEB-94F0-55E2DAF9668D.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-82356347-DE35-4FC5-93A2-98DC156891F0.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-6D26931C-538F-4F1F-80A6-2CB1DE1D59F1.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-192B7F3D-20C7-485D-874D-0407D3628458.html",
							"GUID-A35D9196-ED2D-4A09-B26D-F3B68ABDA206.html",
							"GUID-A35D9196-ED2D-4A09-B26D-F3B68ABDA206.html",
							"GUID-A35D9196-ED2D-4A09-B26D-F3B68ABDA206.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-F837EC61-F4E6-458F-8B87-ED8158565C14.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-AC14B6B7-E080-427F-8265-8E58085BCD67.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-91F02427-3FB3-4759-9D6F-511B88EE8C32.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-C6AE4B40-72A3-409B-9BE4-B8D555302C85.html",
							"GUID-60817292-D657-471A-86CE-25D068933506.html",
							"GUID-748C5E7F-0CD8-443E-BBD5-55D907D25644.html",
							"GUID-748C5E7F-0CD8-443E-BBD5-55D907D25644.html",
							"GUID-748C5E7F-0CD8-443E-BBD5-55D907D25644.html",
							"GUID-748C5E7F-0CD8-443E-BBD5-55D907D25644.html",
							"GUID-188B85D5-4D34-431D-952F-DEB7B8E5C7FA.html",
							"GUID-188B85D5-4D34-431D-952F-DEB7B8E5C7FA.html",
							"GUID-188B85D5-4D34-431D-952F-DEB7B8E5C7FA.html",
							"GUID-188B85D5-4D34-431D-952F-DEB7B8E5C7FA.html",
							"GUID-188B85D5-4D34-431D-952F-DEB7B8E5C7FA.html",
							"GUID-188B85D5-4D34-431D-952F-DEB7B8E5C7FA.html",
							"GUID-5FBC9524-1287-42EB-B1A1-6F4C3C9980FD.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-54C4E5DE-AFB8-4B83-95AF-215BE1947787.html",
							"GUID-FC6E0701-F309-47D1-9F2D-0253AADF48FC.html",
							"GUID-9986E81B-F489-44C1-8D42-2AF4856B0C06.html",
							"GUID-9986E81B-F489-44C1-8D42-2AF4856B0C06.html",
							"GUID-9986E81B-F489-44C1-8D42-2AF4856B0C06.html",
							"GUID-04F08455-8018-4546-BBC6-9DE9B22EE6B1.html",
							"GUID-04F08455-8018-4546-BBC6-9DE9B22EE6B1.html",
							"GUID-04F08455-8018-4546-BBC6-9DE9B22EE6B1.html",
							"GUID-04F08455-8018-4546-BBC6-9DE9B22EE6B1.html",
							"GUID-04F08455-8018-4546-BBC6-9DE9B22EE6B1.html",
							"GUID-04F08455-8018-4546-BBC6-9DE9B22EE6B1.html",
							"GUID-2B9B587D-5018-4CA9-AA8D-2395A2D004A5.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-CF54D5B4-557D-4E4B-9457-2F3D6EC15888.html",
							"GUID-30EBF323-A268-4755-8D7E-DF208F3CE0E3.html",
							"GUID-30EBF323-A268-4755-8D7E-DF208F3CE0E3.html",
							"GUID-30EBF323-A268-4755-8D7E-DF208F3CE0E3.html",
							"GUID-30EBF323-A268-4755-8D7E-DF208F3CE0E3.html",
							"GUID-30EBF323-A268-4755-8D7E-DF208F3CE0E3.html",
							"GUID-30EBF323-A268-4755-8D7E-DF208F3CE0E3.html",
							"GUID-A803C6A5-EE2D-445A-B1B2-A30DEEAB7D00.html",
							"GUID-A803C6A5-EE2D-445A-B1B2-A30DEEAB7D00.html",
							"GUID-A803C6A5-EE2D-445A-B1B2-A30DEEAB7D00.html",
							"GUID-A803C6A5-EE2D-445A-B1B2-A30DEEAB7D00.html",
							"GUID-A803C6A5-EE2D-445A-B1B2-A30DEEAB7D00.html",
							"GUID-A803C6A5-EE2D-445A-B1B2-A30DEEAB7D00.html",
							"GUID-BBC4E95F-45E6-4D2A-9D01-67BB71ACABA2.html",
							"GUID-BBC4E95F-45E6-4D2A-9D01-67BB71ACABA2.html",
							"GUID-BBC4E95F-45E6-4D2A-9D01-67BB71ACABA2.html",
							"GUID-CF8FE4AC-0E2A-43A4-AC57-4269D95998AA.html",
							"GUID-CF8FE4AC-0E2A-43A4-AC57-4269D95998AA.html",
							"GUID-CF8FE4AC-0E2A-43A4-AC57-4269D95998AA.html",
							"GUID-CF8FE4AC-0E2A-43A4-AC57-4269D95998AA.html",
							"GUID-CF8FE4AC-0E2A-43A4-AC57-4269D95998AA.html",
							"GUID-CF8FE4AC-0E2A-43A4-AC57-4269D95998AA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-1455B1B0-4DD6-4D0C-979A-B59E5251D8FA.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-0761CBDB-640F-47E5-9E91-A7B90B83295C.html",
							"GUID-DADB5E8F-E2DC-4576-A61F-0BC748BE85A9.html",
							"GUID-DADB5E8F-E2DC-4576-A61F-0BC748BE85A9.html",
							"GUID-DADB5E8F-E2DC-4576-A61F-0BC748BE85A9.html",
							"GUID-DADB5E8F-E2DC-4576-A61F-0BC748BE85A9.html",
							"GUID-DADB5E8F-E2DC-4576-A61F-0BC748BE85A9.html",
							"GUID-DADB5E8F-E2DC-4576-A61F-0BC748BE85A9.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-CB39E466-3E36-452E-8B5A-301229849483.html",
							"GUID-AD6ED500-C4C5-4750-9EC0-188C0359646D.html",
							"GUID-AD6ED500-C4C5-4750-9EC0-188C0359646D.html",
							"GUID-AD6ED500-C4C5-4750-9EC0-188C0359646D.html",
							"GUID-AD6ED500-C4C5-4750-9EC0-188C0359646D.html",
							"GUID-AD6ED500-C4C5-4750-9EC0-188C0359646D.html",
							"GUID-AD6ED500-C4C5-4750-9EC0-188C0359646D.html",
							"GUID-7DA6C173-4517-4C9C-AB16-876BEE857AF8.html",
							"GUID-7DA6C173-4517-4C9C-AB16-876BEE857AF8.html",
							"GUID-7DA6C173-4517-4C9C-AB16-876BEE857AF8.html",
							"GUID-7DA6C173-4517-4C9C-AB16-876BEE857AF8.html",
							"GUID-7DA6C173-4517-4C9C-AB16-876BEE857AF8.html",
							"GUID-7DA6C173-4517-4C9C-AB16-876BEE857AF8.html",
							"GUID-1477C704-4A26-476C-8E70-7514FAF123F4.html",
							"GUID-645744BA-1C6F-491A-9840-B06D51A4810C.html",
							"GUID-645744BA-1C6F-491A-9840-B06D51A4810C.html",
							"GUID-645744BA-1C6F-491A-9840-B06D51A4810C.html",
							"GUID-4BB37FFE-93A6-4C0B-B8C9-EC835EEAE147.html",
							"GUID-4BB37FFE-93A6-4C0B-B8C9-EC835EEAE147.html",
							"GUID-4BB37FFE-93A6-4C0B-B8C9-EC835EEAE147.html",
							"GUID-4BB37FFE-93A6-4C0B-B8C9-EC835EEAE147.html",
							"GUID-4BB37FFE-93A6-4C0B-B8C9-EC835EEAE147.html",
							"GUID-1D86B51A-D2EA-46F5-84F2-AB8F8CE4AE87.html",
							"GUID-1D86B51A-D2EA-46F5-84F2-AB8F8CE4AE87.html",
							"GUID-1D86B51A-D2EA-46F5-84F2-AB8F8CE4AE87.html",
							"GUID-1D86B51A-D2EA-46F5-84F2-AB8F8CE4AE87.html",
							"GUID-1D86B51A-D2EA-46F5-84F2-AB8F8CE4AE87.html",
							"GUID-C0A58DE7-266B-456F-A946-2A0B48CC0E00.html",
							"GUID-C0A58DE7-266B-456F-A946-2A0B48CC0E00.html",
							"GUID-C0A58DE7-266B-456F-A946-2A0B48CC0E00.html",
							"GUID-C0A58DE7-266B-456F-A946-2A0B48CC0E00.html",
							"GUID-C0A58DE7-266B-456F-A946-2A0B48CC0E00.html",
							"GUID-7566549E-EC59-489A-93C7-CA1BE422E2C3.html",
							"GUID-7566549E-EC59-489A-93C7-CA1BE422E2C3.html",
							"GUID-7566549E-EC59-489A-93C7-CA1BE422E2C3.html",
							"GUID-7566549E-EC59-489A-93C7-CA1BE422E2C3.html",
							"GUID-7566549E-EC59-489A-93C7-CA1BE422E2C3.html",
							"GUID-167AA3C2-FBDF-4BC6-9FA1-9AA9391A3B77.html",
							"GUID-167AA3C2-FBDF-4BC6-9FA1-9AA9391A3B77.html",
							"GUID-167AA3C2-FBDF-4BC6-9FA1-9AA9391A3B77.html",
							"GUID-167AA3C2-FBDF-4BC6-9FA1-9AA9391A3B77.html",
							"GUID-167AA3C2-FBDF-4BC6-9FA1-9AA9391A3B77.html",
							"GUID-9A185311-D542-46CB-A12F-336F26B3E015.html",
							"GUID-9A185311-D542-46CB-A12F-336F26B3E015.html",
							"GUID-9A185311-D542-46CB-A12F-336F26B3E015.html",
							"GUID-9A185311-D542-46CB-A12F-336F26B3E015.html",
							"GUID-9A185311-D542-46CB-A12F-336F26B3E015.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-70138883-677F-48EF-ADD2-00C9F9DA0E3F.html",
							"GUID-91AE8872-6F3C-4AA0-B43B-5F8227E0CA33.html",
							"GUID-91AE8872-6F3C-4AA0-B43B-5F8227E0CA33.html",
							"GUID-91AE8872-6F3C-4AA0-B43B-5F8227E0CA33.html",
							"GUID-91AE8872-6F3C-4AA0-B43B-5F8227E0CA33.html",
							"GUID-91AE8872-6F3C-4AA0-B43B-5F8227E0CA33.html",
							"GUID-69CFAD76-BC60-4706-8E51-9B17A10E309E.html",
							"GUID-69CFAD76-BC60-4706-8E51-9B17A10E309E.html",
							"GUID-69CFAD76-BC60-4706-8E51-9B17A10E309E.html",
							"GUID-69CFAD76-BC60-4706-8E51-9B17A10E309E.html",
							"GUID-37320533-479F-47F8-85CB-B079A77F78C5.html",
							"GUID-37320533-479F-47F8-85CB-B079A77F78C5.html",
							"GUID-37320533-479F-47F8-85CB-B079A77F78C5.html",
							"GUID-37320533-479F-47F8-85CB-B079A77F78C5.html",
							"GUID-37320533-479F-47F8-85CB-B079A77F78C5.html",
							"GUID-67B7F74D-2A4D-45F8-A901-939C6389671C.html",
							"GUID-67B7F74D-2A4D-45F8-A901-939C6389671C.html",
							"GUID-67B7F74D-2A4D-45F8-A901-939C6389671C.html",
							"GUID-67B7F74D-2A4D-45F8-A901-939C6389671C.html",
							"GUID-67B7F74D-2A4D-45F8-A901-939C6389671C.html",
							"GUID-90F5A57F-5365-4569-A481-3EB4FA870A70.html",
							"GUID-90F5A57F-5365-4569-A481-3EB4FA870A70.html",
							"GUID-90F5A57F-5365-4569-A481-3EB4FA870A70.html",
							"GUID-90F5A57F-5365-4569-A481-3EB4FA870A70.html",
							"GUID-90F5A57F-5365-4569-A481-3EB4FA870A70.html",
							"GUID-E8A317C5-C50B-4396-A5E3-0341C85CA736.html",
							"GUID-E8A317C5-C50B-4396-A5E3-0341C85CA736.html",
							"GUID-E8A317C5-C50B-4396-A5E3-0341C85CA736.html",
							"GUID-E8A317C5-C50B-4396-A5E3-0341C85CA736.html",
							"GUID-E8A317C5-C50B-4396-A5E3-0341C85CA736.html",
							"GUID-506B8184-500A-49FB-8F29-83AD4D027EE1.html",
							"GUID-506B8184-500A-49FB-8F29-83AD4D027EE1.html",
							"GUID-506B8184-500A-49FB-8F29-83AD4D027EE1.html",
							"GUID-506B8184-500A-49FB-8F29-83AD4D027EE1.html",
							"GUID-506B8184-500A-49FB-8F29-83AD4D027EE1.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-201304B8-6206-4A91-AEBA-CF217ED66D36.html",
							"GUID-3140AAA0-AD55-4639-9773-9953DCC3292E.html",
							"GUID-3140AAA0-AD55-4639-9773-9953DCC3292E.html",
							"GUID-3140AAA0-AD55-4639-9773-9953DCC3292E.html",
							"GUID-3140AAA0-AD55-4639-9773-9953DCC3292E.html",
							"GUID-3140AAA0-AD55-4639-9773-9953DCC3292E.html",
							"GUID-2D39AA6F-29BA-4872-8AD3-5DC9686A2C12.html",
							"GUID-2D39AA6F-29BA-4872-8AD3-5DC9686A2C12.html",
							"GUID-2D39AA6F-29BA-4872-8AD3-5DC9686A2C12.html",
							"GUID-2D39AA6F-29BA-4872-8AD3-5DC9686A2C12.html",
							"GUID-2D39AA6F-29BA-4872-8AD3-5DC9686A2C12.html",
							"GUID-BECC9C70-ED5D-4797-8467-D87ECDB29B9D.html",
							"GUID-BECC9C70-ED5D-4797-8467-D87ECDB29B9D.html",
							"GUID-BECC9C70-ED5D-4797-8467-D87ECDB29B9D.html",
							"GUID-BECC9C70-ED5D-4797-8467-D87ECDB29B9D.html",
							"GUID-BECC9C70-ED5D-4797-8467-D87ECDB29B9D.html",
							"GUID-BECC9C70-ED5D-4797-8467-D87ECDB29B9D.html",
							"GUID-7764E81C-8FC9-4B3E-8830-255BDE678AA0.html",
							"GUID-66EB8140-8350-4270-9335-D4FF366A19E2.html",
							"GUID-66EB8140-8350-4270-9335-D4FF366A19E2.html",
							"GUID-66EB8140-8350-4270-9335-D4FF366A19E2.html",
							"GUID-66EB8140-8350-4270-9335-D4FF366A19E2.html",
							"GUID-66EB8140-8350-4270-9335-D4FF366A19E2.html",
							"GUID-466B5C12-06AE-4050-B87C-DFD1D82C1D1C.html",
							"GUID-466B5C12-06AE-4050-B87C-DFD1D82C1D1C.html",
							"GUID-466B5C12-06AE-4050-B87C-DFD1D82C1D1C.html",
							"GUID-B936FE71-BC8A-4085-A15E-DE30F33EAB1A.html",
							"GUID-B936FE71-BC8A-4085-A15E-DE30F33EAB1A.html",
							"GUID-B936FE71-BC8A-4085-A15E-DE30F33EAB1A.html",
							"GUID-B936FE71-BC8A-4085-A15E-DE30F33EAB1A.html",
							"GUID-B936FE71-BC8A-4085-A15E-DE30F33EAB1A.html",
							"GUID-95B5B21B-3EAC-42F2-99DC-E824BAFAA690.html",
							"GUID-95B5B21B-3EAC-42F2-99DC-E824BAFAA690.html",
							"GUID-95B5B21B-3EAC-42F2-99DC-E824BAFAA690.html",
							"GUID-95B5B21B-3EAC-42F2-99DC-E824BAFAA690.html",
							"GUID-29B73F88-AF3C-48F4-9A52-C7B627F6CE39.html",
							"GUID-29B73F88-AF3C-48F4-9A52-C7B627F6CE39.html",
							"GUID-29B73F88-AF3C-48F4-9A52-C7B627F6CE39.html",
							"GUID-29B73F88-AF3C-48F4-9A52-C7B627F6CE39.html",
							"GUID-8B6901B5-C673-41CC-9B6B-A1BC1930957A.html",
							"GUID-8B6901B5-C673-41CC-9B6B-A1BC1930957A.html",
							"GUID-8B6901B5-C673-41CC-9B6B-A1BC1930957A.html",
							"GUID-475EA177-97E0-48BA-9344-49A2B23E9557.html",
							"GUID-475EA177-97E0-48BA-9344-49A2B23E9557.html",
							"GUID-475EA177-97E0-48BA-9344-49A2B23E9557.html",
							"GUID-475EA177-97E0-48BA-9344-49A2B23E9557.html",
							"GUID-00113BB0-63B1-4D54-9D52-DA918CB5088B.html",
							"GUID-00113BB0-63B1-4D54-9D52-DA918CB5088B.html",
							"GUID-00113BB0-63B1-4D54-9D52-DA918CB5088B.html",
							"GUID-DED3F85C-11E1-4A7F-B94B-9FECDBD0893E.html",
							"GUID-DED3F85C-11E1-4A7F-B94B-9FECDBD0893E.html",
							"GUID-DED3F85C-11E1-4A7F-B94B-9FECDBD0893E.html",
							"GUID-DED3F85C-11E1-4A7F-B94B-9FECDBD0893E.html",
							"GUID-CD1946E6-72CB-4B9E-916C-977488D1C1BF.html",
							"GUID-CD1946E6-72CB-4B9E-916C-977488D1C1BF.html",
							"GUID-CD1946E6-72CB-4B9E-916C-977488D1C1BF.html",
							"GUID-5DC19ED6-6171-4351-91CA-8F617D998E0D.html",
							"GUID-5DC19ED6-6171-4351-91CA-8F617D998E0D.html",
							"GUID-5DC19ED6-6171-4351-91CA-8F617D998E0D.html",
							"GUID-01176052-ADEA-46EC-B40E-DA11F594DEA2.html",
							"GUID-01176052-ADEA-46EC-B40E-DA11F594DEA2.html",
							"GUID-01176052-ADEA-46EC-B40E-DA11F594DEA2.html",
							"GUID-B850CFAA-BB01-48D4-AED8-8DC14C64DB7C.html",
							"GUID-B850CFAA-BB01-48D4-AED8-8DC14C64DB7C.html",
							"GUID-B850CFAA-BB01-48D4-AED8-8DC14C64DB7C.html",
							"GUID-B850CFAA-BB01-48D4-AED8-8DC14C64DB7C.html",
							"GUID-14D7AEBA-1091-4B1E-B659-BC43A542CD7B.html",
							"GUID-14D7AEBA-1091-4B1E-B659-BC43A542CD7B.html",
							"GUID-14D7AEBA-1091-4B1E-B659-BC43A542CD7B.html",
							"GUID-14D7AEBA-1091-4B1E-B659-BC43A542CD7B.html",
							"GUID-14D7AEBA-1091-4B1E-B659-BC43A542CD7B.html",
							"GUID-3F29431E-56A5-49C6-9321-E844E214FF3B.html",
							"GUID-3F29431E-56A5-49C6-9321-E844E214FF3B.html",
							"GUID-3F29431E-56A5-49C6-9321-E844E214FF3B.html",
							"GUID-3F29431E-56A5-49C6-9321-E844E214FF3B.html",
							"GUID-3F29431E-56A5-49C6-9321-E844E214FF3B.html",
							"GUID-C3A94F5C-9DFC-4C2E-9F41-F1A449C3BF71.html",
							"GUID-C3A94F5C-9DFC-4C2E-9F41-F1A449C3BF71.html",
							"GUID-C3A94F5C-9DFC-4C2E-9F41-F1A449C3BF71.html",
							"GUID-C3A94F5C-9DFC-4C2E-9F41-F1A449C3BF71.html",
							"GUID-C3A94F5C-9DFC-4C2E-9F41-F1A449C3BF71.html",
							"GUID-CE587E2A-69CB-4C73-AF12-C5AB810DEE7F.html",
							"GUID-CE587E2A-69CB-4C73-AF12-C5AB810DEE7F.html",
							"GUID-CE587E2A-69CB-4C73-AF12-C5AB810DEE7F.html",
							"GUID-CE587E2A-69CB-4C73-AF12-C5AB810DEE7F.html",
							"GUID-CE587E2A-69CB-4C73-AF12-C5AB810DEE7F.html",
							"GUID-FD6BE11C-630D-410B-9A3B-D3EC1B499916.html",
							"GUID-FD6BE11C-630D-410B-9A3B-D3EC1B499916.html",
							"GUID-FD6BE11C-630D-410B-9A3B-D3EC1B499916.html",
							"GUID-FD6BE11C-630D-410B-9A3B-D3EC1B499916.html",
							"GUID-FD6BE11C-630D-410B-9A3B-D3EC1B499916.html",
							"GUID-54D967D4-38C6-42F9-AA0C-B2D20A25909F.html",
							"GUID-54D967D4-38C6-42F9-AA0C-B2D20A25909F.html",
							"GUID-54D967D4-38C6-42F9-AA0C-B2D20A25909F.html",
							"GUID-54D967D4-38C6-42F9-AA0C-B2D20A25909F.html",
							"GUID-54D967D4-38C6-42F9-AA0C-B2D20A25909F.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-68289005-8CBF-47A4-AAFF-3AEE46F579CF.html",
							"GUID-4260D9D5-06A3-4388-9E49-AB9E449EA7B2.html",
							"GUID-4260D9D5-06A3-4388-9E49-AB9E449EA7B2.html",
							"GUID-4260D9D5-06A3-4388-9E49-AB9E449EA7B2.html",
							"GUID-4260D9D5-06A3-4388-9E49-AB9E449EA7B2.html",
							"GUID-4260D9D5-06A3-4388-9E49-AB9E449EA7B2.html",
							"GUID-4260D9D5-06A3-4388-9E49-AB9E449EA7B2.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-014B6D41-C8F4-42E2-9F09-4A5F9FD1111B.html",
							"GUID-C044EA98-7B3B-4398-B958-889287333022.html",
							"GUID-C044EA98-7B3B-4398-B958-889287333022.html",
							"GUID-C044EA98-7B3B-4398-B958-889287333022.html",
							"GUID-C044EA98-7B3B-4398-B958-889287333022.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-2CE2DE56-547A-4F35-8240-592D03786853.html",
							"GUID-6EB562C9-CDC8-457B-A9D6-9127D545C12A.html",
							"GUID-6EB562C9-CDC8-457B-A9D6-9127D545C12A.html",
							"GUID-6EB562C9-CDC8-457B-A9D6-9127D545C12A.html",
							"GUID-6EB562C9-CDC8-457B-A9D6-9127D545C12A.html",
							"GUID-6EB562C9-CDC8-457B-A9D6-9127D545C12A.html",
							"GUID-6EB562C9-CDC8-457B-A9D6-9127D545C12A.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-7C11A229-085E-4497-941D-A47992479F3B.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-471E5DF3-2EAD-460A-B963-894E6FE9B915.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-9B5A7DC2-40DE-4992-9792-7FAAF93D8FD6.html",
							"GUID-2CB40EFF-DCB6-4D23-9EFB-402861EF9FC6.html",
							"GUID-2CB40EFF-DCB6-4D23-9EFB-402861EF9FC6.html",
							"GUID-2CB40EFF-DCB6-4D23-9EFB-402861EF9FC6.html",
							"GUID-2CB40EFF-DCB6-4D23-9EFB-402861EF9FC6.html",
							"GUID-2CB40EFF-DCB6-4D23-9EFB-402861EF9FC6.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-261FDEEA-4939-4E47-AFFC-2FBAD980A114.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-4FA11FF3-612E-4D10-8242-377C3F6CF5E1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-7D4DC390-FD6F-4435-958B-4324BEC8A4A1.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-AA2B2D44-E7CB-4B29-BC69-AD6DD77EB809.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-7FCCF0BB-53A5-4D31-A8F2-D77B6181EBBB.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-0E6D3607-9921-44C7-8B68-E85554C80801.html",
							"GUID-BF0CB5D1-6D57-4E3A-9F66-1C3E4BD80FA8.html",
							"GUID-BF0CB5D1-6D57-4E3A-9F66-1C3E4BD80FA8.html",
							"GUID-BF0CB5D1-6D57-4E3A-9F66-1C3E4BD80FA8.html",
							"GUID-BF0CB5D1-6D57-4E3A-9F66-1C3E4BD80FA8.html",
							"GUID-BF0CB5D1-6D57-4E3A-9F66-1C3E4BD80FA8.html",
							"GUID-BF0CB5D1-6D57-4E3A-9F66-1C3E4BD80FA8.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-B97A78AF-FD36-4D79-BF47-F2AE22902F8A.html",
							"GUID-BDCAEFFB-3D1B-44A3-B656-D4A18383E66C.html",
							"GUID-BDCAEFFB-3D1B-44A3-B656-D4A18383E66C.html",
							"GUID-BDCAEFFB-3D1B-44A3-B656-D4A18383E66C.html",
							"GUID-BDCAEFFB-3D1B-44A3-B656-D4A18383E66C.html",
							"GUID-BDCAEFFB-3D1B-44A3-B656-D4A18383E66C.html",
							"GUID-BDCAEFFB-3D1B-44A3-B656-D4A18383E66C.html",
							"GUID-430DEB4B-1ACE-44A6-A6CE-D220080CF2B5.html",
							"GUID-430DEB4B-1ACE-44A6-A6CE-D220080CF2B5.html",
							"GUID-430DEB4B-1ACE-44A6-A6CE-D220080CF2B5.html",
							"GUID-430DEB4B-1ACE-44A6-A6CE-D220080CF2B5.html",
							"GUID-430DEB4B-1ACE-44A6-A6CE-D220080CF2B5.html",
							"GUID-430DEB4B-1ACE-44A6-A6CE-D220080CF2B5.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-9DE145CE-6D99-4501-94F3-9C24899050ED.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-63000CBB-6A16-4510-9B87-9DEBB62B7A7B.html",
							"GUID-001B34EC-903E-4448-863C-256B62C95F53.html",
							"GUID-001B34EC-903E-4448-863C-256B62C95F53.html",
							"GUID-001B34EC-903E-4448-863C-256B62C95F53.html",
							"GUID-001B34EC-903E-4448-863C-256B62C95F53.html",
							"GUID-001B34EC-903E-4448-863C-256B62C95F53.html",
							"GUID-001B34EC-903E-4448-863C-256B62C95F53.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-5B3AAF37-93AA-401D-B7CD-D28AA4E7F1A2.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-A0A2D32D-BDBE-4B12-B7C5-478283FE6A7C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-C8CCD3C1-DE9B-410F-B924-83D4FAE8ED2C.html",
							"GUID-243E1FD7-D220-4F22-A76F-1C6467C973BF.html",
							"GUID-243E1FD7-D220-4F22-A76F-1C6467C973BF.html",
							"GUID-243E1FD7-D220-4F22-A76F-1C6467C973BF.html",
							"GUID-243E1FD7-D220-4F22-A76F-1C6467C973BF.html",
							"GUID-243E1FD7-D220-4F22-A76F-1C6467C973BF.html",
							"GUID-243E1FD7-D220-4F22-A76F-1C6467C973BF.html",
							"GUID-74D650FD-483B-49E2-AD07-CDC28CB5D7CC.html",
							"GUID-74D650FD-483B-49E2-AD07-CDC28CB5D7CC.html",
							"GUID-74D650FD-483B-49E2-AD07-CDC28CB5D7CC.html",
							"GUID-74D650FD-483B-49E2-AD07-CDC28CB5D7CC.html",
							"GUID-74D650FD-483B-49E2-AD07-CDC28CB5D7CC.html",
							"GUID-74D650FD-483B-49E2-AD07-CDC28CB5D7CC.html",
							"GUID-123BF979-9342-48FD-BAFA-65AF224C4EF5.html",
							"GUID-123BF979-9342-48FD-BAFA-65AF224C4EF5.html",
							"GUID-123BF979-9342-48FD-BAFA-65AF224C4EF5.html",
							"GUID-123BF979-9342-48FD-BAFA-65AF224C4EF5.html",
							"GUID-123BF979-9342-48FD-BAFA-65AF224C4EF5.html",
							"GUID-123BF979-9342-48FD-BAFA-65AF224C4EF5.html",
							"GUID-80B1258C-5639-4C20-81D1-6B253609CA21.html",
							"GUID-80B1258C-5639-4C20-81D1-6B253609CA21.html",
							"GUID-80B1258C-5639-4C20-81D1-6B253609CA21.html",
							"GUID-80B1258C-5639-4C20-81D1-6B253609CA21.html",
							"GUID-80B1258C-5639-4C20-81D1-6B253609CA21.html",
							"GUID-80B1258C-5639-4C20-81D1-6B253609CA21.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-CE1E6891-8778-4B78-8DF8-98743975C78C.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-2F85BB10-868F-4CC7-B4DF-D8F780841490.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-53A2E18F-48FD-478F-A5AA-46C48685700C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-A47F927D-FEE2-4271-88C5-255447EFDD1C.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-BCFFB578-25A1-4639-90F3-9500380B13A1.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-B723237E-484E-42E2-A7DA-CCAC4BBE507B.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-7ACBECE6-7FEC-42BA-9E8A-1DFD758509CA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-941A2702-62E8-424D-8E43-B21B0A9FC1DA.html",
							"GUID-12045D71-B016-41AD-A0FA-28ACF7850FC6.html",
							"GUID-12045D71-B016-41AD-A0FA-28ACF7850FC6.html",
							"GUID-12045D71-B016-41AD-A0FA-28ACF7850FC6.html",
							"GUID-12045D71-B016-41AD-A0FA-28ACF7850FC6.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-E58EF65B-97FD-46B4-A696-0A6B6F120F77.html",
							"GUID-2D3B8E39-56C5-4354-9971-1FF1912BCADC.html",
							"GUID-2D3B8E39-56C5-4354-9971-1FF1912BCADC.html",
							"GUID-2D3B8E39-56C5-4354-9971-1FF1912BCADC.html",
							"GUID-2D3B8E39-56C5-4354-9971-1FF1912BCADC.html",
							"GUID-2D3B8E39-56C5-4354-9971-1FF1912BCADC.html",
							"GUID-2D3B8E39-56C5-4354-9971-1FF1912BCADC.html",
							"GUID-5E4C405D-613A-4FA7-AE5E-4A7593890586.html",
							"GUID-5E4C405D-613A-4FA7-AE5E-4A7593890586.html",
							"GUID-5E4C405D-613A-4FA7-AE5E-4A7593890586.html",
							"GUID-5E4C405D-613A-4FA7-AE5E-4A7593890586.html",
							"GUID-5E4C405D-613A-4FA7-AE5E-4A7593890586.html",
							"GUID-7F43936A-7FCB-4575-9709-C92EFB582D83.html",
							"GUID-7F43936A-7FCB-4575-9709-C92EFB582D83.html",
							"GUID-7F43936A-7FCB-4575-9709-C92EFB582D83.html",
							"GUID-7F43936A-7FCB-4575-9709-C92EFB582D83.html",
							"GUID-7F43936A-7FCB-4575-9709-C92EFB582D83.html",
							"GUID-832A1C71-21E8-4386-BFCE-18B19538AC01.html",
							"GUID-4148DC28-DEDC-491C-A495-AEB5B2CA6CE5.html",
							"GUID-4148DC28-DEDC-491C-A495-AEB5B2CA6CE5.html",
							"GUID-4148DC28-DEDC-491C-A495-AEB5B2CA6CE5.html",
							"GUID-4148DC28-DEDC-491C-A495-AEB5B2CA6CE5.html",
							"GUID-4148DC28-DEDC-491C-A495-AEB5B2CA6CE5.html",
							"GUID-4148DC28-DEDC-491C-A495-AEB5B2CA6CE5.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-F68CA77D-0C0A-4E0F-97E6-75F85EB415B9.html",
							"GUID-92138F50-E64C-4110-835F-C50D989F9A55.html",
							"GUID-92138F50-E64C-4110-835F-C50D989F9A55.html",
							"GUID-92138F50-E64C-4110-835F-C50D989F9A55.html",
							"GUID-92138F50-E64C-4110-835F-C50D989F9A55.html",
							"GUID-0F65B3A4-D24C-4138-A517-F010AF8AADFD.html",
							"GUID-0F65B3A4-D24C-4138-A517-F010AF8AADFD.html",
							"GUID-0F65B3A4-D24C-4138-A517-F010AF8AADFD.html",
							"GUID-B6638438-1F4E-4F34-89AE-CE42F73FD44F.html",
							"GUID-B6638438-1F4E-4F34-89AE-CE42F73FD44F.html",
							"GUID-B6638438-1F4E-4F34-89AE-CE42F73FD44F.html",
							"GUID-B6638438-1F4E-4F34-89AE-CE42F73FD44F.html",
							"GUID-B6638438-1F4E-4F34-89AE-CE42F73FD44F.html",
							"GUID-442B009E-B494-4058-BCC9-2671F0FFA291.html",
							"GUID-442B009E-B494-4058-BCC9-2671F0FFA291.html",
							"GUID-442B009E-B494-4058-BCC9-2671F0FFA291.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-34A17DC8-525C-494B-8706-4E93C2A0EBE4.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-597B2805-F948-40CC-8080-A608316CA730.html",
							"GUID-BA4A38ED-3292-4BDF-9F85-90792F15E9B8.html",
							"GUID-BA4A38ED-3292-4BDF-9F85-90792F15E9B8.html",
							"GUID-BA4A38ED-3292-4BDF-9F85-90792F15E9B8.html",
							"GUID-BA4A38ED-3292-4BDF-9F85-90792F15E9B8.html",
							"GUID-BA4A38ED-3292-4BDF-9F85-90792F15E9B8.html",
							"GUID-BA4A38ED-3292-4BDF-9F85-90792F15E9B8.html",
							"GUID-2DAB11C9-7917-4265-B16B-D564E5E91624.html",
							"GUID-2DAB11C9-7917-4265-B16B-D564E5E91624.html",
							"GUID-2DAB11C9-7917-4265-B16B-D564E5E91624.html",
							"GUID-2DAB11C9-7917-4265-B16B-D564E5E91624.html",
							"GUID-FCD1F6D0-6FA9-4EDF-8230-0F122BB3AB89.html",
							"GUID-FCD1F6D0-6FA9-4EDF-8230-0F122BB3AB89.html",
							"GUID-FCD1F6D0-6FA9-4EDF-8230-0F122BB3AB89.html",
							"GUID-FCD1F6D0-6FA9-4EDF-8230-0F122BB3AB89.html",
							"GUID-65420E46-EAAB-411B-9DDF-59A2F152DD04.html",
							"GUID-65420E46-EAAB-411B-9DDF-59A2F152DD04.html",
							"GUID-65420E46-EAAB-411B-9DDF-59A2F152DD04.html",
							"GUID-65420E46-EAAB-411B-9DDF-59A2F152DD04.html",
							"GUID-65420E46-EAAB-411B-9DDF-59A2F152DD04.html",
							"GUID-65420E46-EAAB-411B-9DDF-59A2F152DD04.html",
							"GUID-8F64927B-A072-4A14-BFAF-ACBFE02ABBDE.html",
							"GUID-8F64927B-A072-4A14-BFAF-ACBFE02ABBDE.html",
							"GUID-8F64927B-A072-4A14-BFAF-ACBFE02ABBDE.html",
							"GUID-8F64927B-A072-4A14-BFAF-ACBFE02ABBDE.html",
							"GUID-8F64927B-A072-4A14-BFAF-ACBFE02ABBDE.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-45B8A2AF-2972-467D-832A-BA1B061F993D.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-064A17CA-590A-4801-920B-45577E646EC4.html",
							"GUID-2A105799-AAF5-4399-9E65-558D0A4EA0F5.html",
							"GUID-2A105799-AAF5-4399-9E65-558D0A4EA0F5.html",
							"GUID-2A105799-AAF5-4399-9E65-558D0A4EA0F5.html",
							"GUID-2A105799-AAF5-4399-9E65-558D0A4EA0F5.html",
							"GUID-2A105799-AAF5-4399-9E65-558D0A4EA0F5.html",
							"GUID-2A105799-AAF5-4399-9E65-558D0A4EA0F5.html",
							"GUID-63274BE6-FA56-4153-B66D-AFF3B4A9D5FB.html",
							"GUID-63274BE6-FA56-4153-B66D-AFF3B4A9D5FB.html",
							"GUID-63274BE6-FA56-4153-B66D-AFF3B4A9D5FB.html",
							"GUID-63274BE6-FA56-4153-B66D-AFF3B4A9D5FB.html",
							"GUID-63274BE6-FA56-4153-B66D-AFF3B4A9D5FB.html",
							"GUID-63274BE6-FA56-4153-B66D-AFF3B4A9D5FB.html",
							"GUID-9461917B-27CE-44ED-80DB-67D963896E8F.html",
							"GUID-68E8F75C-904C-4EA5-B069-9C38BD5897B7.html",
							"GUID-68E8F75C-904C-4EA5-B069-9C38BD5897B7.html",
							"GUID-68E8F75C-904C-4EA5-B069-9C38BD5897B7.html",
							"GUID-912DD67D-07EE-4EA1-BEB6-A1AB190AF1EE.html",
							"GUID-912DD67D-07EE-4EA1-BEB6-A1AB190AF1EE.html",
							"GUID-912DD67D-07EE-4EA1-BEB6-A1AB190AF1EE.html",
							"GUID-912DD67D-07EE-4EA1-BEB6-A1AB190AF1EE.html",
							"GUID-37AC4203-D5E1-4E87-B655-96976074EB8E.html",
							"GUID-37AC4203-D5E1-4E87-B655-96976074EB8E.html",
							"GUID-37AC4203-D5E1-4E87-B655-96976074EB8E.html",
							"GUID-37AC4203-D5E1-4E87-B655-96976074EB8E.html",
							"GUID-9CB9084C-9554-4FBF-B513-27DAC5B429A6.html",
							"GUID-9CB9084C-9554-4FBF-B513-27DAC5B429A6.html",
							"GUID-9CB9084C-9554-4FBF-B513-27DAC5B429A6.html",
							"GUID-9CB9084C-9554-4FBF-B513-27DAC5B429A6.html",
							"GUID-E2B08BBC-2E3A-4DBB-95EB-875C36F4A35E.html",
							"GUID-E2B08BBC-2E3A-4DBB-95EB-875C36F4A35E.html",
							"GUID-E2B08BBC-2E3A-4DBB-95EB-875C36F4A35E.html",
							"GUID-E2B08BBC-2E3A-4DBB-95EB-875C36F4A35E.html",
							"GUID-4567539C-B19F-4DBD-A86E-031C8679AFF8.html",
							"GUID-4567539C-B19F-4DBD-A86E-031C8679AFF8.html",
							"GUID-4567539C-B19F-4DBD-A86E-031C8679AFF8.html",
							"GUID-CF1F5589-30B5-4F40-AFAE-1E182CF264DB.html",
							"GUID-CF1F5589-30B5-4F40-AFAE-1E182CF264DB.html",
							"GUID-CF1F5589-30B5-4F40-AFAE-1E182CF264DB.html",
							"GUID-C868486A-6EC9-40EB-B216-5A67901EE666.html",
							"GUID-C868486A-6EC9-40EB-B216-5A67901EE666.html",
							"GUID-C868486A-6EC9-40EB-B216-5A67901EE666.html",
							"GUID-C868486A-6EC9-40EB-B216-5A67901EE666.html",
							"GUID-F42A84D9-F584-41BA-9185-E2B4AD880031.html",
							"GUID-F42A84D9-F584-41BA-9185-E2B4AD880031.html",
							"GUID-F42A84D9-F584-41BA-9185-E2B4AD880031.html",
							"GUID-F42A84D9-F584-41BA-9185-E2B4AD880031.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-9B86AE3A-89C9-45FD-A75C-AAA3A0A0417A.html",
							"GUID-33601DD6-2869-4D23-9621-4C9FA0A5F41D.html",
							"GUID-33601DD6-2869-4D23-9621-4C9FA0A5F41D.html",
							"GUID-33601DD6-2869-4D23-9621-4C9FA0A5F41D.html",
							"GUID-33601DD6-2869-4D23-9621-4C9FA0A5F41D.html",
							"GUID-33601DD6-2869-4D23-9621-4C9FA0A5F41D.html",
							"GUID-33601DD6-2869-4D23-9621-4C9FA0A5F41D.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-6065C536-2D5E-4DE6-8693-CDDB9468D005.html",
							"GUID-3D127332-A8D5-479B-A16B-B6ACD00F86FF.html",
							"GUID-3D127332-A8D5-479B-A16B-B6ACD00F86FF.html",
							"GUID-3D127332-A8D5-479B-A16B-B6ACD00F86FF.html",
							"GUID-3D127332-A8D5-479B-A16B-B6ACD00F86FF.html",
							"GUID-3D127332-A8D5-479B-A16B-B6ACD00F86FF.html",
							"GUID-3D127332-A8D5-479B-A16B-B6ACD00F86FF.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-9C6F2B16-5C79-404E-A87D-24194C4561E2.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-18086776-3675-461A-8E20-1C1824C48A90.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-17EAEBB4-16A8-46C6-9DA2-41774C5023FC.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-19673432-24DA-469F-AE16-91B60B020DD0.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-B451162D-7BB5-486E-90F9-214DC4278290.html",
							"GUID-5D80514B-D9E6-4B84-BC67-B1F62C1DBDCC.html",
							"GUID-5D80514B-D9E6-4B84-BC67-B1F62C1DBDCC.html",
							"GUID-5D80514B-D9E6-4B84-BC67-B1F62C1DBDCC.html",
							"GUID-5D80514B-D9E6-4B84-BC67-B1F62C1DBDCC.html",
							"GUID-5D80514B-D9E6-4B84-BC67-B1F62C1DBDCC.html",
							"GUID-5D80514B-D9E6-4B84-BC67-B1F62C1DBDCC.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-B9758F33-8EC6-4BE2-917F-02B470CDF54F.html",
							"GUID-8F3F58C4-1DAB-4979-9D36-26D319D41E01.html",
							"GUID-8F3F58C4-1DAB-4979-9D36-26D319D41E01.html",
							"GUID-8F3F58C4-1DAB-4979-9D36-26D319D41E01.html",
							"GUID-8F3F58C4-1DAB-4979-9D36-26D319D41E01.html",
							"GUID-8F3F58C4-1DAB-4979-9D36-26D319D41E01.html",
							"GUID-8F3F58C4-1DAB-4979-9D36-26D319D41E01.html",
							"GUID-CA3913D4-C1E2-4A14-A6A3-B5A45A97F6C9.html",
							"GUID-CA3913D4-C1E2-4A14-A6A3-B5A45A97F6C9.html",
							"GUID-CA3913D4-C1E2-4A14-A6A3-B5A45A97F6C9.html",
							"GUID-CA3913D4-C1E2-4A14-A6A3-B5A45A97F6C9.html",
							"GUID-6AEC1BD6-F03B-4DC2-86D9-BC6024E3C231.html",
							"GUID-6AEC1BD6-F03B-4DC2-86D9-BC6024E3C231.html",
							"GUID-6AEC1BD6-F03B-4DC2-86D9-BC6024E3C231.html",
							"GUID-6AEC1BD6-F03B-4DC2-86D9-BC6024E3C231.html",
							"GUID-6AEC1BD6-F03B-4DC2-86D9-BC6024E3C231.html",
							"GUID-6AEC1BD6-F03B-4DC2-86D9-BC6024E3C231.html",
							"GUID-C6CC94FF-9D0F-4075-8C4C-A4777AC58474.html",
							"GUID-C6CC94FF-9D0F-4075-8C4C-A4777AC58474.html",
							"GUID-C6CC94FF-9D0F-4075-8C4C-A4777AC58474.html",
							"GUID-C6CC94FF-9D0F-4075-8C4C-A4777AC58474.html",
							"GUID-C6CC94FF-9D0F-4075-8C4C-A4777AC58474.html",
							"GUID-C6CC94FF-9D0F-4075-8C4C-A4777AC58474.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-63E84829-EA54-407E-B1CC-116E021FAB7A.html",
							"GUID-ED18B0C0-F614-4B29-8EA7-114DBFAA74CF.html",
							"GUID-ED18B0C0-F614-4B29-8EA7-114DBFAA74CF.html",
							"GUID-ED18B0C0-F614-4B29-8EA7-114DBFAA74CF.html",
							"GUID-ED18B0C0-F614-4B29-8EA7-114DBFAA74CF.html",
							"GUID-ED18B0C0-F614-4B29-8EA7-114DBFAA74CF.html",
							"GUID-ED18B0C0-F614-4B29-8EA7-114DBFAA74CF.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-6F23D2EF-B6E7-494F-84ED-5F4E4281BEEC.html",
							"GUID-23D21B7F-0C49-4545-967B-8B5C733E6130.html",
							"GUID-23D21B7F-0C49-4545-967B-8B5C733E6130.html",
							"GUID-23D21B7F-0C49-4545-967B-8B5C733E6130.html",
							"GUID-23D21B7F-0C49-4545-967B-8B5C733E6130.html",
							"GUID-23D21B7F-0C49-4545-967B-8B5C733E6130.html",
							"GUID-23D21B7F-0C49-4545-967B-8B5C733E6130.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-6BE3132D-9D0A-432C-8EC4-15AB39D0D0AB.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-1532C09B-053B-48E5-A98E-FE60E8210E2C.html",
							"GUID-326BE6E8-7109-48AF-87ED-2F766BFB5934.html",
							"GUID-326BE6E8-7109-48AF-87ED-2F766BFB5934.html",
							"GUID-326BE6E8-7109-48AF-87ED-2F766BFB5934.html",
							"GUID-326BE6E8-7109-48AF-87ED-2F766BFB5934.html",
							"GUID-326BE6E8-7109-48AF-87ED-2F766BFB5934.html",
							"GUID-326BE6E8-7109-48AF-87ED-2F766BFB5934.html",
							"GUID-139944A2-E205-4723-B424-24F7E5319CBB.html",
							"GUID-139944A2-E205-4723-B424-24F7E5319CBB.html",
							"GUID-139944A2-E205-4723-B424-24F7E5319CBB.html",
							"GUID-139944A2-E205-4723-B424-24F7E5319CBB.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-3155D9C2-F544-4BC5-98B7-EEC72241DFB7.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-69179ECB-8909-45CD-9A7F-E7268E132EE5.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-8BAAE306-6142-458A-97BB-BFE70A468F22.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-60542769-81AD-4E9A-892F-47549D980671.html",
							"GUID-0274D9A9-AC80-43E3-B3D7-2F7ACB6EF33B.html",
							"GUID-0274D9A9-AC80-43E3-B3D7-2F7ACB6EF33B.html",
							"GUID-0274D9A9-AC80-43E3-B3D7-2F7ACB6EF33B.html",
							"GUID-0274D9A9-AC80-43E3-B3D7-2F7ACB6EF33B.html",
							"GUID-0274D9A9-AC80-43E3-B3D7-2F7ACB6EF33B.html",
							"GUID-0274D9A9-AC80-43E3-B3D7-2F7ACB6EF33B.html",
							"GUID-DEF9BEE7-666A-4C41-8A10-C06A45D0294D.html",
							"GUID-DEF9BEE7-666A-4C41-8A10-C06A45D0294D.html",
							"GUID-DEF9BEE7-666A-4C41-8A10-C06A45D0294D.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-0C4247BD-FE52-4439-8BA5-AC0DB82C8A2C.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-990F969B-A523-410A-B363-5970F6C14638.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-FF3F4B34-30C8-46CE-9DC1-B161BBFC621B.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-9EE838C7-EC9B-449B-A065-89402F2576F2.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-265ED9D5-455D-43C3-B82A-8FDF80CEF01A.html",
							"GUID-E2A46EF2-2C2A-4D82-B4CB-CB48A6470410.html",
							"GUID-E2A46EF2-2C2A-4D82-B4CB-CB48A6470410.html",
							"GUID-E2A46EF2-2C2A-4D82-B4CB-CB48A6470410.html",
							"GUID-E2A46EF2-2C2A-4D82-B4CB-CB48A6470410.html",
							"GUID-E2A46EF2-2C2A-4D82-B4CB-CB48A6470410.html",
							"GUID-AB4B99E9-A0E7-437B-A009-10C66075F30C.html",
							"GUID-AB4B99E9-A0E7-437B-A009-10C66075F30C.html",
							"GUID-AB4B99E9-A0E7-437B-A009-10C66075F30C.html",
							"GUID-0A3EFD43-F2CF-4057-8AAF-E8C18636D1A1.html",
							"GUID-0A3EFD43-F2CF-4057-8AAF-E8C18636D1A1.html",
							"GUID-0A3EFD43-F2CF-4057-8AAF-E8C18636D1A1.html",
							"GUID-0A3EFD43-F2CF-4057-8AAF-E8C18636D1A1.html",
							"GUID-0A3EFD43-F2CF-4057-8AAF-E8C18636D1A1.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-2B4E16B1-ABF8-474A-B4FD-DCF816BEB456.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-58FF1B35-1905-43E3-BDBE-FDCAEB3C1108.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-83A3E9E6-DF80-4868-9CE4-AA5C67BD90F0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-DA99B668-971A-44F2-9FE4-E9A146633CB0.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-E11BC382-BE0D-43B8-9E90-7F3679B1355F.html",
							"GUID-05117C73-29E9-4EAD-847C-07F8848E637D.html",
							"GUID-05117C73-29E9-4EAD-847C-07F8848E637D.html",
							"GUID-05117C73-29E9-4EAD-847C-07F8848E637D.html",
							"GUID-05117C73-29E9-4EAD-847C-07F8848E637D.html",
							"GUID-05117C73-29E9-4EAD-847C-07F8848E637D.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-FC9335FB-6AE1-4F4A-B484-45B19D882B5A.html",
							"GUID-8D07D2FD-CA2E-4201-B376-AF770DA9A7EA.html",
							"GUID-8D07D2FD-CA2E-4201-B376-AF770DA9A7EA.html",
							"GUID-8D07D2FD-CA2E-4201-B376-AF770DA9A7EA.html",
							"GUID-8D07D2FD-CA2E-4201-B376-AF770DA9A7EA.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-008B6CD0-A768-4201-B068-1EBA909B9260.html",
							"GUID-082D9EB1-DD48-4638-A6D7-B09FAD68CFD1.html",
							"GUID-082D9EB1-DD48-4638-A6D7-B09FAD68CFD1.html",
							"GUID-082D9EB1-DD48-4638-A6D7-B09FAD68CFD1.html",
							"GUID-082D9EB1-DD48-4638-A6D7-B09FAD68CFD1.html",
							"GUID-082D9EB1-DD48-4638-A6D7-B09FAD68CFD1.html",
							"GUID-082D9EB1-DD48-4638-A6D7-B09FAD68CFD1.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-C7667A7A-5D60-4688-AC44-EFAB2C5DFC5C.html",
							"GUID-B0FCC6E9-74D8-443B-8F61-7317500EEFF3.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-C642CB71-CF06-46CC-9922-1407077E1B3B.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-CAC0E3EC-B120-4A6A-8574-F17455A01A5E.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-DEE3AF7D-97B4-4A2D-8A1E-279868DC0C5B.html",
							"GUID-4B5D0D38-3E38-4109-A20A-66A18773B272.html",
							"GUID-4B5D0D38-3E38-4109-A20A-66A18773B272.html",
							"GUID-4B5D0D38-3E38-4109-A20A-66A18773B272.html",
							"GUID-4B5D0D38-3E38-4109-A20A-66A18773B272.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-F6B8C2BE-93BB-482F-9546-12FB7912C865.html",
							"GUID-7F49124A-639B-485B-8548-282953AF9BDB.html",
							"GUID-7F49124A-639B-485B-8548-282953AF9BDB.html",
							"GUID-7F49124A-639B-485B-8548-282953AF9BDB.html",
							"GUID-7F49124A-639B-485B-8548-282953AF9BDB.html",
							"GUID-7F49124A-639B-485B-8548-282953AF9BDB.html",
							"GUID-7F49124A-639B-485B-8548-282953AF9BDB.html",
							"GUID-0C213E95-1D72-4D87-A542-8C403169905A.html",
							"GUID-0C213E95-1D72-4D87-A542-8C403169905A.html",
							"GUID-0C213E95-1D72-4D87-A542-8C403169905A.html",
							"GUID-0C213E95-1D72-4D87-A542-8C403169905A.html",
							"GUID-0C213E95-1D72-4D87-A542-8C403169905A.html",
							"GUID-D2E00968-3614-40B6-80DE-4CF03F6EA822.html",
							"GUID-D2E00968-3614-40B6-80DE-4CF03F6EA822.html",
							"GUID-D2E00968-3614-40B6-80DE-4CF03F6EA822.html",
							"GUID-05ED5A83-621B-4753-9A98-747A4B51D0ED.html",
							"GUID-05ED5A83-621B-4753-9A98-747A4B51D0ED.html",
							"GUID-05ED5A83-621B-4753-9A98-747A4B51D0ED.html",
							"GUID-05ED5A83-621B-4753-9A98-747A4B51D0ED.html",
							"GUID-15B2929A-D9FD-4BE9-B460-EACF37CB766A.html",
							"GUID-15B2929A-D9FD-4BE9-B460-EACF37CB766A.html",
							"GUID-15B2929A-D9FD-4BE9-B460-EACF37CB766A.html",
							"GUID-228CD50D-67DE-41BE-BD4D-D877D5667C9C.html",
							"GUID-228CD50D-67DE-41BE-BD4D-D877D5667C9C.html",
							"GUID-228CD50D-67DE-41BE-BD4D-D877D5667C9C.html",
							"GUID-228CD50D-67DE-41BE-BD4D-D877D5667C9C.html",
							"GUID-228CD50D-67DE-41BE-BD4D-D877D5667C9C.html",
							"GUID-228CD50D-67DE-41BE-BD4D-D877D5667C9C.html",
							"GUID-5AE30EFB-7B7C-4B4E-8BCF-FAB8D8FB9A89.html",
							"GUID-1884C1BD-2859-4F9B-8930-2563FC2D5806.html",
							"GUID-1884C1BD-2859-4F9B-8930-2563FC2D5806.html",
							"GUID-1884C1BD-2859-4F9B-8930-2563FC2D5806.html",
							"GUID-ECDC8391-8950-4819-A1A9-C9961FAA4A28.html",
							"GUID-ECDC8391-8950-4819-A1A9-C9961FAA4A28.html",
							"GUID-ECDC8391-8950-4819-A1A9-C9961FAA4A28.html",
							"GUID-ECDC8391-8950-4819-A1A9-C9961FAA4A28.html",
							"GUID-09EF2F19-F47A-479E-9BDC-245F47156017.html",
							"GUID-09EF2F19-F47A-479E-9BDC-245F47156017.html",
							"GUID-09EF2F19-F47A-479E-9BDC-245F47156017.html",
							"GUID-0FA47FC0-56FB-4142-8D30-1DCF4630822C.html",
							"GUID-0FA47FC0-56FB-4142-8D30-1DCF4630822C.html",
							"GUID-0FA47FC0-56FB-4142-8D30-1DCF4630822C.html",
							"GUID-0FA47FC0-56FB-4142-8D30-1DCF4630822C.html",
							"GUID-69B2EBFA-D8E2-49BF-8191-62EA2F423BF0.html",
							"GUID-69B2EBFA-D8E2-49BF-8191-62EA2F423BF0.html",
							"GUID-69B2EBFA-D8E2-49BF-8191-62EA2F423BF0.html",
							"GUID-69B2EBFA-D8E2-49BF-8191-62EA2F423BF0.html",
							"GUID-69B2EBFA-D8E2-49BF-8191-62EA2F423BF0.html",
							"GUID-3B616A02-D750-4527-8DEE-F2813CFF7E6C.html",
							"GUID-3B616A02-D750-4527-8DEE-F2813CFF7E6C.html",
							"GUID-3B616A02-D750-4527-8DEE-F2813CFF7E6C.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-4625117E-A939-44EE-BBF7-DBA7AD015F21.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-3AC113E5-F369-44CF-B126-C38669674C51.html",
							"GUID-B2C4C893-00FD-4B14-90F7-6AF0BDB868E7.html",
							"GUID-B2C4C893-00FD-4B14-90F7-6AF0BDB868E7.html",
							"GUID-B2C4C893-00FD-4B14-90F7-6AF0BDB868E7.html",
							"GUID-B2C4C893-00FD-4B14-90F7-6AF0BDB868E7.html",
							"GUID-8AACCF8D-A5AF-4355-AB80-0A5347C1F0D6.html",
							"GUID-8AACCF8D-A5AF-4355-AB80-0A5347C1F0D6.html",
							"GUID-8AACCF8D-A5AF-4355-AB80-0A5347C1F0D6.html",
							"GUID-8AACCF8D-A5AF-4355-AB80-0A5347C1F0D6.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-F8D3500E-80D6-419C-958A-CCB9C85B6CAF.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-D2535796-AE16-4FA5-AE47-F3B133B92327.html",
							"GUID-DDF2F979-BF4C-44FD-BB0E-DEFE99C8E1DA.html",
							"GUID-DDF2F979-BF4C-44FD-BB0E-DEFE99C8E1DA.html",
							"GUID-DDF2F979-BF4C-44FD-BB0E-DEFE99C8E1DA.html",
							"GUID-DDF2F979-BF4C-44FD-BB0E-DEFE99C8E1DA.html",
							"GUID-DDF2F979-BF4C-44FD-BB0E-DEFE99C8E1DA.html",
							"GUID-DDF2F979-BF4C-44FD-BB0E-DEFE99C8E1DA.html",
							"GUID-D76DC993-4CD3-4C65-92DB-14DEAB57BB27.html",
							"GUID-4F773C2C-C548-4F4B-841F-2C2C5900FBDF.html",
							"GUID-4F773C2C-C548-4F4B-841F-2C2C5900FBDF.html",
							"GUID-4F773C2C-C548-4F4B-841F-2C2C5900FBDF.html",
							"GUID-39087128-B789-43C2-9051-FF6B16C602D8.html",
							"GUID-39087128-B789-43C2-9051-FF6B16C602D8.html",
							"GUID-39087128-B789-43C2-9051-FF6B16C602D8.html",
							"GUID-39087128-B789-43C2-9051-FF6B16C602D8.html",
							"GUID-39087128-B789-43C2-9051-FF6B16C602D8.html",
							"GUID-39087128-B789-43C2-9051-FF6B16C602D8.html",
							"GUID-696B5441-B8C4-4CC1-BCCC-A0BF436D411C.html",
							"GUID-696B5441-B8C4-4CC1-BCCC-A0BF436D411C.html",
							"GUID-696B5441-B8C4-4CC1-BCCC-A0BF436D411C.html",
							"GUID-05688223-4365-4430-8F45-21B54F07FFB5.html",
							"GUID-05688223-4365-4430-8F45-21B54F07FFB5.html",
							"GUID-05688223-4365-4430-8F45-21B54F07FFB5.html",
							"GUID-7DA9A0EF-BA77-4B60-A11F-B908DEAD1BE7.html",
							"GUID-7DA9A0EF-BA77-4B60-A11F-B908DEAD1BE7.html",
							"GUID-7DA9A0EF-BA77-4B60-A11F-B908DEAD1BE7.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-B6CFE3F9-30F7-4067-B4FD-735253EC028E.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-7CCB132F-5845-4C15-AB31-EECB0F5A5723.html",
							"GUID-0924570F-F980-46E8-AC04-3891920C141E.html",
							"GUID-0924570F-F980-46E8-AC04-3891920C141E.html",
							"GUID-0924570F-F980-46E8-AC04-3891920C141E.html",
							"GUID-0924570F-F980-46E8-AC04-3891920C141E.html",
							"GUID-0924570F-F980-46E8-AC04-3891920C141E.html",
							"GUID-4FB260C5-55E6-4E39-85B4-DD70BB05B922.html",
							"GUID-4FB260C5-55E6-4E39-85B4-DD70BB05B922.html",
							"GUID-4FB260C5-55E6-4E39-85B4-DD70BB05B922.html",
							"GUID-4FB260C5-55E6-4E39-85B4-DD70BB05B922.html",
							"GUID-4FB260C5-55E6-4E39-85B4-DD70BB05B922.html",
							"GUID-52D042FB-F60D-4A4F-94A4-103128DEF604.html",
							"GUID-52D042FB-F60D-4A4F-94A4-103128DEF604.html",
							"GUID-52D042FB-F60D-4A4F-94A4-103128DEF604.html",
							"GUID-A4D852FB-4A68-4096-8395-1AA3B2DC9FAA.html",
							"GUID-A4D852FB-4A68-4096-8395-1AA3B2DC9FAA.html",
							"GUID-A4D852FB-4A68-4096-8395-1AA3B2DC9FAA.html",
							"GUID-A4D852FB-4A68-4096-8395-1AA3B2DC9FAA.html",
							"GUID-00731900-7B6C-42F1-A7BD-F9F7450D3600.html",
							"GUID-00731900-7B6C-42F1-A7BD-F9F7450D3600.html",
							"GUID-00731900-7B6C-42F1-A7BD-F9F7450D3600.html",
							"GUID-00731900-7B6C-42F1-A7BD-F9F7450D3600.html",
							"GUID-00731900-7B6C-42F1-A7BD-F9F7450D3600.html",
							"GUID-00731900-7B6C-42F1-A7BD-F9F7450D3600.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-60DFB271-66B4-4042-9D04-C8BA5BFBF391.html",
							"GUID-A2F2FCBB-C950-48DE-953A-1042AE6F5FB3.html",
							"GUID-A2F2FCBB-C950-48DE-953A-1042AE6F5FB3.html",
							"GUID-A2F2FCBB-C950-48DE-953A-1042AE6F5FB3.html",
							"GUID-A2F2FCBB-C950-48DE-953A-1042AE6F5FB3.html",
							"GUID-A2F2FCBB-C950-48DE-953A-1042AE6F5FB3.html",
							"GUID-A2F2FCBB-C950-48DE-953A-1042AE6F5FB3.html",
							"GUID-34F80898-63A3-46F7-B5EC-669CC0A89DAE.html",
							"GUID-34F80898-63A3-46F7-B5EC-669CC0A89DAE.html",
							"GUID-34F80898-63A3-46F7-B5EC-669CC0A89DAE.html",
							"GUID-34F80898-63A3-46F7-B5EC-669CC0A89DAE.html",
							"GUID-612707E0-4C71-40F1-B820-B44CFC4A2573.html",
							"GUID-612707E0-4C71-40F1-B820-B44CFC4A2573.html",
							"GUID-612707E0-4C71-40F1-B820-B44CFC4A2573.html",
							"GUID-612707E0-4C71-40F1-B820-B44CFC4A2573.html",
							"GUID-612707E0-4C71-40F1-B820-B44CFC4A2573.html",
							"GUID-78138D90-0366-4702-91C7-86ADDC7DCC13.html",
							"GUID-78138D90-0366-4702-91C7-86ADDC7DCC13.html",
							"GUID-78138D90-0366-4702-91C7-86ADDC7DCC13.html",
							"GUID-9BD25F40-82F5-447B-AED0-BD21FC7D0681.html",
							"GUID-9BD25F40-82F5-447B-AED0-BD21FC7D0681.html",
							"GUID-9BD25F40-82F5-447B-AED0-BD21FC7D0681.html",
							"GUID-9BD25F40-82F5-447B-AED0-BD21FC7D0681.html",
							"GUID-9BD25F40-82F5-447B-AED0-BD21FC7D0681.html",
							"GUID-9BD25F40-82F5-447B-AED0-BD21FC7D0681.html",
							"GUID-E36D97BD-C847-4199-95DA-E0AF04A11C0D.html",
							"GUID-E36D97BD-C847-4199-95DA-E0AF04A11C0D.html",
							"GUID-E36D97BD-C847-4199-95DA-E0AF04A11C0D.html",
							"GUID-B37F9580-01DC-4D9C-862B-D001EE912110.html",
							"GUID-B37F9580-01DC-4D9C-862B-D001EE912110.html",
							"GUID-B37F9580-01DC-4D9C-862B-D001EE912110.html",
							"GUID-D2D8E9C8-0778-41E2-8F0B-194954B92250.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-0C4D983F-50CF-4CFD-8FFB-CA51C091820D.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-C80E17FD-6D59-47C4-A5A2-69318E6F9E3E.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-7BF1C11D-B1A1-4E29-A69A-085FC0721254.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-EB26FB22-0929-4685-BB76-2AA971E75DB0.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-24D38A62-4632-4530-8DFA-B39ADBEC5A3D.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-44B4E502-12AB-42ED-80DE-226809A1A6A6.html",
							"GUID-A90536A8-B111-481A-9CAE-2D4C8CFB3D5E.html",
							"GUID-A90536A8-B111-481A-9CAE-2D4C8CFB3D5E.html",
							"GUID-A90536A8-B111-481A-9CAE-2D4C8CFB3D5E.html",
							"GUID-A90536A8-B111-481A-9CAE-2D4C8CFB3D5E.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-2AB03677-A266-4087-B18B-A00FBE472751.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-11351408-A186-4464-B00D-D711D33FC0F5.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-8514B06D-F1ED-472C-B8E5-E09980DDCA00.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-607EFC92-CC2D-4A1E-BC1C-A8D334FDAE13.html",
							"GUID-FFA052F9-19D3-42BA-8C32-2844E4D7AF9E.html",
							"GUID-FFA052F9-19D3-42BA-8C32-2844E4D7AF9E.html",
							"GUID-FFA052F9-19D3-42BA-8C32-2844E4D7AF9E.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-F7821B0E-C02F-483A-9E79-51A96DA28785.html",
							"GUID-A75B09DD-709D-4B79-9757-6361C2F83560.html",
							"GUID-A75B09DD-709D-4B79-9757-6361C2F83560.html",
							"GUID-A75B09DD-709D-4B79-9757-6361C2F83560.html",
							"GUID-A75B09DD-709D-4B79-9757-6361C2F83560.html",
							"GUID-A75B09DD-709D-4B79-9757-6361C2F83560.html",
							"GUID-A75B09DD-709D-4B79-9757-6361C2F83560.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-8D01FBAB-A5FA-4897-80E7-90310958BE9C.html",
							"GUID-6EDD246F-4BDF-4E35-BEF8-9DFB602D9332.html",
							"GUID-6EDD246F-4BDF-4E35-BEF8-9DFB602D9332.html",
							"GUID-6EDD246F-4BDF-4E35-BEF8-9DFB602D9332.html",
							"GUID-6EDD246F-4BDF-4E35-BEF8-9DFB602D9332.html",
							"GUID-6EDD246F-4BDF-4E35-BEF8-9DFB602D9332.html",
							"GUID-6EDD246F-4BDF-4E35-BEF8-9DFB602D9332.html",
							"GUID-855F6FEA-7CD6-4760-8C90-58D7F7963A9E.html",
							"GUID-855F6FEA-7CD6-4760-8C90-58D7F7963A9E.html",
							"GUID-855F6FEA-7CD6-4760-8C90-58D7F7963A9E.html",
							"GUID-855F6FEA-7CD6-4760-8C90-58D7F7963A9E.html",
							"GUID-855F6FEA-7CD6-4760-8C90-58D7F7963A9E.html",
							"GUID-855F6FEA-7CD6-4760-8C90-58D7F7963A9E.html",
							"GUID-72E6650E-1C11-4917-8C93-F45EF0D59244.html",
							"GUID-72E6650E-1C11-4917-8C93-F45EF0D59244.html",
							"GUID-72E6650E-1C11-4917-8C93-F45EF0D59244.html",
							"GUID-BAB3F33C-010D-4328-836A-D7A6955CD441.html",
							"GUID-BAB3F33C-010D-4328-836A-D7A6955CD441.html",
							"GUID-BAB3F33C-010D-4328-836A-D7A6955CD441.html",
							"GUID-A7616A65-D919-403D-B052-4EAE887FF5AF.html",
							"GUID-A7616A65-D919-403D-B052-4EAE887FF5AF.html",
							"GUID-A7616A65-D919-403D-B052-4EAE887FF5AF.html",
							"GUID-A7616A65-D919-403D-B052-4EAE887FF5AF.html",
							"GUID-A7616A65-D919-403D-B052-4EAE887FF5AF.html",
							"GUID-A7616A65-D919-403D-B052-4EAE887FF5AF.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-4D80AFEC-3292-477F-8723-54C9434853F4.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-EF627C2D-2775-4DFF-B619-37C3AE56660C.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-277E5494-5371-4991-9BEB-EF1616D8BC68.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-40F3DA06-6EB0-4FEA-AAD2-08EC8DA5DE2F.html",
							"GUID-BC874760-4FE7-4B02-80FC-AAFC15D4CE0B.html",
							"GUID-BC874760-4FE7-4B02-80FC-AAFC15D4CE0B.html",
							"GUID-BC874760-4FE7-4B02-80FC-AAFC15D4CE0B.html",
							"GUID-389D1A67-F892-4990-87E8-7E1C06C09CCB.html",
							"GUID-389D1A67-F892-4990-87E8-7E1C06C09CCB.html",
							"GUID-389D1A67-F892-4990-87E8-7E1C06C09CCB.html",
							"GUID-389D1A67-F892-4990-87E8-7E1C06C09CCB.html",
							"GUID-389D1A67-F892-4990-87E8-7E1C06C09CCB.html",
							"GUID-389D1A67-F892-4990-87E8-7E1C06C09CCB.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-2F15E45D-79E7-4621-89BD-A96670B171E4.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-B04887D6-7666-4F11-9279-9613EC0EF8F8.html",
							"GUID-60144950-D944-4668-82FC-94FBCF339CB9.html",
							"GUID-60144950-D944-4668-82FC-94FBCF339CB9.html",
							"GUID-60144950-D944-4668-82FC-94FBCF339CB9.html",
							"GUID-60144950-D944-4668-82FC-94FBCF339CB9.html",
							"GUID-60144950-D944-4668-82FC-94FBCF339CB9.html",
							"GUID-60144950-D944-4668-82FC-94FBCF339CB9.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-81FAF9B7-AD7E-4768-B973-A45BD959EF44.html",
							"GUID-53BDB6A6-65FE-405C-813A-19E29863B79F.html",
							"GUID-53BDB6A6-65FE-405C-813A-19E29863B79F.html",
							"GUID-53BDB6A6-65FE-405C-813A-19E29863B79F.html",
							"GUID-53BDB6A6-65FE-405C-813A-19E29863B79F.html",
							"GUID-53BDB6A6-65FE-405C-813A-19E29863B79F.html",
							"GUID-72D7337D-8BF6-4A88-876B-5322355A45E6.html",
							"GUID-72D7337D-8BF6-4A88-876B-5322355A45E6.html",
							"GUID-72D7337D-8BF6-4A88-876B-5322355A45E6.html",
							"GUID-2B79AD6C-CBD1-4FBD-A8AF-C2606E6B90DE.html",
							"GUID-2B79AD6C-CBD1-4FBD-A8AF-C2606E6B90DE.html",
							"GUID-2B79AD6C-CBD1-4FBD-A8AF-C2606E6B90DE.html",
							"GUID-2B79AD6C-CBD1-4FBD-A8AF-C2606E6B90DE.html",
							"GUID-2B79AD6C-CBD1-4FBD-A8AF-C2606E6B90DE.html",
							"GUID-F61FBFCB-7367-4392-A4CE-28F4D9281FAA.html",
							"GUID-F61FBFCB-7367-4392-A4CE-28F4D9281FAA.html",
							"GUID-F61FBFCB-7367-4392-A4CE-28F4D9281FAA.html",
							"GUID-F61FBFCB-7367-4392-A4CE-28F4D9281FAA.html",
							"GUID-F61FBFCB-7367-4392-A4CE-28F4D9281FAA.html",
							"GUID-F61FBFCB-7367-4392-A4CE-28F4D9281FAA.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-D7AE1DC7-DE3F-4CFC-9D48-10072E5BB3D2.html",
							"GUID-CC405A6D-A3DB-437D-8A1A-A05672F88B06.html",
							"GUID-CC405A6D-A3DB-437D-8A1A-A05672F88B06.html",
							"GUID-CC405A6D-A3DB-437D-8A1A-A05672F88B06.html",
							"GUID-423D57AB-1732-46C4-B8B8-76A3483D6CB9.html",
							"GUID-423D57AB-1732-46C4-B8B8-76A3483D6CB9.html",
							"GUID-423D57AB-1732-46C4-B8B8-76A3483D6CB9.html",
							"GUID-87954F50-A1D5-4E59-810C-09DC91AB81FA.html",
							"GUID-87954F50-A1D5-4E59-810C-09DC91AB81FA.html",
							"GUID-87954F50-A1D5-4E59-810C-09DC91AB81FA.html",
							"GUID-92ADB2C2-D9EA-491D-9BB2-893468E4E0F4.html",
							"GUID-92ADB2C2-D9EA-491D-9BB2-893468E4E0F4.html",
							"GUID-92ADB2C2-D9EA-491D-9BB2-893468E4E0F4.html",
							"GUID-C6A2D6A0-39E1-4427-A87F-128F016036D5.html",
							"GUID-C6A2D6A0-39E1-4427-A87F-128F016036D5.html",
							"GUID-C6A2D6A0-39E1-4427-A87F-128F016036D5.html",
							"GUID-AC567D86-BC0E-4E7F-B148-0685C3E92119.html",
							"GUID-AC567D86-BC0E-4E7F-B148-0685C3E92119.html",
							"GUID-AC567D86-BC0E-4E7F-B148-0685C3E92119.html",
							"GUID-AC567D86-BC0E-4E7F-B148-0685C3E92119.html",
							"GUID-AC567D86-BC0E-4E7F-B148-0685C3E92119.html",
							"GUID-AC567D86-BC0E-4E7F-B148-0685C3E92119.html",
							"GUID-624C0988-7A11-41A9-B55F-805AA1A0AFB3.html",
							"GUID-624C0988-7A11-41A9-B55F-805AA1A0AFB3.html",
							"GUID-624C0988-7A11-41A9-B55F-805AA1A0AFB3.html",
							"GUID-624C0988-7A11-41A9-B55F-805AA1A0AFB3.html",
							"GUID-624C0988-7A11-41A9-B55F-805AA1A0AFB3.html",
							"GUID-624C0988-7A11-41A9-B55F-805AA1A0AFB3.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-843764D1-5960-4D99-9D2D-ABFB2785D009.html",
							"GUID-0160A87C-BE6B-4735-A05B-E1DEC439ACDD.html",
							"GUID-0160A87C-BE6B-4735-A05B-E1DEC439ACDD.html",
							"GUID-0160A87C-BE6B-4735-A05B-E1DEC439ACDD.html",
							"GUID-0160A87C-BE6B-4735-A05B-E1DEC439ACDD.html",
							"GUID-0160A87C-BE6B-4735-A05B-E1DEC439ACDD.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-8C16F14A-E7F7-4847-8379-4C16511FDF66.html",
							"GUID-4EE34331-4DE8-4322-AF41-210B5E7F1979.html",
							"GUID-4EE34331-4DE8-4322-AF41-210B5E7F1979.html",
							"GUID-4EE34331-4DE8-4322-AF41-210B5E7F1979.html",
							"GUID-4EE34331-4DE8-4322-AF41-210B5E7F1979.html",
							"GUID-4EE34331-4DE8-4322-AF41-210B5E7F1979.html",
							"GUID-4EE34331-4DE8-4322-AF41-210B5E7F1979.html",
							"GUID-33D0C8D6-8824-4440-A3A8-E418A64B524B.html",
							"GUID-33D0C8D6-8824-4440-A3A8-E418A64B524B.html",
							"GUID-33D0C8D6-8824-4440-A3A8-E418A64B524B.html",
							"GUID-33D0C8D6-8824-4440-A3A8-E418A64B524B.html",
							"GUID-33D0C8D6-8824-4440-A3A8-E418A64B524B.html",
							"GUID-33D0C8D6-8824-4440-A3A8-E418A64B524B.html",
							"GUID-689276FE-78AE-42FA-B58E-34E65D8314A5.html",
							"GUID-689276FE-78AE-42FA-B58E-34E65D8314A5.html",
							"GUID-689276FE-78AE-42FA-B58E-34E65D8314A5.html",
							"GUID-689276FE-78AE-42FA-B58E-34E65D8314A5.html",
							"GUID-689276FE-78AE-42FA-B58E-34E65D8314A5.html",
							"GUID-1E6ACF42-8F3E-4A77-9989-9771A1236357.html",
							"GUID-1E6ACF42-8F3E-4A77-9989-9771A1236357.html",
							"GUID-1E6ACF42-8F3E-4A77-9989-9771A1236357.html",
							"GUID-1E6ACF42-8F3E-4A77-9989-9771A1236357.html",
							"GUID-1E6ACF42-8F3E-4A77-9989-9771A1236357.html",
							"GUID-1E6ACF42-8F3E-4A77-9989-9771A1236357.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-18A082A5-9260-4B1B-8364-967857B88A37.html",
							"GUID-D439489A-2A5E-4B7A-A234-0F06CC87FB08.html",
							"GUID-D439489A-2A5E-4B7A-A234-0F06CC87FB08.html",
							"GUID-D439489A-2A5E-4B7A-A234-0F06CC87FB08.html",
							"GUID-0CF7A0B0-BDFA-4B6C-AE1E-7F61E9CFA6FA.html",
							"GUID-0CF7A0B0-BDFA-4B6C-AE1E-7F61E9CFA6FA.html",
							"GUID-0CF7A0B0-BDFA-4B6C-AE1E-7F61E9CFA6FA.html",
							"GUID-5C1324DB-8950-4E87-B3C1-2635E868B24D.html",
							"GUID-5C1324DB-8950-4E87-B3C1-2635E868B24D.html",
							"GUID-5C1324DB-8950-4E87-B3C1-2635E868B24D.html",
							"GUID-D5B3BDBA-488D-457F-B721-83161B869C1D.html",
							"GUID-D5B3BDBA-488D-457F-B721-83161B869C1D.html",
							"GUID-D5B3BDBA-488D-457F-B721-83161B869C1D.html",
							"GUID-D5B3BDBA-488D-457F-B721-83161B869C1D.html",
							"GUID-D5B3BDBA-488D-457F-B721-83161B869C1D.html",
							"GUID-BC9D600E-E3DA-4EF2-BF9F-24D088A072E2.html",
							"GUID-BC9D600E-E3DA-4EF2-BF9F-24D088A072E2.html",
							"GUID-BC9D600E-E3DA-4EF2-BF9F-24D088A072E2.html",
							"GUID-BC9D600E-E3DA-4EF2-BF9F-24D088A072E2.html",
							"GUID-BC9D600E-E3DA-4EF2-BF9F-24D088A072E2.html",
							"GUID-BC9D600E-E3DA-4EF2-BF9F-24D088A072E2.html",
							"GUID-1076C2EA-7DC5-419E-A3E7-BBA92CFF5CFB.html",
							"GUID-890B63B7-0798-40C8-90F2-75C029CC66FC.html",
							"GUID-890B63B7-0798-40C8-90F2-75C029CC66FC.html",
							"GUID-890B63B7-0798-40C8-90F2-75C029CC66FC.html",
							"GUID-890B63B7-0798-40C8-90F2-75C029CC66FC.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-9DF34C88-1362-40AF-96CB-91D235E15F99.html",
							"GUID-8AE11F4C-45C5-4D5D-91FA-DC93DCFAAF74.html",
							"GUID-8AE11F4C-45C5-4D5D-91FA-DC93DCFAAF74.html",
							"GUID-8AE11F4C-45C5-4D5D-91FA-DC93DCFAAF74.html",
							"GUID-8AE11F4C-45C5-4D5D-91FA-DC93DCFAAF74.html",
							"GUID-8AE11F4C-45C5-4D5D-91FA-DC93DCFAAF74.html",
							"GUID-8AE11F4C-45C5-4D5D-91FA-DC93DCFAAF74.html",
							"GUID-AB645995-18DD-49C5-8A13-52F35B0D6E60.html",
							"GUID-AB645995-18DD-49C5-8A13-52F35B0D6E60.html",
							"GUID-AB645995-18DD-49C5-8A13-52F35B0D6E60.html",
							"GUID-AB645995-18DD-49C5-8A13-52F35B0D6E60.html",
							"GUID-AB645995-18DD-49C5-8A13-52F35B0D6E60.html",
							"GUID-AB645995-18DD-49C5-8A13-52F35B0D6E60.html",
							"GUID-6CA1CA3F-29AE-487B-BD5E-5803D9E9A04E.html",
							"GUID-6CA1CA3F-29AE-487B-BD5E-5803D9E9A04E.html",
							"GUID-6CA1CA3F-29AE-487B-BD5E-5803D9E9A04E.html",
							"GUID-6CA1CA3F-29AE-487B-BD5E-5803D9E9A04E.html",
							"GUID-6CA1CA3F-29AE-487B-BD5E-5803D9E9A04E.html",
							"GUID-6CA1CA3F-29AE-487B-BD5E-5803D9E9A04E.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-13542F9F-FB82-4857-A222-F39F35DA80C7.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-BEC868B6-5E68-43CA-B0BD-06EA115D4339.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA63B30E-EABD-4DDB-B676-1416AB83A279.html",
							"GUID-CA22AE73-6689-44DB-8A43-36DF320C8ECC.html",
							"GUID-CA22AE73-6689-44DB-8A43-36DF320C8ECC.html",
							"GUID-CA22AE73-6689-44DB-8A43-36DF320C8ECC.html",
							"GUID-CA22AE73-6689-44DB-8A43-36DF320C8ECC.html",
							"GUID-CA22AE73-6689-44DB-8A43-36DF320C8ECC.html",
							"GUID-CA22AE73-6689-44DB-8A43-36DF320C8ECC.html",
							"GUID-E315EB00-D610-404F-9F5C-F62B206F19B5.html",
							"GUID-E315EB00-D610-404F-9F5C-F62B206F19B5.html",
							"GUID-E315EB00-D610-404F-9F5C-F62B206F19B5.html",
							"GUID-58EA08F2-E38D-48FD-BD75-C2972C0EE761.html",
							"GUID-A7C34B62-ABEF-45C5-B779-AF2D81683D07.html",
							"GUID-A7C34B62-ABEF-45C5-B779-AF2D81683D07.html",
							"GUID-A7C34B62-ABEF-45C5-B779-AF2D81683D07.html",
							"GUID-A7C34B62-ABEF-45C5-B779-AF2D81683D07.html",
							"GUID-0294C9E1-7127-4AF0-8CCD-631E29E3C785.html",
							"GUID-0294C9E1-7127-4AF0-8CCD-631E29E3C785.html",
							"GUID-0294C9E1-7127-4AF0-8CCD-631E29E3C785.html",
							"GUID-0294C9E1-7127-4AF0-8CCD-631E29E3C785.html",
							"GUID-0294C9E1-7127-4AF0-8CCD-631E29E3C785.html",
							"GUID-0294C9E1-7127-4AF0-8CCD-631E29E3C785.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-581E77E1-07AF-47FA-A0EA-F48F1C4BF0F9.html",
							"GUID-37CA74FB-74AF-4615-B089-1902901AAD3D.html",
							"GUID-37CA74FB-74AF-4615-B089-1902901AAD3D.html",
							"GUID-37CA74FB-74AF-4615-B089-1902901AAD3D.html",
							"GUID-37CA74FB-74AF-4615-B089-1902901AAD3D.html",
							"GUID-8F880B26-124F-4B37-B4E0-912585C0C33C.html",
							"GUID-8F880B26-124F-4B37-B4E0-912585C0C33C.html",
							"GUID-8F880B26-124F-4B37-B4E0-912585C0C33C.html",
							"GUID-8F880B26-124F-4B37-B4E0-912585C0C33C.html",
							"GUID-8F880B26-124F-4B37-B4E0-912585C0C33C.html",
							"GUID-8F880B26-124F-4B37-B4E0-912585C0C33C.html",
							"GUID-AEA4FBB5-4047-4C09-BA5E-3A8632309804.html",
							"GUID-AEA4FBB5-4047-4C09-BA5E-3A8632309804.html",
							"GUID-AEA4FBB5-4047-4C09-BA5E-3A8632309804.html",
							"GUID-AEA4FBB5-4047-4C09-BA5E-3A8632309804.html",
							"GUID-AEA4FBB5-4047-4C09-BA5E-3A8632309804.html",
							"GUID-AEA4FBB5-4047-4C09-BA5E-3A8632309804.html",
							"GUID-94FCFD40-F5DF-44E5-875F-FD3015C5F609.html",
							"GUID-94FCFD40-F5DF-44E5-875F-FD3015C5F609.html",
							"GUID-94FCFD40-F5DF-44E5-875F-FD3015C5F609.html",
							"GUID-94FCFD40-F5DF-44E5-875F-FD3015C5F609.html",
							"GUID-94FCFD40-F5DF-44E5-875F-FD3015C5F609.html",
							"GUID-94FCFD40-F5DF-44E5-875F-FD3015C5F609.html",
							"GUID-31666506-BADF-4480-824E-431D62A5E22D.html",
							"GUID-31666506-BADF-4480-824E-431D62A5E22D.html",
							"GUID-31666506-BADF-4480-824E-431D62A5E22D.html",
							"GUID-31666506-BADF-4480-824E-431D62A5E22D.html",
							"GUID-31666506-BADF-4480-824E-431D62A5E22D.html",
							"GUID-31666506-BADF-4480-824E-431D62A5E22D.html",
							"GUID-CDAC01F6-8490-46B6-8A2D-678A1F3501AA.html",
							"GUID-CDAC01F6-8490-46B6-8A2D-678A1F3501AA.html",
							"GUID-CDAC01F6-8490-46B6-8A2D-678A1F3501AA.html",
							"GUID-CDAC01F6-8490-46B6-8A2D-678A1F3501AA.html",
							"GUID-CDAC01F6-8490-46B6-8A2D-678A1F3501AA.html",
							"GUID-CDAC01F6-8490-46B6-8A2D-678A1F3501AA.html",
							"GUID-1CBBD46A-55BE-423A-A8DC-153D7CD6830F.html",
							"GUID-1CBBD46A-55BE-423A-A8DC-153D7CD6830F.html",
							"GUID-1CBBD46A-55BE-423A-A8DC-153D7CD6830F.html",
							"GUID-1CBBD46A-55BE-423A-A8DC-153D7CD6830F.html",
							"GUID-25796438-FB77-4094-AAA4-E161F18FEBB9.html",
							"GUID-25796438-FB77-4094-AAA4-E161F18FEBB9.html",
							"GUID-25796438-FB77-4094-AAA4-E161F18FEBB9.html",
							"GUID-25796438-FB77-4094-AAA4-E161F18FEBB9.html",
							"GUID-25796438-FB77-4094-AAA4-E161F18FEBB9.html",
							"GUID-25796438-FB77-4094-AAA4-E161F18FEBB9.html",
							"GUID-A019EA72-1DD0-4DFA-AB2A-71ABCD141E79.html",
							"GUID-A019EA72-1DD0-4DFA-AB2A-71ABCD141E79.html",
							"GUID-A019EA72-1DD0-4DFA-AB2A-71ABCD141E79.html",
							"GUID-A019EA72-1DD0-4DFA-AB2A-71ABCD141E79.html",
							"GUID-4F1D1122-A9F8-4114-8BA2-343CFA6F052B.html",
							"GUID-4F1D1122-A9F8-4114-8BA2-343CFA6F052B.html",
							"GUID-4F1D1122-A9F8-4114-8BA2-343CFA6F052B.html",
							"GUID-4F1D1122-A9F8-4114-8BA2-343CFA6F052B.html",
							"GUID-4F1D1122-A9F8-4114-8BA2-343CFA6F052B.html",
							"GUID-4F1D1122-A9F8-4114-8BA2-343CFA6F052B.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-5B9423B4-4EAD-4ADC-A3DD-55535E32827F.html",
							"GUID-42116EA0-41D4-48B6-B238-1AC394278CA9.html",
							"GUID-42116EA0-41D4-48B6-B238-1AC394278CA9.html",
							"GUID-42116EA0-41D4-48B6-B238-1AC394278CA9.html",
							"GUID-42116EA0-41D4-48B6-B238-1AC394278CA9.html",
							"GUID-42116EA0-41D4-48B6-B238-1AC394278CA9.html",
							"GUID-42116EA0-41D4-48B6-B238-1AC394278CA9.html",
							"GUID-5CDF43DB-95CE-4DF7-986C-FA2634621B35.html",
							"GUID-5CDF43DB-95CE-4DF7-986C-FA2634621B35.html",
							"GUID-5CDF43DB-95CE-4DF7-986C-FA2634621B35.html",
							"GUID-5CDF43DB-95CE-4DF7-986C-FA2634621B35.html",
							"GUID-5CDF43DB-95CE-4DF7-986C-FA2634621B35.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-4A533CD6-F51B-40FF-B246-4C311EF2D4E4.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3E4E680B-B263-4F0A-B68B-578D2A1EC74C.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-3DCBDC86-05C6-47C7-B751-ADCC6A61A4BF.html",
							"GUID-1D3B4DCB-0432-4236-B2AC-C0505B174FFF.html",
							"GUID-1D3B4DCB-0432-4236-B2AC-C0505B174FFF.html",
							"GUID-1D3B4DCB-0432-4236-B2AC-C0505B174FFF.html",
							"GUID-1D3B4DCB-0432-4236-B2AC-C0505B174FFF.html",
							"GUID-1D3B4DCB-0432-4236-B2AC-C0505B174FFF.html",
							"GUID-1D3B4DCB-0432-4236-B2AC-C0505B174FFF.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-54143239-B038-4652-A42A-8726BC64E3D8.html",
							"GUID-253C4517-9A41-42CB-BE66-F8885F6FE3E8.html",
							"GUID-253C4517-9A41-42CB-BE66-F8885F6FE3E8.html",
							"GUID-253C4517-9A41-42CB-BE66-F8885F6FE3E8.html",
							"GUID-253C4517-9A41-42CB-BE66-F8885F6FE3E8.html",
							"GUID-253C4517-9A41-42CB-BE66-F8885F6FE3E8.html",
							"GUID-3F7A7AD0-BF6D-4D89-8EA3-CD8F046E3DF1.html",
							"GUID-3F7A7AD0-BF6D-4D89-8EA3-CD8F046E3DF1.html",
							"GUID-3F7A7AD0-BF6D-4D89-8EA3-CD8F046E3DF1.html",
							"GUID-3F7A7AD0-BF6D-4D89-8EA3-CD8F046E3DF1.html",
							"GUID-3F7A7AD0-BF6D-4D89-8EA3-CD8F046E3DF1.html",
							"GUID-3F7A7AD0-BF6D-4D89-8EA3-CD8F046E3DF1.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-3E71CAB9-E090-497F-8688-5EB3A9925A14.html",
							"GUID-48D3AA1B-433F-4BE0-8DCA-38ADDF677E3B.html",
							"GUID-48D3AA1B-433F-4BE0-8DCA-38ADDF677E3B.html",
							"GUID-48D3AA1B-433F-4BE0-8DCA-38ADDF677E3B.html",
							"GUID-48D3AA1B-433F-4BE0-8DCA-38ADDF677E3B.html",
							"GUID-48D3AA1B-433F-4BE0-8DCA-38ADDF677E3B.html",
							"GUID-48D3AA1B-433F-4BE0-8DCA-38ADDF677E3B.html",
							"GUID-025D2A2B-D021-435E-B34E-55689F75B189.html",
							"GUID-025D2A2B-D021-435E-B34E-55689F75B189.html",
							"GUID-025D2A2B-D021-435E-B34E-55689F75B189.html",
							"GUID-025D2A2B-D021-435E-B34E-55689F75B189.html",
							"GUID-025D2A2B-D021-435E-B34E-55689F75B189.html",
							"GUID-025D2A2B-D021-435E-B34E-55689F75B189.html",
							"GUID-F35BADF5-5469-4970-B3C5-52AB1E2287AB.html",
							"GUID-89D86BB6-4035-47CA-BEE8-9509684519BE.html",
							"GUID-89D86BB6-4035-47CA-BEE8-9509684519BE.html",
							"GUID-89D86BB6-4035-47CA-BEE8-9509684519BE.html",
							"GUID-89D86BB6-4035-47CA-BEE8-9509684519BE.html",
							"GUID-73B3319C-B2E2-4C0B-9815-3FA51662F8C9.html",
							"GUID-73B3319C-B2E2-4C0B-9815-3FA51662F8C9.html",
							"GUID-73B3319C-B2E2-4C0B-9815-3FA51662F8C9.html",
							"GUID-73B3319C-B2E2-4C0B-9815-3FA51662F8C9.html",
							"GUID-73B3319C-B2E2-4C0B-9815-3FA51662F8C9.html",
							"GUID-73B3319C-B2E2-4C0B-9815-3FA51662F8C9.html",
							"GUID-0AC195CC-AEA5-4BC7-AE1F-36C2A8091348.html",
							"GUID-0AC195CC-AEA5-4BC7-AE1F-36C2A8091348.html",
							"GUID-0AC195CC-AEA5-4BC7-AE1F-36C2A8091348.html",
							"GUID-0AC195CC-AEA5-4BC7-AE1F-36C2A8091348.html",
							"GUID-0AC195CC-AEA5-4BC7-AE1F-36C2A8091348.html",
							"GUID-0AC195CC-AEA5-4BC7-AE1F-36C2A8091348.html",
							"GUID-3806976C-025D-4412-BB7F-DD4D8E0339C8.html",
							"GUID-3806976C-025D-4412-BB7F-DD4D8E0339C8.html",
							"GUID-3806976C-025D-4412-BB7F-DD4D8E0339C8.html",
							"GUID-3806976C-025D-4412-BB7F-DD4D8E0339C8.html",
							"GUID-C658EE89-DDA0-4B5F-B8B7-B22FF916284D.html",
							"GUID-C658EE89-DDA0-4B5F-B8B7-B22FF916284D.html",
							"GUID-C658EE89-DDA0-4B5F-B8B7-B22FF916284D.html",
							"GUID-C658EE89-DDA0-4B5F-B8B7-B22FF916284D.html",
							"GUID-C658EE89-DDA0-4B5F-B8B7-B22FF916284D.html",
							"GUID-C658EE89-DDA0-4B5F-B8B7-B22FF916284D.html",
							"GUID-001E5E58-B454-4492-AEDC-707190DDE737.html",
							"GUID-001E5E58-B454-4492-AEDC-707190DDE737.html",
							"GUID-001E5E58-B454-4492-AEDC-707190DDE737.html",
							"GUID-001E5E58-B454-4492-AEDC-707190DDE737.html",
							"GUID-001E5E58-B454-4492-AEDC-707190DDE737.html",
							"GUID-A87AA6B1-5247-4991-8A28-D960E97CCD32.html",
							"GUID-A87AA6B1-5247-4991-8A28-D960E97CCD32.html",
							"GUID-A87AA6B1-5247-4991-8A28-D960E97CCD32.html",
							"GUID-A87AA6B1-5247-4991-8A28-D960E97CCD32.html",
							"GUID-A87AA6B1-5247-4991-8A28-D960E97CCD32.html",
							"GUID-A87AA6B1-5247-4991-8A28-D960E97CCD32.html",
							"GUID-C68AEB26-6C98-47BD-89FB-92838F04FEC7.html",
							"GUID-C68AEB26-6C98-47BD-89FB-92838F04FEC7.html",
							"GUID-C68AEB26-6C98-47BD-89FB-92838F04FEC7.html",
							"GUID-C68AEB26-6C98-47BD-89FB-92838F04FEC7.html",
							"GUID-C68AEB26-6C98-47BD-89FB-92838F04FEC7.html",
							"GUID-C68AEB26-6C98-47BD-89FB-92838F04FEC7.html",
							"GUID-85B5B225-55A6-4F12-9278-A77CB7B62498.html",
							"GUID-85B5B225-55A6-4F12-9278-A77CB7B62498.html",
							"GUID-85B5B225-55A6-4F12-9278-A77CB7B62498.html",
							"GUID-85B5B225-55A6-4F12-9278-A77CB7B62498.html",
							"GUID-85B5B225-55A6-4F12-9278-A77CB7B62498.html",
							"GUID-85B5B225-55A6-4F12-9278-A77CB7B62498.html",
							"GUID-7FD47E3C-3456-4CFE-8D66-8B7730C8E061.html",
							"GUID-7FD47E3C-3456-4CFE-8D66-8B7730C8E061.html",
							"GUID-7FD47E3C-3456-4CFE-8D66-8B7730C8E061.html",
							"GUID-7FD47E3C-3456-4CFE-8D66-8B7730C8E061.html",
							"GUID-2637DA0B-1EF0-4C66-B28A-E1A7622E7A0C.html",
							"GUID-2637DA0B-1EF0-4C66-B28A-E1A7622E7A0C.html",
							"GUID-2637DA0B-1EF0-4C66-B28A-E1A7622E7A0C.html",
							"GUID-2637DA0B-1EF0-4C66-B28A-E1A7622E7A0C.html",
							"GUID-2637DA0B-1EF0-4C66-B28A-E1A7622E7A0C.html",
							"GUID-2637DA0B-1EF0-4C66-B28A-E1A7622E7A0C.html",
							"GUID-C5BA9616-28D3-4E7F-A8A3-93DB479CA06C.html",
							"GUID-C5BA9616-28D3-4E7F-A8A3-93DB479CA06C.html",
							"GUID-C5BA9616-28D3-4E7F-A8A3-93DB479CA06C.html",
							"GUID-C5BA9616-28D3-4E7F-A8A3-93DB479CA06C.html",
							"GUID-EA8A7724-BE94-4AB6-8E67-B271C3019D9D.html",
							"GUID-EA8A7724-BE94-4AB6-8E67-B271C3019D9D.html",
							"GUID-EA8A7724-BE94-4AB6-8E67-B271C3019D9D.html",
							"GUID-EA8A7724-BE94-4AB6-8E67-B271C3019D9D.html",
							"GUID-EA8A7724-BE94-4AB6-8E67-B271C3019D9D.html",
							"GUID-EA8A7724-BE94-4AB6-8E67-B271C3019D9D.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-819F34A6-7D1C-4A8B-9FEC-936F5C2E2951.html",
							"GUID-6290C00F-2621-42B2-8E9C-F2DB53C224E8.html",
							"GUID-6290C00F-2621-42B2-8E9C-F2DB53C224E8.html",
							"GUID-6290C00F-2621-42B2-8E9C-F2DB53C224E8.html",
							"GUID-6290C00F-2621-42B2-8E9C-F2DB53C224E8.html",
							"GUID-6290C00F-2621-42B2-8E9C-F2DB53C224E8.html",
							"GUID-6290C00F-2621-42B2-8E9C-F2DB53C224E8.html",
							"GUID-7F9010E2-A1A6-4DCA-AEA8-6DF09A3372E2.html",
							"GUID-7F9010E2-A1A6-4DCA-AEA8-6DF09A3372E2.html",
							"GUID-7F9010E2-A1A6-4DCA-AEA8-6DF09A3372E2.html",
							"GUID-7F9010E2-A1A6-4DCA-AEA8-6DF09A3372E2.html",
							"GUID-7F9010E2-A1A6-4DCA-AEA8-6DF09A3372E2.html",
							"GUID-7F9010E2-A1A6-4DCA-AEA8-6DF09A3372E2.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-45A57DE2-98BB-4151-984C-801E985F191D.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-DB15F232-017B-45BE-9812-DC886F1B7F10.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-963C11C1-03DB-43E1-AD4A-F6D968F0EB64.html",
							"GUID-DE5D0B5D-ED16-49B2-88CB-1E28C0CFF915.html",
							"GUID-DE5D0B5D-ED16-49B2-88CB-1E28C0CFF915.html",
							"GUID-DE5D0B5D-ED16-49B2-88CB-1E28C0CFF915.html",
							"GUID-DE5D0B5D-ED16-49B2-88CB-1E28C0CFF915.html",
							"GUID-DE5D0B5D-ED16-49B2-88CB-1E28C0CFF915.html",
							"GUID-DE5D0B5D-ED16-49B2-88CB-1E28C0CFF915.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-26AAC335-D816-4F4B-83E3-4B902E4492CA.html",
							"GUID-6B9089D6-DD0B-4E85-B6EE-86300657170B.html",
							"GUID-6B9089D6-DD0B-4E85-B6EE-86300657170B.html",
							"GUID-6B9089D6-DD0B-4E85-B6EE-86300657170B.html",
							"GUID-6B9089D6-DD0B-4E85-B6EE-86300657170B.html",
							"GUID-6B9089D6-DD0B-4E85-B6EE-86300657170B.html",
							"GUID-B44DE12A-2EE8-40DC-AE07-B8614CEA9C7C.html",
							"GUID-B44DE12A-2EE8-40DC-AE07-B8614CEA9C7C.html",
							"GUID-B44DE12A-2EE8-40DC-AE07-B8614CEA9C7C.html",
							"GUID-B44DE12A-2EE8-40DC-AE07-B8614CEA9C7C.html",
							"GUID-B44DE12A-2EE8-40DC-AE07-B8614CEA9C7C.html",
							"GUID-B44DE12A-2EE8-40DC-AE07-B8614CEA9C7C.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-C9B010A5-19EF-4EB3-A7B4-4FC0DC3E1EC4.html",
							"GUID-B5F52A34-E409-47D9-A8F9-BBF6FAAF4250.html",
							"GUID-B5F52A34-E409-47D9-A8F9-BBF6FAAF4250.html",
							"GUID-B5F52A34-E409-47D9-A8F9-BBF6FAAF4250.html",
							"GUID-B5F52A34-E409-47D9-A8F9-BBF6FAAF4250.html",
							"GUID-B5F52A34-E409-47D9-A8F9-BBF6FAAF4250.html",
							"GUID-A0B1BF22-A91B-4E6B-AC59-D65298341076.html",
							"GUID-A0B1BF22-A91B-4E6B-AC59-D65298341076.html",
							"GUID-A0B1BF22-A91B-4E6B-AC59-D65298341076.html",
							"GUID-A0B1BF22-A91B-4E6B-AC59-D65298341076.html",
							"GUID-A0B1BF22-A91B-4E6B-AC59-D65298341076.html",
							"GUID-A0B1BF22-A91B-4E6B-AC59-D65298341076.html",
							"GUID-A24BDAD2-C63E-40B1-894D-1DC3CC6CB66A.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-A4833A60-F6A0-4EC8-8F8E-A0ABF7C0B545.html",
							"GUID-4F98C91D-7BB3-4806-B6BB-AE327FE987A1.html",
							"GUID-4F98C91D-7BB3-4806-B6BB-AE327FE987A1.html",
							"GUID-4F98C91D-7BB3-4806-B6BB-AE327FE987A1.html",
							"GUID-4F98C91D-7BB3-4806-B6BB-AE327FE987A1.html",
							"GUID-4F98C91D-7BB3-4806-B6BB-AE327FE987A1.html",
							"GUID-4F98C91D-7BB3-4806-B6BB-AE327FE987A1.html",
							"GUID-2EB734CC-B9C6-455E-9884-2DBAB08E1EA8.html",
							"GUID-2EB734CC-B9C6-455E-9884-2DBAB08E1EA8.html",
							"GUID-2EB734CC-B9C6-455E-9884-2DBAB08E1EA8.html",
							"GUID-2EB734CC-B9C6-455E-9884-2DBAB08E1EA8.html",
							"GUID-2EB734CC-B9C6-455E-9884-2DBAB08E1EA8.html",
							"GUID-2EB734CC-B9C6-455E-9884-2DBAB08E1EA8.html",
							"GUID-3FCD898D-4FBE-45F7-90AF-5AFA95E68831.html",
							"GUID-3FCD898D-4FBE-45F7-90AF-5AFA95E68831.html",
							"GUID-3FCD898D-4FBE-45F7-90AF-5AFA95E68831.html",
							"GUID-3FCD898D-4FBE-45F7-90AF-5AFA95E68831.html",
							"GUID-3FCD898D-4FBE-45F7-90AF-5AFA95E68831.html",
							"GUID-3FCD898D-4FBE-45F7-90AF-5AFA95E68831.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-622D99A6-36C4-45DC-98D4-95EFDA77AA18.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-2A0AD6C6-F354-47C7-BBF8-FD4B8D918EAD.html",
							"GUID-A0386E9E-955F-4A64-8E05-C5A3DB49EE36.html",
							"GUID-A0386E9E-955F-4A64-8E05-C5A3DB49EE36.html",
							"GUID-A0386E9E-955F-4A64-8E05-C5A3DB49EE36.html",
							"GUID-A0386E9E-955F-4A64-8E05-C5A3DB49EE36.html",
							"GUID-EC961F58-4F67-4CB1-A47F-22AEE2FC3327.html",
							"GUID-EC961F58-4F67-4CB1-A47F-22AEE2FC3327.html",
							"GUID-EC961F58-4F67-4CB1-A47F-22AEE2FC3327.html",
							"GUID-EC961F58-4F67-4CB1-A47F-22AEE2FC3327.html",
							"GUID-EC961F58-4F67-4CB1-A47F-22AEE2FC3327.html",
							"GUID-EC961F58-4F67-4CB1-A47F-22AEE2FC3327.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-805F2DE9-7E0B-4B05-89A4-AEB96FDC36E6.html",
							"GUID-439D69E3-ABD1-4304-BDCB-F8DBA503B7EB.html",
							"GUID-439D69E3-ABD1-4304-BDCB-F8DBA503B7EB.html",
							"GUID-439D69E3-ABD1-4304-BDCB-F8DBA503B7EB.html",
							"GUID-439D69E3-ABD1-4304-BDCB-F8DBA503B7EB.html",
							"GUID-439D69E3-ABD1-4304-BDCB-F8DBA503B7EB.html",
							"GUID-439D69E3-ABD1-4304-BDCB-F8DBA503B7EB.html",
							"GUID-4882F386-766E-438D-8CDD-0F9D48F29610.html",
							"GUID-4882F386-766E-438D-8CDD-0F9D48F29610.html",
							"GUID-4882F386-766E-438D-8CDD-0F9D48F29610.html",
							"GUID-4882F386-766E-438D-8CDD-0F9D48F29610.html",
							"GUID-4882F386-766E-438D-8CDD-0F9D48F29610.html",
							"GUID-4882F386-766E-438D-8CDD-0F9D48F29610.html",
							"GUID-0CD0B980-1595-4B23-90C9-8CDD654F99C5.html",
							"GUID-0CD0B980-1595-4B23-90C9-8CDD654F99C5.html",
							"GUID-0CD0B980-1595-4B23-90C9-8CDD654F99C5.html",
							"GUID-0CD0B980-1595-4B23-90C9-8CDD654F99C5.html",
							"GUID-0CD0B980-1595-4B23-90C9-8CDD654F99C5.html",
							"GUID-0CD0B980-1595-4B23-90C9-8CDD654F99C5.html",
							"GUID-8C5BDD05-DD86-40A9-B4D0-8DF92452F7C7.html",
							"GUID-8C5BDD05-DD86-40A9-B4D0-8DF92452F7C7.html",
							"GUID-8C5BDD05-DD86-40A9-B4D0-8DF92452F7C7.html",
							"GUID-8C5BDD05-DD86-40A9-B4D0-8DF92452F7C7.html",
							"GUID-8C5BDD05-DD86-40A9-B4D0-8DF92452F7C7.html",
							"GUID-8C5BDD05-DD86-40A9-B4D0-8DF92452F7C7.html",
							"GUID-59E56A40-997A-4938-8323-43385CAAB59F.html",
							"GUID-59E56A40-997A-4938-8323-43385CAAB59F.html",
							"GUID-59E56A40-997A-4938-8323-43385CAAB59F.html",
							"GUID-59E56A40-997A-4938-8323-43385CAAB59F.html",
							"GUID-59E56A40-997A-4938-8323-43385CAAB59F.html",
							"GUID-59E56A40-997A-4938-8323-43385CAAB59F.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-AF9C23DA-AF83-441B-8598-6D10D255B441.html",
							"GUID-9AA24DCC-E1F4-42A4-A028-45365EA4B1BF.html",
							"GUID-9AA24DCC-E1F4-42A4-A028-45365EA4B1BF.html",
							"GUID-9AA24DCC-E1F4-42A4-A028-45365EA4B1BF.html",
							"GUID-9AA24DCC-E1F4-42A4-A028-45365EA4B1BF.html",
							"GUID-9AA24DCC-E1F4-42A4-A028-45365EA4B1BF.html",
							"GUID-9AA24DCC-E1F4-42A4-A028-45365EA4B1BF.html",
							"GUID-BB4AAF17-373C-48C5-88D6-C15D9E926EBE.html",
							"GUID-BB4AAF17-373C-48C5-88D6-C15D9E926EBE.html",
							"GUID-BB4AAF17-373C-48C5-88D6-C15D9E926EBE.html",
							"GUID-BB4AAF17-373C-48C5-88D6-C15D9E926EBE.html",
							"GUID-BB4AAF17-373C-48C5-88D6-C15D9E926EBE.html",
							"GUID-BB4AAF17-373C-48C5-88D6-C15D9E926EBE.html",
							"GUID-1A2A6D25-8F46-4DCB-806C-18384140A6BC.html",
							"GUID-1A2A6D25-8F46-4DCB-806C-18384140A6BC.html",
							"GUID-1A2A6D25-8F46-4DCB-806C-18384140A6BC.html",
							"GUID-1A2A6D25-8F46-4DCB-806C-18384140A6BC.html",
							"GUID-1A2A6D25-8F46-4DCB-806C-18384140A6BC.html",
							"GUID-1A2A6D25-8F46-4DCB-806C-18384140A6BC.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-F246FB89-BF12-48D4-B25C-AE8239E4C104.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-608FBC47-100D-4D70-AED4-BE906B761FC9.html",
							"GUID-30247EE9-2918-44C6-89A5-06347C527C83.html",
							"GUID-30247EE9-2918-44C6-89A5-06347C527C83.html",
							"GUID-30247EE9-2918-44C6-89A5-06347C527C83.html",
							"GUID-30247EE9-2918-44C6-89A5-06347C527C83.html",
							"GUID-30247EE9-2918-44C6-89A5-06347C527C83.html",
							"GUID-30247EE9-2918-44C6-89A5-06347C527C83.html",
							"GUID-A4DC3D07-DDAD-4748-A855-304CA3439336.html",
							"GUID-0A8F0C6F-E657-4BEF-8D1C-37488FFEA9BF.html",
							"GUID-0A8F0C6F-E657-4BEF-8D1C-37488FFEA9BF.html",
							"GUID-0A8F0C6F-E657-4BEF-8D1C-37488FFEA9BF.html",
							"GUID-0A8F0C6F-E657-4BEF-8D1C-37488FFEA9BF.html",
							"GUID-84618292-5B46-4F48-A09E-06D3AC6B32C6.html",
							"GUID-84618292-5B46-4F48-A09E-06D3AC6B32C6.html",
							"GUID-84618292-5B46-4F48-A09E-06D3AC6B32C6.html",
							"GUID-84618292-5B46-4F48-A09E-06D3AC6B32C6.html",
							"GUID-7AA9CA2C-DEB4-4E75-99AF-970A671252C7.html",
							"GUID-7AA9CA2C-DEB4-4E75-99AF-970A671252C7.html",
							"GUID-7AA9CA2C-DEB4-4E75-99AF-970A671252C7.html",
							"GUID-7AA9CA2C-DEB4-4E75-99AF-970A671252C7.html",
							"GUID-7AA9CA2C-DEB4-4E75-99AF-970A671252C7.html",
							"GUID-7AA9CA2C-DEB4-4E75-99AF-970A671252C7.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-3D759948-B4AF-4C19-A9CA-384C5F78489B.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-1755D520-0F8D-474E-A3C8-F3C962CBE635.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-874C7954-A5BC-4903-B98F-483E313A2ADC.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-A37F574B-3E84-4ABE-8CA4-05772FE75D4A.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-C3313F6B-E4CF-45D1-B332-0ABB05837C39.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-CDEBC92A-C9A5-4332-9D52-BA76395A325C.html",
							"GUID-51568547-54E2-4D71-BFAC-1BA189300B04.html",
							"GUID-51568547-54E2-4D71-BFAC-1BA189300B04.html",
							"GUID-51568547-54E2-4D71-BFAC-1BA189300B04.html",
							"GUID-51568547-54E2-4D71-BFAC-1BA189300B04.html",
							"GUID-51568547-54E2-4D71-BFAC-1BA189300B04.html",
							"GUID-51568547-54E2-4D71-BFAC-1BA189300B04.html",
							"GUID-BD005CCF-A9AE-427D-B667-4FC234BE78A2.html",
							"GUID-BD005CCF-A9AE-427D-B667-4FC234BE78A2.html",
							"GUID-BD005CCF-A9AE-427D-B667-4FC234BE78A2.html",
							"GUID-BD005CCF-A9AE-427D-B667-4FC234BE78A2.html",
							"GUID-BD005CCF-A9AE-427D-B667-4FC234BE78A2.html",
							"GUID-BD005CCF-A9AE-427D-B667-4FC234BE78A2.html",
							"GUID-458FCBC5-EF30-42B0-BB03-100FAB5E96FB.html",
							"GUID-458FCBC5-EF30-42B0-BB03-100FAB5E96FB.html",
							"GUID-458FCBC5-EF30-42B0-BB03-100FAB5E96FB.html",
							"GUID-458FCBC5-EF30-42B0-BB03-100FAB5E96FB.html",
							"GUID-458FCBC5-EF30-42B0-BB03-100FAB5E96FB.html",
							"GUID-458FCBC5-EF30-42B0-BB03-100FAB5E96FB.html",
							"GUID-3FC184D7-6862-450E-9C44-AE6C5FC000E9.html",
							"GUID-3FC184D7-6862-450E-9C44-AE6C5FC000E9.html",
							"GUID-3FC184D7-6862-450E-9C44-AE6C5FC000E9.html",
							"GUID-3FC184D7-6862-450E-9C44-AE6C5FC000E9.html",
							"GUID-3FC184D7-6862-450E-9C44-AE6C5FC000E9.html",
							"GUID-3FC184D7-6862-450E-9C44-AE6C5FC000E9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-541AC75D-6255-45D5-9A7F-84CAD1A299D9.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-625A93D1-16F9-44E6-9222-A2B9A32B8355.html",
							"GUID-5098AD90-4D1B-465E-8309-45A2739325B1.html",
							"GUID-5098AD90-4D1B-465E-8309-45A2739325B1.html",
							"GUID-5098AD90-4D1B-465E-8309-45A2739325B1.html",
							"GUID-5098AD90-4D1B-465E-8309-45A2739325B1.html",
							"GUID-5098AD90-4D1B-465E-8309-45A2739325B1.html",
							"GUID-5098AD90-4D1B-465E-8309-45A2739325B1.html",
							"GUID-A76AA011-C019-4E45-91A3-3C3819F5680A.html",
							"GUID-A76AA011-C019-4E45-91A3-3C3819F5680A.html",
							"GUID-A76AA011-C019-4E45-91A3-3C3819F5680A.html",
							"GUID-A76AA011-C019-4E45-91A3-3C3819F5680A.html",
							"GUID-A76AA011-C019-4E45-91A3-3C3819F5680A.html",
							"GUID-A76AA011-C019-4E45-91A3-3C3819F5680A.html",
							"GUID-FF621AC4-11D0-4795-90D5-CEA88A3AC282.html",
							"GUID-FF621AC4-11D0-4795-90D5-CEA88A3AC282.html",
							"GUID-FF621AC4-11D0-4795-90D5-CEA88A3AC282.html",
							"GUID-FF621AC4-11D0-4795-90D5-CEA88A3AC282.html",
							"GUID-FF621AC4-11D0-4795-90D5-CEA88A3AC282.html",
							"GUID-FF621AC4-11D0-4795-90D5-CEA88A3AC282.html",
							"GUID-384F35CF-99A6-4E65-A1ED-555DAFF690E2.html",
							"GUID-384F35CF-99A6-4E65-A1ED-555DAFF690E2.html",
							"GUID-384F35CF-99A6-4E65-A1ED-555DAFF690E2.html",
							"GUID-384F35CF-99A6-4E65-A1ED-555DAFF690E2.html",
							"GUID-384F35CF-99A6-4E65-A1ED-555DAFF690E2.html",
							"GUID-384F35CF-99A6-4E65-A1ED-555DAFF690E2.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-8A290E9F-B10B-40B2-B6C8-8953545D58B3.html",
							"GUID-6E9DD3E7-E438-416B-85DB-5C0793360533.html",
							"GUID-6E9DD3E7-E438-416B-85DB-5C0793360533.html",
							"GUID-6E9DD3E7-E438-416B-85DB-5C0793360533.html",
							"GUID-6E9DD3E7-E438-416B-85DB-5C0793360533.html",
							"GUID-6E9DD3E7-E438-416B-85DB-5C0793360533.html",
							"GUID-6E9DD3E7-E438-416B-85DB-5C0793360533.html",
							"GUID-6EF8789A-E5DC-48A2-BC38-A59C49B05887.html",
							"GUID-6EF8789A-E5DC-48A2-BC38-A59C49B05887.html",
							"GUID-6EF8789A-E5DC-48A2-BC38-A59C49B05887.html",
							"GUID-6EF8789A-E5DC-48A2-BC38-A59C49B05887.html",
							"GUID-6EF8789A-E5DC-48A2-BC38-A59C49B05887.html",
							"GUID-6EF8789A-E5DC-48A2-BC38-A59C49B05887.html",
							"GUID-F4DF749A-0F8C-4482-8661-C005A0BE0CF4.html",
							"GUID-644FEB78-43EB-4195-88AA-9DCBD0BFCE4B.html",
							"GUID-644FEB78-43EB-4195-88AA-9DCBD0BFCE4B.html",
							"GUID-644FEB78-43EB-4195-88AA-9DCBD0BFCE4B.html",
							"GUID-644FEB78-43EB-4195-88AA-9DCBD0BFCE4B.html",
							"GUID-B6FF9242-5A12-42D4-945D-E8B2E5B81A6A.html",
							"GUID-B6FF9242-5A12-42D4-945D-E8B2E5B81A6A.html",
							"GUID-B6FF9242-5A12-42D4-945D-E8B2E5B81A6A.html",
							"GUID-B6FF9242-5A12-42D4-945D-E8B2E5B81A6A.html",
							"GUID-B6FF9242-5A12-42D4-945D-E8B2E5B81A6A.html",
							"GUID-B6FF9242-5A12-42D4-945D-E8B2E5B81A6A.html",
							"GUID-8BC5DC71-49AA-44D5-A610-C9DAF9BDEA90.html",
							"GUID-8BC5DC71-49AA-44D5-A610-C9DAF9BDEA90.html",
							"GUID-8BC5DC71-49AA-44D5-A610-C9DAF9BDEA90.html",
							"GUID-8BC5DC71-49AA-44D5-A610-C9DAF9BDEA90.html",
							"GUID-8BC5DC71-49AA-44D5-A610-C9DAF9BDEA90.html",
							"GUID-8BC5DC71-49AA-44D5-A610-C9DAF9BDEA90.html",
							"GUID-0FD40D52-5201-447A-A339-76D717612BEE.html",
							"GUID-0FD40D52-5201-447A-A339-76D717612BEE.html",
							"GUID-0FD40D52-5201-447A-A339-76D717612BEE.html",
							"GUID-0FD40D52-5201-447A-A339-76D717612BEE.html",
							"GUID-D3D86CBE-00BE-4BD6-BAB0-1EB678789ED2.html",
							"GUID-D3D86CBE-00BE-4BD6-BAB0-1EB678789ED2.html",
							"GUID-D3D86CBE-00BE-4BD6-BAB0-1EB678789ED2.html",
							"GUID-D3D86CBE-00BE-4BD6-BAB0-1EB678789ED2.html",
							"GUID-D3D86CBE-00BE-4BD6-BAB0-1EB678789ED2.html",
							"GUID-D3D86CBE-00BE-4BD6-BAB0-1EB678789ED2.html",
							"GUID-E4878DAF-5DCA-47B5-A1ED-0F358153A9CA.html",
							"GUID-E4878DAF-5DCA-47B5-A1ED-0F358153A9CA.html",
							"GUID-E4878DAF-5DCA-47B5-A1ED-0F358153A9CA.html",
							"GUID-E4878DAF-5DCA-47B5-A1ED-0F358153A9CA.html",
							"GUID-E4878DAF-5DCA-47B5-A1ED-0F358153A9CA.html",
							"GUID-E4878DAF-5DCA-47B5-A1ED-0F358153A9CA.html",
							"GUID-70933C81-52F2-42FE-809E-27FAC2E07EA2.html",
							"GUID-70933C81-52F2-42FE-809E-27FAC2E07EA2.html",
							"GUID-70933C81-52F2-42FE-809E-27FAC2E07EA2.html",
							"GUID-70933C81-52F2-42FE-809E-27FAC2E07EA2.html",
							"GUID-E3BE0396-DB19-45C0-AD96-5107E203D006.html",
							"GUID-E3BE0396-DB19-45C0-AD96-5107E203D006.html",
							"GUID-E3BE0396-DB19-45C0-AD96-5107E203D006.html",
							"GUID-E3BE0396-DB19-45C0-AD96-5107E203D006.html",
							"GUID-E3BE0396-DB19-45C0-AD96-5107E203D006.html",
							"GUID-E3BE0396-DB19-45C0-AD96-5107E203D006.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-F7BE1385-D779-4113-849A-912F8FB3A552.html",
							"GUID-7A74A52A-A005-4691-BAB3-F67BA58BB3A3.html",
							"GUID-7A74A52A-A005-4691-BAB3-F67BA58BB3A3.html",
							"GUID-7A74A52A-A005-4691-BAB3-F67BA58BB3A3.html",
							"GUID-7A74A52A-A005-4691-BAB3-F67BA58BB3A3.html",
							"GUID-2CFA45A0-F069-4AA0-830A-C5844311C281.html",
							"GUID-2CFA45A0-F069-4AA0-830A-C5844311C281.html",
							"GUID-2CFA45A0-F069-4AA0-830A-C5844311C281.html",
							"GUID-2CFA45A0-F069-4AA0-830A-C5844311C281.html",
							"GUID-4C1B2C58-4567-4545-965D-58C9C5F8EA98.html",
							"GUID-4C1B2C58-4567-4545-965D-58C9C5F8EA98.html",
							"GUID-4C1B2C58-4567-4545-965D-58C9C5F8EA98.html",
							"GUID-4C1B2C58-4567-4545-965D-58C9C5F8EA98.html",
							"GUID-4C1B2C58-4567-4545-965D-58C9C5F8EA98.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-F93D3025-155A-4C6B-B235-4389B8A6BE59.html",
							"GUID-C7240DC3-F6D5-4AFA-BD7B-C944004A881B.html",
							"GUID-C7240DC3-F6D5-4AFA-BD7B-C944004A881B.html",
							"GUID-C7240DC3-F6D5-4AFA-BD7B-C944004A881B.html",
							"GUID-C7240DC3-F6D5-4AFA-BD7B-C944004A881B.html",
							"GUID-011B6632-AE0D-4E6F-879A-7D08C2A8B2AD.html",
							"GUID-011B6632-AE0D-4E6F-879A-7D08C2A8B2AD.html",
							"GUID-011B6632-AE0D-4E6F-879A-7D08C2A8B2AD.html",
							"GUID-011B6632-AE0D-4E6F-879A-7D08C2A8B2AD.html",
							"GUID-C55588FA-F0B1-4BA1-B875-3C2134BF6312.html",
							"GUID-C55588FA-F0B1-4BA1-B875-3C2134BF6312.html",
							"GUID-C55588FA-F0B1-4BA1-B875-3C2134BF6312.html",
							"GUID-C55588FA-F0B1-4BA1-B875-3C2134BF6312.html",
							"GUID-B07757C8-E631-4EFD-80A7-F15B70C51B52.html",
							"GUID-B07757C8-E631-4EFD-80A7-F15B70C51B52.html",
							"GUID-B07757C8-E631-4EFD-80A7-F15B70C51B52.html",
							"GUID-B07757C8-E631-4EFD-80A7-F15B70C51B52.html",
							"GUID-B07757C8-E631-4EFD-80A7-F15B70C51B52.html",
							"GUID-C036B76E-27A7-4ECC-B7AF-A70B38C64E58.html",
							"GUID-C036B76E-27A7-4ECC-B7AF-A70B38C64E58.html",
							"GUID-C036B76E-27A7-4ECC-B7AF-A70B38C64E58.html",
							"GUID-C036B76E-27A7-4ECC-B7AF-A70B38C64E58.html",
							"GUID-C036B76E-27A7-4ECC-B7AF-A70B38C64E58.html",
							"GUID-C036B76E-27A7-4ECC-B7AF-A70B38C64E58.html",
							"GUID-77338732-56E0-49ED-9807-B6A63D3C982C.html",
							"GUID-77338732-56E0-49ED-9807-B6A63D3C982C.html",
							"GUID-77338732-56E0-49ED-9807-B6A63D3C982C.html",
							"GUID-77338732-56E0-49ED-9807-B6A63D3C982C.html",
							"GUID-06EC5166-673E-443F-908E-244EE9857629.html",
							"GUID-06EC5166-673E-443F-908E-244EE9857629.html",
							"GUID-06EC5166-673E-443F-908E-244EE9857629.html",
							"GUID-06EC5166-673E-443F-908E-244EE9857629.html",
							"GUID-779137A6-F3A1-4607-91B5-B1138393F3F2.html",
							"GUID-779137A6-F3A1-4607-91B5-B1138393F3F2.html",
							"GUID-779137A6-F3A1-4607-91B5-B1138393F3F2.html",
							"GUID-779137A6-F3A1-4607-91B5-B1138393F3F2.html",
							"GUID-779137A6-F3A1-4607-91B5-B1138393F3F2.html",
							"GUID-9964853D-CE4F-410A-BC32-69266F0C45F8.html",
							"GUID-9964853D-CE4F-410A-BC32-69266F0C45F8.html",
							"GUID-9964853D-CE4F-410A-BC32-69266F0C45F8.html",
							"GUID-9964853D-CE4F-410A-BC32-69266F0C45F8.html",
							"GUID-9964853D-CE4F-410A-BC32-69266F0C45F8.html",
							"GUID-9964853D-CE4F-410A-BC32-69266F0C45F8.html",
							"GUID-FBB9A9D7-3D9D-468A-BB42-2F9C7BC65FB3.html",
							"GUID-FBB9A9D7-3D9D-468A-BB42-2F9C7BC65FB3.html",
							"GUID-FBB9A9D7-3D9D-468A-BB42-2F9C7BC65FB3.html",
							"GUID-FBB9A9D7-3D9D-468A-BB42-2F9C7BC65FB3.html",
							"GUID-FBB9A9D7-3D9D-468A-BB42-2F9C7BC65FB3.html",
							"GUID-FBB9A9D7-3D9D-468A-BB42-2F9C7BC65FB3.html",
							"GUID-16F762D1-2759-4C6F-A805-980CD344C1FC.html",
							"GUID-16F762D1-2759-4C6F-A805-980CD344C1FC.html",
							"GUID-16F762D1-2759-4C6F-A805-980CD344C1FC.html",
							"GUID-16F762D1-2759-4C6F-A805-980CD344C1FC.html",
							"GUID-16F762D1-2759-4C6F-A805-980CD344C1FC.html",
							"GUID-B7C5B153-34DD-4F63-9D4F-26DA3D8C96C1.html",
							"GUID-B7C5B153-34DD-4F63-9D4F-26DA3D8C96C1.html",
							"GUID-B7C5B153-34DD-4F63-9D4F-26DA3D8C96C1.html",
							"GUID-B7C5B153-34DD-4F63-9D4F-26DA3D8C96C1.html",
							"GUID-05D345E2-2F63-444B-ADE3-980C9EDF3C60.html",
							"GUID-05D345E2-2F63-444B-ADE3-980C9EDF3C60.html",
							"GUID-05D345E2-2F63-444B-ADE3-980C9EDF3C60.html",
							"GUID-05D345E2-2F63-444B-ADE3-980C9EDF3C60.html",
							"GUID-05D345E2-2F63-444B-ADE3-980C9EDF3C60.html",
							"GUID-05D345E2-2F63-444B-ADE3-980C9EDF3C60.html",
							"GUID-FCEED70A-C1F4-4CF9-8EB4-07C69A30F3B0.html",
							"GUID-FCEED70A-C1F4-4CF9-8EB4-07C69A30F3B0.html",
							"GUID-FCEED70A-C1F4-4CF9-8EB4-07C69A30F3B0.html",
							"GUID-FCEED70A-C1F4-4CF9-8EB4-07C69A30F3B0.html",
							"GUID-232CB98E-5626-48E1-9036-6C695B6E23F1.html",
							"GUID-232CB98E-5626-48E1-9036-6C695B6E23F1.html",
							"GUID-232CB98E-5626-48E1-9036-6C695B6E23F1.html",
							"GUID-232CB98E-5626-48E1-9036-6C695B6E23F1.html",
							"GUID-232CB98E-5626-48E1-9036-6C695B6E23F1.html",
							"GUID-232CB98E-5626-48E1-9036-6C695B6E23F1.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-EFE56862-9029-465A-8CE5-BE62D3B4655E.html",
							"GUID-33131955-19BD-40F4-8C4A-F18AD4452302.html",
							"GUID-33131955-19BD-40F4-8C4A-F18AD4452302.html",
							"GUID-33131955-19BD-40F4-8C4A-F18AD4452302.html",
							"GUID-33131955-19BD-40F4-8C4A-F18AD4452302.html",
							"GUID-33131955-19BD-40F4-8C4A-F18AD4452302.html",
							"GUID-33131955-19BD-40F4-8C4A-F18AD4452302.html",
							"GUID-52AB79BD-03EF-4668-A7B6-6DF67B773699.html",
							"GUID-52AB79BD-03EF-4668-A7B6-6DF67B773699.html",
							"GUID-52AB79BD-03EF-4668-A7B6-6DF67B773699.html",
							"GUID-52AB79BD-03EF-4668-A7B6-6DF67B773699.html",
							"GUID-04B7E0DA-96EF-4F1D-8496-83C5DEF57318.html",
							"GUID-04B7E0DA-96EF-4F1D-8496-83C5DEF57318.html",
							"GUID-04B7E0DA-96EF-4F1D-8496-83C5DEF57318.html",
							"GUID-04B7E0DA-96EF-4F1D-8496-83C5DEF57318.html",
							"GUID-04B7E0DA-96EF-4F1D-8496-83C5DEF57318.html",
							"GUID-04B7E0DA-96EF-4F1D-8496-83C5DEF57318.html",
							"GUID-B2536AEB-7368-46C6-A52A-C7C64EFECAB8.html",
							"GUID-B2536AEB-7368-46C6-A52A-C7C64EFECAB8.html",
							"GUID-B2536AEB-7368-46C6-A52A-C7C64EFECAB8.html",
							"GUID-B2536AEB-7368-46C6-A52A-C7C64EFECAB8.html",
							"GUID-B2536AEB-7368-46C6-A52A-C7C64EFECAB8.html",
							"GUID-B2536AEB-7368-46C6-A52A-C7C64EFECAB8.html",
							"GUID-DAF10DAD-5926-45EC-BB04-536107AB5DD9.html",
							"GUID-DAF10DAD-5926-45EC-BB04-536107AB5DD9.html",
							"GUID-DAF10DAD-5926-45EC-BB04-536107AB5DD9.html",
							"GUID-06C76B30-B783-4FFA-A770-1DED1FDF2D86.html",
							"GUID-06C76B30-B783-4FFA-A770-1DED1FDF2D86.html",
							"GUID-06C76B30-B783-4FFA-A770-1DED1FDF2D86.html",
							"GUID-06C76B30-B783-4FFA-A770-1DED1FDF2D86.html",
							"GUID-06C76B30-B783-4FFA-A770-1DED1FDF2D86.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-143522CF-551B-4BFF-82D6-83E3AD55F0B6.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-EFCA359C-66A7-42E1-A094-E41854A9C37F.html",
							"GUID-8D88BA74-4B6E-4166-A90C-A041AD260A58.html",
							"GUID-8D88BA74-4B6E-4166-A90C-A041AD260A58.html",
							"GUID-8D88BA74-4B6E-4166-A90C-A041AD260A58.html",
							"GUID-8D88BA74-4B6E-4166-A90C-A041AD260A58.html",
							"GUID-8D88BA74-4B6E-4166-A90C-A041AD260A58.html",
							"GUID-8D88BA74-4B6E-4166-A90C-A041AD260A58.html",
							"GUID-B0DD6AAF-4EE9-4C7C-928F-DC7C132524C5.html",
							"GUID-B0DD6AAF-4EE9-4C7C-928F-DC7C132524C5.html",
							"GUID-B0DD6AAF-4EE9-4C7C-928F-DC7C132524C5.html",
							"GUID-B0DD6AAF-4EE9-4C7C-928F-DC7C132524C5.html",
							"GUID-B0DD6AAF-4EE9-4C7C-928F-DC7C132524C5.html",
							"GUID-B0DD6AAF-4EE9-4C7C-928F-DC7C132524C5.html",
							"GUID-58D2CEA2-AB9C-40C1-A589-051F2D431221.html",
							"GUID-58D2CEA2-AB9C-40C1-A589-051F2D431221.html",
							"GUID-58D2CEA2-AB9C-40C1-A589-051F2D431221.html",
							"GUID-58D2CEA2-AB9C-40C1-A589-051F2D431221.html",
							"GUID-58D2CEA2-AB9C-40C1-A589-051F2D431221.html",
							"GUID-58D2CEA2-AB9C-40C1-A589-051F2D431221.html",
							"GUID-90229388-3007-44F9-8FCE-5D83E2F35BD4.html",
							"GUID-90229388-3007-44F9-8FCE-5D83E2F35BD4.html",
							"GUID-90229388-3007-44F9-8FCE-5D83E2F35BD4.html",
							"GUID-90229388-3007-44F9-8FCE-5D83E2F35BD4.html",
							"GUID-90229388-3007-44F9-8FCE-5D83E2F35BD4.html",
							"GUID-90229388-3007-44F9-8FCE-5D83E2F35BD4.html",
							"GUID-1507EBE8-7AAB-4E0A-9216-593F2B134C6D.html",
							"GUID-1507EBE8-7AAB-4E0A-9216-593F2B134C6D.html",
							"GUID-1507EBE8-7AAB-4E0A-9216-593F2B134C6D.html",
							"GUID-1507EBE8-7AAB-4E0A-9216-593F2B134C6D.html",
							"GUID-1507EBE8-7AAB-4E0A-9216-593F2B134C6D.html",
							"GUID-1507EBE8-7AAB-4E0A-9216-593F2B134C6D.html",
							"GUID-7A2EBE9F-A271-4FB8-9B58-7FA5936D9261.html",
							"GUID-7A2EBE9F-A271-4FB8-9B58-7FA5936D9261.html",
							"GUID-7A2EBE9F-A271-4FB8-9B58-7FA5936D9261.html",
							"GUID-7A2EBE9F-A271-4FB8-9B58-7FA5936D9261.html",
							"GUID-7A2EBE9F-A271-4FB8-9B58-7FA5936D9261.html",
							"GUID-7A2EBE9F-A271-4FB8-9B58-7FA5936D9261.html",
							"GUID-19FF5031-AB25-40D0-B80A-A5FBBCD53284.html",
							"GUID-19FF5031-AB25-40D0-B80A-A5FBBCD53284.html",
							"GUID-19FF5031-AB25-40D0-B80A-A5FBBCD53284.html",
							"GUID-19FF5031-AB25-40D0-B80A-A5FBBCD53284.html",
							"GUID-19FF5031-AB25-40D0-B80A-A5FBBCD53284.html",
							"GUID-19FF5031-AB25-40D0-B80A-A5FBBCD53284.html",
							"GUID-0CF05471-81CB-4011-9B42-18B51811C9AA.html",
							"GUID-0CF05471-81CB-4011-9B42-18B51811C9AA.html",
							"GUID-0CF05471-81CB-4011-9B42-18B51811C9AA.html",
							"GUID-0CF05471-81CB-4011-9B42-18B51811C9AA.html",
							"GUID-0CF05471-81CB-4011-9B42-18B51811C9AA.html",
							"GUID-0CF05471-81CB-4011-9B42-18B51811C9AA.html",
							"GUID-CD3C7839-1D4D-49B7-8B78-BC3BAA58D217.html",
							"GUID-CD3C7839-1D4D-49B7-8B78-BC3BAA58D217.html",
							"GUID-CD3C7839-1D4D-49B7-8B78-BC3BAA58D217.html",
							"GUID-CD3C7839-1D4D-49B7-8B78-BC3BAA58D217.html",
							"GUID-CD3C7839-1D4D-49B7-8B78-BC3BAA58D217.html",
							"GUID-CD3C7839-1D4D-49B7-8B78-BC3BAA58D217.html",
							"GUID-A8906C8D-A608-4572-AE74-1E517DD2B0BE.html",
							"GUID-A5FF4033-A9DF-48AB-9B34-57BCD150BD19.html",
							"GUID-A5FF4033-A9DF-48AB-9B34-57BCD150BD19.html",
							"GUID-A5FF4033-A9DF-48AB-9B34-57BCD150BD19.html",
							"GUID-A5FF4033-A9DF-48AB-9B34-57BCD150BD19.html",
							"GUID-2D680591-4A8E-454E-A661-C712EFB5E5CA.html",
							"GUID-2D680591-4A8E-454E-A661-C712EFB5E5CA.html",
							"GUID-2D680591-4A8E-454E-A661-C712EFB5E5CA.html",
							"GUID-2D680591-4A8E-454E-A661-C712EFB5E5CA.html",
							"GUID-D5C12573-4019-4ACB-B1C5-A96167AA626F.html",
							"GUID-D5C12573-4019-4ACB-B1C5-A96167AA626F.html",
							"GUID-D5C12573-4019-4ACB-B1C5-A96167AA626F.html",
							"GUID-D5C12573-4019-4ACB-B1C5-A96167AA626F.html",
							"GUID-974047C5-EE1C-4EA6-8440-B5B9BDDB0077.html",
							"GUID-974047C5-EE1C-4EA6-8440-B5B9BDDB0077.html",
							"GUID-974047C5-EE1C-4EA6-8440-B5B9BDDB0077.html",
							"GUID-974047C5-EE1C-4EA6-8440-B5B9BDDB0077.html",
							"GUID-974047C5-EE1C-4EA6-8440-B5B9BDDB0077.html",
							"GUID-974047C5-EE1C-4EA6-8440-B5B9BDDB0077.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-7DED7722-91B4-436A-82BB-E741D1BFDD88.html",
							"GUID-F9C670E7-75A9-43A9-ACC5-B3E73B1B404F.html",
							"GUID-F9C670E7-75A9-43A9-ACC5-B3E73B1B404F.html",
							"GUID-F9C670E7-75A9-43A9-ACC5-B3E73B1B404F.html",
							"GUID-F9C670E7-75A9-43A9-ACC5-B3E73B1B404F.html",
							"GUID-ED950733-AA0B-4753-8DDD-F7A3B209C381.html",
							"GUID-ED950733-AA0B-4753-8DDD-F7A3B209C381.html",
							"GUID-ED950733-AA0B-4753-8DDD-F7A3B209C381.html",
							"GUID-ED950733-AA0B-4753-8DDD-F7A3B209C381.html",
							"GUID-ED950733-AA0B-4753-8DDD-F7A3B209C381.html",
							"GUID-ED950733-AA0B-4753-8DDD-F7A3B209C381.html",
							"GUID-06DC2E4B-E5B4-46D1-9655-5C783EFA4F11.html",
							"GUID-06DC2E4B-E5B4-46D1-9655-5C783EFA4F11.html",
							"GUID-06DC2E4B-E5B4-46D1-9655-5C783EFA4F11.html",
							"GUID-06DC2E4B-E5B4-46D1-9655-5C783EFA4F11.html",
							"GUID-06DC2E4B-E5B4-46D1-9655-5C783EFA4F11.html",
							"GUID-06DC2E4B-E5B4-46D1-9655-5C783EFA4F11.html",
							"GUID-69E7338C-A077-41E2-B205-89DFEE823875.html",
							"GUID-69E7338C-A077-41E2-B205-89DFEE823875.html",
							"GUID-69E7338C-A077-41E2-B205-89DFEE823875.html",
							"GUID-69E7338C-A077-41E2-B205-89DFEE823875.html",
							"GUID-71AA8C3F-B97A-403A-ABD5-B5B0178F8696.html",
							"GUID-71AA8C3F-B97A-403A-ABD5-B5B0178F8696.html",
							"GUID-71AA8C3F-B97A-403A-ABD5-B5B0178F8696.html",
							"GUID-71AA8C3F-B97A-403A-ABD5-B5B0178F8696.html",
							"GUID-F8AB0C58-73BC-4599-95E1-8450595209AB.html",
							"GUID-F8AB0C58-73BC-4599-95E1-8450595209AB.html",
							"GUID-F8AB0C58-73BC-4599-95E1-8450595209AB.html",
							"GUID-F8AB0C58-73BC-4599-95E1-8450595209AB.html",
							"GUID-F8AB0C58-73BC-4599-95E1-8450595209AB.html",
							"GUID-9B95B415-BC0B-4D38-BB49-5BAB8072B2BD.html",
							"GUID-9B95B415-BC0B-4D38-BB49-5BAB8072B2BD.html",
							"GUID-9B95B415-BC0B-4D38-BB49-5BAB8072B2BD.html",
							"GUID-9B95B415-BC0B-4D38-BB49-5BAB8072B2BD.html",
							"GUID-9B95B415-BC0B-4D38-BB49-5BAB8072B2BD.html",
							"GUID-9B95B415-BC0B-4D38-BB49-5BAB8072B2BD.html",
							"GUID-C423806D-7DF6-4DF9-A52B-549A08C64B34.html",
							"GUID-C423806D-7DF6-4DF9-A52B-549A08C64B34.html",
							"GUID-C423806D-7DF6-4DF9-A52B-549A08C64B34.html",
							"GUID-C423806D-7DF6-4DF9-A52B-549A08C64B34.html",
							"GUID-448D4554-6A26-4D2D-A74B-2CFF075D135F.html",
							"GUID-448D4554-6A26-4D2D-A74B-2CFF075D135F.html",
							"GUID-448D4554-6A26-4D2D-A74B-2CFF075D135F.html",
							"GUID-448D4554-6A26-4D2D-A74B-2CFF075D135F.html",
							"GUID-658ECEC0-AB3C-4400-8AD9-5F2494C48868.html",
							"GUID-658ECEC0-AB3C-4400-8AD9-5F2494C48868.html",
							"GUID-658ECEC0-AB3C-4400-8AD9-5F2494C48868.html",
							"GUID-658ECEC0-AB3C-4400-8AD9-5F2494C48868.html",
							"GUID-CFA6EF68-6547-4D1A-914A-1A61C1AC4615.html",
							"GUID-CFA6EF68-6547-4D1A-914A-1A61C1AC4615.html",
							"GUID-CFA6EF68-6547-4D1A-914A-1A61C1AC4615.html",
							"GUID-CFA6EF68-6547-4D1A-914A-1A61C1AC4615.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-E73CA8C2-726A-4E9D-92E3-6DA5C65BF105.html",
							"GUID-28D00DC0-BD30-4143-BB30-0FBA9F834DEF.html",
							"GUID-28D00DC0-BD30-4143-BB30-0FBA9F834DEF.html",
							"GUID-28D00DC0-BD30-4143-BB30-0FBA9F834DEF.html",
							"GUID-28D00DC0-BD30-4143-BB30-0FBA9F834DEF.html",
							"GUID-28D00DC0-BD30-4143-BB30-0FBA9F834DEF.html",
							"GUID-D6A955EE-27C0-4F98-9209-C85349A88C7E.html",
							"GUID-D6A955EE-27C0-4F98-9209-C85349A88C7E.html",
							"GUID-D6A955EE-27C0-4F98-9209-C85349A88C7E.html",
							"GUID-D6A955EE-27C0-4F98-9209-C85349A88C7E.html",
							"GUID-D6A955EE-27C0-4F98-9209-C85349A88C7E.html",
							"GUID-1918E767-2F03-49ED-9BF7-29333064426C.html",
							"GUID-1918E767-2F03-49ED-9BF7-29333064426C.html",
							"GUID-1918E767-2F03-49ED-9BF7-29333064426C.html",
							"GUID-1918E767-2F03-49ED-9BF7-29333064426C.html",
							"GUID-EE9E9526-FB8A-4498-BF96-F820EE9C40CF.html",
							"GUID-EE9E9526-FB8A-4498-BF96-F820EE9C40CF.html",
							"GUID-EE9E9526-FB8A-4498-BF96-F820EE9C40CF.html",
							"GUID-EE9E9526-FB8A-4498-BF96-F820EE9C40CF.html",
							"GUID-EE9E9526-FB8A-4498-BF96-F820EE9C40CF.html",
							"GUID-EE9E9526-FB8A-4498-BF96-F820EE9C40CF.html",
							"GUID-4156C65D-82C8-485F-A6D1-772DCEEE0E1E.html",
							"GUID-4156C65D-82C8-485F-A6D1-772DCEEE0E1E.html",
							"GUID-4156C65D-82C8-485F-A6D1-772DCEEE0E1E.html",
							"GUID-4156C65D-82C8-485F-A6D1-772DCEEE0E1E.html",
							"GUID-4156C65D-82C8-485F-A6D1-772DCEEE0E1E.html",
							"GUID-4156C65D-82C8-485F-A6D1-772DCEEE0E1E.html",
							"GUID-BB01ECB5-84DA-4275-B40D-DAC07587BA22.html",
							"GUID-BB01ECB5-84DA-4275-B40D-DAC07587BA22.html",
							"GUID-BB01ECB5-84DA-4275-B40D-DAC07587BA22.html",
							"GUID-BB01ECB5-84DA-4275-B40D-DAC07587BA22.html",
							"GUID-BB01ECB5-84DA-4275-B40D-DAC07587BA22.html",
							"GUID-BB01ECB5-84DA-4275-B40D-DAC07587BA22.html",
							"GUID-57204722-DA90-4F99-93F5-F2136501E2C7.html",
							"GUID-57204722-DA90-4F99-93F5-F2136501E2C7.html",
							"GUID-57204722-DA90-4F99-93F5-F2136501E2C7.html",
							"GUID-57204722-DA90-4F99-93F5-F2136501E2C7.html",
							"GUID-57204722-DA90-4F99-93F5-F2136501E2C7.html",
							"GUID-57204722-DA90-4F99-93F5-F2136501E2C7.html",
							"GUID-ACE87F26-B6CF-4861-962D-FBCE273FBDDF.html",
							"GUID-ACE87F26-B6CF-4861-962D-FBCE273FBDDF.html",
							"GUID-ACE87F26-B6CF-4861-962D-FBCE273FBDDF.html",
							"GUID-ACE87F26-B6CF-4861-962D-FBCE273FBDDF.html",
							"GUID-ACE87F26-B6CF-4861-962D-FBCE273FBDDF.html",
							"GUID-ACE87F26-B6CF-4861-962D-FBCE273FBDDF.html",
							"GUID-0944056F-A528-4B3D-878A-38F5D91904C1.html",
							"GUID-0944056F-A528-4B3D-878A-38F5D91904C1.html",
							"GUID-0944056F-A528-4B3D-878A-38F5D91904C1.html",
							"GUID-0944056F-A528-4B3D-878A-38F5D91904C1.html",
							"GUID-0944056F-A528-4B3D-878A-38F5D91904C1.html",
							"GUID-0944056F-A528-4B3D-878A-38F5D91904C1.html",
							"GUID-2B618A85-3129-4B5D-9D7E-57914A20F94D.html",
							"GUID-2B618A85-3129-4B5D-9D7E-57914A20F94D.html",
							"GUID-2B618A85-3129-4B5D-9D7E-57914A20F94D.html",
							"GUID-2B618A85-3129-4B5D-9D7E-57914A20F94D.html",
							"GUID-2B618A85-3129-4B5D-9D7E-57914A20F94D.html",
							"GUID-511AF571-6D83-4865-B4C5-B1A05350DD33.html",
							"GUID-511AF571-6D83-4865-B4C5-B1A05350DD33.html",
							"GUID-511AF571-6D83-4865-B4C5-B1A05350DD33.html",
							"GUID-511AF571-6D83-4865-B4C5-B1A05350DD33.html",
							"GUID-511AF571-6D83-4865-B4C5-B1A05350DD33.html",
							"GUID-511AF571-6D83-4865-B4C5-B1A05350DD33.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-65A118B4-D691-4EFE-AEDB-47814DBD841F.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-096BD038-3679-419D-88EE-3A928934E41E.html",
							"GUID-C14D5251-C0EE-4297-B04D-039433410F47.html",
							"GUID-C14D5251-C0EE-4297-B04D-039433410F47.html",
							"GUID-C14D5251-C0EE-4297-B04D-039433410F47.html",
							"GUID-C14D5251-C0EE-4297-B04D-039433410F47.html",
							"GUID-C14D5251-C0EE-4297-B04D-039433410F47.html",
							"GUID-C14D5251-C0EE-4297-B04D-039433410F47.html",
							"GUID-75470E5B-2289-4F94-AE85-2BB7DF4C4F07.html",
							"GUID-9F99FA2F-E094-41F2-8A2A-AC62313B0A62.html",
							"GUID-9F99FA2F-E094-41F2-8A2A-AC62313B0A62.html",
							"GUID-9F99FA2F-E094-41F2-8A2A-AC62313B0A62.html",
							"GUID-9F99FA2F-E094-41F2-8A2A-AC62313B0A62.html",
							"GUID-8D40C273-579B-431C-8350-F9A2B709D259.html",
							"GUID-8D40C273-579B-431C-8350-F9A2B709D259.html",
							"GUID-8D40C273-579B-431C-8350-F9A2B709D259.html",
							"GUID-8D40C273-579B-431C-8350-F9A2B709D259.html",
							"GUID-8D40C273-579B-431C-8350-F9A2B709D259.html",
							"GUID-8D40C273-579B-431C-8350-F9A2B709D259.html",
							"GUID-16E9830E-54F2-4688-B1E4-9B92F761DC5E.html",
							"GUID-16E9830E-54F2-4688-B1E4-9B92F761DC5E.html",
							"GUID-16E9830E-54F2-4688-B1E4-9B92F761DC5E.html",
							"GUID-16E9830E-54F2-4688-B1E4-9B92F761DC5E.html",
							"GUID-16E9830E-54F2-4688-B1E4-9B92F761DC5E.html",
							"GUID-16E9830E-54F2-4688-B1E4-9B92F761DC5E.html",
							"GUID-AFECA098-E4EC-4847-AC64-921868BB48BA.html",
							"GUID-AFECA098-E4EC-4847-AC64-921868BB48BA.html",
							"GUID-AFECA098-E4EC-4847-AC64-921868BB48BA.html",
							"GUID-AFECA098-E4EC-4847-AC64-921868BB48BA.html",
							"GUID-AFECA098-E4EC-4847-AC64-921868BB48BA.html",
							"GUID-AFECA098-E4EC-4847-AC64-921868BB48BA.html",
							"GUID-606205B5-997A-4AA8-BB6E-08429D855CA7.html",
							"GUID-606205B5-997A-4AA8-BB6E-08429D855CA7.html",
							"GUID-606205B5-997A-4AA8-BB6E-08429D855CA7.html",
							"GUID-606205B5-997A-4AA8-BB6E-08429D855CA7.html",
							"GUID-606205B5-997A-4AA8-BB6E-08429D855CA7.html",
							"GUID-606205B5-997A-4AA8-BB6E-08429D855CA7.html",
							"GUID-36D5D72A-D963-4A8C-8012-D552407D8AB0.html",
							"GUID-36D5D72A-D963-4A8C-8012-D552407D8AB0.html",
							"GUID-36D5D72A-D963-4A8C-8012-D552407D8AB0.html",
							"GUID-36D5D72A-D963-4A8C-8012-D552407D8AB0.html",
							"GUID-36D5D72A-D963-4A8C-8012-D552407D8AB0.html",
							"GUID-36D5D72A-D963-4A8C-8012-D552407D8AB0.html",
							"GUID-E64B3C2D-C626-4B06-B081-9BECE00C6AD2.html",
							"GUID-E64B3C2D-C626-4B06-B081-9BECE00C6AD2.html",
							"GUID-E64B3C2D-C626-4B06-B081-9BECE00C6AD2.html",
							"GUID-E64B3C2D-C626-4B06-B081-9BECE00C6AD2.html",
							"GUID-E64B3C2D-C626-4B06-B081-9BECE00C6AD2.html",
							"GUID-1334BC43-35EF-48EF-877B-770E61118974.html",
							"GUID-1334BC43-35EF-48EF-877B-770E61118974.html",
							"GUID-1334BC43-35EF-48EF-877B-770E61118974.html",
							"GUID-1334BC43-35EF-48EF-877B-770E61118974.html",
							"GUID-1334BC43-35EF-48EF-877B-770E61118974.html",
							"GUID-1334BC43-35EF-48EF-877B-770E61118974.html",
							"GUID-4EEA334F-2FEB-44C1-A9DF-D5ADFE6717A8.html",
							"GUID-4EEA334F-2FEB-44C1-A9DF-D5ADFE6717A8.html",
							"GUID-4EEA334F-2FEB-44C1-A9DF-D5ADFE6717A8.html",
							"GUID-4EEA334F-2FEB-44C1-A9DF-D5ADFE6717A8.html",
							"GUID-4EEA334F-2FEB-44C1-A9DF-D5ADFE6717A8.html",
							"GUID-20567716-31DC-461C-B196-A643797C90DB.html",
							"GUID-20567716-31DC-461C-B196-A643797C90DB.html",
							"GUID-20567716-31DC-461C-B196-A643797C90DB.html",
							"GUID-20567716-31DC-461C-B196-A643797C90DB.html",
							"GUID-20567716-31DC-461C-B196-A643797C90DB.html",
							"GUID-20567716-31DC-461C-B196-A643797C90DB.html",
							"GUID-85F57BC3-AB6F-4F15-AFE1-99791B84C799.html",
							"GUID-85F57BC3-AB6F-4F15-AFE1-99791B84C799.html",
							"GUID-85F57BC3-AB6F-4F15-AFE1-99791B84C799.html",
							"GUID-85F57BC3-AB6F-4F15-AFE1-99791B84C799.html",
							"GUID-85F57BC3-AB6F-4F15-AFE1-99791B84C799.html",
							"GUID-452D786F-6D8D-4201-BB10-6483F678465E.html",
							"GUID-452D786F-6D8D-4201-BB10-6483F678465E.html",
							"GUID-452D786F-6D8D-4201-BB10-6483F678465E.html",
							"GUID-452D786F-6D8D-4201-BB10-6483F678465E.html",
							"GUID-452D786F-6D8D-4201-BB10-6483F678465E.html",
							"GUID-452D786F-6D8D-4201-BB10-6483F678465E.html",
							"GUID-C0360366-50E8-4421-B1F3-A8D7A3FC81E2.html",
							"GUID-C0360366-50E8-4421-B1F3-A8D7A3FC81E2.html",
							"GUID-C0360366-50E8-4421-B1F3-A8D7A3FC81E2.html",
							"GUID-C0360366-50E8-4421-B1F3-A8D7A3FC81E2.html",
							"GUID-C0360366-50E8-4421-B1F3-A8D7A3FC81E2.html",
							"GUID-C0360366-50E8-4421-B1F3-A8D7A3FC81E2.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-2C33D70C-FEB0-4467-BBDD-91FABD33F0F8.html",
							"GUID-59104AE1-2716-4892-A5C5-8D1C643E81C1.html",
							"GUID-59104AE1-2716-4892-A5C5-8D1C643E81C1.html",
							"GUID-59104AE1-2716-4892-A5C5-8D1C643E81C1.html",
							"GUID-59104AE1-2716-4892-A5C5-8D1C643E81C1.html",
							"GUID-59104AE1-2716-4892-A5C5-8D1C643E81C1.html",
							"GUID-59104AE1-2716-4892-A5C5-8D1C643E81C1.html",
							"GUID-1EE89A71-63B4-4674-B669-A8726597917D.html",
							"GUID-1EE89A71-63B4-4674-B669-A8726597917D.html",
							"GUID-1EE89A71-63B4-4674-B669-A8726597917D.html",
							"GUID-1EE89A71-63B4-4674-B669-A8726597917D.html",
							"GUID-1EE89A71-63B4-4674-B669-A8726597917D.html",
							"GUID-1EE89A71-63B4-4674-B669-A8726597917D.html",
							"GUID-68556710-752A-4812-8AD1-86673574C3E2.html",
							"GUID-68556710-752A-4812-8AD1-86673574C3E2.html",
							"GUID-68556710-752A-4812-8AD1-86673574C3E2.html",
							"GUID-68556710-752A-4812-8AD1-86673574C3E2.html",
							"GUID-68556710-752A-4812-8AD1-86673574C3E2.html",
							"GUID-68556710-752A-4812-8AD1-86673574C3E2.html",
							"GUID-4FDEB3AD-E2FB-4041-B5EC-3DB621AF809B.html",
							"GUID-4FDEB3AD-E2FB-4041-B5EC-3DB621AF809B.html",
							"GUID-4FDEB3AD-E2FB-4041-B5EC-3DB621AF809B.html",
							"GUID-4FDEB3AD-E2FB-4041-B5EC-3DB621AF809B.html",
							"GUID-4FDEB3AD-E2FB-4041-B5EC-3DB621AF809B.html",
							"GUID-D8D0D1D6-ECAA-40CF-B09C-90F06AE6107F.html",
							"GUID-D8D0D1D6-ECAA-40CF-B09C-90F06AE6107F.html",
							"GUID-D8D0D1D6-ECAA-40CF-B09C-90F06AE6107F.html",
							"GUID-D8D0D1D6-ECAA-40CF-B09C-90F06AE6107F.html",
							"GUID-5FE0E246-65E8-4D1D-AD2B-A0998C58F0D7.html",
							"GUID-5FE0E246-65E8-4D1D-AD2B-A0998C58F0D7.html",
							"GUID-5FE0E246-65E8-4D1D-AD2B-A0998C58F0D7.html",
							"GUID-5FE0E246-65E8-4D1D-AD2B-A0998C58F0D7.html",
							"GUID-5FE0E246-65E8-4D1D-AD2B-A0998C58F0D7.html",
							"GUID-524962B7-0E09-4846-8F53-7213CA71FF2D.html",
							"GUID-524962B7-0E09-4846-8F53-7213CA71FF2D.html",
							"GUID-524962B7-0E09-4846-8F53-7213CA71FF2D.html",
							"GUID-524962B7-0E09-4846-8F53-7213CA71FF2D.html",
							"GUID-524962B7-0E09-4846-8F53-7213CA71FF2D.html",
							"GUID-524962B7-0E09-4846-8F53-7213CA71FF2D.html",
							"GUID-AA37C1CF-735E-41C1-99D3-ADDED9199035.html",
							"GUID-AA37C1CF-735E-41C1-99D3-ADDED9199035.html",
							"GUID-AA37C1CF-735E-41C1-99D3-ADDED9199035.html",
							"GUID-AA37C1CF-735E-41C1-99D3-ADDED9199035.html",
							"GUID-AA37C1CF-735E-41C1-99D3-ADDED9199035.html",
							"GUID-F54F388D-F63E-44C5-8F04-CC6ADEE3E514.html",
							"GUID-F54F388D-F63E-44C5-8F04-CC6ADEE3E514.html",
							"GUID-F54F388D-F63E-44C5-8F04-CC6ADEE3E514.html",
							"GUID-E8BBC278-0227-40A6-AD91-354FC3A588EC.html",
							"GUID-E8BBC278-0227-40A6-AD91-354FC3A588EC.html",
							"GUID-E8BBC278-0227-40A6-AD91-354FC3A588EC.html",
							"GUID-E8BBC278-0227-40A6-AD91-354FC3A588EC.html",
							"GUID-E8BBC278-0227-40A6-AD91-354FC3A588EC.html",
							"GUID-E8BBC278-0227-40A6-AD91-354FC3A588EC.html",
							"GUID-B1B95E81-E580-41FE-97B9-4C5A476C550D.html",
							"GUID-B1B95E81-E580-41FE-97B9-4C5A476C550D.html",
							"GUID-B1B95E81-E580-41FE-97B9-4C5A476C550D.html",
							"GUID-B1B95E81-E580-41FE-97B9-4C5A476C550D.html",
							"GUID-B1B95E81-E580-41FE-97B9-4C5A476C550D.html",
							"GUID-EC147DB3-37CB-4CFA-9AE2-2396C7F3E8C9.html",
							"GUID-EC147DB3-37CB-4CFA-9AE2-2396C7F3E8C9.html",
							"GUID-EC147DB3-37CB-4CFA-9AE2-2396C7F3E8C9.html",
							"GUID-EC147DB3-37CB-4CFA-9AE2-2396C7F3E8C9.html",
							"GUID-02895CBF-4E55-4E31-817E-11206B95FDE1.html",
							"GUID-02895CBF-4E55-4E31-817E-11206B95FDE1.html",
							"GUID-02895CBF-4E55-4E31-817E-11206B95FDE1.html",
							"GUID-02895CBF-4E55-4E31-817E-11206B95FDE1.html",
							"GUID-D8879307-6878-418A-9A76-492EB5093D5D.html",
							"GUID-D8879307-6878-418A-9A76-492EB5093D5D.html",
							"GUID-D8879307-6878-418A-9A76-492EB5093D5D.html",
							"GUID-D8879307-6878-418A-9A76-492EB5093D5D.html",
							"GUID-D8879307-6878-418A-9A76-492EB5093D5D.html",
							"GUID-5D83E6FA-5BCD-43DC-9CC3-5583A0FF7197.html",
							"GUID-5D83E6FA-5BCD-43DC-9CC3-5583A0FF7197.html",
							"GUID-5D83E6FA-5BCD-43DC-9CC3-5583A0FF7197.html",
							"GUID-5D83E6FA-5BCD-43DC-9CC3-5583A0FF7197.html",
							"GUID-B809DB24-044F-4E28-A7B5-594461FB06EE.html",
							"GUID-B809DB24-044F-4E28-A7B5-594461FB06EE.html",
							"GUID-B809DB24-044F-4E28-A7B5-594461FB06EE.html",
							"GUID-B809DB24-044F-4E28-A7B5-594461FB06EE.html",
							"GUID-AE3AD187-8B6D-4C12-95E4-57C2C14D5CF1.html",
							"GUID-AE3AD187-8B6D-4C12-95E4-57C2C14D5CF1.html",
							"GUID-AE3AD187-8B6D-4C12-95E4-57C2C14D5CF1.html",
							"GUID-AE3AD187-8B6D-4C12-95E4-57C2C14D5CF1.html",
							"GUID-298A4190-0B65-4FC5-BEFA-8536001B4168.html",
							"GUID-298A4190-0B65-4FC5-BEFA-8536001B4168.html",
							"GUID-298A4190-0B65-4FC5-BEFA-8536001B4168.html",
							"GUID-298A4190-0B65-4FC5-BEFA-8536001B4168.html",
							"GUID-8C8739A7-EB00-469C-AFED-6DB457E65D96.html",
							"GUID-8C8739A7-EB00-469C-AFED-6DB457E65D96.html",
							"GUID-8C8739A7-EB00-469C-AFED-6DB457E65D96.html",
							"GUID-8C8739A7-EB00-469C-AFED-6DB457E65D96.html",
							"GUID-8C8739A7-EB00-469C-AFED-6DB457E65D96.html",
							"GUID-8C8739A7-EB00-469C-AFED-6DB457E65D96.html",
							"GUID-06EF50DE-6188-426E-90FE-9CA7BC8D7114.html",
							"GUID-06EF50DE-6188-426E-90FE-9CA7BC8D7114.html",
							"GUID-06EF50DE-6188-426E-90FE-9CA7BC8D7114.html",
							"GUID-06EF50DE-6188-426E-90FE-9CA7BC8D7114.html",
							"GUID-06EF50DE-6188-426E-90FE-9CA7BC8D7114.html",
							"GUID-06EF50DE-6188-426E-90FE-9CA7BC8D7114.html",
							"GUID-96055254-A7FF-4F59-982B-4086005F2E29.html",
							"GUID-96055254-A7FF-4F59-982B-4086005F2E29.html",
							"GUID-96055254-A7FF-4F59-982B-4086005F2E29.html",
							"GUID-96055254-A7FF-4F59-982B-4086005F2E29.html",
							"GUID-96055254-A7FF-4F59-982B-4086005F2E29.html",
							"GUID-96055254-A7FF-4F59-982B-4086005F2E29.html",
							"GUID-AFDF4187-9B0B-4C3C-9324-7C1F3B0301B7.html",
							"GUID-AFDF4187-9B0B-4C3C-9324-7C1F3B0301B7.html",
							"GUID-AFDF4187-9B0B-4C3C-9324-7C1F3B0301B7.html",
							"GUID-AFDF4187-9B0B-4C3C-9324-7C1F3B0301B7.html",
							"GUID-AFDF4187-9B0B-4C3C-9324-7C1F3B0301B7.html",
							"GUID-AFDF4187-9B0B-4C3C-9324-7C1F3B0301B7.html",
							"GUID-10FF60D8-3CB1-45C2-A2ED-D638B2839331.html",
							"GUID-10FF60D8-3CB1-45C2-A2ED-D638B2839331.html",
							"GUID-10FF60D8-3CB1-45C2-A2ED-D638B2839331.html",
							"GUID-10FF60D8-3CB1-45C2-A2ED-D638B2839331.html",
							"GUID-10FF60D8-3CB1-45C2-A2ED-D638B2839331.html",
							"GUID-10FF60D8-3CB1-45C2-A2ED-D638B2839331.html",
							"GUID-ED554FEC-7E5C-4C06-AC60-077D458A16B1.html",
							"GUID-ED554FEC-7E5C-4C06-AC60-077D458A16B1.html",
							"GUID-ED554FEC-7E5C-4C06-AC60-077D458A16B1.html",
							"GUID-ED554FEC-7E5C-4C06-AC60-077D458A16B1.html",
							"GUID-ED554FEC-7E5C-4C06-AC60-077D458A16B1.html",
							"GUID-6421739B-0ECE-4F81-93DF-4F9790E03278.html",
							"GUID-6421739B-0ECE-4F81-93DF-4F9790E03278.html",
							"GUID-6421739B-0ECE-4F81-93DF-4F9790E03278.html",
							"GUID-6421739B-0ECE-4F81-93DF-4F9790E03278.html",
							"GUID-6421739B-0ECE-4F81-93DF-4F9790E03278.html",
							"GUID-6421739B-0ECE-4F81-93DF-4F9790E03278.html",
							"GUID-26F6675F-2B57-4AAE-9982-52DE60FA97FD.html",
							"GUID-26F6675F-2B57-4AAE-9982-52DE60FA97FD.html",
							"GUID-26F6675F-2B57-4AAE-9982-52DE60FA97FD.html",
							"GUID-26F6675F-2B57-4AAE-9982-52DE60FA97FD.html",
							"GUID-26F6675F-2B57-4AAE-9982-52DE60FA97FD.html",
							"GUID-ECBD9274-F169-4E39-A7B9-378AF111097E.html",
							"GUID-ECBD9274-F169-4E39-A7B9-378AF111097E.html",
							"GUID-ECBD9274-F169-4E39-A7B9-378AF111097E.html",
							"GUID-ECBD9274-F169-4E39-A7B9-378AF111097E.html",
							"GUID-ECBD9274-F169-4E39-A7B9-378AF111097E.html",
							"GUID-ECBD9274-F169-4E39-A7B9-378AF111097E.html",
							"GUID-ACECEC62-5566-449B-A63D-70C15556BF2B.html",
							"GUID-ACECEC62-5566-449B-A63D-70C15556BF2B.html",
							"GUID-ACECEC62-5566-449B-A63D-70C15556BF2B.html",
							"GUID-ACECEC62-5566-449B-A63D-70C15556BF2B.html",
							"GUID-ACECEC62-5566-449B-A63D-70C15556BF2B.html",
							"GUID-78B04367-8967-496E-BF27-437D88F7CBFE.html",
							"GUID-78B04367-8967-496E-BF27-437D88F7CBFE.html",
							"GUID-78B04367-8967-496E-BF27-437D88F7CBFE.html",
							"GUID-78B04367-8967-496E-BF27-437D88F7CBFE.html",
							"GUID-78B04367-8967-496E-BF27-437D88F7CBFE.html",
							"GUID-78B04367-8967-496E-BF27-437D88F7CBFE.html",
							"GUID-9A9F54F8-09FE-483F-BA62-886871114B72.html",
							"GUID-9A9F54F8-09FE-483F-BA62-886871114B72.html",
							"GUID-9A9F54F8-09FE-483F-BA62-886871114B72.html",
							"GUID-9A9F54F8-09FE-483F-BA62-886871114B72.html",
							"GUID-9A9F54F8-09FE-483F-BA62-886871114B72.html",
							"GUID-9A9F54F8-09FE-483F-BA62-886871114B72.html",
							"GUID-867EDFFC-8900-463A-8E2C-F342C9DFFC67.html",
							"GUID-867EDFFC-8900-463A-8E2C-F342C9DFFC67.html",
							"GUID-867EDFFC-8900-463A-8E2C-F342C9DFFC67.html",
							"GUID-867EDFFC-8900-463A-8E2C-F342C9DFFC67.html",
							"GUID-867EDFFC-8900-463A-8E2C-F342C9DFFC67.html",
							"GUID-867EDFFC-8900-463A-8E2C-F342C9DFFC67.html",
							"GUID-C9EC53A2-372C-4EE3-8093-316236CFDA93.html",
							"GUID-C9EC53A2-372C-4EE3-8093-316236CFDA93.html",
							"GUID-C9EC53A2-372C-4EE3-8093-316236CFDA93.html",
							"GUID-C9EC53A2-372C-4EE3-8093-316236CFDA93.html",
							"GUID-C9EC53A2-372C-4EE3-8093-316236CFDA93.html",
							"GUID-1E9FBEFE-AB48-4348-A53B-035ACA2FCA79.html",
							"GUID-1E9FBEFE-AB48-4348-A53B-035ACA2FCA79.html",
							"GUID-1E9FBEFE-AB48-4348-A53B-035ACA2FCA79.html",
							"GUID-1E9FBEFE-AB48-4348-A53B-035ACA2FCA79.html",
							"GUID-1E9FBEFE-AB48-4348-A53B-035ACA2FCA79.html",
							"GUID-1E9FBEFE-AB48-4348-A53B-035ACA2FCA79.html",
							"GUID-5B2BC038-DFCD-4BA2-9DA9-CC9178C93B8B.html",
							"GUID-5B2BC038-DFCD-4BA2-9DA9-CC9178C93B8B.html",
							"GUID-5B2BC038-DFCD-4BA2-9DA9-CC9178C93B8B.html",
							"GUID-5B2BC038-DFCD-4BA2-9DA9-CC9178C93B8B.html",
							"GUID-5B2BC038-DFCD-4BA2-9DA9-CC9178C93B8B.html",
							"GUID-5B2BC038-DFCD-4BA2-9DA9-CC9178C93B8B.html",
							"GUID-4D01713E-3500-4C3B-B5BB-3D12C3FC3157.html",
							"GUID-4D01713E-3500-4C3B-B5BB-3D12C3FC3157.html",
							"GUID-4D01713E-3500-4C3B-B5BB-3D12C3FC3157.html",
							"GUID-4D01713E-3500-4C3B-B5BB-3D12C3FC3157.html",
							"GUID-4D01713E-3500-4C3B-B5BB-3D12C3FC3157.html",
							"GUID-4D01713E-3500-4C3B-B5BB-3D12C3FC3157.html",
							"GUID-7428463B-358F-43F8-8965-2DFEB7CD1C31.html",
							"GUID-7428463B-358F-43F8-8965-2DFEB7CD1C31.html",
							"GUID-7428463B-358F-43F8-8965-2DFEB7CD1C31.html",
							"GUID-7428463B-358F-43F8-8965-2DFEB7CD1C31.html",
							"GUID-7428463B-358F-43F8-8965-2DFEB7CD1C31.html",
							"GUID-7428463B-358F-43F8-8965-2DFEB7CD1C31.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-1491B842-4921-4322-AB69-E29C7B1790C5.html",
							"GUID-86C5EC0B-8A2C-453C-8D10-AE1E66E1DF51.html",
							"GUID-86C5EC0B-8A2C-453C-8D10-AE1E66E1DF51.html",
							"GUID-86C5EC0B-8A2C-453C-8D10-AE1E66E1DF51.html",
							"GUID-86C5EC0B-8A2C-453C-8D10-AE1E66E1DF51.html",
							"GUID-86C5EC0B-8A2C-453C-8D10-AE1E66E1DF51.html",
							"GUID-86C5EC0B-8A2C-453C-8D10-AE1E66E1DF51.html",
							"GUID-E88A18CC-16AB-4D37-9942-356483BC10D0.html",
							"GUID-E88A18CC-16AB-4D37-9942-356483BC10D0.html",
							"GUID-E88A18CC-16AB-4D37-9942-356483BC10D0.html",
							"GUID-E88A18CC-16AB-4D37-9942-356483BC10D0.html",
							"GUID-E88A18CC-16AB-4D37-9942-356483BC10D0.html",
							"GUID-E88A18CC-16AB-4D37-9942-356483BC10D0.html",
							"GUID-7A0113E3-4E70-4523-AEED-41E98ED0DD57.html",
							"GUID-7A0113E3-4E70-4523-AEED-41E98ED0DD57.html",
							"GUID-7A0113E3-4E70-4523-AEED-41E98ED0DD57.html",
							"GUID-7A0113E3-4E70-4523-AEED-41E98ED0DD57.html",
							"GUID-7A0113E3-4E70-4523-AEED-41E98ED0DD57.html",
							"GUID-7A0113E3-4E70-4523-AEED-41E98ED0DD57.html",
							"GUID-DEBA081A-E861-4901-8C83-D90C5C05A50D.html",
							"GUID-DEBA081A-E861-4901-8C83-D90C5C05A50D.html",
							"GUID-DEBA081A-E861-4901-8C83-D90C5C05A50D.html",
							"GUID-DEBA081A-E861-4901-8C83-D90C5C05A50D.html",
							"GUID-DEBA081A-E861-4901-8C83-D90C5C05A50D.html",
							"GUID-DEBA081A-E861-4901-8C83-D90C5C05A50D.html",
							"GUID-EC1B96C9-CB91-4719-A5FC-CEA7FD9CCFC8.html",
							"GUID-EC1B96C9-CB91-4719-A5FC-CEA7FD9CCFC8.html",
							"GUID-EC1B96C9-CB91-4719-A5FC-CEA7FD9CCFC8.html",
							"GUID-EC1B96C9-CB91-4719-A5FC-CEA7FD9CCFC8.html",
							"GUID-EC1B96C9-CB91-4719-A5FC-CEA7FD9CCFC8.html",
							"GUID-9AC4FEC0-84BA-4E2C-93EF-35B3F6C91518.html",
							"GUID-9AC4FEC0-84BA-4E2C-93EF-35B3F6C91518.html",
							"GUID-9AC4FEC0-84BA-4E2C-93EF-35B3F6C91518.html",
							"GUID-9AC4FEC0-84BA-4E2C-93EF-35B3F6C91518.html",
							"GUID-9AC4FEC0-84BA-4E2C-93EF-35B3F6C91518.html",
							"GUID-9AC4FEC0-84BA-4E2C-93EF-35B3F6C91518.html",
							"GUID-0727B400-CC9C-4F2B-87C8-1FC91E4C62F8.html",
							"GUID-0727B400-CC9C-4F2B-87C8-1FC91E4C62F8.html",
							"GUID-0727B400-CC9C-4F2B-87C8-1FC91E4C62F8.html",
							"GUID-0727B400-CC9C-4F2B-87C8-1FC91E4C62F8.html",
							"GUID-0727B400-CC9C-4F2B-87C8-1FC91E4C62F8.html",
							"GUID-0727B400-CC9C-4F2B-87C8-1FC91E4C62F8.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-51BE11D4-8D24-43BA-9300-1B1382FE077D.html",
							"GUID-E374AB9C-2664-4786-B6FC-5B5C88311005.html",
							"GUID-E374AB9C-2664-4786-B6FC-5B5C88311005.html",
							"GUID-E374AB9C-2664-4786-B6FC-5B5C88311005.html",
							"GUID-E374AB9C-2664-4786-B6FC-5B5C88311005.html",
							"GUID-E374AB9C-2664-4786-B6FC-5B5C88311005.html",
							"GUID-E374AB9C-2664-4786-B6FC-5B5C88311005.html",
							"GUID-655618AA-5876-4320-9ED2-DFECE543BB57.html",
							"GUID-655618AA-5876-4320-9ED2-DFECE543BB57.html",
							"GUID-655618AA-5876-4320-9ED2-DFECE543BB57.html",
							"GUID-655618AA-5876-4320-9ED2-DFECE543BB57.html",
							"GUID-655618AA-5876-4320-9ED2-DFECE543BB57.html",
							"GUID-43CB853B-06D8-4F48-80BD-46E29145B2F0.html",
							"GUID-43CB853B-06D8-4F48-80BD-46E29145B2F0.html",
							"GUID-43CB853B-06D8-4F48-80BD-46E29145B2F0.html",
							"GUID-43CB853B-06D8-4F48-80BD-46E29145B2F0.html",
							"GUID-F77D6148-BF49-4712-B38A-0A482554D783.html",
							"GUID-F77D6148-BF49-4712-B38A-0A482554D783.html",
							"GUID-F77D6148-BF49-4712-B38A-0A482554D783.html",
							"GUID-F77D6148-BF49-4712-B38A-0A482554D783.html",
							"GUID-3D7BA57F-823F-46C0-9F35-1FDCFD750061.html",
							"GUID-3D7BA57F-823F-46C0-9F35-1FDCFD750061.html",
							"GUID-3D7BA57F-823F-46C0-9F35-1FDCFD750061.html",
							"GUID-3D7BA57F-823F-46C0-9F35-1FDCFD750061.html",
							"GUID-3D7BA57F-823F-46C0-9F35-1FDCFD750061.html",
							"GUID-3D7BA57F-823F-46C0-9F35-1FDCFD750061.html",
							"GUID-3EF78452-3F4A-4D80-8100-8AF7E15C89BE.html",
							"GUID-3EF78452-3F4A-4D80-8100-8AF7E15C89BE.html",
							"GUID-3EF78452-3F4A-4D80-8100-8AF7E15C89BE.html",
							"GUID-3EF78452-3F4A-4D80-8100-8AF7E15C89BE.html",
							"GUID-3EF78452-3F4A-4D80-8100-8AF7E15C89BE.html",
							"GUID-3EF78452-3F4A-4D80-8100-8AF7E15C89BE.html",
							"GUID-966381B9-C7A1-4570-9ADD-C5455814FC42.html",
							"GUID-966381B9-C7A1-4570-9ADD-C5455814FC42.html",
							"GUID-966381B9-C7A1-4570-9ADD-C5455814FC42.html",
							"GUID-966381B9-C7A1-4570-9ADD-C5455814FC42.html",
							"GUID-966381B9-C7A1-4570-9ADD-C5455814FC42.html",
							"GUID-966381B9-C7A1-4570-9ADD-C5455814FC42.html",
							"GUID-B786C127-6FE1-408B-A56B-C61770D1B058.html",
							"GUID-B786C127-6FE1-408B-A56B-C61770D1B058.html",
							"GUID-B786C127-6FE1-408B-A56B-C61770D1B058.html",
							"GUID-B786C127-6FE1-408B-A56B-C61770D1B058.html",
							"GUID-B786C127-6FE1-408B-A56B-C61770D1B058.html",
							"GUID-B786C127-6FE1-408B-A56B-C61770D1B058.html",
							"GUID-2D2E1AE8-AEC5-4CD4-9F65-E871C14090AE.html",
							"GUID-2D2E1AE8-AEC5-4CD4-9F65-E871C14090AE.html",
							"GUID-2D2E1AE8-AEC5-4CD4-9F65-E871C14090AE.html",
							"GUID-2D2E1AE8-AEC5-4CD4-9F65-E871C14090AE.html",
							"GUID-2D2E1AE8-AEC5-4CD4-9F65-E871C14090AE.html",
							"GUID-2D2E1AE8-AEC5-4CD4-9F65-E871C14090AE.html",
							"GUID-44EE1044-2000-4DDE-843F-49D8120E3A07.html",
							"GUID-44EE1044-2000-4DDE-843F-49D8120E3A07.html",
							"GUID-44EE1044-2000-4DDE-843F-49D8120E3A07.html",
							"GUID-44EE1044-2000-4DDE-843F-49D8120E3A07.html",
							"GUID-44EE1044-2000-4DDE-843F-49D8120E3A07.html",
							"GUID-81ADA0CF-346C-463C-9D5A-D721C3A7E2AA.html",
							"GUID-81ADA0CF-346C-463C-9D5A-D721C3A7E2AA.html",
							"GUID-81ADA0CF-346C-463C-9D5A-D721C3A7E2AA.html",
							"GUID-81ADA0CF-346C-463C-9D5A-D721C3A7E2AA.html",
							"GUID-81ADA0CF-346C-463C-9D5A-D721C3A7E2AA.html",
							"GUID-81ADA0CF-346C-463C-9D5A-D721C3A7E2AA.html",
							"GUID-72A42486-DE9F-4B4F-AA49-1940C08D83C6.html",
							"GUID-72A42486-DE9F-4B4F-AA49-1940C08D83C6.html",
							"GUID-72A42486-DE9F-4B4F-AA49-1940C08D83C6.html",
							"GUID-72A42486-DE9F-4B4F-AA49-1940C08D83C6.html",
							"GUID-72A42486-DE9F-4B4F-AA49-1940C08D83C6.html",
							"GUID-72A42486-DE9F-4B4F-AA49-1940C08D83C6.html",
							"GUID-AD92D49B-6FE0-4B29-9BE9-A77D7F7B3357.html",
							"GUID-AD92D49B-6FE0-4B29-9BE9-A77D7F7B3357.html",
							"GUID-AD92D49B-6FE0-4B29-9BE9-A77D7F7B3357.html",
							"GUID-AD92D49B-6FE0-4B29-9BE9-A77D7F7B3357.html",
							"GUID-AD92D49B-6FE0-4B29-9BE9-A77D7F7B3357.html",
							"GUID-AD92D49B-6FE0-4B29-9BE9-A77D7F7B3357.html",
							"GUID-C43FFD81-6662-48D3-9E17-6FD5778DA7BB.html",
							"GUID-C43FFD81-6662-48D3-9E17-6FD5778DA7BB.html",
							"GUID-C43FFD81-6662-48D3-9E17-6FD5778DA7BB.html",
							"GUID-C43FFD81-6662-48D3-9E17-6FD5778DA7BB.html",
							"GUID-C43FFD81-6662-48D3-9E17-6FD5778DA7BB.html",
							"GUID-08FBA7C3-98EE-43B2-B6CE-54B88FFFD70B.html",
							"GUID-08FBA7C3-98EE-43B2-B6CE-54B88FFFD70B.html",
							"GUID-08FBA7C3-98EE-43B2-B6CE-54B88FFFD70B.html",
							"GUID-08FBA7C3-98EE-43B2-B6CE-54B88FFFD70B.html",
							"GUID-08FBA7C3-98EE-43B2-B6CE-54B88FFFD70B.html",
							"GUID-08FBA7C3-98EE-43B2-B6CE-54B88FFFD70B.html",
							"GUID-12A479F7-B8AD-42B6-8E62-D188E3688AB2.html",
							"GUID-12A479F7-B8AD-42B6-8E62-D188E3688AB2.html",
							"GUID-12A479F7-B8AD-42B6-8E62-D188E3688AB2.html",
							"GUID-12A479F7-B8AD-42B6-8E62-D188E3688AB2.html",
							"GUID-12A479F7-B8AD-42B6-8E62-D188E3688AB2.html",
							"GUID-12A479F7-B8AD-42B6-8E62-D188E3688AB2.html",
							"GUID-78AA9C7F-FB18-42D9-9091-9623B7566BB0.html",
							"GUID-78AA9C7F-FB18-42D9-9091-9623B7566BB0.html",
							"GUID-78AA9C7F-FB18-42D9-9091-9623B7566BB0.html",
							"GUID-78AA9C7F-FB18-42D9-9091-9623B7566BB0.html",
							"GUID-78AA9C7F-FB18-42D9-9091-9623B7566BB0.html",
							"GUID-78AA9C7F-FB18-42D9-9091-9623B7566BB0.html",
							"GUID-617D683D-30A5-461F-A7B4-109568A59E47.html",
							"GUID-617D683D-30A5-461F-A7B4-109568A59E47.html",
							"GUID-617D683D-30A5-461F-A7B4-109568A59E47.html",
							"GUID-617D683D-30A5-461F-A7B4-109568A59E47.html",
							"GUID-617D683D-30A5-461F-A7B4-109568A59E47.html",
							"GUID-617D683D-30A5-461F-A7B4-109568A59E47.html",
							"GUID-51877883-0A3E-4AF6-963B-F733F4FE68CD.html",
							"GUID-51877883-0A3E-4AF6-963B-F733F4FE68CD.html",
							"GUID-51877883-0A3E-4AF6-963B-F733F4FE68CD.html",
							"GUID-51877883-0A3E-4AF6-963B-F733F4FE68CD.html",
							"GUID-51877883-0A3E-4AF6-963B-F733F4FE68CD.html",
							"GUID-51877883-0A3E-4AF6-963B-F733F4FE68CD.html",
							"GUID-F4E4B0BB-BCBC-45A1-8F5B-7E4D76C83CF3.html","GUID-B3DF7158-6633-4C5A-8A48-A4CBFC748EE5.html","GUID-3A0DFD6E-F6BC-4FE9-BAE4-BE22C34C21C0.html"];

var SearchTitles = ["MPLAB® Harmony TCP/IP Library",
"Announce Module",
"TCPIP_ANNOUNCE_BROADCAST_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_ANNOUNCE_CallbackRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ANNOUNCE_FIELD_PAYLOAD Enumeration",
"C",
"Description",
"Members",
"TCPIP_ANNOUNCE_MESSAGE_CALLBACK Type",
"C",
"Description",
"Remarks",
"TCPIP_ANNOUNCE_MessageRequest Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ANNOUNCE_MODULE_CONFIG Structure",
"C",
"Description",
"TCPIP_ANNOUNCE_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"ARP Module",
"TCPIP_ARP_CacheEntriesNoGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_CacheThresholdSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_ENTRY_QUERY Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_ARP_ENTRY_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_ARP_EntryGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_EntryQuery Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_EntryRemove Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_EntryRemoveAll Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_EntryRemoveNet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_EntrySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_EVENT_HANDLER Type",
"C",
"Description",
"Remarks",
"TCPIP_ARP_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_ARP_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_ARP_HandlerDeRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_IsResolved Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_ARP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_ARP_OPERATION_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_ARP_Probe Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_Resolve Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ARP_RESULT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_ARP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"Berkeley Module",
"__ss_aligntype Macro",
"C",
"Description",
"__SS_PADSIZE Macro",
"C",
"Description",
"__SS_SIZE Macro",
"C",
"Description",
"_BERKELEY_API_HEADER_FILE Macro",
"C",
"Description",
"_BERKELEYAPI_CONFIG_H_ Macro",
"C",
"Description",
"accept Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"addrinfo Structure",
"C",
"Description",
"AF_INET Macro",
"C",
"Description",
"AF_INET6 Macro",
"C",
"Description",
"Berkeley_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"bind Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"closesocket Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"connect Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"EAI_AGAIN Macro",
"C",
"Description",
"EAI_BADFLAGS Macro",
"C",
"Description",
"EAI_FAIL Macro",
"C",
"Description",
"EAI_FAMILY Macro",
"C",
"Description",
"EAI_MEMORY Macro",
"C",
"Description",
"EAI_NONAME Macro",
"C",
"Description",
"EAI_OVERFLOW Macro",
"C",
"Description",
"EAI_SERVICE Macro",
"C",
"Description",
"EAI_SOCKTYPE Macro",
"C",
"Description",
"EAI_SYSTEM Macro",
"C",
"Description",
"freeaddrinfo Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"getaddrinfo Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"gethostbyname Function",
"C",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"gethostname Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"getsockname Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"getsockopt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"h_errno Variable",
"C",
"Description",
"HOST_NOT_FOUND Macro",
"C",
"Description",
"hostent Structure",
"C",
"Description",
"Members",
"ICMP6_FILTER Macro",
"C",
"Description",
"in_addr Structure",
"C",
"Members",
"in6_addr Structure",
"C",
"Description",
"Members",
"INADDR_ANY Macro",
"C",
"Description",
"INVALID_TCP_PORT Macro",
"C",
"Description",
"IP_ADD_MEMBERSHIP Macro",
"C",
"Description",
"IP_ADDR_ANY Macro",
"C",
"Description",
"IP_DROP_MEMBERSHIP Macro",
"C",
"Description",
"IP_MULTICAST_IF Macro",
"C",
"Description",
"IP_MULTICAST_LOOP Macro",
"C",
"Description",
"IP_MULTICAST_TTL Macro",
"C",
"Description",
"IP_OPTIONS Macro",
"C",
"Description",
"IP_TOS Macro",
"C",
"Description",
"IP_TTL Macro",
"C",
"Description",
"IPPROTO_ICMPV6 Macro",
"C",
"Description",
"IPPROTO_IP Macro",
"C",
"Description",
"IPPROTO_IPV6 Macro",
"C",
"Description",
"IPPROTO_TCP Macro",
"C",
"Description",
"IPPROTO_UDP Macro",
"C",
"Description",
"IPV6_CHECKSUM Macro",
"C",
"Description",
"IPV6_JOIN_GROUP Macro",
"C",
"Description",
"IPV6_LEAVE_GROUP Macro",
"C",
"Description",
"IPV6_MULTICAST_HOPS Macro",
"C",
"Description",
"IPV6_MULTICAST_IF Macro",
"C",
"Description",
"IPV6_MULTICAST_LOOP Macro",
"C",
"Description",
"IPV6_UNICAST_HOPS Macro",
"C",
"Description",
"IPV6_V6ONLY Macro",
"C",
"Description",
"linger Structure",
"C",
"Description",
"Members",
"listen Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"NO_DATA Macro",
"C",
"Description",
"NO_RECOVERY Macro",
"C",
"Description",
"recv Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"recvfrom Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"send Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"sendto Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"setsockopt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"SO_BROADCAST Macro",
"C",
"Description",
"SO_DEBUG Macro",
"C",
"Description",
"SO_DONTROUTE Macro",
"C",
"Description",
"SO_KEEPALIVE Macro",
"C",
"Description",
"SO_LINGER Macro",
"C",
"Description",
"SO_OOBINLINE Macro",
"C",
"Description",
"SO_RCVBUF Macro",
"C",
"Description",
"SO_RCVLOWAT Macro",
"C",
"Description",
"SO_RCVTIMEO Macro",
"C",
"Description",
"SO_REUSEADDR Macro",
"C",
"Description",
"SO_SNDBUF Macro",
"C",
"Description",
"SO_SNDLOWAT Macro",
"C",
"Description",
"SO_SNDTIMEO Macro",
"C",
"Description",
"SOCK_DGRAM Macro",
"C",
"Description",
"SOCK_STREAM Macro",
"C",
"Description",
"sockaddr Structure",
"C",
"Description",
"Members",
"SOCKADDR Type",
"C",
"Description",
"sockaddr_in Structure",
"C",
"Description",
"Members",
"SOCKADDR_IN Type",
"C",
"Description",
"sockaddr_in6 Structure",
"C",
"Description",
"Members",
"SOCKADDR_IN6 Type",
"C",
"Description",
"sockaddr_storage Structure",
"C",
"Description",
"Members",
"socket Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"SOCKET Type",
"C",
"Description",
"SOCKET_CNXN_IN_PROGRESS Macro",
"C",
"Description",
"SOCKET_DISCONNECTED Macro",
"C",
"Description",
"SOCKET_ERROR Macro",
"C",
"Description",
"SOL_SOCKET Macro",
"C",
"Description",
"TCP_NODELAY Macro",
"C",
"Description",
"TCPIP_BSD_PresSocket Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_BSD_Socket Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_BSD_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TRY_AGAIN Macro",
"C",
"Description",
"DHCP Client Module",
"TCPIP_DHCP_Disable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_Enable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_EVENT_HANDLER Type",
"C",
"Description",
"TCPIP_DHCP_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCP_HANDLE Type",
"C",
"Description",
"TCPIP_DHCP_HandlerDeRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_HOST_NAME_CALLBACK Type",
"C",
"Description",
"Remarks",
"TCPIP_DHCP_HostNameCallbackRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_INFO Structure",
"C",
"Description",
"Members",
"TCPIP_DHCP_InfoGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_IsActive Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_IsBound Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_IsEnabled Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_IsServerDetected Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCP_Renew Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_Request Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_RequestTimeoutSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCP_STATUS Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"DHCP Server Module",
"TCPIP_DHCPS_ADDRESS_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_Disable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCPS_Enable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCPS_GetPoolEntries Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCPS_IsEnabled Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCPS_LEASE_ENTRY Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_LEASE_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_DHCPS_LeaseEntryGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_DHCPS_LeaseEntryRemove Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCPS_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_POOL_ENTRY_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_RemovePoolEntries Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DHCPS_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"DHCP Server Module (V2)",
"TCPIP_DHCPS_CLIENT_OPTION_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_CLIENT_OPTION_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_CONFIG_FLAGS Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_Configure Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_Disable Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_Enable Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_EVENT_TYPE Type",
"C",
"Description",
"TCPIP_DHCPS_EVENT_HANDLER Type",
"C",
"Description",
"Parameters",
"TCPIP_DHCPS_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_HandlerDeRegister Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_HandlerRegister Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_INTERFACE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_IsEnabled Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_LEASE_INFO Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_LEASE_SET Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_LEASE_STATE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_LeaseAddById Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_LeaseEntriesGet Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_LeaseGetInfo Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_LeaseGetInfoById Function",
"C",
"Description",
"Parameters",
"TCPIP_DHCPS_LeaseRemove Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_LeaseRemoveAll Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_LeaseRemoveById Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_REQ_FORMAT_ERR_MASK Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_RES Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPS_STATISTICS_DATA Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPS_StatisticsDataGet Function",
"C",
"Description",
"Parameters",
"Returns",
"TCPIP_DHCPS_Task Function",
"C",
"Description",
"Parameters",
"Returns",
"DHCPv6 Module",
"TCPIP_DHCPV6_CLIENT_INFO Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_CLIENT_STATE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_ClientInfoGet Function",
"C",
"Description",
"TCPIP_DHCPV6_CONFIG_FLAGS Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_DUID_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_EVENT_HANDLER Type",
"C",
"Description",
"TCPIP_DHCPV6_HANDLE Type",
"C",
"Description",
"TCPIP_DHCPV6_HandlerDeRegister Function",
"C",
"Description",
"TCPIP_DHCPV6_HandlerRegister Function",
"C",
"Description",
"TCPIP_DHCPV6_IA_EVENT Union",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_IA_INFO Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_IA_STATE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_IA_SUBSTATE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_IA_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_IaInfoGet Function",
"C",
"Description",
"TCPIP_DHCPV6_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_SERVER_STATUS_CODE Enumeration",
"C",
"Description",
"Members",
"TCPIP_DHCPV6_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_DHCPV6_USER_NOTIFICATION Macro",
"C",
"Description",
"DNS Module",
"TCPIP_DNS_CLIENT_ADDRESS_TYPE Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_CACHE_DEFAULT_TTL_VAL Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_CACHE_ENTRIES Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_CACHE_ENTRY_TMO Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_CACHE_PER_IPV4_ADDRESS Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_CACHE_PER_IPV6_ADDRESS Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_CACHE_UNSOLVED_ENTRY_TMO Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_INFO Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_MAX_HOSTNAME_LEN Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_MAX_SELECT_INTERFACES Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_CLIENT_SERVER_TMO Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_TASK_PROCESS_RATE Macro",
"C",
"Description",
"TCPIP_DNS_CLIENT_USER_NOTIFICATION Macro",
"C",
"Description",
"TCPIP_DNS_ClientInfoGet Function",
"C",
"Description",
"Preconditions",
"Paramaters",
"Returns",
"Remarks",
"TCPIP_DNS_ClientTask Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_DNS_Disable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_Enable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_ENABLE_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_ENTRY_QUERY Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_EntryQuery Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_EVENT_HANDLER Type",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_GetIPAddressesNumber Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_GetIPv4Addresses Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_GetIPv6Addresses Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_DNS_HandlerDeRegister Function",
"C",
"Description",
"Preconditions",
"Paramaters",
"Returns",
"Remarks",
"TCPIP_DNS_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Paramaters",
"Returns",
"Remarks",
"TCPIP_DNS_IsEnabled Function",
"C",
"Description",
"Preconditions",
"Paramaters",
"Returns",
"TCPIP_DNS_IsNameResolved Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_DNS_IsResolved Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_DNS_RemoveAll Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_DNS_RemoveEntry Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_Resolve Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNS_RESOLVE_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_RESULT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNS_Send_Query Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"DNS Server Module",
"__DNSS_H Macro",
"C",
"Description",
"_DNSS_CONFIG_H_ Macro",
"C",
"Description",
"TCPIP_DNSS_AddressCntGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_CACHE_MAX_SERVER_ENTRIES Macro",
"C",
"Description",
"TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS Macro",
"C",
"Description",
"TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS Macro",
"C",
"Description",
"TCPIP_DNSS_CacheEntryRemove Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_Disable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_Enable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_EntryAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_EntryGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_HOST_NAME_LEN Macro",
"C",
"Description",
"TCPIP_DNSS_IsEnabled Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_DNSS_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNSS_REPLY_BOARD_ADDR Macro",
"C",
"Description",
"TCPIP_DNSS_RESULT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNSS_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_DNSS_TASK_PROCESS_RATE Macro",
"C",
"Description",
"TCPIP_DNSS_TTL_TIME Macro",
"C",
"Description",
"Dynamic DNS Module",
"DDNS_MODULE_CONFIG Structure",
"C",
"Description",
"DDNS_POINTERS Structure",
"C",
"Description",
"Members",
"Remarks",
"DDNS_SERVICES Enumeration",
"C",
"Description",
"Members",
"DDNS_STATUS Enumeration",
"C",
"Description",
"Members",
"DDNSClient Variable",
"C",
"Description",
"TCPIP_DDNS_LastIPGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"TCPIP_DDNS_LastStatusGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"TCPIP_DDNS_ServiceSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_DDNS_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"TCPIP_DDNS_UpdateForce Function",
"C",
"Description",
"Preconditions",
"Returns",
"TCPIP_DNSS_RESOLVE_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_DNSS_RESULT_OBSOLETE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"FTP Client Module",
"TCPIP_FTPC_Change_Dir Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_ChangeToParentDir Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_CMD Enumeration",
"C",
"Description",
"Remarks",
"TCPIP_FTPC_COMMANDS Macro",
"C",
"Description",
"TCPIP_FTPC_CONN_HANDLE_TYPE Type",
"C",
"Description",
"Remarks",
"TCPIP_FTPC_Connect Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_CTRL_CONN_TYPE Structure",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_FTPC_CTRL_EVENT_CALLBACK_TYPE Type",
"C",
"Description",
"Remarks",
"Parameters",
"TCPIP_FTPC_CTRL_EVENT_TYPE Enumeration",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_FTPC_DATA_CONN_TYPE Structure",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE Type",
"C",
"Returns",
"Description",
"Remarks",
"Parameters",
"TCPIP_FTPC_DATA_EVENT_TYPE Enumeration",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_FTPC_DATA_REP_TYPE Enumeration",
"C",
"Description",
"Remarks",
"TCPIP_FTPC_DATA_SKT_RX_BUFF_SIZE_DFLT Macro",
"C",
"Description",
"TCPIP_FTPC_DATA_SKT_TX_BUFF_SIZE_DFLT Macro",
"C",
"Description",
"TCPIP_FTPC_DATA_STRUCT_TYPE Enumeration",
"C",
"Description",
"Remarks",
"TCPIP_FTPC_DeleteFile Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_Disconnect Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_ERROR_TYPE Enumeration",
"C",
"Description",
"Remarks",
"TCPIP_FTPC_FILE_OPT_TYPE Structure",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_FTPC_Get_Status Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_Get_WorkingDir Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_GetFile Function",
"C",
"Returns",
"Description",
"Remarks",
"Parameters",
"TCPIP_FTPC_List Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_Login Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_Logout Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_FTPC_MakeDir Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_MAX_NUM_CLIENT Macro",
"C",
"Description",
"TCPIP_FTPC_MODULE_CONFIG_TYPE Structure",
"C",
"Members",
"Description",
"TCPIP_FTPC_NameList Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_PutFile Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_RemoveDir Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_RETURN_TYPE Enumeration",
"C",
"Description",
"Remarks",
"TCPIP_FTPC_SetActiveMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_SetMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_SetPassiveMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_SetStruct Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_FTPC_SetType Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_FTPC_STATUS_TYPE Structure",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_FTPC_Task Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"TCPIP_FTPC_TASK_TICK_RATE Macro",
"C",
"Description",
"TCPIP_FTPC_TMO Macro",
"C",
"Description",
"TCPIP_FTPC_TRANSFER_MODE_TYPE Enumeration",
"C",
"Description",
"Remarks",
"FTP Server Module",
"TCPIP_FTP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_FTP_ServerTask Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_FTPS_TASK_TICK_RATE Macro",
"C",
"Description",
"HTTP Module",
"HTTP_CONN_HANDLE Type",
"C",
"Description",
"HTTP_FILE_TYPE Enumeration",
"C",
"Description",
"Members",
"HTTP_IO_RESULT Enumeration",
"C",
"Description",
"Members",
"HTTP_MODULE_FLAGS Enumeration",
"C",
"Description",
"Members",
"HTTP_READ_STATUS Enumeration",
"C",
"Description",
"Members",
"HTTP_STATUS Enumeration",
"C",
"Description",
"Members",
"TCPIP_HTTP_ActiveConnectionCountGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_ArgGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionByteCountDec Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionByteCountGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionByteCountSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionCallbackPosGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionCallbackPosSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionDataBufferGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionDataBufferSizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionFileGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionHandleGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionHasArgsGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionHasArgsSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionIndexGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionIsAuthorizedGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionIsAuthorizedSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionPostSmGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionPostSmSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionSMSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionSocketGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionStatusGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionStatusSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionUploadBufferCurrGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionUploadBufferCurrSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionUploadBufferEndGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionUploadBufferEndSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionUploadBufferStartGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionUploadBufferStartSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_CurrentConnectionUserDataGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_CurrentConnectionUserDataSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_FileAuthenticate Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_FileInclude Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_GetExecute Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_HTTP_PostExecute Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_PostNameRead Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_PostReadPair Macro",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_PostValueRead Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_Print_varname Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_HTTP_URLDecode Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_UserAuthenticate Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"HTTP Net Module",
"_HTTP_NET_H Macro",
"C",
"Description",
"TCPIP_HTTP_DYN_ARG_DCPT Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_DYN_ARG_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_DYN_PRINT_RES Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_DYN_VAR_DCPT Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_DYN_VAR_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_NET_ActiveConnectionCountGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ArgGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_CONN_HANDLE Type",
"C",
"Description",
"TCPIP_HTTP_NET_ConnectionByteCountDec Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionByteCountGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionByteCountSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionCallbackPosGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionCallbackPosSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionDataBufferGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionDataBufferSizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionDiscard Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionDynamicDescriptors Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionFileGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionFlush Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionHandleGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionHasArgsGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionHasArgsSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionIndexGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionIsAuthorizedGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionHasArgsSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConncetionNetHandle Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionPeek Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionPostNameRead Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionPostReadPair Macro",
"C",
"Description",
"Preconditions",
"Parameters",
"TCPIP_HTTP_NET_ConnectionPostSmGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionPostSmSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionPostValueRead Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionRead Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionReadBufferSize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionReadIsReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionSocketGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionStatusGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionStatusSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionStringFind Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_ConnectionUserDataGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_ConnectionUserDataSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_HTTP_NET_DynamicFileInclude Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_DynamicWrite Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_DynamicWriteString Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_NET_IO_RESULT Enumeration",
"C",
"Description",
"Members",
"TCPIP_HTTP_NET_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP)HTTP_NET_MODULE_FLAGS Enumeration",
"C",
"Description",
"Members",
"TCPIP_HTTP_NET_READ_STATUS Enumeration",
"C",
"Description",
"Members",
"TCPIP_HTTP_NET_SSIVariableDelete Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_SSIVariableGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_SSIVariableGetByIndex Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_SSIVariableSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_SSIVariablesNumberGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_STATUS Enumeration",
"C",
"Description",
"Members",
"TCPIP_HTTP_NET_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_URLDecode Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_USER_CALLBACK Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_NET_USER_HANDLE Type",
"C",
"Description",
"TCPIP_HTTP_NET_UserHandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_NET_UserHandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_HTTP_SSI_ATTR_DCPT Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_HTTP_SSI_NOTIFY_DCPT Structure",
"C",
"Description",
"Members",
"Remarks",
"ICMP Module",
"__ICMP_H Macro",
"C",
"Description",
"ICMP_ECHO_RESULT Enumeration",
"C",
"Description",
"Members",
"ICMP_HANDLE Type",
"C",
"Description",
"TCPIP_ICMP_CallbackDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_ICMP_CallbackRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_ICMP_ECHO_REQUEST Structure",
"C",
"Description",
"Remarks",
"TCPIP_ICMP_ECHO_REQUEST_RESULT Enumeration",
"C",
"Description",
"Members",
"TCPIP_ICMP_EchoRequest Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"Example",
"TCPIP_ICMP_EchoRequestCancel Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_ICMP_EchoRequestSend Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"Example",
"TCPIP_ICMP_MODULE_CONFIG Structure",
"C",
"Description",
"Remarks",
"TCPIP_ICMP_REQUEST_HANDLE Type",
"C",
"Description",
"TCPIP_ICMP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"ICMPv6 Module",
"TCPIP_ICMPV6_CallbackDeregister Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_ICMPV6_CallbackRegister Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_ICMPV6_EchoRequestSend Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"TCPIP_ICMPV6_Flush Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_ICMPV6_HeaderEchoRequestPut Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_ICMPV6_PutHeaderEchoReply Macro",
"C",
"Description",
"IGMP Module",
"TCPIP_IGMP_EVENT_HANDLER Type",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_IGMP_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IGMP_ExcludeSource Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_FILTER_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IGMP_GROUP_INFO Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IGMP_GroupInfoGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_GroupSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_IGMP_HandlerDeRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_IncludeSource Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_Join Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_Leave Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IGMP_RESULT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IGMP_Subscribe Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_SubscribeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IGMP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_IGMP_Unsubscribe Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Iperf Module",
"TCPIP_IPERF_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"IPv4 Module",
"IPV4_FRAGMENT_INFO Union",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"IPV4_HEADER_TYPE Enumeration",
"C",
"Description",
"Remarks",
"IPV4_OPTION_FIELD Structure",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"IPV4_PACKET Structure",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"IPV4_TYPE_OF_SERVICE Union",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_FILTER_TYPE Enumeration",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_IsFragmentationEnabled Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_IPV4_MacPacketTransmit Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_MaxDatagramDataSizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_MODULE_CONFIG Structure",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_OPTION_DCPT Structure",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_OPTION_TYPE Enumeraion",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PACKET_HANDLER Type",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PACKET_PARAMS Structure",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketAlloc Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketFilterClear Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketFilterSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketFormatTx Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketGetDestAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketGetSourceAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketHandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_IPV4_PacketHandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_IPV4_PacketOptionFieldSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketOptionGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketOptionListGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PacketTransmit Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_PROCESS_HANDLE Type",
"C",
"Description",
"TCPIP_IPV4_SelectSourceInterface Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV4_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"IPv6 Module",
"IPV6_ACTION Enumeration",
"C",
"Desscription",
"Members",
"Remarks",
"IPV6_ADDRESS_POLICY Structure",
"C",
"Desscription",
"Members",
"Remarks",
"Example",
"IPV6_ADDRESS_PREFERENCE Enumeration",
"C",
"Desscription",
"Remarks",
"IPV6_ADDRESS_TYPE Union",
"C",
"Desscription",
"Remarks",
"IPV6_DATA_DYNAMIC_BUFFER Macro",
"C",
"Description",
"IPV6_DATA_NETWORK_FIFO Macro",
"C",
"Description",
"IPV6_DATA_NONE Macro",
"C",
"Description",
"IPV6_DATA_PIC_RAM Macro",
"C",
"Description",
"IPV6_DATA_SEGMENT_HEADER Structure",
"C",
"Description",
"Members",
"Remarks",
"IPV6_EVENT_HANDLER Type",
"C",
"Desscription",
"Remarks",
"IPV6_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"IPV6_HANDLE Type",
"C",
"Description",
"IPV6_HEADER_OFFSET_DEST_ADDR Macro",
"C",
"Description",
"IPV6_HEADER_OFFSET_NEXT_HEADER Macro",
"C",
"Description",
"IPV6_HEADER_OFFSET_PAYLOAD_LENGTH Macro",
"C",
"Description",
"IPV6_HEADER_OFFSET_SOURCE_ADDR Macro",
"C",
"Description",
"IPV6_NEXT_HEADER_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"IPV6_NO_UPPER_LAYER_CHECKSUM Macro",
"C",
"Description",
"IPV6_PACKET Structure",
"C",
"Description",
"Members",
"Remarks",
"IPV6_PACKET_ACK_FNC Type",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"IPV6_RX_FRAGMENT_BUFFER Structure",
"C",
"Description",
"Members",
"Remarks",
"IPV6_SEGMENT_TYPE Enumeration",
"C",
"Description",
"Remarks",
"IPV6_TLV_HBHO_PAYLOAD_JUMBOGRAM Macro",
"C",
"Description",
"IPV6_TLV_HBHO_ROUTER_ALERT Macro",
"C",
"Description",
"IPV6_TLV_OPTION_TYPE Union",
"C",
"Description",
"Remarks",
"IPV6_TLV_PAD_1 Macro",
"C",
"Description",
"IPV6_TLV_PAD_N Macro",
"C",
"Description",
"IPV6_TLV_UNREC_OPT_DISCARD_PP Macro",
"C",
"Description",
"IPV6_TLV_UNREC_OPT_DISCARD_PP_NOT_MC Macro",
"C",
"Description",
"IPV6_TLV_UNREC_OPT_DISCARD_SILENT Macro",
"C",
"Description",
"IPV6_TLV_UNREC_OPT_SKIP_OPTION Macro",
"C",
"Description",
"IPV6_ULA_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"IPV6_ULA_RESULT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IPV6_AddressUnicastRemove Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_ArrayGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_ArrayPutHelper Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_DASSourceAddressSelect Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_DefaultRouterDelete Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_DefaultRouterGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_DestAddressGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_DestAddressSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_Flush Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_Get Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_HandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_InterfaceIsReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_IsFragmentationEnabled Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_IPV6_MaxDatagramDataSizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_IPV6_MulticastListenerAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_MulticastListenerRemove Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_PACKET_HANDLER Type",
"C",
"Desscription",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_PacketFree Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_PacketHandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_IPV6_PacketHandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_IPV6_PayloadSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_PROCESS_HANDLE Type",
"C",
"Desscription",
"TCPIP_IPV6_Put Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_PutArray Macro",
"C",
"Description",
"Preconditions",
"Members",
"Returns",
"Remarks",
"TCPIP_IPV6_RouterAddressAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_SourceAddressGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_SourceAddressSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_IPV6_TxIsPutReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_TxPacketAllocate Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_UnicastAddressAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_IPV6_UniqueLocalUnicastAddressAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"MAC Driver Module",
"_tag_MAC_DATA_SEGMENT Structure",
"C",
"Description",
"Members",
"Remarks",
"_tag_TCPIP_MAC_PACKET Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_ACTION Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_Close Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_ConfigGet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_DATA_SEGMENT Structure",
"C",
"Description",
"Members",
"Remarks",
"Structures",
"TCPIP_MAC_Deinitialize Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_EVENT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_EventAcknowledge Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_MAC_EventF Type",
"C",
"Description",
"Members",
"Returns",
"Remarks",
"TCPIP_MAC_EventMaskSet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_MAC_EventPendingGet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_MAC_HANDLE Type",
"C",
"Description",
"TCPIP_MAC_HEAP_CallocF Type",
"C",
"Description",
"Members",
"Returns",
"Remarks",
"TCPIP_MAC_HEAP_CallocFDbg Type",
"C",
"Description",
"TCPIP_MAC_HEAP_FreeF Type",
"C",
"Description",
"Returns",
"Remarks",
"TCPIP_MAC_HEAP_FreeFDbg Type",
"C",
"Description",
"TCPIP_MAC_HEAP_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_MAC_HEAP_MallocF Type",
"C",
"Description",
"Returns",
"Remarks",
"TCPIP_MAC_HEAP_FreeFDbg Type",
"C",
"Description",
"TCPIP_MAC_INIT Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_Initialize Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_LINK_MTU Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_LinkCheck Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_MODULE_CTRL Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_Open Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PACKET Type",
"C",
"Description",
"Remarks",
"Structures",
"TCPIP_MAC_PACKET_ACK_FUNC Type",
"C",
"Description",
"Returns",
"Remarks",
"TCPIP_MAC_PACKET_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_PACKET_RX_STAT Union",
"C",
"Description",
"Remarks",
"TCPIP_MAC_PACKET_RX_STAT_PIC32C Union",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_PacketRx Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PacketTx Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PARAMETERS Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_ParametersGet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PKT_ACK_RES Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_PKT_AckF Type",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PKT_AllocF Type",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PKT_AllocFDbg Type",
"C",
"Description",
"TCPIP_MAC_PKT_FreeF Type",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PKT_FreeFDbg Type",
"C",
"Description",
"TCPIP_MAC_POWER_MODE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_Process Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_PROCESS_FLAGS Enumeration",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_MAC_RegisterStatisticsGet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_Reinitialize Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_RES Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_RX_FILTER_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_RX_STATISTICS Structure",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_MAC_RxFilterHashTableEntrySet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_SEGMENT_FLAGS Enumeration",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_MAC_STATISTICS_REG_ENTRY Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_StatisticsGet Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_Status Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_MAC_SYNCH_REQUEST Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MAC_SynchReqF Type",
"C",
"Description",
"Members",
"Returns",
"Remarks",
"TCPIP_MAC_Tasks Function",
"C",
"Description",
"Precondtions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MAC_TX_STATISTICS Structure",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_MAC_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MODULE_GMAC_QUEUE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_MODULE_MAC_ID Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_MODULE_MAC_PIC32C_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_MODULE_MAC_PIC32INT_CONFIG Structure",
"C",
"Description",
"Members",
"Manager Module",
"_TCPIP_HELPERS_H Macro",
"C",
"Description",
"_TCPIP_MANAGER_H Macro",
"C",
"Description",
"TCPIP_NET_HANDLE Type",
"C",
"Description",
"TCPIP_EVENT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_Helper_Base64Decode Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_Base64Encode Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_FormatNetBIOSName Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_Helper_htonl Function",
"C",
"Description",
"TCPIP_Helper_htonll Function",
"C",
"Description",
"TCPIP_Helper_htons Function",
"C",
"Description",
"TCPIP_Helper_IPAddressToString Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_IPv6AddressToString Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_IsBcastAddress Function",
"C",
"Description",
"TCPIP_Helper_IsMcastAddress Function",
"C",
"Description",
"TCPIP_Helper_IsPrivateAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_MACAddressToString Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_ntohl Macro",
"C",
"Description",
"TCPIP_Helper_ntohl Function",
"C",
"Description",
"TCPIP_Helper_ntohll Function",
"C",
"Description",
"TCPIP_Helper_ntohll Macro",
"C",
"Description",
"TCPIP_Helper_ntohs Function",
"C",
"Description",
"TCPIP_Helper_htohs Macro",
"C",
"Description",
"TCPIP_Helper_SecurePortGetByIndex Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_SecurePortSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_StringToIPAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_StringToIPv6Address Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_StringToMACAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_TCPSecurePortGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_Helper_UDPSecurePortGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MODULE_SIGNAL Enumeration",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MODULE_SIGNAL_FUNC Type",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MODULE_SIGNAL_HANDLE Type",
"C",
"Description",
"TCPIP_MODULE_SignalFunctionDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_MODULE_SignalFunctionRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_MODULE_SignalGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_NET_HANDLE Type",
"C",
"Description",
"TCPIP_NETWORK_TYPE Enumeration",
"C",
"Description",
"Members",
"Example",
"TCPIP_STACK_Deinitialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_EVENT_HANDLER Type",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_EventsPendingGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_HandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_HEAP_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_EXTERNAL_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_FreeSize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_HEAP_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_STACK_HEAP_HighWatermark Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_HEAP_INTERNAL_CONFIG Structure",
"C",
"Description",
"Preconditions",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_LastError Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_HEAP_MaxSize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_HEAP_POOL_CONFIG Structure",
"C",
"Description",
"Preconditions",
"Members",
"TCPIP_STACK_HEAP_POOL_ENTRY Structure",
"C",
"Description",
"Preconditions",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_RES Enumeration",
"C",
"Description",
"Preconditions",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_Size Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_HEAP_TYPE Enumeration",
"C",
"Description",
"Preconditions",
"Members",
"Remarks",
"TCPIP_STACK_HEAP_USAGE Enumeration",
"C",
"Description",
"Preconditions",
"Members",
"Remarks",
"TCPIP_STACK_HeapHandleGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_IndexToNet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_InitializeDataGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_MACObjectGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_ModuleConfigGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressBcast Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetAddressDnsPrimary Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressDnsPrimarySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressDnsSecond Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressDnsSecondSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressGateway Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressGatewaySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressMac Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressMacSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAddressSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetAliasNameGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetBIOSName Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetBiosNameSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetConfigGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetConfigSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetDefaultGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_STACK_NetDefaultSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetDown Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetGetType Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetHandleGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetIndexGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetIPv6AddressGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetIsLinked Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetIsReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetIsUp Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetMACIdGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetMACRegisterStatisticsGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetMACStatisticsGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetMask Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetMulticastGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_STACK_NetMulticastSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NetNameGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_NetUp Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_NumberOfNetworksGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_STACK_PACKET_HANDLER Type",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_PacketHandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_PacketHandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_PROCESS_HANDLE Type",
"C",
"Description",
"TCPIP_STACK_Status Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_Task Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_STACK_VersionGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_STACK_VersionStrGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"NBNS Module",
"TCPIP_NBNS_MODULE_CONFIG Structure",
"C",
"Description",
"Remarks",
"TCPIP_NBNS_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"NDP Module",
"TCPIP_NDP_NborReachConfirm Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Reboot Module",
"TCPIP_REBOOT_CONFIG Structure",
"C",
"Description",
"TCPIP_REBOOT_TASK Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"SMTP Module",
"TCPIP_SMTP_ArrayPut Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SMTP_ClientTask Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SMTP_Flush Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SMTP_IsBusy Function",
"C",
"Description",
"TCPIP_SMTP_IsPutReady Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SMTP_MailSend Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SMTP_Put Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SMTP_PutIsDone Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SMTP_StringPut Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SMTP_UsageBegin Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SMTP_UsageEnd Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"SMTPC Module",
"__SMTPC_H Macro",
"C",
"Description",
"TCPIP_SMTPC_ATTACH_BUFFER Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_ATTACH_FILE Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_ATTACH_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_ENCODE_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_MAIL_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_MAIL_MESSAGE Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_MailMessage Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SMTPC_MESSAGE_CALLBACK Type",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_SMTPC_MESSAGE_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_SMTPC_MESSAGE_QUERY Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_MESSAGE_REPORT Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_MESSAGE_RESULT Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SMTPC_MESSAGE_STATUS Enumeration",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_SMTPC_MESSAGE_WARNING Enumeration",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_SMTPC_MessageQuery Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SMTPC_MODULE_CONFIG Structure",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_SMTPC_SERVER_REPLY_CALLBACK Type",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_SMTPC_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"SNMP Module",
"SNMP_COMMUNITY_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"SNMP_END_OF_VAR Macro",
"C",
"Description",
"SNMP_GENERIC_TRAP_NOTIFICATION_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"SNMP_INDEX Type",
"C",
"Description",
"Remarks",
"SNMP_INDEX Type",
"C",
"Description",
"Remarks",
"SNMP_INDEX_INVALID Macro",
"C",
"Description",
"SNMP_NON_MIB_RECD_INFO Structure",
"C",
"Description",
"Remarks",
"SNMP_START_OF_VAR Macro",
"C",
"Description",
"SNMP_TRAP_IP_ADDRESS_TYPE Enumeration",
"C",
"Description",
"Remarks",
"SNMP_V1 Macro",
"C",
"Description",
"SNMP_V2C Macro",
"C",
"Description",
"SNMP_V3 Macro",
"C",
"Description",
"SNMP_VAL Union",
"C",
"Description",
"Remarks",
"SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"SNMPV3_HMAC_HASH_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"SNMPV3_PRIV_PROT_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"STD_BASED_SNMP_MESSAGE_PROCESSING_MODEL Enumeration",
"C",
"Description",
"Members",
"Remarks",
"STD_BASED_SNMP_SECURITY_MODEL Enumeration",
"C",
"Description",
"Members",
"Remarks",
"STD_BASED_SNMPV3_SECURITY_LEVEL Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SNMP_AuthTrapFlagGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_AuthTrapFlagSet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_ClientGetNet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_COMMUNITY_CONFIG Structure",
"C",
"Description",
"Remarks",
"TCPIP_SNMP_ExactIndexGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_IsTrapEnabled Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_IsValidCommunity Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_IsValidLength Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_MibIDSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SNMP_NextIndexGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_NotifyIsReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_NotifyPrepare Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_ReadCommunityGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_ReadCommunitySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_RecordIDValidation Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_SendFailureTrap Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_SocketIDGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_SocketIDSet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_TrapInterFaceSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_TRAPMibIDGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_TrapSendFlagGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_TrapSendFlagSet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"Example",
"TCPIP_SNMP_TrapSpecificNotificationGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_TrapSpecificNotificationSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_TrapTimeGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_TRAPTypeGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMP_TRAPv1Notify Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_SNMP_TRAPv2Notify Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_SNMP_ValidateTrapIntf Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_VarbindGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_SNMP_VarbindSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_SNMP_WriteCommunityGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMP_WriteCommunitySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMPV3_EngineUserDataBaseGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_SNMPV3_EngineUserDataBaseSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_SNMPv3_Notify Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMPV3_TARGET_ENTRY_CONFIG Structure",
"C",
"Description",
"Remarks",
"TCPIP_SNMPv3_TrapConfigDataGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNMPV3_TrapTypeGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNMPV3_USERDATABASECONFIG_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SNMPV3_USM_USER_CONFIG Structure",
"C",
"Description",
"Members",
"Remarks",
"SNTP Module",
"TCPIP_SNTP_ConnectionInitiate Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNTP_ConnectionParamSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNTP_EVENT Enumeration",
"C",
"Description",
"Members",
"TCPIP_SNTP_EVENT_HANDLER Type",
"C",
"Description",
"TCPIP_SNTP_EVENT_TIME_DATA Structure",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SNTP_HANDLE Type",
"C",
"Description",
"TCPIP_SNTP_HandlerDeRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNTP_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNTP_LastErrorGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNTP_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_SNTP_RESULT Enumeration",
"C",
"Description",
"Members",
"TCPIP_SNTP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNTP_TIME_STAMP Union",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_SNTP_TimeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNTP_TimeStampGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_SNTP_TimeStampStatus Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_SNTP_UTCSecondsGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCP Module",
"INVALID_SOCKET Macro",
"C",
"Description",
"TCP_ADJUST_FLAGS Enumeration",
"C",
"Description",
"Members",
"TCP_OPTION_KEEP_ALIVE_DATA Structure",
"C",
"Description",
"Parameters",
"TCP_OPTION_LINGER_DATA Structure",
"C",
"Description",
"Members",
"TCP_OPTION_THRES_FLUSH_TYPE Enumeration",
"C",
"Description",
"Parameters",
"TCP_SOCKET Type",
"C",
"Description",
"TCP_SOCKET Type",
"C",
"Description",
"TCP_SOCKET_INFO Structure",
"C",
"Description",
"Parameters",
"TCP_SOCKET_OPTION Enumeration",
"C",
"Description",
"Parameters",
"TCPIP_TCP_Abort Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_ArrayFind Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_TCP_ArrayGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_ArrayPeek Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_TCP_ArrayPut Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Bind Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_ClientOpen Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Close Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Connect Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Discard Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_TCP_Disconnect Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_FifoRxFreeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_TCP_FifoRxFullGet Macro",
"C",
"Description",
"Remarks",
"TCPIP_TCP_FifoSizeAdjust Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_TCP_FifoTxFreeGet Function",
"C",
"Description",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_FifoTxFullGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Find Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_TCP_Flush Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Get Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_TCP_GetIsReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_IsConnected Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_IsReady Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_TCP_MODULE_CONFIG Structure",
"C",
"Description",
"Parameters",
"TCPIP_TCP_OptionsGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_OptionsSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_PACKET_HANDLER Type",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_PacketHandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_TCP_Peek Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Remarks",
"TCPIP_TCP_PROCESS_HANDLE Type",
"C",
"Description",
"TCPIP_TCP_PacketHandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_TCP_Put Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_PutIsReady Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_RemoteBind Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_ServerOpen Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_SIGNAL_FUNCTION Type",
"C",
"Description",
"Parameters",
"Remarks",
"TCPIP_TCP_SIGNAL_HANDLE Type",
"C",
"Description",
"TCPIP_TCP_SIGNAL_TYPE Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_TCP_SignalHandlerDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_SignalHandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_SocketInfoGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_SocketNetGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_SocketNetSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_SocketsNumberGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"TCPIP_TCP_SocketTraceSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_STATE Enumeration",
"C",
"Description",
"Members",
"TCPIP_TCP_StringPut Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TCP_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_TCP_WasReset Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Telnet Module",
"TCPIP_TELNET_AUTH_HANDLER Type",
"C",
"Description",
"Preconditions",
"Members",
"Returns",
"Remarks",
"TCPIP_TELNET_AuthenticationDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_TELNET_AuthenticationRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"TCPIP_TELNET_CONN_INFO Structure",
"C",
"Description",
"Members",
"TCPIP_TELNET_ConnectionInfoGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TELNET_ConnectionsGet Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_TELNET_FLAGS Enumeration",
"C",
"Description",
"Members",
"Remarks",
"TCPIP_TELNET_HANDLE Type",
"C",
"Description",
"TCPIP_TELNET_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_TELNET_STATE Enumeration",
"C",
"Description",
"TCPIP_TELNET_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TFTP Client Module",
"__TFTPC_H Macro",
"C",
"Description",
"TCPIP_TFTP_CMD_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_TFTPC_EVENT_HANDLER Type",
"C",
"Description",
"TCPIP_TFTPC_EVENT_TYPE Enumeration",
"C",
"Description",
"Members",
"TCPIP_TFTPC_GetEventNotification Function",
"C",
"Description",
"Preconditions",
"Returns",
"TCPIP_TFTPC_HANDLE Type",
"C",
"Description",
"TCPIP_TFTPC_HandlerDeRegister Function",
"C",
"Description",
"Preconditions",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_TFTPC_HandlerRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TFTPC_MODULE_CONFIG Structure",
"C",
"Description",
"Members",
"TCPIP_TFTPC_OPERATION_RESULT Enumeration",
"C",
"Description",
"Members",
"TCPIP_TFTPC_SetCommand Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TFTPC_SetServerAddress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_TFTPC_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TFTP Server Module",
"TCPIP_TFTPS_CLIENT_NUMBER Macro",
"C",
"Description",
"TCPIP_TFTPS_ClientsNumber Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"TCPIP_TFTPS_DEFAULT_BLOCK_SIZE Macro",
"C",
"Description",
"TCPIP_TFTPS_DEFAULT_FILESIZE Macro",
"C",
"Description",
"TCPIP_TFTPS_DEFAULT_TIMEOUT Macro",
"C",
"Description",
"TCPIP_TFTPS_Disable Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_TFTPS_Enable Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_TFTPS_EVENT_HANDLER Type",
"C",
"Description",
"Remarks",
"Parameters",
"TCPIP_TFTPS_EVENT_TYPE Enumeration",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_TFTPS_FILENAME_LEN Macro",
"C",
"Description",
"TCPIP_TFTPS_HANDLE Type",
"C",
"Description",
"Remarks",
"TCPIP_TFTPS_HandlerDeRegister Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_TFTPS_HandlerRegister Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_TFTPS_IsEnabled Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"TCPIP_TFTPS_MODULE_CONFIG Structure",
"C",
"Members",
"Description",
"TCPIP_TFTPS_RESULT Enumeration",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_TFTPS_RETRANSMIT_COUNT Macro",
"C",
"Description",
"TCPIP_TFTPS_Task Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"TCPIP_TFTPS_TASK_TICK_RATE Macro",
"C",
"Description",
"TCPIP_TFTPS_USER_NOTIFICATION Macro",
"C",
"Description",
"UDP Module",
"TCPIP_UDP_ArrayGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_ArrayPut Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_BcastIPV4AddressSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_Bind Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_ClientOpen Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_Close Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_COMMANDS Macro",
"C",
"Description",
"Remarks",
"TCPIP_UDP_DestinationIPAddressSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_DestinationPortSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_Discard Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_Disconnect Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_EXTERN_PACKET_PROCESS Macro",
"C",
"Description",
"TCPIP_UDP_Flush Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_Get Function",
"C",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_GetIsReady Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_IsConnected Function",
"C",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_IsOpened Macro",
"C",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_MAX_SOCKETS Macro",
"C",
"Description",
"TCPIP_UDP_MODULE_CONFIG Structure",
"C",
"Members",
"TCPIP_UDP_OptionsGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_OptionsSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_PACKET_HANDLER Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_PacketHandlerDeregister Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"Parameters",
"TCPIP_UDP_PacketHandlerRegister Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"Parameters",
"TCPIP_UDP_PROCESS_HANDLE Type",
"C",
"Description",
"TCPIP_UDP_Put Function",
"C",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_PutIsReady Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_RemoteBind Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_RxOffsetSet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_ServerOpen Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"Parameters",
"TCPIP_UDP_SIGNAL_FUNCTION Type",
"C",
"Description",
"Remarks",
"Parameters",
"TCPIP_UDP_SIGNAL_HANDLE Type",
"C",
"Description",
"TCPIP_UDP_SIGNAL_TYPE Enumeration",
"C",
"Members",
"Description",
"Remarks",
"TCPIP_UDP_SignalHandlerDeregister Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_SignalHandlerRegister Function",
"C",
"Returns",
"Returns a valid handle if the call succeeds or a null handle if the call failed (null handler no such socket existent handler)",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_SOCKET_DEFAULT_RX_QUEUE_LIMIT Macro",
"C",
"Description",
"TCPIP_UDP_SOCKET_DEFAULT_TX_QUEUE_LIMIT Macro",
"C",
"Description",
"TCPIP_UDP_SOCKET_DEFAULT_TX_SIZE Macro",
"C",
"Description",
"TCPIP_UDP_SOCKET_POOL_BUFFER_SIZE Macro",
"C",
"Description",
"TCPIP_UDP_SOCKET_POOL_BUFFERS Macro",
"C",
"Description",
"TCPIP_UDP_SocketInfoGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_SocketNetGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_SocketNetSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_SocketsNumberGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"TCPIP_UDP_SourceIPAddressSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_StringPut Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_Task Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"TCPIP_UDP_TxCountGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_TxOffsetSet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP_UDP_TxPutIsReady Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"TCPIP_UDP_USE_POOL_BUFFERS Macro",
"C",
"Description",
"TCPIP_UDP_USE_RX_CHECKSUM Macro",
"C",
"Description",
"TCPIP_UDP_USE_TX_CHECKSUM Macro",
"C",
"Description",
"UDP_MULTICAST_FLAGS Enumeration",
"C",
"Members",
"Description",
"Remarks",
"UDP_OPTION_MULTICAST_DATA Structure",
"C",
"Members",
"Description",
"Remarks",
"Example",
"Zeroconf Module",
"MDNSD_ERR_CODE Enumeration",
"C",
"Description",
"Members",
"TCPIP_MDNS_ServiceDeregister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_MDNS_ServiceRegister Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_MDNS_ServiceUpdate Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"TCPIP_MDNS_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"TCPIP_ZCLL_Disable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ZCLL_Enable Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ZCLL_IsEnabled Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"TCPIP_ZCLL_Task Function",
"C",
"Description",
"Preconditions",
"Returns",
"Remarks",
"ZCLL_MODULE_CONFIG Structure",
"C",
"Description",
"ENC28J60 Driver Library",
"DRV_ENC28J60_CLIENT_INSTANCES_IDXx Macro",
"C",
"Description",
"Remarks",
"DRV_ENC28J60_Close Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_ConfigGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_Configuration Type",
"C",
"Description",
"Remarks",
"DRV_ENC28J60_Deinitialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_EventAcknowledge Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_EventMaskSet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_EventPendingGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_Initialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_INSTANCES_NUMBER Macro",
"C",
"Description",
"Remarks",
"DRV_ENC28J60_LinkCheck Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_MDIX_TYPE Type",
"C",
"Description",
"Remarks",
"DRV_ENC28J60_Open Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_PacketRx Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_PacketTx Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_ParametersGet Function",
"C",
"Returns",
"Description",
"Parameters",
"DRV_ENC28J60_PowerMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_Process Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_RegisterStatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_Reinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ENC28J60_RxFilterHashTableEntrySet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_SetMacCtrlInfo Function",
"C",
"Returns",
"Description",
"Preconditions",
"DRV_ENC28J60_StackInitialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_StatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENC28J60_Status Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENC28J60_Tasks Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"ENCx24J600 Driver Library",
"DRV_ENCX24J600_CLIENT_INSTANCES_IDXx Macro",
"C",
"Description",
"Remarks",
"DRV_ENCX24J600_Close Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_ConfigGet Function",
"C",
"Returns",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_Configuration Type",
"C",
"Description",
"Remarks",
"DRV_ENCX24J600_Deinitialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_EventAcknowledge Function",
"C",
"Returns",
"Description",
"Parameters",
"DRV_ENCX24J600_EventMaskSet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_EventPendingGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_Initialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_INSTANCES_NUMBER Macro",
"C",
"Description",
"Remarks",
"DRV_ENCX24J600_LinkCheck Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_MDIX_TYPE Type",
"C",
"Description",
"Remarks",
"DRV_ENCX24J600_Open Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_PacketRx Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_PacketTx Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_ParametersGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_PowerMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_Process Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_RegisterStatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_Reinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ENCX24J600_RxFilterHashTableEntrySet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_SetMacCtrlInfo Function",
"C",
"Returns",
"Description",
"Preconditions",
"DRV_ENCX24J600_StackInitialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_StatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ENCX24J600_Status Function",
"C",
"Returns",
"Description",
"Parameters",
"DRV_ENCX24J600_Tasks Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"Ethernet GMAC Driver Library",
"DRV_GMAC_Close Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_GMAC_ConfigGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_Deinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_EventAcknowledge Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_EventMaskSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_GMAC_EventPendingGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_GMAC_INDEX_COUNT Macro",
"C",
"Description",
"Remarks",
"DRV_GMAC_Initialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_LinkCheck Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Parameters",
"Parameters",
"DRV_GMAC_Open Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_PacketRx Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_PacketTx Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_ParametersGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_PowerMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_Process Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Parameters",
"Parameters",
"DRV_GMAC_RegisterStatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_Reinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_RxFilterHashTableEntrySet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_GMAC_StatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Function",
"DRV_GMAC_Status Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Parameters",
"Parameters",
"DRV_GMAC_Tasks Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Ethernet MAC Driver Library",
"DRV_ETHMAC_INDEX_0 Macro",
"C",
"Description",
"Remarks",
"DRV_ETHMAC_INDEX_COUNT Macro",
"C",
"Description",
"Remarks",
"DRV_ETHMAC_PIC32MACConfigGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACDeinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Function",
"DRV_ETHMAC_PIC32MACEventAcknowledge Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_ETHMAC_PIC32MACEventMaskSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_ETHMAC_PIC32MACEventPendingGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_ETHMAC_PIC32MACInitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Function",
"DRV_ETHMAC_PIC32MACLinkCheck Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"Parameters",
"DRV_ETHMAC_PIC32MACOpen Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACPacketRx Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACPacketTx Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACParametersGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACPowerMode Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Function",
"DRV_ETHMAC_PIC32MACProcess Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Parameters",
"Parameters",
"DRV_ETHMAC_PIC32MACRegisterStatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACReinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACRxFilterHashTableEntrySet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACStatisticsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_PIC32MACStatus Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example Parameters",
"Parameters",
"DRV_ETHMAC_PIC32MACTasks Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHMAC_Tasks_ISR Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Ethernet PHY Driver Library",
"DRV_ETHPHY_CLIENT_STATUS Enumeration",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_ClientOperationAbort Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_ClientOperationResult Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_CLIENTS_NUMBER Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_ClientStatus Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_Close Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_CONFIG_FLAGS Enumeration",
"C",
"Members",
"Description",
"DRV_ETHPHY_Deinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_HWConfigFlagsGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ETHPHY_INDEX_0 Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_INDEX_COUNT Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_INIT Structure",
"C",
"Members",
"Description",
"Remarks",
"DRV_ETHPHY_Initialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_ETHPHY_INSTANCES_NUMBER Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_INTERFACE_INDEX Enumeration",
"C",
"Members",
"Description",
"DRV_ETHPHY_INTERFACE_TYPE Enumeration",
"C",
"Members",
"Description",
"DRV_ETHPHY_LINK_STATUS Enumeration",
"C",
"Members",
"Description",
"Remarks",
"DRV_ETHPHY_LinkStatusGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_NEG_DONE_TMO Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_NEG_INIT_TMO Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_NEGOTIATION_RESULT Structure",
"C",
"Members",
"Description",
"Remarks",
"DRV_ETHPHY_NegotiationIsComplete Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_NegotiationResultGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_OBJECT Structure",
"C",
"Members",
"Description",
"Remarks",
"DRV_ETHPHY_OBJECT_BASE Structure",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_Open Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_PERIPHERAL_ID Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_PhyAddressGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_Reinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_ETHPHY_Reset Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_RESET_CLR_TMO Macro",
"C",
"Description",
"Remarks",
"DRV_ETHPHY_RESET_FUNCTION Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_RestartNegotiation Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_RESULT Enumeration",
"C",
"Description",
"DRV_ETHPHY_SETUP Structure",
"C",
"Members",
"Description",
"Remarks",
"DRV_ETHPHY_Status",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"DRV_ETHPHY_Tasks Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_ETHPHY_VENDOR_MDIX_CONFIGURE Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VENDOR_MII_CONFIGURE Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VENDOR_SMI_CLOCK_GET Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VENDOR_WOL_CONFIGURE Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VendorDataGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VendorDataSet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VendorSMIReadResultGet Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VendorSMIReadStart Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_ETHPHY_VendorSMIWriteStart Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"MIIM Driver Library",
"DRV_MIIM_CALLBACK_HANDLE Type",
"C",
"Description",
"Remarks",
"DRV_MIIM_CLIENT_OP_PROTECTION Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_CLIENT_STATUS Enumeration",
"C",
"Members",
"Description",
"DRV_MIIM_ClientStatus Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_Close Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_MIIM_COMMANDS Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_Deinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_DeregisterCallback Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_INDEX_0 Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_INDEX_COUNT Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_INIT Structure",
"C",
"Members",
"Description",
"Remarks",
"DRV_MIIM_Initialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_INSTANCE_CLIENTS Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_INSTANCE_OPERATIONS Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_INSTANCES_NUMBER Macro",
"C",
"Description",
"Remarks",
"DRV_MIIM_OBJECT_BASE Structure",
"C",
"Description",
"Remarks",
"DRV_MIIM_Open Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_MIIM_OPERATION_CALLBACK Type",
"C",
"Description",
"Remarks",
"Parameters",
"DRV_MIIM_OPERATION_FLAGS Enumeration",
"C",
"Members",
"Description",
"Remarks",
"DRV_MIIM_OPERATION_HANDLE Type",
"C",
"Description",
"Remarks",
"DRV_MIIM_OperationAbort Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_OperationResult Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_Read Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_RegisterCallback Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_Reinitialize Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_Scan Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"DRV_MIIM_SETUP Structure",
"C",
"Members",
"Description",
"Remarks",
"DRV_MIIM_SETUP_FLAGS Enumeration",
"C",
"Members",
"Description",
"Remarks",
"Description",
"DRV_MIIM_Status Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"Parameters",
"DRV_MIIM_Tasks Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Example",
"DRV_MIIM_Write Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Networking Presentation Layer",
"NET_PRES_ADDRESS Structure",
"C",
"Description",
"Remarks",
"NET_PRES_CertStoreGetCACerts Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_CertStoreGetServerCert Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_Deinitialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderConnect Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderConnectionClose Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderDeinit Type",
"C",
"Returns",
"Description",
"Preconditions",
"NET_PRES_EncProviderInit Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderIsInitialized Type",
"C",
"Returns",
"Description",
"Preconditions",
"NET_PRES_EncProviderMaxOutputSize Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderObject Structure",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_EncProviderOpen Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderOutputSize Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderRead Type",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderReadReady Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderWrite Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncProviderWriteReady Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_EncSessionStatus Enumeration",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_INDEX Type",
"C",
"Description",
"Remarks",
"NET_PRES_INIT_DATA Structure",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_Initialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_INST_DATA Structure",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_INVALID_SOCKET Macro",
"C",
"Description",
"NET_PRES_Reinitialize Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SIGNAL_FUNCTION Type",
"C",
"Description",
"Remarks",
"Parameters",
"NET_PRES_SIGNAL_HANDLE Type",
"C",
"Description",
"Remarks",
"NET_PRES_SKT_ADDR_T Enumeration",
"C",
"Description",
"Remarks",
"NET_PRES_SKT_ERROR_T Enumeration",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_SKT_HANDLE_T Type",
"C",
"Description",
"Remarks",
"NET_PRES_SKT_OPTION_TYPE Enumeration",
"C",
"Description",
"Remarks",
"NET_PRES_SKT_PORT_T Type",
"C",
"Description",
"Remarks",
"NET_PRES_SKT_T Enumeration",
"C",
"Description",
"Remarks",
"NET_PRES_SocketBind Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketClose Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketConnect Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketDiscard Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketDisconnect Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketEncryptSocket Function",
"C",
"Returns",
"Preconditions",
"Parameters",
"NET_PRES_SocketFlush Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketGetTransportHandle Function",
"C",
"Returns",
"Preconditions",
"Parameters",
"NET_PRES_SocketInfoGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketIsConnected Function",
"C",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketIsNegotiatingEncryption Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketIsOpenModeSupported Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketIsSecure Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketLastError Function",
"C",
"Returns",
"Preconditions",
"Parameters",
"NET_PRES_SocketOpen Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketOptionsGet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketOptionsSet Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketPeek Function",
"C",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"NET_PRES_SocketRead Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"NET_PRES_SocketReadIsReady Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketRemoteBind Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketSignalHandlerDeregister Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketSignalHandlerRegister Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketWasReset Function",
"C",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketWrite Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_SocketWriteIsReady Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_Status Function",
"C",
"Returns",
"Description",
"Remarks",
"Preconditions",
"Parameters",
"NET_PRES_Tasks Function",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TRANS_ADDR_T Structure",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_TRANS_ADDRESS_TYPE Enumeration",
"C",
"Description",
"Remarks",
"NET_PRES_TRANS_OPTION_T Enumeration",
"C",
"Description",
"Remarks",
"NET_PRES_TransBind Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransBool Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransClose Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransDiscard Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransHandlerRegister Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransIsPortDefaultSecured Type",
"C",
"Returns",
"Description",
"Preconditions",
"NET_PRES_TransOpen Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransOption Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransPeek Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransportObject Structure",
"C",
"Members",
"Description",
"Remarks",
"NET_PRES_TransRead Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransReady Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransSignalHandlerDeregister Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransSocketInfoGet Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"NET_PRES_TransWrite Type",
"C",
"Returns",
"Description",
"Preconditions",
"Parameters",
"TCPIP Configurator",
"Getting Started with TCP/IP Configurator",
"Migrate MHC based TCP/IP Demos to TCP/IP Configurator"];

var SearchInfo = [" MPLAB® Harmony TCP/IP Library This distribution package contains a variety of TCP/IP firmware projects that demonstrate the capabilities of the MPLAB Harmony TCP/IP Stack Each project describes its hardware setup and requirements They are located in the net/apps folder This package also contains drivers for the Ethernet Controller (MAC) and supported external PHYs that can be connected to development boards such as the LAN8720 LAN8740 KSZ8041 KSZ8061 etc A PHY management and control MIIM driver supporting multiple clients is also supplied All the drivers are located in the net/drivers folder The distribution package contains the NET_PRES layer in the net/net/pres folder This software module is used by the TCP/IP stack to establish encrypted connections (TLS DTLS) with the use of an external service provider (wolfSSL) Part of the distribution package is the TCP/IP Stack itself containing the source files for all the modules that are part of the stack in the net/tcpip folder This distribution package contains various TCP/IP utilities ( MPFS generator TCP/IP Discoverer Microchip MIB Compiler) that assist in the development and diagnostics of the TCP/IP applications The utilities are located in the net/utilities folder Note that third-party code - wolfSSL - is required for support of TLS and DTLS features Prior to using the TCP/IP demonstrations it is recommended to review the MPLAB Harmony Release Notes (release_notes md) for any known issues It is located in the net folder Introduction The MPLAB Harmony TCP/IP Stack provides a foundation for embedded network applications by handling most of the interaction required between the physical network port and the application It includes modules for several commonly used application layers including HTTP for serving web pages SMTP for sending e-mails SNMP for providing status and control Telnet TFTP SNTP and many more In addition the stack includes light-weight and high-performance implementations of the TCP and UDP transport layers as well as other supporting modules such as IPv4 IPv6 ICMPv4 ICMPv6 DHCPv4 DHCPv6 ARP NDP IGMP DNS etc Flash and RAM Usage The following figures provide Flash and RAM usage information for the supported devices PIC32MZ_resources PIC32MZDAS_resources SAME70_resources SAMV71_resources SAME54_resources SAMA5D2_resources Heap Usage Estimate The overall heap estimate is available with the 'TCPIP CORE' module configurations as shown below TCPIP Heap Estimate The estimated heap size for TCP/IP is displayed in kilobytes The TCP/IP heap size is derived by adding the heap estimation for each of the TCP/IP modules The module-wise heap estimation can be viewed with each TCP/IP modules by enabling ‘Module-wise Heap Estimate’ as shown below TCPIP Heap Estimate modulewise Remarks: Please note the following points regarding heap estimation This calculation provides an estimation close to \"worst case\" scenario Calculation does not consider all the run-time dynamic memory allocations/de-allocations Calculation does not consider the dynamic changes of the TCP and/or UDP socket buffer sizes The heap runtime tool gives a more accurate picture of heap usage The run time tool is preferred as the static estimation of heap usage is approximative only The heap runtime tool can be used by enabling TCPIP_STACK_DRAM_DEBUG_ENABLE and TCPIP_STACK_DRAM_TRACE_ENABLE symbols Then \"heapinfo\" command will give runtime heap usage It should be noted that even if an \"out of memory\" condition occurs at run time the stack will behave graciously and it will report the error so that the operation can be re-tried TCP/IP Stack Libraries/Modules Drives and Layers TCP/IP Library includes the following Libraries/Modules Drives and Layers: ",
							" Announce Module TCP/IP Stack Library Announce Module for Microchip Devices This library provides the API of the Announce Module that is available on the Microchip family of devices with a convenient C language interface It is a module that belongs to the TCP/IP Stack The module implements a proprietary network discovery protocol This module will facilitate device discovery on DHCP enabled networks by broadcasting a UDP message on port 30303 whenever the local IP address changes Abstraction Model TCPIP ANNOUNCE abstract diagram Discovering the Board The Announce module provides an easy way to determine useful parameters for your TCP/IP node’s interfaces This module works in conjunction with the TCP/IP Discoverer personal computer utility to display an interface’s MAC and IPv4/IPv6 addresses IPv6 multicast listeners NBNS host name and MAC type During stack operation several events may cause an Announce packet to be broadcast on a particular interface These include: Reception of an Announce packet request on that interface A DHCP event on that interface (i e the interface has configured a new IPv4 address using DHCP) The addition or removal of an IPv6 Unicast Address from an interface (after Duplicate Address Detection) The addition or removal of an IPv6 Multicast Listener from an interface A user call to the ANNOUNCE_Notify function specifying the interface on which to send the announce message Each Announce packet is a UDP packet broadcast from the corresponding interface’s IP address The payload is a series of fields beginning with an 8-bit field ID followed by field information followed by a field terminator (0x0D 0x0A) The current field IDs and information formats are: 0x01 – This field ID indicates that not all of the interface’s address information could be transmitted in one packet There is no field information for this ID 0x01 0x0A 0x0D 0x02 – MAC address (6 bytes) 0x02 0x00 0x04 0xA3 0x12 0x0f 0x94 0x0D 0x0A 0x03 – MAC type The field information for this ID is a variable length string describing the MAC type of this interface – \"ENCJ60\" \"ENCJ600\" \"97J60\" \"PIC32INT\" \"PIC32CINT\" etc 0x03 ‘P’ ‘I’ ‘C’ ‘3’ ‘2’ ‘I’ ‘N’ ‘T’ 0x0D 0x0A 0x04 – Host name The NBNS host name of the interface with trailing spaces 0x04 ‘M’ ‘C’ ‘H’ ‘P’ ‘B’ ‘O’ ‘A’ ‘R’ ‘D’ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ ‘ 0x0D 0x0A 0x05 – The interface’s IPv4 address (4 bytes big-endian) 0x05 0x0A 0x00 0x01 0x03 0x0D 0x0A 0x06 – One of the interface's IPv6 unicast addresses (16 bytes big-endian) Note that the interface may have more than one of these The interface also has a corresponding solicited-node multicast address listener for every unicast address that is given The interface may have static IP address 0x06 0xFE 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x02 0x04 0xA3 0xFF 0xFE 0x12 0x0F 0x94 0x0D 0x0A 0x06 0xFD 0xFE 0xDC 0xDA 0x98 0x76 0x00 0x01 0x02 0x04 0xA3 0xFF 0xAA 0xAA 0xAA 0xAA 0x0D 0x0A 0x07 – One of the interface’s IPv6 multicast address listeners (16 bytes big-endian) The solicited-node multicast address listeners will not be included 0x07 0xFF 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x0D 0x0A 0x08 – One of the interface's IPv6 default router address (16 bytes big-endian) 0x08 0xFD 0xFE 0xDC 0xDA 0x98 0x76 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x0D 0x0A 0x09 – One of the interface's IPv6 default gateway address (16 bytes big-endian) 0x08 0xFD 0xFE 0xDC 0xDA 0x98 0x76 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x0D 0x0A Library Interface This section describes the Application Programming Interface (API) functions of the Announce module Refer to each section for a detailed description Name Description Functions TCPIP_ANNOUNCE_MessageRequest TCPIP_ANNOUNCE_CallbackRegister Allows the registration of a user callback TCPIP_ANNOUNCE_Task Standard TCP/IP stack module task function Data Types and Constants TCPIP_ANNOUNCE_BROADCAST_TYPE Announce message type TCPIP_ANNOUNCE_FIELD_PAYLOAD Announce payload types TCPIP_ANNOUNCE_MESSAGE_CALLBACK Announce message callback function TCPIP_ANNOUNCE_MODULE_CONFIG Announce Configuration structure placeholder ",
							" TCPIP_ANNOUNCE_BROADCAST_TYPE Enumeration ",
							" C typedef enum { TCPIP_ANNOUNCE_BCAST_NONE TCPIP_ANNOUNCE_BCAST_NET_LIMITED TCPIP_ANNOUNCE_BCAST_NET_DIRECTED } TCPIP_ANNOUNCE_BROADCAST_TYPE; ",
							" Description Enumeration: TCPIP_ANNOUNCE_BROADCAST_TYPE - Describes the current message types supported by the announce module ",
							" Members Members Description TCPIP_ANNOUNCE_BCAST_NONE invalid not specified TCPIP_ANNOUNCE_BCAST_NET_LIMITED the Announce messages will be sent using the IPv4 network limited broadcast type i e 255 255 255 255 This is the default TCPIP_ANNOUNCE_BCAST_NET_DIRECTED the Announce messages will be sent using the IPv4 network directed broadcast type i e 192 168 1 255 for example ",
							" TCPIP_ANNOUNCE_CallbackRegister Function ",
							" C bool TCPIP_ANNOUNCE_CallbackRegister( TCPIP_ANNOUNCE_MESSAGE_CALLBACK callback ); ",
							" Description This function registers an application callback The callback will be called when the Announce module needs to send a message The user can insert its own message as part of a standard announce message ",
							" Preconditions The Announce module should have been initialized ",
							" Parameters Parameters Description callback user function to becalled by the announce module If callback == 0 then any previous callback will be erased ",
							" Returns true - if the call succeeded false - if failed; module is not up for example ",
							" Remarks Only one callback is supported currently To delete the callback simply call the register function with callback = 0 the callback function could use regular UDP calls to add its own data to the message If the UDP socket TX buffer was not sufficient for storing the internal announce message then the user part will be skipped ",
							" TCPIP_ANNOUNCE_FIELD_PAYLOAD Enumeration ",
							" C typedef enum { TCPIP_ANNOUNCE_FIELD_NONE = 0 TCPIP_ANNOUNCE_FIELD_TRUNCATED TCPIP_ANNOUNCE_FIELD_MAC_ADDR TCPIP_ANNOUNCE_FIELD_MAC_NAME TCPIP_ANNOUNCE_FIELD_HOST_NAME TCPIP_ANNOUNCE_FIELD_IPV4_ADDRESS TCPIP_ANNOUNCE_FIELD_IPV6_UNICAST TCPIP_ANNOUNCE_FIELD_IPV6_MULTICAST TCPIP_ANNOUNCE_FIELD_IPV6_DEFAULT_ROUTER TCPIP_ANNOUNCE_FIELD_IPV6_DEFAULT_GATEWAY } TCPIP_ANNOUNCE_FIELD_PAYLOAD; ",
							" Description Enumeration: TCPIP_ANNOUNCE_FIELD_PAYLOAD - Describes the current types supported by the announce module payload ",
							" Members Members Description TCPIP_ANNOUNCE_FIELD_NONE = 0 invalid TCPIP_ANNOUNCE_FIELD_TRUNCATED the payload is the truncated type TCPIP_ANNOUNCE_FIELD_MAC_ADDR the payload is the MAC address TCPIP_ANNOUNCE_FIELD_MAC_NAME the payload is the MAC name TCPIP_ANNOUNCE_FIELD_HOST_NAME the payload is the host name TCPIP_ANNOUNCE_FIELD_IPV4_ADDRESS the payload is the IPv4 address TCPIP_ANNOUNCE_FIELD_IPV6_UNICAST the payload is the IPv6 unicast address TCPIP_ANNOUNCE_FIELD_IPV6_MULTICAST the payload is the IPv6 multicast address TCPIP_ANNOUNCE_FIELD_IPV6_DEFAULT_ROUTER the payload is the IPv6 router TCPIP_ANNOUNCE_FIELD_IPV6_DEFAULT_GATEWAY the payload is the IPv6 gateway address ",
							" TCPIP_ANNOUNCE_MESSAGE_CALLBACK Type ",
							" C typedef void (* TCPIP_ANNOUNCE_MESSAGE_CALLBACK)(TCPIP_NET_HANDLE hNet UDP_SOCKET s); ",
							" Description Type: TCPIP_ANNOUNCE_MESSAGE_CALLBACK - Prototype of an announce callback function that can be registered by the user This callback will be called by the announce module when sending a broadcast message ",
							" Remarks The callback function could use regular UDP calls to add its own data to the message The UDP socket TX buffer has limited space and the standard announce message is in the buffer The ammount of data that can be pushed is limited by the TCPIP_ANNOUNCE_MAX_PAYLOAD symbol If the UDP socket TX buffer was not sufficient for storing the internal announce message then the user part will be skipped ",
							" TCPIP_ANNOUNCE_MessageRequest Function ",
							" C bool TCPIP_ANNOUNCE_MessageRequest( TCPIP_NET_HANDLE hNet TCPIP_ANNOUNCE_BROADCAST_TYPE bcastType ); ",
							" Description This function instructs the module to send an announce message on the specified interface using the selected broadcast type If successful the message is triggered and will be sent to the output ",
							" Preconditions The Announce module should have been initialized ",
							" Parameters Parameters Description hNet handle of the network to send announce message If 0 the announce message will be sent on all interfaces bcastType type of broadcast to be used This type becomes the current broadcast type If == TCPIP_ANNOUNCE_BCAST_NONE the broadcast type is not changed ",
							" Returns true - if the selected network is valid and the announce message is initiated false - if no such network or network is down ",
							" Remarks The sending of the message does not occur in the context of this function This function just initiates an announce message request ",
							" TCPIP_ANNOUNCE_MODULE_CONFIG Structure ",
							" C typedef struct { void* reserved; } TCPIP_ANNOUNCE_MODULE_CONFIG; ",
							" Description Structure: TCPIP_ANNOUNCE_MODULE_CONFIG - This structure us used for the Announce module initialization data ",
							" TCPIP_ANNOUNCE_Task Function ",
							" C void TCPIP_ANNOUNCE_Task(); ",
							" Description This function performs Announce module tasks in the TCP/IP stack ",
							" Preconditions The Announce module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" ARP Module The Address Resolution Protocol or ARP is a foundation layer_of TCP/IP It translates IP addresses to physical MAC addresses TCP and UDP applications will not need to access ARP directly The IPv4 module will handle the ARP operations transparently Responses to incoming ARP requests are processed automatically Resolution of ARP requests follows a simple state machine as indicated in the following diagram arp_diagram Abstraction Model This module provides software abstraction of the ARP module existent in any TCP/IP Stack implementation It removes the overhead of address resolution from all other modules in the stack arp_resolution_process How the Library Works The ARP module provides address resolution capabilities for the TCP/IP stack The ARP module is an independent module that maintains its state across calls and updates its state machine A data storage (cache) is maintained and updated internally for each interface existent in the system The number of entries in each cache is configurable at initialization time The ARP state machine can remove entries from the cache and can provide signals when a specific entry has been resolved or has timed out The purging of the cache is done internally base on a time-out parameter that is dynamically configurable The module provides a notification mechanism which simplifies the design of the ARP clients The most important client of the ARP module is the IPv4_layer Library Interface Name Description Macros  ARP_CACHE_DELETE_OLD On initialization delete the old cache if still in place Else don't re-initialize Default should be 1 TCPIP_ARP_CACHE_ENTRIES Number of entries in the cache Default number of entries per interface TCPIP_ARP_CACHE_ENTRY_RETRIES Number of ARP requests generated for resolving an entry TCPIP_ARP_CACHE_PENDING_ENTRY_TMO Timeout for a cache entry pending to be solved in seconds The entry will be removed if the tmo elapsed and the entry has not been solved A solved entry moves to the solved entries timeout TCPIP_ARP_CACHE_PENDING_RETRY_TMO Timeout for resending an ARP request for a pending entry In order to prevent the ARP flooding the standard recommends it to be greater than 1 sec It should be less than TCPIP_ARP_CACHE_PENDING_ENTRY_TMO TCPIP_ARP_CACHE_PERMANENT_QUOTA Max percentage of permanent entries in the cache Note that since permanent entries cannot be removed they tend to degrade the efficiency of the cache look up TCPIP_ARP_CACHE_PURGE_QUANTA The number of entries to delete once the threshold is reached TCPIP_ARP_CACHE_PURGE_THRESHOLD Default purge threshold percentage Once the number of resolved entries in the cache gets beyond the threshold some resolved entries will be purged TCPIP_ARP_CACHE_SOLVED_ENTRY_TMO Timeout for a solved entry in the cache in seconds The entry will be removed if the tmo elapsed and the entry has not been referenced again TCPIP_ARP_GRATUITOUS_PROBE_COUNT Number of ARP requests generated when sending a gratuitous ARP probe Default value should be 1 TCPIP_ARP_TASK_PROCESS_RATE ARP task processing rate in milliseconds The ARP module will process a timer event with this rate for maintaining its own queues processing timeouts etc Choose it so that the other ARP_CACHE_xxx_TMO are multiple of this The default value is 2 seconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_ARP_PRIMARY_CACHE_ONLY ARP caches configuration for aliases If this symbol is true then the alias interfaces share the cache with the primary interface Otherwise each interface uses its own cache Default value should be 1 if the alias interfaces are in the same network with the primary interface General Functions  TCPIP_ARP_HandlerDeRegister Deregisters the event handler TCPIP_ARP_HandlerRegister Register an ARP resolve handler TCPIP_ARP_EntryGet Gets the current mapping for an IP address TCPIP_ARP_EntryRemove Removes the mapping of an address even a permanent one TCPIP_ARP_EntryRemoveNet Removes all the entries belonging to a network interface TCPIP_ARP_EntrySet Adds an ARP cache entry for the specified interface TCPIP_ARP_IsResolved Determines if an ARP request has been resolved yet TCPIP_ARP_Probe Transmits an ARP probe to resolve an IP address TCPIP_ARP_Resolve Transmits an ARP request to resolve an IP address TCPIP_ARP_Task Standard TCP/IP stack module task function Cache Manipulation Functions  TCPIP_ARP_CacheEntriesNoGet Used to retrieve the number of entries for a specific interface TCPIP_ARP_CacheThresholdSet Sets the cache threshold for the specified interface in percent TCPIP_ARP_EntryQuery Queries an ARP cache entry using the index of the cache line TCPIP_ARP_EntryRemoveAll Removes all the mapping belonging to an interface Data Types and Constants  TCPIP_ARP_ENTRY_QUERY ARP entry query TCPIP_ARP_ENTRY_TYPE Type of ARP entry TCPIP_ARP_EVENT_HANDLER Notification handler that can be called when a specific entry is resolved TCPIP_ARP_EVENT_TYPE Events reported by ARP TCPIP_ARP_HANDLE ARP handle TCPIP_ARP_OPERATION_TYPE Type of ARP operation TCPIP_ARP_RESULT ARP results (success and failure codes) TCPIP_ARP_MODULE_CONFIG This is type TCPIP_ARP_MODULE_CONFIG   ",
							" TCPIP_ARP_CacheEntriesNoGet Function ",
							" C size_t TCPIP_ARP_CacheEntriesNoGet( TCPIP_NET_HANDLE hNet TCPIP_ARP_ENTRY_TYPE type ); ",
							" Description The function will return the number of entries of the specified type that are currently in the cache ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface handle to use type Type of ARP entry ",
							" Returns The number of entries of the specified type per interface ",
							" Remarks None ",
							" TCPIP_ARP_CacheThresholdSet Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_CacheThresholdSet( TCPIP_NET_HANDLE hNet int purgeThres int purgeEntries ); ",
							" Description This function sets the current value of the cache threshold for the selected interface During the ARP operation once the number of entries in the cache is greater than the purge threshold a number of purgeEntries (usually one) will be discarded ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface handle to use purgeThres Threshold to start cache purging purgeEntries Number of entries to purge ",
							" Returns On Success - ARP_RES_OK On Failure - ARP_RES_NO_INTERFACE (if no such interface exists) ",
							" Remarks None ",
							" TCPIP_ARP_ENTRY_QUERY Structure ",
							" C typedef struct { TCPIP_ARP_ENTRY_TYPE entryType; IPV4_ADDR entryIpAdd; TCPIP_MAC_ADDR entryHwAdd; } TCPIP_ARP_ENTRY_QUERY; ",
							" Description Structure: TCPIP_ARP_ENTRY_QUERY Data structure for an ARP query ",
							" Members Members Description entryType What entry type entryIpAdd The entry IP address entryHwAdd The entry hardware address ",
							" Remarks None ",
							" TCPIP_ARP_ENTRY_TYPE Enumeration ",
							" C typedef enum { ARP_ENTRY_TYPE_INVALID ARP_ENTRY_TYPE_PERMANENT ARP_ENTRY_TYPE_COMPLETE ARP_ENTRY_TYPE_INCOMPLETE ARP_ENTRY_TYPE_ANY ARP_ENTRY_TYPE_TOTAL } TCPIP_ARP_ENTRY_TYPE; ",
							" Description Enumeration: TCPIP_ARP_ENTRY_TYPE List of different ARP cache entries ",
							" Members Members Description ARP_ENTRY_TYPE_INVALID Empty entry ARP_ENTRY_TYPE_PERMANENT Entry valid and permanent ARP_ENTRY_TYPE_COMPLETE Entry valid ARP_ENTRY_TYPE_INCOMPLETE Entry not resolved yet ARP_ENTRY_TYPE_ANY Any busy entry (PERMANENT ARP_ENTRY_TYPE_TOTAL Total entries - the number of entries the cache can store ",
							" Remarks None ",
							" TCPIP_ARP_EntryGet Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_EntryGet( TCPIP_NET_HANDLE hNet IPV4_ADDR* ipAdd TCPIP_MAC_ADDR* pHwAdd bool probe ); ",
							" Description If probe == false The function behaves identical to TCPIP_ARP_IsResolved(): If the corresponding MAC address exists in the cache it is copied to the user supplied pHwAdd If probe == true the function behaves identical to TCPIP_ARP_Resolve(): If the corresponding MAC address does not exist in the cache this function transmits and ARP request Upon the address resolution it calls the registered handler (if available) with the supplied notification parameter (if = 0) If the hardware address exists in the cache the result is written to pHwAdd and no network ARP request is sent ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use ipAdd IP Address to get entries for pHwAdd Pointer to store the hardware address probe Boolean to specify if ARP probing is initiated or not ",
							" Returns ARP_RES_ENTRY_SOLVED - if the required entry is already solved ARP_RES_ENTRY_QUEUED - if the required entry was already queued ARP_RES_ENTRY_NEW - if the operation succeeded and a new entry was added (and queued for resolving) ARP_RES_CACHE_FULL - if new entry could not be inserted the cache was full ARP_RES_BAD_ADDRESS - bad address specified ARP_RES_NO_INTERFACE - no such interface ",
							" Remarks Similar to TCPIP_ARP_Resolve + TCPIP_ARP_IsResolved it avoids a double hash search when the mapping exists ",
							" TCPIP_ARP_EntryQuery Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_EntryQuery( TCPIP_NET_HANDLE hNet size_t index TCPIP_ARP_ENTRY_QUERY* pArpQuery ); ",
							" Description This function can be used for displaying the cache contents ",
							" Preconditions The ARP module should have been initialized The index has to be a valid one For example TCPIP_ARP_CacheEntriesNoGet populates the supplied TCPIP_ARP_ENTRY_QUERY query entry ",
							" Parameters Parameters Description hNet Interface handle to use index Index to cache pArpQuery Entry type IP address hardware address ",
							" Returns On Success - ARP_RES_OK On Failure - ARP_RES_BAD_INDEX (if index is out of range) ARP_RES_NO_INTERFACE (if no such interface exists) ",
							" Remarks None ",
							" TCPIP_ARP_EntryRemove Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_EntryRemove( TCPIP_NET_HANDLE hNet IPV4_ADDR* ipAdd ); ",
							" Description This function removes an existent mapping from the selected interface cache ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use ipAdd IP Address to remove entries for ",
							" Returns TCPIP_ARP_RESULT On Success - ARP_RES_OK On Failure - ARP_RES_NO_ENTRY (if no such mapping exists) ARP_RES_NO_INTERFACE (if no such interface exists) ",
							" Remarks None ",
							" TCPIP_ARP_EntryRemoveAll Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_EntryRemoveAll( TCPIP_NET_HANDLE hNet ); ",
							" Description This function removes all existent mappings from the selected interface cache ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Network interface handle ",
							" Returns TCPIP_ARP_RESULT On Success - ARP_RES_OK On Failure - ARP_RES_NO_INTERFACE (if no such interface exists) ",
							" Remarks None ",
							" TCPIP_ARP_EntryRemoveNet Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_EntryRemoveNet( TCPIP_NET_HANDLE hNet IPV4_ADDR* ipAdd IPV4_ADDR* mask TCPIP_ARP_ENTRY_TYPE type ); ",
							" Description This function removes all existent mappings belonging to a network interface The performed operation: if(entry- type == type and entry- ipAdd mask == ipAdd mask) then remove entry ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use IPAdd The IP address mask IP address of mask type valid types of entries to remove: - ARP_ENTRY_TYPE_PERMANENT - ARP_ENTRY_TYPE_COMPLETE - ARP_ENTRY_TYPE_INCOMPLETE - ARP_ENTRY_TYPE_ANY ",
							" Returns TCPIP_ARP_RESULT On Success - ARP_RES_OK On Failure - ARP_RES_BAD_TYPE (if no such type exists) ARP_RES_NO_INTERFACE (if no such interface exists) ",
							" Remarks None ",
							" TCPIP_ARP_EntrySet Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_EntrySet( TCPIP_NET_HANDLE hNet IPV4_ADDR* ipAdd TCPIP_MAC_ADDR* hwAdd bool perm ); ",
							" Description This function will add an entry to the selected interface cache The entry can be marked as as permanent (not subject to timeouts or updates from the network) If cache is full an entry will be deleted to make room ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use IPAdd The IP address hwAdd The mapping MAC address for the supplied ipAdd  perm If true the entry will be marked as permanent ",
							" Returns On Success - ARP_RES_OK/ARP_RES_ENTRY_EXIST On Failure - An Error for example cache is full with permanent entries that cannot be purged or the permanent quota exceeded) ",
							" Remarks None ",
							" TCPIP_ARP_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_ARP_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet const IPV4_ADDR* ipAdd const TCPIP_MAC_ADDR* MACAddr TCPIP_ARP_EVENT_TYPE evType const void* param); ",
							" Description Type: TCPIP_ARP_EVENT_HANDLER The format of a notification handler registered with the ARP module ",
							" Remarks The parameter member significance is module dependent It can be an IP address pointer to some other structure etc The handler is called when an event of some sort occurs for a particular IP address entry If pNetIf == 0 the notification is called for events on any interface ",
							" TCPIP_ARP_EVENT_TYPE Enumeration ",
							" C typedef enum { ARP_EVENT_SOLVED = 1 ARP_EVENT_UPDATED = 2 ARP_EVENT_PERM_UPDATE = 3 ARP_EVENT_REMOVED_TMO = -1 ARP_EVENT_REMOVED_USER = -2 ARP_EVENT_REMOVED_EXPIRED = -3 ARP_EVENT_REMOVED_PURGED = -4 } TCPIP_ARP_EVENT_TYPE; ",
							" Description Enumeration: TCPIP_ARP_EVENT_TYPE List of events reported by ARP ",
							" Members Members Description ARP_EVENT_SOLVED = 1 A queued cache entry was solved ARP_EVENT_UPDATED = 2 An existent cache entry was updated ARP_EVENT_PERM_UPDATE = 3 An update for an permanent entry was received however the permanent entry was not updated error events - entries removed from ARP cache ARP_EVENT_REMOVED_TMO = -1 An entry could not be solved and a tmo occurred ARP_EVENT_REMOVED_USER = -2 A queued cache entry was removed by ARP user ARP_EVENT_REMOVED_EXPIRED = -3 A queued cache entry expired and was removed ARP_EVENT_REMOVED_PURGED = -4 A queued cache entry was purged ",
							" Remarks Possibly multiple events can be set where it makes sense ",
							" TCPIP_ARP_HANDLE Type ",
							" C typedef const void* TCPIP_ARP_HANDLE; ",
							" Description Type: TCPIP_ARP_HANDLE A handle that a client needs to use when deregistering a notification handler ",
							" Remarks This handle can be used by the client after the event handler has been registered ",
							" TCPIP_ARP_HandlerDeRegister Function ",
							" C bool TCPIP_ARP_HandlerDeRegister( TCPIP_ARP_HANDLE hArp ); ",
							" Description TDeregisters a previously registered ARP handler ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hArp ARP handle ",
							" Returns Boolean On Success - True On Failure - False (if no such handler registered) ",
							" Remarks None ",
							" TCPIP_ARP_HandlerRegister Function ",
							" C TCPIP_ARP_HANDLE TCPIP_ARP_HandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_ARP_EVENT_HANDLER handler const void* hParam ); ",
							" Description This function will register a notification handler with the ARP module ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Specifies interface to register on Use hNet == 0 to register on all interfaces available handler Handler to be called for event hParam The hParam is passed by the client and will be used by the ARP when the notification is made It is used for per-thread content or if more modules for example share the same handler and need a way to differentiate the callback ",
							" Returns TCPIP_ARP_HANDLE On Success - Returns a valid handle On Failure - Null handle ",
							" Remarks None ",
							" TCPIP_ARP_IsResolved Function ",
							" C bool TCPIP_ARP_IsResolved( TCPIP_NET_HANDLE hNet IPV4_ADDR* IPAddr TCPIP_MAC_ADDR* MACAddr ); ",
							" Description This function checks if an ARP request has been resolved yet and if so stores the resolved MAC address in the pointer provided ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use IPAddr The IP address to be resolved The address must be specified in network byte order (big endian) MACAddr A buffer to store the corresponding MAC address retrieved from the ARP query ",
							" Remarks None ",
							" TCPIP_ARP_MODULE_CONFIG Structure ",
							" C typedef struct { size_t cacheEntries; bool deleteOld; int entrySolvedTmo; int entryPendingTmo; int entryRetryTmo; int permQuota; int purgeThres; int purgeQuanta; int retries; int gratProbeCount; } TCPIP_ARP_MODULE_CONFIG; ",
							" Description This is type TCPIP_ARP_MODULE_CONFIG ",
							" Members Members Description cacheEntries Cache entries for this interface deleteOld Delete old cache if still in place else don't reinitialize it entrySolvedTmo Solved entry removed after this tmo if not referenced in seconds entryPendingTmo Timeout for a pending to be solved entry in the cache in seconds entryRetryTmo Timeout for resending an ARP request for a pending entry - seconds 1 sec tmo entryPendingTmo permQuota Max percentage of permanent entries allowed in the cache purgeThres Purge threshold purgeQuanta No of entries to delete once the threshold is reached retries No of retries for resolving an entry gratProbeCount No of retries done for a gratuitous ARP request ",
							" TCPIP_ARP_OPERATION_TYPE Enumeration ",
							" C typedef enum { ARP_OPERATION_REQ = 1 ARP_OPERATION_RESP = 2 ARP_OPERATION_MASK = 0x000f ARP_OPERATION_CONFIGURE = 0x1000 ARP_OPERATION_GRATUITOUS = 0x2000 ARP_OPERATION_PROBE_ONLY = 0x4000 } TCPIP_ARP_OPERATION_TYPE; ",
							" Description Enumeration: TCPIP_ARP_OPERATION_TYPE Operation to be performed by an ARP probe ",
							" Members Members Description ARP_OPERATION_REQ = 1 ARP request ARP_OPERATION_RESP = 2 ARP response ARP_OPERATION_MASK = 0x000f Extract ARP operation ARP_OPERATION_CONFIGURE = 0x1000 Stack configuration ARP packet ARP_OPERATION_GRATUITOUS = 0x2000 Stack gratuitous ARP packet ARP_OPERATION_PROBE_ONLY = 0x4000 An ARP probe is sent only once the target address is not stored ",
							" Remarks Used for low level functionality TCPIP_ARP_Probe ",
							" TCPIP_ARP_Probe Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_Probe( TCPIP_NET_HANDLE hNet IPV4_ADDR* IPAddr IPV4_ADDR* srcAddr TCPIP_ARP_OPERATION_TYPE opType ); ",
							" Description This function transmits and ARP probe to determine the hardware address of a given IP address The packet will use the type of operation and the source address specified as parameters ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use IPAddr The IP address to be resolved The address must be specified in network byte order (big endian) srcAddr The source address to be used in the ARP packet opType Operation code to be set in the outgoing ARP packet ",
							" Returns ARP_RES_ENTRY_SOLVED - if the required entry is already solved ARP_RES_ENTRY_QUEUED - if the required entry was already queued ARP_RES_ENTRY_NEW - if the operation succeeded and a new entry was added (and queued for resolving) ARP_RES_CACHE_FULL - if new entry could not be inserted the cache was full ARP_RES_BAD_ADDRESS - bad address specified ARP_RES_NO_INTERFACE - no such interface ",
							" Remarks This function is a more advanced version of TCPIP_ARP_Resolve It allows the caller to specify the operation type and the source address of the outgoing ARP packet It also supports the ARP flags defined in TCPIP_ARP_OPERATION_TYPE No check is done for IPAddr to be valid To retrieve the ARP query result call the TCPIP_ARP_IsResolved function ",
							" TCPIP_ARP_Resolve Function ",
							" C TCPIP_ARP_RESULT TCPIP_ARP_Resolve( TCPIP_NET_HANDLE hNet IPV4_ADDR* IPAddr ); ",
							" Description This function transmits and ARP request to determine the hardware address of a given IP address Upon the address resolution it calls the registered handler (if available) with the supplied notification parameter (if = 0) ",
							" Preconditions The ARP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to use IPAddr The IP address to be resolved The address must be specified in network byte order (big endian) ",
							" Returns An element from the TCPIP_ARP_RESULT enumeration ARP_RES_ENTRY_SOLVED - if the required entry is already solved ARP_RES_ENTRY_QUEUED - if the required entry was already queued ARP_RES_ENTRY_NEW - if the operation succeeded and a new entry was added (and queued for resolving) ARP_RES_CACHE_FULL - if new entry could not be inserted the cache was full ARP_RES_BAD_ADDRESS - bad address specified ARP_RES_NO_INTERFACE - no such interface ",
							" Remarks To retrieve the ARP query result call the TCPIP_ARP_IsResolved function ",
							" TCPIP_ARP_RESULT Enumeration ",
							" C typedef enum { ARP_RES_OK = 0 ARP_RES_ENTRY_NEW ARP_RES_ENTRY_SOLVED ARP_RES_ENTRY_QUEUED ARP_RES_ENTRY_EXIST ARP_RES_PERM_QUOTA_EXCEED ARP_RES_PROBE_OK ARP_RES_NO_ENTRY = -1 ARP_RES_CACHE_FULL = -2 ARP_RES_TX_FAILED = -3 ARP_RES_BAD_INDEX = -4 ARP_RES_BAD_ADDRESS = -5 ARP_RES_NO_INTERFACE = -6 ARP_RES_BAD_TYPE = -7 ARP_RES_CONFIGURE_ERR = -8 ARP_RES_PROBE_FAILED = -9 } TCPIP_ARP_RESULT; ",
							" Description Enumeration: TCPIP_ARP_RESULT Various definitions for success and failure codes ",
							" Members Members Description ARP_RES_OK = 0 Operation succeeded ARP_RES_ENTRY_NEW Operation succeeded and a new entry was added ARP_RES_ENTRY_SOLVED The required entry is already solved ARP_RES_ENTRY_QUEUED The required entry was already queued ARP_RES_ENTRY_EXIST The required entry was already cached ARP_RES_PERM_QUOTA_EXCEED Info: the quota of permanent entries was exceeded ARP_RES_PROBE_OK Requested probe sent ARP_RES_NO_ENTRY = -1 No such entry exists ARP_RES_CACHE_FULL = -2 The cache is full and no entry could be removed to make room ARP_RES_TX_FAILED = -3 Failed to transmit an ARP message ARP_RES_BAD_INDEX = -4 Bad query index ARP_RES_BAD_ADDRESS = -5 Bad IP address specified ARP_RES_NO_INTERFACE = -6 No such interface exists ARP_RES_BAD_TYPE = -7 No such type is valid/exists ARP_RES_CONFIGURE_ERR = -8 Interface is configuring now no ARP probes ARP_RES_PROBE_FAILED = -9 Requested probed failed ",
							" Remarks None ",
							" TCPIP_ARP_Task Function ",
							" C void TCPIP_ARP_Task(); ",
							" Description Performs ARP module tasks in the TCP/IP stack ",
							" Preconditions The ARP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" Berkeley Module The Berkeley_Socket_Distribution (BSD) APIs provide a BSD wrapper to the native Microchip TCP/IP Stack APIs Using this interface programmers familiar with BSD_sockets can quickly develop applications using Microchip's TCP/IP Stack Abstraction Model The following illustration shows a typical interaction for a TCP server or client using the Berkeley_socket_APIs bsd_diagram Library Interface Name Description Macros  MAX_BSD_SOCKETS Berkeley API max number of sockets simultaneous supported Functions  accept This function accepts connection requests queued for a listening socket bind This function assigns a name to the socket descriptor closesocket The closesocket function closes an existing socket connect This function connects to the peer communications end point gethostname Returns the standard host name for the system listen The listen function sets the specified socket in a listen mode recv The recv() function is used to receive incoming data that has been queued for a socket recvfrom The recvfrom() function is used to receive incoming data that has been queued for a socket send The send function is used to send outgoing data on an already connected socket sendto This function used to send the data for both connection oriented and connection-less sockets socket This function creates a new Berkeley socket getsockopt Allows setting options to a socket like adjust RX/TX buffer size etc setsockopt Allows setting options to a socket like adjust RX/TX buffer size etc gethostbyname The gethostbyname function returns a structure of type hostent for the given host name freeaddrinfo Frees the memory allocated by getaddrinfo getaddrinfo Does an address look up for the provided node name getsockname Returns the current address to which the socket is bound TCPIP_BSD_Socket Returns the native socket number associated with the BSD socket TCPIP_BSD_Task Standard TCP/IP stack module task function TCPIP_BSD_PresSocket Returns the NET_PRES socket number associated with the BSD socket Data Types and Constants  in_addr in_addr structure sockaddr generic address structure for all address families sockaddr_in In the Internet address family SOCKADDR generic address structure for all address families SOCKADDR_IN In the Internet address family SOCKET Socket descriptor AF_INET Internet Address Family - IPv4 UDP TCP etc INADDR_ANY IP address for server binding INVALID_TCP_PORT Invalid TCP port IP_ADDR_ANY IP Address for server binding IPPROTO_IP Indicates IP pseudo-protocol IPPROTO_TCP Indicates TCP level options IPPROTO_UDP Indicates UDP level options SOCK_DGRAM Connectionless datagram socket Use UDP for the Internet address family SOCK_STREAM Connection based byte streams Use TCP for the Internet address family SOCKET_CNXN_IN_PROGRESS Socket connection state SOCKET_DISCONNECTED Socket disconnected SOCKET_ERROR Socket error ICMP6_FILTER SEt the IPv6 Filtering options - Not yet supported IP_ADD_MEMBERSHIP Join a multicast group - Not yet supported IP_DROP_MEMBERSHIP Leave a multicast group - Not yet supported IP_MULTICAST_IF Set the Interface that multicast packets should be sent on - Not yet supported IP_MULTICAST_LOOP Specify a copy of multicast packets should be delivered to the sending host - Not yet supported IP_MULTICAST_TTL Set the Time to Live option for multicast packets - Not yet supported IP_OPTIONS IP Header Options - Not yet supported IP_TOS Type of Service - Not yet supported IP_TTL Time to Live - Not yet supported IPPROTO_ICMPV6 Indicates IPv6 ICMP Protocol Options IPPROTO_IPV6 Indicates IP v6 Header options IPV6_CHECKSUM Sets the IPv6 Checksum options - Not yet supported IPV6_JOIN_GROUP Join an IPv6 multicast group - Not yet supported IPV6_LEAVE_GROUP Leave an IPv6 multicast group - Not yet supported IPV6_MULTICAST_HOPS Set the hop limit for multicast IPv6 packets - Not yet supported IPV6_MULTICAST_IF Set the Interface that multicast IPv6 packets should be sent on - Not yet supported IPV6_MULTICAST_LOOP Specify a copy of multicast IPv6 packets should be delivered to the sending host - Not yet supported IPV6_UNICAST_HOPS Set the hop limit for unicast IPv6 packets - Not yet supported IPV6_V6ONLY Sets the socket to IPv6 only - Not yet supported SO_BROADCAST Enables the Socket for sending broadcast data SO_DEBUG Indicates if low level debut is active - Not yet supported SO_DONTROUTE Bypass normal routing - Not yet supported SO_KEEPALIVE Keep the connection alive by sending periodic transmissions - Not yet supported SO_LINGER Indicates if the system should send any buffered data when a socket is closed SO_OOBINLINE Indicates whether or not Out of Band Data should be received inline with normal data - Not yet supported SO_RCVBUF Receive Buffer Size (TCP only) SO_RCVLOWAT Receive Low Water mark - Not yet supported SO_RCVTIMEO Set the Receive Timeout - Not yet supported SO_REUSEADDR Indicates if the local socket can be reused immediately after close - Not yet supported SO_SNDBUF Send Buffer Size SO_SNDLOWAT Send Low Water mark - Not yet supported SO_SNDTIMEO Set the Send Timeout - Not yet supported SOL_SOCKET Indicates socket level options TCP_NODELAY Indicates if TCP is to buffer packets - Not yet supported linger This is record linger hostent This is record hostent in6_addr This is record in6_addr sockaddr_in6 In the Internet address family sockaddr_storage This is record sockaddr_storage addrinfo This is record addrinfo SOCKADDR_IN6 This is type SOCKADDR_IN6 AF_INET6 Internet Address Family - IPv6 HOST_NOT_FOUND Authoritative Answer host not found NO_DATA Valid name no data record of requested type NO_RECOVERY Non recoverable errors TRY_AGAIN Non authoritative host not found or server fail BERKELEY_MODULE_CONFIG Berkeley API module configuration structure __ss_aligntype Structure large enough to hold any socket address (with the historical exception of AF_UNIX) 128 bytes reserved _SS_PADSIZE This is macro _SS_PADSIZE _SS_SIZE This is macro _SS_SIZE EAI_AGAIN Temporary failure in name resolution EAI_BADFLAGS Invalid value for ai_flags field EAI_FAIL Non-recoverable failure in name res EAI_FAMILY ai_family not supported EAI_MEMORY Memory allocation failure EAI_NONAME NAME or SERVICE is unknown EAI_OVERFLOW Argument buffer overflow EAI_SERVICE SERVICE not supported for ai_socktype EAI_SOCKTYPE ai_socktype not supported EAI_SYSTEM System error returned in errno _BERKELEY_API_HEADER_FILE This is macro _BERKELEY_API_HEADER_FILE BERKELEYAPI_CONFIG_H This is macro BERKELEYAPI_CONFIG_H  ",
							" __ss_aligntype Macro ",
							" C #define __ss_aligntype uint32_t ",
							" Description Structure large enough to hold any socket address (with the historical exception of AF_UNIX) 128 bytes reserved ",
							" __SS_PADSIZE Macro ",
							" C #define _SS_PADSIZE (_SS_SIZE - (2 * sizeof (__ss_aligntype))) ",
							" Description This is macro __SS_PADSIZE ",
							" __SS_SIZE Macro ",
							" C #define _SS_SIZE 128 ",
							" Description This is macro __SS_SIZE ",
							" _BERKELEY_API_HEADER_FILE Macro ",
							" C #define _BERKELEY_API_HEADER_FILE ",
							" Description This is macro _BERKELEY_API_HEADER_FILE ",
							" _BERKELEYAPI_CONFIG_H_ Macro ",
							" C #define _BERKELEYAPI_CONFIG_H_ ",
							" Description This is macro _BERKELEYAPI_CONFIG_H_ ",
							" accept Function ",
							" C SOCKET accept( SOCKET s struct sockaddr* addr int* addrlen ); ",
							" Description The accept function is used to accept connection request queued for a listening socket If a connection request is pending accept removes the request from the queue and a new socket is created for the connection The original listening socket remains open and continues to queue new connection requests The socket must be a SOCK_STREAM type socket ",
							" Preconditions The listen function should be called ",
							" Parameters |Parameters |Description | |s |Socket descriptor returned from a previous call to socket Must be bound to a local name and in listening mode | |addr |Optional pointer to a buffer that reveives the address of the connecting entity | |addrlen |Optional pointer to an integer that contains the length of the address addr | ",
							" Returns non-negative integer - The function succeeds and the integer is a descriptor for the accepted socket SOCKET_ERROR - Function failed errno is set accordingly ",
							" Remarks None ",
							" addrinfo Structure ",
							" C struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; size_t ai_addrlen; struct sockaddr * ai_addr; char * ai_canonname; struct addrinfo * ai_next; }; ",
							" Description This is record addrinfo ",
							" AF_INET Macro ",
							" C #define AF_INET 2 // Internet Address Family - IPv4 UDP TCP etc ",
							" Description Internet Address Family - IPv4 UDP TCP etc ",
							" AF_INET6 Macro ",
							" C #define AF_INET6 10 // Internet Address Family - IPv6 ",
							" Description Internet Address Family - IPv6 ",
							" Berkeley_MODULE_CONFIG Structure ",
							" C typedef struct { uint8_t maxSockets; } BERKELEY_MODULE_CONFIG; ",
							" Description Berkeley API module configuration structure ",
							" Members Members Description maxSockets Maximum number of sockets supported ",
							" bind Function ",
							" C int bind( SOCKET s const struct sockaddr* name int namelen ); ",
							" Description The bind function assigns a name to an unnamed socket The name represents the local address of the communication endpoint For sockets of type SOCK_STREAM the name of the remot endpoint is assigned when a connect or accept function is executed ",
							" Preconditions The socket function should be called ",
							" Parameters |Parameters |Description | |s |Socket descriptor returned from a previous call to socket | |name |Pointer to the sockaddr structure containing the local address of the socket | |namelen |Length of the sockaddr structure | ",
							" Returns 0 - The function was successful SOCKET_ERROR - Function failed errno is set accordingly ",
							" Remarks None ",
							" closesocket Function ",
							" C int closesocket( SOCKET s ); ",
							" Description The closesocket function closes an existing socket This function releases the socket descriptor s Any data buffered at the socket is discarded If the socket s is no longer needed closesocket() must be called in order to release all resources associated with s ",
							" Preconditions None ",
							" Parameters |Parameters |Description | |s |Socket descriptor returned from a previous call to socket | ",
							" Returns 0 - The function was successful SOCKET_ERROR (-1) - Function failed errno is set accordingly ",
							" Remarks None ",
							" connect Function ",
							" C int connect( SOCKET s struct sockaddr* name int namelen ); ",
							" Description The connect function assigns the address of the peer communications endpoint For stream sockets connection is established between the endpoints For datagram sockets an address filter is established between the endpoints until changed with another connect() function ",
							" Preconditions The socket function should be called ",
							" Parameters |Parameters |Description | |s |Socket descriptor returned from a previous call to socket | |name |Pointer to the sockaddr structure containing the peer address and port number | |namelen |Length of the sockaddr structure | ",
							" Returns 0 - The function was successful SOCKET_ERROR (-1) - Function failed errno is set accordingly For stream based socket if the connection is not established yet errno = EINPROGRESS ",
							" Remarks None ",
							" EAI_AGAIN Macro ",
							" C #define EAI_AGAIN -3 /* Temporary failure in name resolution */ ",
							" Description Temporary failure in name resolution ",
							" EAI_BADFLAGS Macro ",
							" C #define EAI_BADFLAGS -1 /* Invalid value for `ai_flags' field */ ",
							" Description Invalid value for 'ai_flags' field ",
							" EAI_FAIL Macro ",
							" C #define EAI_FAIL -4 /* Non-recoverable failure in name res */ ",
							" Description Non-recoverable failure in name res ",
							" EAI_FAMILY Macro ",
							" C #define EAI_FAMILY -6 /* `ai_family' not supported */ ",
							" Description 'ai_family' no supported ",
							" EAI_MEMORY Macro ",
							" C #define EAI_MEMORY -10 /* Memory allocation failure */ ",
							" Description Memory allocation failure ",
							" EAI_NONAME Macro ",
							" C #define EAI_NONAME -2 /* NAME or SERVICE is unknown */ ",
							" Description NAME or SERVICE is unknown ",
							" EAI_OVERFLOW Macro ",
							" C #define EAI_OVERFLOW -12 /* Argument buffer overflow */ ",
							" Description Argument buffer overflow ",
							" EAI_SERVICE Macro ",
							" C #define EAI_SERVICE -8 /* SERVICE not supported for `ai_socktype' */ ",
							" Description SERVICE not supported for 'ai_socktype' ",
							" EAI_SOCKTYPE Macro ",
							" C #define EAI_SOCKTYPE -7 /* `ai_socktype' not supported */ ",
							" Description 'ai_socktype' not supported ",
							" EAI_SYSTEM Macro ",
							" C #define EAI_SYSTEM -11 /* System error returned in `errno' */ ",
							" Description System error returned in 'errno' ",
							" freeaddrinfo Function ",
							" C void freeaddrinfo( struct addrinfo * res ); ",
							" Description Frees the memory allocated by getaddrinfo() ",
							" Preconditions None ",
							" Parameters Parameters Description res Memory allocated by getaddrinfo() ",
							" Returns None ",
							" Remarks None ",
							" getaddrinfo Function ",
							" C int getaddrinfo( const char * node const char * service const struct addrinfo * hints struct addrinfo ** res ); ",
							" Description This function deprecates gethostbyname() It handles both IPv4 and IPv6 ",
							" Preconditions The MPLAB Harmony DNS client services must be active ",
							" Parameters Parameters Description node The name of the server to look up service Unused hints Hints to the function Currently only ai_family is used Set to either 0 AF_INET or AF_INET6 res Memory location of where the results are Results must be freed with free addrinfo ",
							" Returns 0 - If function is successful EAI_NONAME - When no name could be found EAI_FAIL - When a failure has occurred EAI_AGAIN - When the look-up is in progress Call the function again later to check the results ",
							" Remarks None ",
							" gethostbyname Function ",
							" C struct hostent * gethostbyname( char * name ); ",
							" Preconditions None ",
							" Parameters Parameters Description name The name of the host to be found ",
							" Returns The hostent structure if function is successful NULL if there is an error ",
							" Remarks This function supports IPv4 only h_errno will be set to: TRY_AGAIN if the DNS query is currently in progress HOST_NOT_FOUND if the DNS query could not find a host name NO_RECOVERY if the DNS query had an unrecoverable error ",
							" gethostname Function ",
							" C int gethostname( char* name int namelen ); ",
							" Description This function returns the standard host name of the system which is calling this function The returned name is null-terminated ",
							" Preconditions None ",
							" Parameters |Parameters |Description | |name |Pointer to a buffer that receives the local host name | |namelen |Size of the name array | ",
							" Returns 0 - The function was successful SOCKET_ERROR (-1) - Name is too short to hold the host name or any other error occurs errno is set accordingly and *name will be unmodified and no null terminator will be generated ",
							" Remarks The function returns the host name as set on the default network interface ",
							" getsockname Function ",
							" C int getsockname( SOCKET s struct sockaddr * addr int * addrlen ); ",
							" Description The function returns the current address to which the socket is bound in the buffer pointed to by addr  ",
							" Preconditions The socket() function should be called ",
							" Parameters Parameters Description s Socket descriptor returned from a previous call to socket addr Address to store the current address to which the socket is bound addrlen On input it should point to the space (bytes) available in addr On output it points to the actual space required for storing the bound address ",
							" Returns 0 - If function is successful The data is updated accordingly -1 - Error errno is set appropriately ",
							" Remarks This function supports IPv4 connections only ",
							" getsockopt Function ",
							" C int getsockopt( SOCKET s uint32_t level uint32_t option_name uint8_t * option_value uint32_t * option_length ); ",
							" Description Various options can be set at the socket level This function provides compatibility with BSD implementations ",
							" Preconditions None ",
							" Parameters Parameters Description s Socket descriptor returned from a previous call to socket level On which level the operation is to be performed: - IPPROTO_IP: applies to the IP protocol layer (not yet supported) - IPPROTO_TCP: applies to the TCP protocol layer - SOL_SOCKET: applies to the socket layer - IPPROTO_IPV6: applies to the IPv6 protocol layer (not yet supported) - IPPROTO_ICMPV6: applies to the ICMPv6 protocol layer (not yet supported) option_name The name of the option to be set: -IPPROTO_TCP -TCP_NODELAY: specifies whether or not the stack should use the Nagle algorithm - SOL_SOCKET - SO_LINGER: specifies what the stack should do with unsent data on close() - SO_RCVBUF: specifies the size of the receive buffer (TCP only) - SO_SNDBUF: specifies the size of the transmit buffer option_value For all values of option_name this is a pointer to the data which in most cases is an integer The only exception is SO_LINGER which points to a linger structure option_length The size of the data pointed to by option_value ",
							" Returns 0 - If the function is successful -1 - If the function is unsuccessful ",
							" Remarks None ",
							" h_errno Variable ",
							" C int h_errno; ",
							" Description Error location for host lookup errors ",
							" HOST_NOT_FOUND Macro ",
							" C #define HOST_NOT_FOUND 1 // Authoritative Answer host not found ",
							" Description Authoritative Answer host not found ",
							" hostent Structure ",
							" C struct hostent { char * h_name; char ** h_alias; int h_addrtype; int h_length; char ** h_addr_list; }; ",
							" Description This is record hostenet ",
							" Members Members Description h_name Points to a string containing the name of the host h_alias Points to a null terminated list of pointers that point to the aliases of the host h_addrtype Contains the address type for the host Currently only AF_INET is supported h_length Contains the length of the h_addr_list  h_addr_list Points to a NULL terminated list of pointers that point to the address of the host ",
							" ICMP6_FILTER Macro ",
							" C #define ICMP6_FILTER 1 //SEt the IPv6 Filtering options - Not yet supported ",
							" Description Set the IPv6 filtering options Not yet supported ",
							" in_addr Structure ",
							" C struct in_addr { union { struct { uint8_t s_b1 s_b2 s_b3 s_b4; } S_un_b; struct { uint16_t s_w1 s_w2; } S_un_w; uint32_t S_addr; } S_un; }; ",
							" Members Members Description union { } S_un Union of IP address struct { } S_un_b IP address in Byte struct { } S_un_w IP address in Word S_addr IP address ",
							" in6_addr Structure ",
							" C struct in6_addr { union { uint8_t u6_addr8[16]; uint16_t u6_addr16[8]; uint32_t u6_addr32[4]; } in6_u; }; ",
							" Description This is record in6_addr ",
							" Members Members Description u6_addr8[16] IP address in Bytes u6_addr16[8] IP address in 16 bit Words u6_addr32[4] IP address in 32 bit Words ",
							" INADDR_ANY Macro ",
							" C #define INADDR_ANY 0x01000000u // IP address for server binding ",
							" Description IP address for server binding ",
							" INVALID_TCP_PORT Macro ",
							" C #define INVALID_TCP_PORT (0L) //Invalid TCP port ",
							" Description Invalid TCP port ",
							" IP_ADD_MEMBERSHIP Macro ",
							" C #define IP_ADD_MEMBERSHIP 35 //Join a multicast group - Not yet supported ",
							" Description Join a multicast group Not yet supported ",
							" IP_ADDR_ANY Macro ",
							" C #define IP_ADDR_ANY 0x01000000u // IP Address for server binding ",
							" Description IP address for server binding ",
							" IP_DROP_MEMBERSHIP Macro ",
							" C #define IP_DROP_MEMBERSHIP 36 // Leave a multicast group - Not yet supported ",
							" Description Leave a multicast group Not yet supported ",
							" IP_MULTICAST_IF Macro ",
							" C #define IP_MULTICAST_IF 32 //Set the Interface that multicast packets should be sent on - Not yet supported ",
							" Description Set the interface that multicast packets should be sent on Not yet supported ",
							" IP_MULTICAST_LOOP Macro ",
							" C #define IP_MULTICAST_LOOP 34 //Specify a copy of multicast packets should be delivered to the sending host - Not yet supported ",
							" Description Specify a copy of multicast packets that should be delivered to the sending host Not yet supported ",
							" IP_MULTICAST_TTL Macro ",
							" C #define IP_MULTICAST_TTL 33 //Set the Time to Live option for multicast packets - Not yet supported ",
							" Description Set the time to live option for multicast packets Not yet supported ",
							" IP_OPTIONS Macro ",
							" C #define IP_OPTIONS 4 //IP Header Options - Not yet supported ",
							" Description IP header options Not yet supported ",
							" IP_TOS Macro ",
							" C #define IP_TOS 1 //Type of Service - Not yet supported ",
							" Description Type of service Not yet supported ",
							" IP_TTL Macro ",
							" C #define IP_TTL 2 //Time to Live - Not yet supported ",
							" Description Time to live Not yet supported ",
							" IPPROTO_ICMPV6 Macro ",
							" C #define IPPROTO_ICMPV6 58 // Indicates IPv6 ICMP Protocol Options ",
							" Description Indicates IPv6 ICMP protocol options ",
							" IPPROTO_IP Macro ",
							" C #define IPPROTO_IP 0 // Indicates IP pseudo-protocol ",
							" Description Indicates IP pseudo-protocol ",
							" IPPROTO_IPV6 Macro ",
							" C #define IPPROTO_IPV6 41 // Indicates IP v6 Header options ",
							" Description Indicates IP v6 header options ",
							" IPPROTO_TCP Macro ",
							" C #define IPPROTO_TCP 6 // Indicates TCP level options ",
							" Description Indicates TCP level options ",
							" IPPROTO_UDP Macro ",
							" C #define IPPROTO_UDP 17 // Indicates UDP level options ",
							" Description Indicates UDP level options ",
							" IPV6_CHECKSUM Macro ",
							" C #define IPV6_CHECKSUM 7 //Sets the IPv6 Checksum options - Not yet supported ",
							" Description Sets the IPv6 checksum options Not yet supported ",
							" IPV6_JOIN_GROUP Macro ",
							" C #define IPV6_JOIN_GROUP 20 //Join an IPv6 multicast group - Not yet supported ",
							" Description Join an IPv6 multicast group Not yet supported ",
							" IPV6_LEAVE_GROUP Macro ",
							" C #define IPV6_LEAVE_GROUP 21 //Leave an IPv6 multicast group - Not yet supported ",
							" Description Leave an IPv6 multicast group Not yet supported ",
							" IPV6_MULTICAST_HOPS Macro ",
							" C #define IPV6_MULTICAST_HOPS 18 //Set the hop limit for multicast IPv6 packets - Not yet supported ",
							" Description Set the hop limit for multicast IPv6 packets Not yet supported ",
							" IPV6_MULTICAST_IF Macro ",
							" C #define IPV6_MULTICAST_IF 17 //Set the Interface that multicast IPv6 packets should be sent on - Not yet supported ",
							" Description Set the interface that multicast IPv6 packets should be sent on Not yet supported ",
							" IPV6_MULTICAST_LOOP Macro ",
							" C #define IPV6_MULTICAST_LOOP 19 //Specify a copy of multicast IPv6 packets should be delivered to the sending host - Not yet supported ",
							" Description Specify a copy of multicast IPv6 packets should be delivered to the sending host Not yet supported ",
							" IPV6_UNICAST_HOPS Macro ",
							" C #define IPV6_UNICAST_HOPS 16 //Set the hop limit for unicast IPv6 packets - Not yet supported ",
							" Description Set the hop limit for unicast IPv6 packets Not yet supported ",
							" IPV6_V6ONLY Macro ",
							" C #define IPV6_V6ONLY 26 //Sets the socket to IPv6 only - Not yet supported ",
							" Description Sets the socket to IPv6 only Not yet supported ",
							" linger Structure ",
							" C struct linger { int l_onoff; int l_linger; }; ",
							" Description This is record linger ",
							" Members Members Description onoff Determines if the option is set linger Time to wait before data is discarded ",
							" listen Function ",
							" C int listen( SOCKET s int backlog ); ",
							" Description This function sets the specified socket in a listen mode Calling the listen function indicates that the application is ready to accept connection requests arriving at a socket of type SOCK_STREAM The connection request is queued (if possible) until accepted with an accept function The backlog parameter defines the maximum number of pending connections that may be queued ",
							" Preconditions bind() must have been called on the s socket first ",
							" Parameters |Parameters |Description | |s |Socket identifier returned from a prior socket() call | |backlog |Maximum number of connection requests that can be queued Note that each backlog requires a TCP socket to be allocated | ",
							" Returns 0 - The function was successful SOCKET_ERROR (-1) - Function failed errno is set accordingly ",
							" Remarks None ",
							" NO_DATA Macro ",
							" C #define NO_DATA 4 // Valid name no data record of requested type ",
							" Description Valid name no data record of requested type ",
							" NO_RECOVERY Macro ",
							" C #define NO_RECOVERY 3 //Non recoverable errors ",
							" Description Non-recoverable errors ",
							" recv Function ",
							" C int recv( SOCKET s char* buf int len int flags ); ",
							" Description This function is used to reveive incoming data that has been queued for a socket This function can be used with both datagram and stream socket If the available data is too large to fit in the supplied application buffer buf excess bytes are discarded in case of SOCK_DGRAM type sockets For SOCK_STREAM types the data is buffered internally so the application can retrieve all data by multiple calls of recvfrom ",
							" Preconditions The connect() function should be called for TCP and UDP sockets Server side accept() function should be called ",
							" Parameters Parameters Description s Socket descriptor returned from previous call to socket() buf Application data receive buffer len Buffer length in bytes flags No significance in this implementation ",
							" Returns If the recv() function is successful the coket is valid and it has pending data: The supplied buffer is non NULL and has non zero length the function will return the number of bytes copied to the application buffer The supplied buffer is NULL or has zero length then no data will be copied and the function will return the number of bytes pending in the socket buffer A return value of SOCKET_ERROR (-1) indicates an error condition ( errno is set accordingly) errno is set to EWOULDBLOCK if there is no data pending in the socket buffer A return value of 0 indicates socket has been shutdown by the peer ",
							" Remarks None ",
							" recvfrom Function ",
							" C int recvfrom( SOCKET s char* buf int len int flags struct sockaddr* from int* fromlen ); ",
							" Description The revfrom() function is used to receive incoming data that has been queued for a socket This function can be used with both datagram and stream type sockets If the available data is too large to fit in the supplied application buffer buf excess bytes are discarded in case of SOCK_DGRAM type sockets For SOCK_STREAM types the data is buffered internally so the application can retrieve all data by multiple calls of recvfrom() ",
							" Preconditions The socket() function should be called ",
							" Parameters Parameters Description s Socket descriptor returned from previous call to socket() buf Application data receive buffer len Buffer length in bytes flags Message flags (currently this is not supported) from Pointer to the sockaddr structure that will be filled in with the destination address fromlen Size of buffer pointed by from ",
							" Returns If the function is successful the number of bytes copied to the application buffer buf is returned A return value of SOCKET_ERROR (-1) indicates an error and errno is set accordingly A value of zero indicates socket has been shutdown by the peer ",
							" Remarks None ",
							" send Function ",
							" C int send( SOCKET s const char* buf int len int flags ); ",
							" Description The send() function is used to send outgoing data on an already connected socket This function is used to send a reliable ordered stream of data bytes on a socket of type SOCK_STREAM but cal also be used to send datagrams on a socket of type SOCK_DGRAM ",
							" Preconditions The connect() function should be called for TCP and UDP sockets Server side accept() function should be called ",
							" Parameters Parameters Description s Socket descriptor returned from previous call to socket() buf Application data buffer containing data to transmit len Length of data in bytes flags Message flags (currently this is not supported) ",
							" Returns If the function is successful the number of bytes sent is returned A return value of SOCKET_ERROR (-1) indicates an error and errno is set accordingly A value of zero indicates no data sent ",
							" Remarks None ",
							" sendto Function ",
							" C int sendto( SOCKET s const char* buf int len int flags const struct sockaddr* to int tolen ); ",
							" Description This function is used to send outgoing data on a socket The destination address is given by to and tolen Both datagram and stream sockets are supported ",
							" Preconditions The socket() function should be called ",
							" Parameters Parameters Description s Socket descriptor returned from previous call to socket() buf Application data buffer containing data to transmit len Length of data in bytes flags Message flags (currently this is not supported) to Optional pointer to the sockaddr structure containing the destination address If NULL the currently bound remote port and IP address are used as the destination tolen Length of the sockaddr structure ",
							" Returns If the function is successful the number of bytes sent is returned A return value of SOCKET_ERROR (-1) indicates an error and errno is set accordingly ",
							" Remarks None ",
							" setsockopt Function ",
							" C int setsockopt( SOCKET s uint32_t level uint32_t option_name const uint8_t * option_value uint32_t option_length ); ",
							" Description Various options can be set at the socket level This function provides compatibility with BSD implementations ",
							" Preconditions None ",
							" Parameters Parameters Description s Socket descriptor returned from a previous call to socket level On which level the operation is to be performed: - IPPROTO_IP: applies to the IP protocol layer (not yet supported) - IPPROTO_TCP: applies to the TCP protocol layer - SOL_SOCKET: applies to the socket layer - IPPROTO_IPV6: applies to the IPv6 protocol layer (not yet supported) - IPPROTO_ICMPV6: applies to the ICMPv6 protocol layer (not yet supported) option_name The name of the option to be set: -IPPROTO_TCP -TCP_NODELAY: specifies whether or not the stack should use the Nagle algorithm - SOL_SOCKET - SO_LINGER: specifies what the stack should do with unsent data on close() - SO_RCVBUF: specifies the size of the receive buffer (TCP only) - SO_SNDBUF: specifies the size of the transmit buffer option_value For all values of option_name this is a pointer to the data which in most cases is an integer The only exception is SO_LINGER which points to a linger structure option_length The size of the data pointed to by option_value ",
							" Returns 0 - If the function is successful -1 - If the function is unsuccessful ",
							" Remarks None ",
							" SO_BROADCAST Macro ",
							" C #define SO_BROADCAST 6 //Enables the Socket for sending broadcast data ",
							" Description Enables the socket for sending broadcast data ",
							" SO_DEBUG Macro ",
							" C #define SO_DEBUG 1 //Indicates if low level debut is active - Not yet supported ",
							" Description Indicates if low level debut is active Not yet supported ",
							" SO_DONTROUTE Macro ",
							" C #define SO_DONTROUTE 5 //Bypass normal routing - Not yet supported ",
							" Description Bypass normal routing Not yet supported ",
							" SO_KEEPALIVE Macro ",
							" C #define SO_KEEPALIVE 9 //Keep the connection alive by sending periodic transmissions - Not yet supported ",
							" Description Keep the connection alive by sending periodic transmissions Not yet supported ",
							" SO_LINGER Macro ",
							" C #define SO_LINGER 13 //Indicates if the system should send any buffered data when a socket is closed ",
							" Description Indicates if the system should send any buffered data when a socket is closed ",
							" SO_OOBINLINE Macro ",
							" C #define SO_OOBINLINE 10 //Indicates whether or not Out of Band Data should be received inline with normal data - Not yet supported ",
							" Description Indicates whether or not Out of Band data should be received inline with normal data Not yet supported ",
							" SO_RCVBUF Macro ",
							" C #define SO_RCVBUF 8 //Receive Buffer Size (TCP only) ",
							" Description Receive buffer size (TCP only) ",
							" SO_RCVLOWAT Macro ",
							" C #define SO_RCVLOWAT 18 //Receive Low Water mark - Not yet supported ",
							" Description Receive low water mark Not yet supported ",
							" SO_RCVTIMEO Macro ",
							" C #define SO_RCVTIMEO 20 //Set the Receive Timeout - Not yet supported ",
							" Description Set the receive timeout Not yet supported ",
							" SO_REUSEADDR Macro ",
							" C #define SO_REUSEADDR 2 //Indicates if the local socket can be reused immediately after close - Not yet supported ",
							" Description Indicates if the local socket can be reused immediately after close Not yet supported ",
							" SO_SNDBUF Macro ",
							" C #define SO_SNDBUF 7 //Send Buffer Size ",
							" Description Send buffer size ",
							" SO_SNDLOWAT Macro ",
							" C #define SO_SNDLOWAT 19 //Send Low Water mark - Not yet supported ",
							" Description Send low water mark Not yet supported ",
							" SO_SNDTIMEO Macro ",
							" C #define SO_SNDTIMEO 21 //Set the Send Timeout - Not yet supported ",
							" Description Set the send timeout Not yet supported ",
							" SOCK_DGRAM Macro ",
							" C #define SOCK_DGRAM 110 //Connectionless datagram socket Use UDP for the Internet address family ",
							" Description Connectionless datagram socket Use UDP for the Internet address family ",
							" SOCK_STREAM Macro ",
							" C #define SOCK_STREAM 100 //Connection based byte streams Use TCP for the Internet address family ",
							" Description Connection based byte streams Use TCP for the Internet address family ",
							" sockaddr Structure ",
							" C struct sockaddr { unsigned short sa_family; char sa_data[14]; }; ",
							" Description Generic address structure for all address families ",
							" Members Members Description sa_family Address family sa_data[14] Up to 14 bytes of direct address ",
							" SOCKADDR Type ",
							" C typedef struct sockaddr SOCKADDR; ",
							" Description Generic address structure for all address families ",
							" sockaddr_in Structure ",
							" C struct sockaddr_in { short sin_family; uint16_t sin_port; struct in_addr sin_addr; char sin_zero[8]; }; ",
							" Description In the Internet address family ",
							" Members Members Description sin_family Address family; must be AF_INET sin_port Internet Protocol (IP) port sin_addr IP address in network byte order sin_zero[8] Padding to make structure the same size as SOCKADDR ",
							" SOCKADDR_IN Type ",
							" C typedef struct sockaddr_in SOCKADDR_IN; ",
							" Description In the Internet address family ",
							" sockaddr_in6 Structure ",
							" C struct sockaddr_in6 { short sin6_family; uint16_t sin6_port; uint32_t sin6_flowinfo; struct in6_addr sin6_addr; uint32_t sin6_scope_id; }; ",
							" Description In the Internet address family ",
							" Members Members Description sin6_family Address family Must be AF_INET sin6_port Internet Protocol (IP) port sin6_flowinfo IPv6 flow information sin6_addr IPv6 address in network byte order sin6_scope_id IPv6 scope ID ",
							" SOCKADDR_IN6 Type ",
							" C typedef struct sockaddr_in6 SOCKADDR_IN6; ",
							" Description This is type SOCKADDR_IN6 ",
							" sockaddr_storage Structure ",
							" C struct sockaddr_storage { short ss_family; __ss_aligntype __ss_align; char __ss_padding[_SS_PADSIZE]; }; ",
							" Description This is record sockaddr_storage ",
							" Members Members Description ss_family Address family __ss_align Force desired alignment ",
							" socket Function ",
							" C SOCKET socket( int af int type int protocol ); ",
							" Description This function creates a new BSD socket for the Microchip TCP/IP stack The return socket descriptor is used for the subsequent BSD operations ",
							" Preconditions The BerkeleySocketInit() function should be called ",
							" Parameters Parameters Description af Address family - AF_INET for IPv4 and AF_INET6 for IPv6 type Socket type SOCK_DGRAM or SOCK_STREAM protocol IP protocol IPPROTO_UDP or IPPROTO_TCP ",
							" Returns If the function is successful a new socket descriptor is returned A return value of SOCKET_ERROR (-1) indicates an error and errno is set accordingly ",
							" Remarks None ",
							" SOCKET Type ",
							" C typedef int16_t SOCKET; ",
							" Description Socket descriptor ",
							" SOCKET_CNXN_IN_PROGRESS Macro ",
							" C #define SOCKET_CNXN_IN_PROGRESS (-2) //Socket connection state ",
							" Description Socket connection state ",
							" SOCKET_DISCONNECTED Macro ",
							" C #define SOCKET_DISCONNECTED (-3) //Socket disconnected ",
							" Description Socket disconnected ",
							" SOCKET_ERROR Macro ",
							" C #define SOCKET_ERROR (-1) //Socket error ",
							" Description Socket error ",
							" SOL_SOCKET Macro ",
							" C #define SOL_SOCKET 1 // Indicates socket level options ",
							" Description Indicates socket level options ",
							" TCP_NODELAY Macro ",
							" C #define TCP_NODELAY 1 //Indicates if TCP is to buffer packets - Not yet supported ",
							" Description Indicates if TCP is to buffer packets Not yet supported ",
							" TCPIP_BSD_PresSocket Function ",
							" C int TCPIP_BSD_PresSocket( SOCKET s ); ",
							" Description The function returns the NET_PRES socket number associated with the BSD socket Using this call the caller can access the NET_PRES API ",
							" Preconditions The socket() function should have been called ",
							" Parameters Parameters Description s Socket descriptor returned from a previous call to socket() ",
							" Returns = 0 - If function is successful Value refers to socket number -1 - No such socket exists and errno is set to EBADF ",
							" Remarks This function works for both TCP and UDP sockets The NET_PRES UDP sockets are created after a call to bind() (server sockets) or connect() (client sockets) The NET_PRES TCP sockets are created after a call to listen() (server sockets) or connect() (client sockets) Calling the TCPIP_BSD_PresSocket before the sockets are created will return an INVALID_SOCKET The BSD module uses the NET_PRES layer for supporting encrypted connections This function returns the NET_PRES socket used for the connection ",
							" TCPIP_BSD_Socket Function ",
							" C int TCPIP_BSD_Socket( SOCKET s ); ",
							" Description The function returns the native socket number associated with the BSD socket Using this call the caller can switch to the native TCP/IP API ",
							" Preconditions The socket() function should have been called ",
							" Parameters Parameters Description s Socket descriptor returned from a previous call to socket() ",
							" Returns = 0 - If function is successful Value refers to socket number -1 - No such socket exists and errno is set to EBADF ",
							" Remarks This function works for both TCP and UDP sockets The native UDP sockets are created after a call to bind (server sockets) or connect (client sockets) The native TCP sockets are created after a call to listen() (server sockets) or connect() (client sockets) Please note that calling the TCPIP_BSD_Socket before one of these calls will return an INVALID_SOCKET The BSD module uses the NET_PRES layer for supporting encrypted connections This function returns the transport socket (TCP/UDP) associated with the NET_PRES connection See TCPIP_BSD_PresSocket for getting the NET_PRES socket ",
							" TCPIP_BSD_Task Function ",
							" C void TCPIP_BSD_Task(); ",
							" Description This function performs BSD module tasks in the TCP/IP stack ",
							" Preconditions BSD module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TRY_AGAIN Macro ",
							" C #define TRY_AGAIN 2 //Non authoritative host not found or server fail ",
							" Description Non-authoritative host not found or server fail ",
							" DHCP Client Module The DHCP client module will allow your application to dynamically obtain an IP address and a subnet mask from a DHCP server on the same network Additionally the DHCP client will get other parameters such as gateway and DNS addresses Abstraction Model This module provides software abstraction of the DHCP module existent in any TCP/IP Stack implementation It dynamically obtains an IP address and a subnet mask from a DHCP server on the same network dhcp_diagram1 How the Library Works The Dynamic Host Configuration protocol (DHCP) is a standard networking protocol used to automatically allocate IP addresses for hosts in a network The DHCP server has a pool of IP addresses which are leased to clients requesting them The leases have a time-out after which the hosts need to renew the lease or acquire a new one The DHCP client module in the TCP/IP stack takes care of the communication with the DHCP server and renewing the lease when the time-out expires Library Interface Name Description Macros  TCPIP_DHCP_CLIENT_ENABLED Default value for the enable/disable the DHCP client at stack start-up TCPIP_DHCP_HOST_NAME_SIZE Maximum size of a host name to be advertised to the DHCP server default value is 20 TCPIP_DHCP_TASK_TICK_RATE The DHCP task processing rate: number of milliseconds to generate an DHCP tick Used by the DHCP state machine The default value is 200 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_DHCP_TIMEOUT Defines how long to wait before a DHCP lease is acquired when the DHCP module is enabled seconds TCPIP_DHCP_BOOT_FILE_NAME_SIZE size of the storage for the Boot file name should always be = 128 default value is 128 TCPIP_DHCP_STORE_BOOT_FILE_NAME enable the usage of the Boot file name received from the DHCP server Configuration Functions  TCPIP_DHCP_Enable Enables the DHCP client for the specified interface TCPIP_DHCP_Renew Renews the DHCP lease for the specified interface TCPIP_DHCP_Request Requests the supplied IPv4 address from a DHCP server TCPIP_DHCP_Disable Disables the DHCP Client for the specified interface TCPIP_DHCP_HandlerRegister Registers a DHCP Handler TCPIP_DHCP_HandlerDeRegister Deregisters a previously registered DHCP handler TCPIP_DHCP_HostNameCallbackRegister Registers a DHCP host name callback with the DHCP client TCPIP_DHCP_RequestTimeoutSet Sets the DHCP client request and base time-out values Status Functions  TCPIP_DHCP_IsEnabled Determines if the DHCP client is enabled on the specified interface TCPIP_DHCP_IsServerDetected Determines if the DHCP client on the specified interface has been able to contact a DHCP server TCPIP_DHCP_IsBound Determines if the DHCP client has an IP address lease on the specified interface TCPIP_DHCP_InfoGet Returns information about the DHCP client on the specified interface TCPIP_DHCP_IsActive Determines if the DHCP client is currently active on the specified interface TCPIP_DHCP_Task Standard TCP/IP stack module task function Data Types and Constants  TCPIP_DHCP_EVENT_HANDLER DHCP event handler prototype TCPIP_DHCP_EVENT_TYPE DHCP Event Type TCPIP_DHCP_HANDLE DHCP handle TCPIP_DHCP_HOST_NAME_CALLBACK DHCP Host name callback function TCPIP_DHCP_INFO Reports DHCP module information TCPIP_DHCP_MODULE_CONFIG DHCP Module Configuration run-time parameters TCPIP_DHCP_STATUS Lists the current status of the DHCP module   ",
							" TCPIP_DHCP_Disable Function ",
							" C bool TCPIP_DHCP_Disable( TCPIP_NET_HANDLE hNet ); ",
							" Description This function disables the DHCP client for the specified interface If it is already disabled no action is taken ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description pNetIf Interface to disable the DHCP client on ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks When the DHCP client is disabled and the interface continues using its old configuration it is possible that the lease may expire and the DHCP server provide the IP address to another client The application should not keep the old lease unless it is sure that there is no danger of conflict ",
							" TCPIP_DHCP_Enable Function ",
							" C bool TCPIP_DHCP_Enable( TCPIP_NET_HANDLE hNet ); ",
							" Description This function enables the DHCP client for the specified interface if it is disabled If it is already enabled no action is taken ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to enable the DHCP client on ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DHCP_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_DHCP_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_DHCP_EVENT_TYPE evType const void* param); ",
							" Description Type: TCPIP_DHCP_EVENT_HANDLER Prototype of a DHCP event handler Clients can register a handler with the DHCP service Once an DHCP event occurs the DHCP service will called the registered handler The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" TCPIP_DHCP_EVENT_TYPE Enumeration ",
							" C typedef enum { DHCP_EVENT_NONE = 0 DHCP_EVENT_DISCOVER DHCP_EVENT_REQUEST DHCP_EVENT_ACK DHCP_EVENT_ACK_INVALID DHCP_EVENT_DECLINE DHCP_EVENT_NACK DHCP_EVENT_TIMEOUT DHCP_EVENT_BOUND DHCP_EVENT_REQUEST_RENEW DHCP_EVENT_REQUEST_REBIND DHCP_EVENT_CONN_LOST DHCP_EVENT_CONN_ESTABLISHED DHCP_EVENT_SERVICE_DISABLED } TCPIP_DHCP_EVENT_TYPE; ",
							" Description Enumeration: TCPIP_DHCP_EVENT_TYPE None ",
							" Members Members Description DHCP_EVENT_NONE = 0 DHCP no event DHCP_EVENT_DISCOVER DHCP discovery sent: cycle started DHCP_EVENT_REQUEST DHCP request sent DHCP_EVENT_ACK DHCP request acknowledge was received DHCP_EVENT_ACK_INVALID DHCP acknowledge received but discarded as invalid DHCP_EVENT_DECLINE DHCP lease declined DHCP_EVENT_NACK DHCP negative acknowledge was received DHCP_EVENT_TIMEOUT DHCP server timeout DHCP_EVENT_BOUND DHCP lease obtained DHCP_EVENT_REQUEST_RENEW Lease request renew sent DHCP_EVENT_REQUEST_REBIND Lease request rebind sent DHCP_EVENT_CONN_LOST Connection to the DHCP server lost DHCP_EVENT_CONN_ESTABLISHED Connection re-established DHCP_EVENT_SERVICE_DISABLED DHCP service disabled reverted to the default IP address ",
							" TCPIP_DHCP_HANDLE Type ",
							" C typedef const void* TCPIP_DHCP_HANDLE; ",
							" Description Type: TCPIP_DHCP_HANDLE A handle that a client can use after the event handler has been registered ",
							" TCPIP_DHCP_HandlerDeRegister Function ",
							" C bool TCPIP_DHCP_HandlerDeRegister( TCPIP_DHCP_HANDLE hDhcp ); ",
							" Description This function deregisters the DHCP event handler ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hDhcp A handle returned by a previous call to TCPIP_DHCP_HandlerRegister() ",
							" Returns True - If the call succeeds False - If no such handler is registered ",
							" Remarks None ",
							" TCPIP_DHCP_HandlerRegister Function ",
							" C TCPIP_DHCP_HANDLE TCPIP_DHCP_HandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_DHCP_EVENT_HANDLER handler const void* hParam ); ",
							" Description This function registers a DHCP event handler The DHCP module will call the registered handler when a DHCP event (TCPIP_DHCP_EVENT_TYPE) occurs ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface handle Use hNet == 0 to register on all interfaces available handler Handler to be called when a DHCP event occurs hParam Parameter to be used in the handler call This is user supplied and is not used by the DHCP module ",
							" Returns A valid handle - If the call succeeds A null handle - If the call failed (out of memory for example) ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing The hParam is passed by the client and will be used by the DHCP when the notification is made It is used for per-thread content or if more modules for example share the same handler and need a way to differentiate the callback ",
							" TCPIP_DHCP_HOST_NAME_CALLBACK Type ",
							" C typedef char* (* TCPIP_DHCP_HOST_NAME_CALLBACK)(TCPIP_NET_HANDLE hNet); ",
							" Description Type: TCPIP_DHCP_HOST_NAME_CALLBACK Prototype of a DHCP callback function that returns the host name to be presented to the server by the DHCP client This callback will be called by the DHCP client when communicating to the server and a host name is needed ",
							" Remarks There are certain restictions that apply to the host name strings See the TCPIP_DHCP_HostNameCallbackRegister() function ",
							" TCPIP_DHCP_HostNameCallbackRegister Function ",
							" C bool TCPIP_DHCP_HostNameCallbackRegister( TCPIP_NET_HANDLE hNet TCPIP_DHCP_HOST_NAME_CALLBACK nameCallback bool writeBack ); ",
							" Description This function registers a DHCP host name callback function The DHCP module will call the registered callback when a host name needs to be presented to the DHCP server ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to query nameCallback Callback to be called to get a DHCP host name writeBack If true the resulting name will be written to the address returned by the nameCallback (it shouldn't be const) ",
							" Returns True - If the call succeeds False - If error (no such interface etc ) ",
							" Remarks The nameCallback() function has to be valid for the length of DHCP client communication with the server i e when the reported status is bound or some error There is no corresponding deregister function Simply call TCPIP_DHCP_HostNameCallbackRegister() with the nameCallback set to 0 If such a callback is not registered then the NetBios name will be used for the DHCP host name The callback function has to return a character string that's compatible with the rules imposed for the host names: Host names may contain only alphanumeric characters minus signs (\"-\") and periods (\" \") They must begin with an alphabetic character and end with an alphanumeric character To enforce these rules the extra processing is performed internally (on either user supplied host name or NetBios name): spaces if present will be stripped from the string illegal characters will be replaced by TCPIP_DHCP_HOST_REPLACE_CHAR character (default is lower case 'x') If after processing the resulting string is null the DHCP host name option is skipped The callback function has to return a character string that's at least 2 characters in size; ",
							" TCPIP_DHCP_INFO Structure ",
							" C typedef struct { TCPIP_DHCP_STATUS status; uint32_t dhcpTime; uint32_t leaseStartTime; uint32_t leaseDuration; uint32_t renewTime; uint32_t rebindTime; IPV4_ADDR dhcpAddress; IPV4_ADDR subnetMask; IPV4_ADDR serverAddress; const char* bootFileName; uint8_t timeServersNo; uint8_t ntpServersNo; const IPV4_ADDR* timeServers; const IPV4_ADDR* ntpServers; } TCPIP_DHCP_INFO; ",
							" Description Structure: TCPIP_DHCP_INFO This data structure is used for reporting current info and status of the DHCP module Used in getting info about the DHCP module ",
							" Members Members Description status Current status dhcpTime current DHCP time seconds the following fields are significant only if a lease has been obtained and is currently valid i e status = TCPIP_DHCP_BOUND leaseStartTime Time when lease was requested leaseDuration Lease duration as returned by the server in seconds renewTime The time for moving to renew state in seconds rebindTime The time for moving to rebind state in seconds dhcpAddress IPv4 address obtained by DHCP subnetMask IPv4 sub net mask obtained by DHCP serverAddress IPv4 address of the server that granted the lease bootFileName Pointer to the bootfile name that was returned by the serve r This will be 0 if TCPIP_DHCP_STORE_BOOT_FILE_NAME option is not enabled timeServersNo Number of time servers available This will be 0 if TCPIP_DHCP_USE_OPTION_TIME_SERVER option is not enabled ntpServersNo Number of NTP servers available This will be 0 if TCPIP_DHCP_USE_OPTION_NTP_SERVER option is not enabled timeServers Pointer to array of addresses for the time servers Size is given by timeServersNo  ntpServers Pointer to array of addresses for the NTP servers Size is given by ntpServersNo  ",
							" TCPIP_DHCP_InfoGet Function ",
							" C bool TCPIP_DHCP_InfoGet( TCPIP_NET_HANDLE hNet TCPIP_DHCP_INFO* pDhcpInfo ); ",
							" Description This function returns the current state and lease info of the DHCP client on the specified interface ",
							" Preconditions DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to query pDhcpInfo Storage to return the DHCP info Could be NULL if not needed ",
							" Returns True - If the interface is enabled and exists and the DHCP client service is enabled on that interface and a lease is acquired False - Otherwise ",
							" Remarks None ",
							" TCPIP_DHCP_IsActive Function ",
							" C bool TCPIP_DHCP_IsActive( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the current state of the DHCP client on the specified interface ",
							" Preconditions DHCP module should have been initialized ",
							" Parameters Parameters Description hNet Interface to query ",
							" Returns True - If the DHCP client service is currently active on the specified interface False - If the DHCP client service is not active on the specified interface ",
							" Remarks The DHCP client service could be enabled bot not active For example when there was no DHCP server detected on the network ",
							" TCPIP_DHCP_IsBound Function ",
							" C bool TCPIP_DHCP_IsBound( TCPIP_NET_HANDLE hNet ); ",
							" Description This functin returns the status of the current IP address lease on the specified interface ",
							" Preconditions None ",
							" Parameters Parameters Description hNet Interface to query ",
							" Returns True - DHCP client has obtained an IP address lease (and likely other parameters) and these values are currently being used False - No IP address is currently leased ",
							" Remarks None ",
							" TCPIP_DHCP_IsEnabled Function ",
							" C bool TCPIP_DHCP_IsEnabled( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the current state of the DHCP client on the specified interface ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to query ",
							" Returns True - If the DHCP client service is enabled on the specified interface False - If the DHCP client service is not enabled on the specified interface ",
							" Remarks None ",
							" TCPIP_DHCP_IsServerDetected Function ",
							" C bool TCPIP_DHCP_IsServerDetected( TCPIP_NET_HANDLE hNet ); ",
							" Description This function determines if the DHCP client on the specified interface received any reply from a DHCP server ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to query ",
							" Returns True - At least one DHCP server is attached to the specified network interface False - No DHCP servers are currently detected on the specified network interface ",
							" Remarks None ",
							" TCPIP_DHCP_MODULE_CONFIG Structure ",
							" C typedef struct { bool dhcpEnable; int dhcpTmo; int dhcpCliPort; int dhcpSrvPort; } TCPIP_DHCP_MODULE_CONFIG; ",
							" Description DHCP Module Configuration This structure contains the data that's passed to the DHCP module at the TCP/IP stack initialization ",
							" Members Members Description dhcpEnable DHCP client enable at module start-up dhcpTmo Timeout to wait for DHCP lease seconds dhcpCliPort Client port for DHCP client transactions dhcpSrvPort Remote server port for DHCP server messages ",
							" TCPIP_DHCP_Renew Function ",
							" C bool TCPIP_DHCP_Renew( TCPIP_NET_HANDLE hNet ); ",
							" Description This function attempts to contact the server and renew the DHCP lease for the specified interface The interface should have the DHCP enabled and in bound state for this call to succeed ",
							" Preconditions The DHCP module must be initialized and enabled and have a valid lease ",
							" Parameters Parameters Description hNet Interface on which to renew the DHCP lease ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DHCP_Request Function ",
							" C bool TCPIP_DHCP_Request( TCPIP_NET_HANDLE hNet IPV4_ADDR reqAddress ); ",
							" Description If the DHCP client is not enabled on that interface this call will first try to enable it If this succeeds or the DHCP client was already enabled the following steps are taken: The DHCP client probes the DHCP server and requests the supplied IPv4 address as a valid lease for the specified interface If the server acknowledges the request then this is the new IPv4 address of the interface If the DHCP server rejects the request then the whole DHCP process is resumed starting with the DHCP Discovery phase ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to renew the DHCP lease on ",
							" Returns True - If successful False - If the supplied IP address is invalid or the DHCP client is in the middle of a transaction ",
							" Remarks The requested IPv4 address should be a previous lease that was granted to the host This call should be used when the host is restarting ",
							" TCPIP_DHCP_RequestTimeoutSet Function ",
							" C bool TCPIP_DHCP_RequestTimeoutSet( TCPIP_NET_HANDLE hNet uint16_t initTmo uint16_t dhcpBaseTmo ); ",
							" Description This function allows the run time adjustment of the DHCP time-out values It specifies for how long the client has to wait for a valid DHCP server reply during the initialization process until acquisition of the host address is considered to have failed It also sets the DHCP base timeout for DHCP transactions with the server This is automatically incremented by the DHCP client using an exponential back-off algorithm Recommended value is 2 = dhcpBaseTmo = 64 seconds ",
							" Preconditions The DHCP module must be initialized ",
							" Parameters Parameters Description hNet Interface to query initTmo Initialization time-out to wait for a valid lease acquisition in seconds dhcpBaseTmo DHCP time-out value for DHCP requests in seconds ",
							" Returns True - If successful False - If a wrong interface handle or time-out value was provided ",
							" Remarks None ",
							" TCPIP_DHCP_STATUS Enumeration ",
							" C typedef enum { TCPIP_DHCP_IDLE = 0 TCPIP_DHCP_WAIT_LINK TCPIP_DHCP_SEND_DISCOVERY TCPIP_DHCP_GET_OFFER TCPIP_DHCP_SEND_REQUEST TCPIP_DHCP_GET_REQUEST_ACK TCPIP_DHCP_WAIT_LEASE_CHECK TCPIP_DHCP_WAIT_LEASE_RETRY TCPIP_DHCP_BOUND TCPIP_DHCP_SEND_RENEW TCPIP_DHCP_GET_RENEW_ACK TCPIP_DHCP_SEND_REBIND TCPIP_DHCP_GET_REBIND_ACK } TCPIP_DHCP_STATUS; ",
							" Description Enumeration: TCPIP_DHCP_STATUS This enumeration lists the current status of the DHCP module Used in getting information about the DHCP state machine ",
							" Members Members Description TCPIP_DHCP_IDLE = 0 Idle/inactive state TCPIP_DHCP_WAIT_LINK Waiting for an active connection TCPIP_DHCP_SEND_DISCOVERY Sending a Discover message TCPIP_DHCP_GET_OFFER Waiting for a DHCP offer TCPIP_DHCP_SEND_REQUEST Sending a REQUEST message (REQUESTING) TCPIP_DHCP_GET_REQUEST_ACK Waiting for a request ACK message TCPIP_DHCP_WAIT_LEASE_CHECK Waiting for received lease verification TCPIP_DHCP_WAIT_LEASE_RETRY Waiting for another attempt after the lease verification failed TCPIP_DHCP_BOUND Bound TCPIP_DHCP_SEND_RENEW Sending a REQUEST message (RENEW state) TCPIP_DHCP_GET_RENEW_ACK Waiting for ACK in RENEW state TCPIP_DHCP_SEND_REBIND Sending REQUEST message (REBIND state) TCPIP_DHCP_GET_REBIND_ACK Waiting for ACK in REBIND state ",
							" TCPIP_DHCP_Task Function ",
							" C void TCPIP_DHCP_Task(); ",
							" Description This function performs DHCP module tasks in the TCP/IP stack ",
							" Preconditions DHCP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" DHCP Server Module The DHCP Server module is used to assign IP addresses to DHCP clients from the configured IP address database When the server receives a request from a client the DHCP server determines the network to which the DHCP client is connected and then allocates an IP address that is appropriate for the client and sends configuration information appropriate for that client DHCP servers typically grant IP addresses to clients only for a limited interval DHCP clients are responsible for renewing their IP address before that interval has expired and must stop using the address once the interval has expired if they have not been able to renew it Abstraction Model This module provides software abstraction of the DHCP Server module existent in any TCP/IP Stack implementation It removes the overhead of address resolution from all other modules in the stack dhcp_diagram1 How the Library Works To use DHCP Server include the files dhcps c and dhcps h in your project and add or uncomment the definition \"#define TCPIP_STACK_USE_DHCP_SERVER\" to tcpip_config h The DHCP Server module will assign IP addresses to DHCP clients from the configured IP address database When the server receives a request from a client the DHCP server allocates an IP address that is appropriate for the client and sends configuration information appropriate for that client The IP addresses will be granted for a limited interval DHCP clients are responsible for renewing their IP address before that interval has expired A DHCP client must stop using the leased address once the interval has expired if they have not been able to renew it Library Interface Name Description Macros  TCPIP_DHCPS_DEFAULT_IP_ADDRESS_RANGE_START These below IPv4 DHCP server address details are default address and it is assigned to the network default network interface for Other interfaces tcpip_stack_init c file should be use to configure DHCP_POOL_CONFIG IPv4 Address range is starting from 100 because the from 1 to 100 is reserved Reserved Address will be used for the gateway address Start of IP address Range network_config h ipaddress and this start of IP address should be in same SUBNET RECOMENDED - network_config h ipaddress should be 192 168 1 1 if DHCP server ip address range starts from 192 168 1 100 TCPIP_DHCPS_DEFAULT_SERVER_IP_ADDRESS DHCP server Address per interface DHCP server Address selection should be in the same subnet TCPIP_DHCPS_DEFAULT_SERVER_NETMASK_ADDRESS DHCP server subnet Address per interface TCPIP_DHCPS_DEFAULT_SERVER_PRIMARY_DNS_ADDRESS DHCP server DNS primary Address TCPIP_DHCPS_DEFAULT_SERVER_SECONDARY_DNS_ADDRESS DHCP server DNS Secondary Address TCPIP_DHCPS_LEASE_DURATION Timeout for a solved entry in the cache in seconds the entry will be removed if the TMO elapsed and the entry has not been referenced again TCPIP_DHCPS_LEASE_ENTRIES_DEFAULT The Maximum Number of entries in the lease table Default total number of entries for all the the interface TCPIP_DHCPS_LEASE_REMOVED_BEFORE_ACK Timeout for a unsolved entry in seconds and should be removed from the entry if there is no REQUEST after OFFER TCPIP_DHCPS_LEASE_SOLVED_ENTRY_TMO Timeout for a solved entry in the cache in seconds The entry will be removed if the TMO lapsed and the entry has not been referenced again TCPIP_DHCPS_TASK_PROCESS_RATE DHCPS task processing rate in milliseconds The DHCPS module will process a timer event with this rate for maintaining its own queues processing timeouts etc Choose it so that the other TMO are multiple of this The default value is 200 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ###Configuration Functions TCPIP_DHCPS_Disable Disables the DHCP Server for the specified interface TCPIP_DHCPS_Enable Enables the DHCP Server for the specified interface TCPIP_DHCPS_RemovePoolEntries Removes all the entries or only used entries of a certain type belonging to a network interface Status Functions  TCPIP_DHCPS_IsEnabled Determines if the DHCP Server is enabled on the specified interface TCPIP_DHCPS_GetPoolEntries Get all the entries or only used entries of a certain type belonging to a network interface TCPIP_DHCPS_LeaseEntryGet Get the lease entry details as per TCPIP_DHCPS_LEASE_HANDLE and per interface Data Types and Constants  TCPIP_DHCPS_LEASE_ENTRY DHCP Server module lease data TCPIP_DHCPS_LEASE_HANDLE DHCP Server Lease Handle TCPIP_DHCPS_POOL_ENTRY_TYPE DHCP server pool types are used to get and remove the leased IP address details TCPIP_DHCPS_ADDRESS_CONFIG DHCP server configuration and IP address range TCPIP_DHCPS_MODULE_CONFIG DHCP Server module runtime and initialization configuration data TCPIP_DHCPS_LeaseEntryRemove Remove one entry from the DHCP server leased entry TCPIP_DHCPS_Task Standard TCP/IP stack module task function ",
							" TCPIP_DHCPS_ADDRESS_CONFIG Structure ",
							" C typedef struct { int interfaceIndex; const char* serverIPAddress; const char* startIPAddRange; const char* ipMaskAddress; const char* priDNS; const char* secondDNS; bool poolEnabled; } TCPIP_DHCPS_ADDRESS_CONFIG; ",
							" Description Structure: TCPIP_DHCPS_ADDRESS_CONFIG DHCP server configuration and network initialization data Configuration is part of tcpip_stack_init c ",
							" Members Members Description interfaceIndex Interface index serverIPAddress Server IP address startIPAddRange Start IP address ipMaskAddress Netmask priDNS Primary DNS server address secondDNS Secondary DNS server address poolEnabled True if pool is valid false if pool is invalid ",
							" TCPIP_DHCPS_Disable Function ",
							" C bool TCPIP_DHCPS_Disable( TCPIP_NET_HANDLE hNet ); ",
							" Description This function disables the DHCP Server for the specified interface If it is already disabled no action is taken ",
							" Preconditions The DHCP server module must be initialized ",
							" Parameters Parameters Description hNet Interface on which to disable the DHCP Server ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks When the interface continues using its old configuration it is possible that the lease may take sometime to expire And The communication will be there until it is not expired Lease time is configured in dhcps_config h ",
							" TCPIP_DHCPS_Enable Function ",
							" C bool TCPIP_DHCPS_Enable( TCPIP_NET_HANDLE hNet ); ",
							" Description This function enables the DHCP Server for the specified interface if it is disabled If it is already enabled nothing is done ",
							" Preconditions The DHCP server module must be initialized ",
							" Parameters Parameters Description hNet Interface on which to enable the DHCP Server ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DHCPS_GetPoolEntries Function ",
							" C int TCPIP_DHCPS_GetPoolEntries( TCPIP_NET_HANDLE netH TCPIP_DHCPS_POOL_ENTRY_TYPE type ); ",
							" Description This function is used to get the DHCP server entries from the pool as per TCPIP_DHCPS_POOL_ENTRY_TYPE ",
							" Preconditions The DHCP server module should have been initialized ",
							" Parameters Parameters Description hNet Interface handle to use type type of entries to remove: - DHCP_SERVER_POOL_ENTRY_ALL- DHCP_SERVER_POOL_ENTRY_IN_USE ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DHCPS_IsEnabled Function ",
							" C bool TCPIP_DHCPS_IsEnabled( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the current state of the DHCP Server on the specified interface ",
							" Preconditions The DHCP server module should have been initialized ",
							" Parameters Parameters Description hNet Interface handle to query ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DHCPS_LEASE_ENTRY Structure ",
							" C typedef struct { TCPIP_MAC_ADDR hwAdd; IPV4_ADDR ipAddress; uint32_t leaseTime; } TCPIP_DHCPS_LEASE_ENTRY; ",
							" Description Structure: TCPIP_DHCPS_LEASE_ENTRY DHCP server lease data ",
							" Members Members Description hwAdd Client MAC address ipAddress Leased IP address leaseTime Lease period ",
							" TCPIP_DHCPS_LEASE_HANDLE Type ",
							" C typedef const void* TCPIP_DHCPS_LEASE_HANDLE; ",
							" Description Type: TCPIP_DHCPS_LEASE_HANDLE A handle that server is using to provide the index of a lease entry ",
							" Remarks This handle is used by command handler to get the Index of Lease entry ",
							" TCPIP_DHCPS_LeaseEntryGet Function ",
							" C TCPIP_DHCPS_LEASE_HANDLE TCPIP_DHCPS_LeaseEntryGet( TCPIP_NET_HANDLE netH TCPIP_DHCPS_LEASE_ENTRY* pLeaseEntry TCPIP_DHCPS_LEASE_HANDLE leaseHandle ); ",
							" Description This function returns a lease entry for the TCPIP_DHCPS_LEASE_HANDLE if the lease entry is not present for that TCPIP_DHCPS_LEASE_HANDLE then it will return the next valid lease entry ",
							" Preconditions The DHCP server module must be initialized ",
							" Parameters Parameters Description netH Lease entry for this interface pLeaseEntry Client lease entry details leaseHandle Lease index ",
							" Returns non-zero TCPIP_DHCPS_LEASE_HANDLE - To be used in the subsequent calls 0 - If end of list or wrong interface or DHCP server is not running on that interface ",
							" TCPIP_DHCPS_LeaseEntryRemove Function ",
							" C bool TCPIP_DHCPS_LeaseEntryRemove( TCPIP_NET_HANDLE netH TCPIP_MAC_ADDR* hwAdd ); ",
							" Description This function is used to remove one entry from the leased HASH table with respect to the interface and the MAC address ",
							" Preconditions The DHCP server module should have been initialized ",
							" Parameters Parameters Description netH Interface handle to use hwAdd MAC address that needs to be removed from the HASH table ",
							" Returns True - If successful _ False If unsuccessful ",
							" Remarks This function is called from the command line to remove one entry and from the Wi-FI Driver module to remove a node that is disconnected from the AP ",
							" TCPIP_DHCPS_MODULE_CONFIG Structure ",
							" C typedef struct { bool enabled; bool deleteOldLease; size_t leaseEntries; uint32_t entrySolvedTmo; TCPIP_DHCPS_ADDRESS_CONFIG * dhcpServer; } TCPIP_DHCPS_MODULE_CONFIG; ",
							" Description Structure: TCPIP_DHCPS_MODULE_CONFIG DHCP server configuration and initialization data Configuration is part of tcpip_stack_init c ",
							" Members Members Description enabled Enable DHCP server deleteOldLease Delete old cache if still in place specific DHCP parameters leaseEntries Max number of lease entries entrySolvedTmo Solved entry removed after this tmo in seconds dhcpServer DHCP server lease address configuration details uint32_t dhcpServerCnt; // Max DHCP server support ",
							" TCPIP_DHCPS_POOL_ENTRY_TYPE Enumeration ",
							" C typedef enum { DHCP_SERVER_POOL_ENTRY_ALL DHCP_SERVER_POOL_ENTRY_IN_USE } TCPIP_DHCPS_POOL_ENTRY_TYPE; ",
							" Description Enumeration: TCPIP_DHCPS_POOL_ENTRY_TYPE DHCP_SERVER_POOL_ENTRY_ALL - Get or Remove all the leased address which includes both solved and unsolved entries DHCP_SERVER_POOL_ENTRY_IN_USE - Get or Remove only solved leased IP address ",
							" Members Members Description DHCP_SERVER_POOL_ENTRY_ALL Get or remove all the leased address DHCP_SERVER_POOL_ENTRY_IN_USE Get or remove only leased IP address ",
							" TCPIP_DHCPS_RemovePoolEntries Function ",
							" C bool TCPIP_DHCPS_RemovePoolEntries( TCPIP_NET_HANDLE netH TCPIP_DHCPS_POOL_ENTRY_TYPE type ); ",
							" Description This function is used to remove the DHCP server entries from the pool as per TCPIP_DHCPS_POOL_ENTRY_TYPE ",
							" Preconditions The DHCP server module should have been initialized ",
							" Parameters Parameters Description hNet Interface handle to use type type of entries to remove: - DHCP_SERVER_POOL_ENTRY_ALL- DHCP_SERVER_POOL_ENTRY_IN_USE ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DHCPS_Task Function ",
							" C void TCPIP_DHCPS_Task(); ",
							" Description This function performs DHCP server module tasks in the TCP/IP stack ",
							" Preconditions The DHCP server module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" DHCP Server Module (V2) The DHCP Server module is used to assign IP addresses to DHCP clients from the configured IP address database When the server receives a request from a client the DHCP server determines the network to which the DHCP client is connected and then allocates an IP address that is appropriate for the client and sends configuration information appropriate for that client DHCP servers typically grant IP addresses to clients only for a limited interval DHCP clients are responsible for renewing their IP address before that interval has expired and must stop using the address once the interval has expired if they have not been able to renew it The DHCP server module implements the 'RFC 2131 - Dynamic Host Configuration Protocol' standard It assigns an IP address to a requesting DHCP client The server address range is defined when the module is configured Some of the known issues and implementation limitations: there is no support for multiple sub-net pools Operation for clients using relay agents may be impacted The server will assign a lease in the server network not in the relay agent 'down link' network Abstraction Model This module provides software abstraction of the DHCP Server module existent in any TCP/IP Stack implementation It removes the overhead of address configuration from all other clients on the local network dhcp_diagram1 How the Library Works To use DHCP Server include the files dhcp_server c and dhcp_server h in your project and add or uncomment the definition \"#define TCPIP_STACK_USE_DHCP_SERVER_V2\" to configuration h You should use a configuration tool (MHC MCC) The DHCP Server module will assign IP addresses to DHCP clients from the configured IP address database When the server receives a request from a client the DHCP server allocates an IP address that is appropriate for the client and sends configuration information appropriate for that client The IP addresses will be granted for a limited interval DHCP clients are responsible for renewing their IP address before that interval has expired A DHCP client must stop using the leased address once the interval has expired if they have not been able to renew it Library Interface Name Description Macros  TCPIP_DHCPS_TASK_PROCESS_RATE DHCPS task processing rate in milliseconds  The DHCPS module will process a timer event with this rate for maintaining its own queues processing timeouts etc  Choose it so that the other TMO are multiple of this  The default value is 200 milliseconds  The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained  The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_DHCPS_CLIENT_ID_MAX_SIZE Maximum size of the client identifier field  Needs to be = size of a MAC Address  Note : when a client is requesting a lease using a longer client ID the ID will be truncated TCPIP_DHCPS_INTERFACE_COUNT Maximum number of interfaces on which DHCPs could run for this build  Note that this could be less than the maximum number of interfaces in the stack for this build (TCPIP_STACK_NETWORK_INTERAFCE_COUNT) TCPIP_DHCPS_MAX_LEASES Maximum number of leases that the DHCP server can support for an interface  The actual number of leases per interface could be smaller than this  Multiple of 32 TCPIP_DHCPS_ICMP_ECHO_DATA_SIZE Size of the buffer when sending a ICMP echo request for address conflict detection  Should be between 8 and 32 bytes TCPIP_DHCPS_ICMP_ECHO_RETRIES number of retries if ICMP is not able to send a ping  This should only happen if there are too many ICMP echo requests ongoing TCPIP_DHCPS_OPTION_ROUTER_VALUES Maximum number of router values to be sent to clients  A value defined as 0 excludes that option TCPIP_DHCPS_OPTION_DNS_VALUES Maximum number of DNS values to be sent to clients  A value defined as 0 excludes that option TCPIP_DHCPS_OPTION_TIME_SERVER_VALUES Maximum number of time server values to be sent to clients  A value defined as 0 excludes that option TCPIP_DHCPS_OPTION_NAME_SERVER_VALUES Maximum number of name server values to be sent to clients  A value defined as 0 excludes that option TCPIP_DHCPS_OPTION_NTP_SERVER_VALUES Maximum number of NTP server values to be sent to clients  A value defined as 0 excludes that option TCPIP_DHCPS_OPTION_T1_T2_SUPPRESS Suppress the 'renewal T1' and 'rebinding T2' options when replying to a client request  By default these options are enabled TCPIP_DHCPS_REPORT_ERROR_EVENT Enable the report of error events using the event notification mechanism TCPIP_DHCPS_REPORT_CLIENT_EVENT Enable the report of client events using the event notification mechanism TCPIP_DHCPS_MAX_EVENT_REGISTRATIONS Maximum number of event registrations  If 0 or not defined there is no event registration TCPIP_DHCPS_ENABLE_STATISTICS Maintain DHCPs statistics counts TCPIP_DHCPS_DYNAMIC_DB_ACCESS Allow dynamic manipulation of the DHCPs DB TCPIP_DHCPS_MULTI_THREADED_ACCESS Enable multi-threaded access API Functions  TCPIP_DHCPS_IsEnabled Determines if the DHCP Server is enabled on the specified interface TCPIP_DHCPS_Disable Disables the DHCP Server for the specified interface TCPIP_DHCPS_Enable Enables the DHCP Server for the specified interface TCPIP_DHCPS_LeaseEntriesGet Get the total and in use number of lease entries for the selected interface TCPIP_DHCPS_LeaseGetInfo Get the lease entry details for the requested lease index TCPIP_DHCPS_LeaseGetInfoById Get the lease entry details for the requested client ID TCPIP_DHCPS_LeaseRemove Remove one entry from the DHCP server DB TCPIP_DHCPS_LeaseRemoveById Remove one entry from the DHCP server DB TCPIP_DHCPS_LeaseRemoveAll Remove all entries from the DHCP server DB TCPIP_DHCPS_LeaseAddById Add a lease to the DHCP server DB TCPIP_DHCPS_Configure Configure the DHCP server on multiple interfaces TCPIP_DHCPS_StatisticsDataGet Returns the DHCPS statistics data TCPIP_DHCPS_HandlerRegister Registers a DHCP server Handler TCPIP_DHCPS_HandlerDeRegister Deregisters a previously registered DHCP handler TCPIP_DHCPS_Task Standard TCP/IP stack module task function Data Types and Constants  TCPIP_DHCPS_CONFIG_FLAGS DHCP server configuration flags for a specific interface TCPIP_DHCPS_CLIENT_OPTION_TYPE DHCP server options to be provided to the clients for a specific interface TCPIP_DHCPS_CLIENT_OPTION_CONFIG DHCP server configuration of client options TCPIP_DHCPS_INTERFACE_CONFIG DHCP server configuration for a specific interface TCPIP_DHCPS_MODULE_CONFIG DHCP Server module runtime and initialization configuration data TCPIP_DHCPS_RES DHCPs operation result TCPIP_DHCPS_REQ_FORMAT_ERR_MASK DHCPs error mask for a TCPIP_DHCPS_EVENT_REQ_FORMAT_ERROR event TCPIP_DHCPS_EVENT_TYPE A DHCP Server reported event TCPIP_DHCPS_EVENT_HANDLE DHCP server event handle TCPIP_DHCPS_EVENT_HANDLER DHCP event handler prototype TCPIP_DHCPS_LEASE_STATE DHCP Server lease state TCPIP_DHCPS_LEASE_INFO DHCP Server module lease data TCPIP_DHCPS_LEASE_SET DHCP Server module lease set data TCPIP_DHCPS_STATISTICS_DATA DHCP Server module statistics data ",
							" TCPIP_DHCPS_CLIENT_OPTION_CONFIG Structure ",
							" C typedef struct { TCPIP_DHCPS_CLIENT_OPTION_TYPE optType; union { const char* ipStr; uint32_t uintVal; struct { uint16_t mult; uint16_t div; }; }; }TCPIP_DHCPS_CLIENT_OPTION_CONFIG; ",
							" Description Structure: TCPIP_DHCPS_CLIENT_OPTION_CONFIG DHCP server configuration of client options DHCP server configuration of provided client options Lists the options to be presented to clients requiring an address lease Remarks : An option is allowed to appear multiple times For example using TCPIP_DHCPS_CLIENT_OPTION_DNS 2 times 2 DN servers will be communicated to the client The maximum number of values possible for an option is dictated by: TCPIP_DHCPS_OPTION_ROUTER_VALUES TCPIP_DHCPS_OPTION_DNS_VALUES TCPIP_DHCPS_OPTION_TIME_SERVER_VALUES TCPIP_DHCPS_OPTION_NAME_SERVER_VALUES TCPIP_DHCPS_OPTION_NTP_SERVER_VALUES Excess values will be ignored ",
							" Members Members Description optType Option type ipStr a string describing the option a valid IP address string  used for TCPIP_DHCPS_CLIENT_OPTION_ROUTER TCPIP_DHCPS_CLIENT_OPTION_DNS TCPIP_DHCPS_CLIENT_OPTION_TIME_SERVER  TCPIP_DHCPS_CLIENT_OPTION_NAME_SERVER TCPIP_DHCPS_CLIENT_OPTION_NTP_SERVER uintVal a uint32_t value mult div uint16_t values  used for TCPIP_DHCPS_CLIENT_OPTION_T1_RENEWAL and TCPIP_DHCPS_CLIENT_OPTION_T2_REBINDING  the T1 and T2 are obtained as percentages of lease time:  T1 = (leaseTime * mult) / div; default values are mult = 1 div = 2;  T2 = (leaseTime * mult) / div; default values are mult = 7 div = 8;  Default values are used for mult or div if any of them are 0  T2 needs to be greater than T1 ",
							" TCPIP_DHCPS_CLIENT_OPTION_TYPE Enumeration ",
							" C typedef enum { TCPIP_DHCPS_CLIENT_OPTION_ROUTER = 0 TCPIP_DHCPS_CLIENT_OPTION_DNS TCPIP_DHCPS_CLIENT_OPTION_TIME_SERVER TCPIP_DHCPS_CLIENT_OPTION_NAME_SERVER TCPIP_DHCPS_CLIENT_OPTION_T1_RENEWAL TCPIP_DHCPS_CLIENT_OPTION_T2_REBINDING TCPIP_DHCPS_CLIENT_OPTION_NTP_SERVER }TCPIP_DHCPS_CLIENT_OPTION_TYPE; ",
							" Description Enumeration: TCPIP_DHCPS_CLIENT_OPTION_TYPE DHCP server options to be provided to the clients for a specific interface Describes the list of options to be provided to the clients by the DHCP server running an interface Remarks : More options will be eventually added as needed Maximum 16 options are supported for now The TCPIP_DHCPS_CLIENT_OPTION_T1_RENEWAL and TCPIP_DHCPS_CLIENT_OPTION_T2_REBINDING options are controlled by the global build symbol TCPIP_DHCPS_OPTION_T1_T2_SUPPRESS (configuration h) They are enabled by default and have the default values of 1/2 and 7/8 respectively When they are not suppressed different values than default are configurable using this option ",
							" Members Members Description TCPIP_DHCPS_CLIENT_OPTION_ROUTER Provide router/gateway option TCPIP_DHCPS_CLIENT_OPTION_DNS Provide DNS option TCPIP_DHCPS_CLIENT_OPTION_TIME_SERVER Provide time server option TCPIP_DHCPS_CLIENT_OPTION_NAME_SERVER Provide name server option TCPIP_DHCPS_CLIENT_OPTION_T1_RENEWAL Provide T1 renewal option TCPIP_DHCPS_CLIENT_OPTION_T2_REBINDING Provide T2 rebinding option TCPIP_DHCPS_CLIENT_OPTION_NTP_SERVER Provide NTP server option ",
							" TCPIP_DHCPS_CONFIG_FLAGS Enumeration ",
							" C typedef enum { TCPIP_DHCPS_CONFIG_FLAG_NONE = 0 TCPIP_DHCPS_CONFIG_FLAG_DISABLED = 0x0001 TCPIP_DHCPS_CONFIG_FLAG_DELETE_OLD = 0x0002 TCPIP_DHCPS_CONFIG_FLAG_NO_CONFLICT_DETECT = 0x0004 TCPIP_DHCPS_CONFIG_FLAG_NO_LEASE_EXTEND = 0x0008 TCPIP_DHCPS_CONFIG_FLAG_KEEP_UNREQ_OFFERS = 0x0010 TCPIP_DHCPS_CONFIG_FLAG_ABORT_IF_PROBE_FAILED = 0x0020 }TCPIP_DHCPS_CONFIG_FLAGS; ",
							" Description Enumeration: TCPIP_DHCPS_CONFIG_FLAGS DHCP server configuration flags for a specific interface Remarks : Only 16 bits are used for the flags implementation ",
							" Members Members Description TCPIP_DHCPS_CONFIG_FLAG_NONE No flag set TCPIP_DHCPS_CONFIG_FLAG_DISABLED DHCP server should start disabled on this interface  Note: this setting is currently not used and overridden by the TCPIP_NETWORK_CONFIG:: startFlags TCPIP_NETWORK_CONFIG_DHCP_SERVER_ON TCPIP_DHCPS_CONFIG_FLAG_DELETE_OLD DHCP server should delete the existent info for leases when the interface is restarted TCPIP_DHCPS_CONFIG_FLAG_NO_CONFLICT_DETECT Disable DHCP server conflict detection of newly allocated addresses  By default the server should send an ICMP echo request when using a new IP address TCPIP_DHCPS_CONFIG_FLAG_NO_LEASE_EXTEND Disable DHCP clients request for extending the lease  By default the server grants lease extension to the clients TCPIP_DHCPS_CONFIG_FLAG_KEEP_UNREQ_OFFERS Keep DB info for offers that have not been requested by the client  i e when client selected another server (multi-server environment)  By default the info for these clients is deleted to free some space in the DB TCPIP_DHCPS_CONFIG_FLAG_ABORT_IF_PROBE_FAILED When DHCP server conflict detection is enabled if sending echo requests failed(ICMP module rejected the calls TCPIP_DHCPS_EVENT_ECHO_FAIL event)  abort offering the lease to the client  By default the server will send the offer to the client ",
							" TCPIP_DHCPS_Configure Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_Configure(const TCPIP_DHCPS_INTERFACE_CONFIG* pIfConfig uint16_t nConfigs); ",
							" Description Summary Configure the DHCP server on multiple interfaces Description This function is used to configure the DHCP server at run time for the selected interfaces Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description pIfConfig pointer to an array of configuration parameters nConfigs number of configurations in the pIfConfig array ",
							" Returns - TCPIP_DHCPS_RES_OK - if the interfaces were properly configured - 0 - if wrong interface or allocation failed etc - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server is locked by another thread and the the call should be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks The DHCP server for the selected interfaces will be completely reconfigured by this call All the information about the existing leases will be lost Preferrably the call should be done with the DHCP server disabled The call will attempt to lock access to the DHCP server DB During this time the server will not reply to clients and any received packets are ignored ",
							" TCPIP_DHCPS_Disable Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_Disable(TCPIP_NET_HANDLE hNet) ",
							" Description Summary Disables the DHCP Server for the specified interface Description This function disables the DHCP Server for the specified interface If it is already disabled no action is taken Precondition The DHCP Server module must be initialized ",
							" Parameters Parameters Description hNet Interface on which to disable the DHCP Server ",
							" Returns - TCPIP_DHCPS_RES_OK - the call is successful and the DHCP server has been disabled on the selected interface - 0 - An error code if DHCP server could not be stopped wrong interface etc - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks When the server is disabled clients will still hold valid leases The clients should eventually contact the server to renew their leases but this operation will fail if the server is disabled at that time ",
							" TCPIP_DHCPS_Enable Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_Enable(TCPIP_NET_HANDLE hNet) ",
							" Description Summary Enables the DHCP Server for the specified interface Description This function enables the DHCP Server for the specified interface if it is disabled If it is already enabled no action is taken Precondition The DHCP Server module must be initialized ",
							" Parameters Parameters Description hNet Interface on which to enable the DHCP Server ",
							" Returns - TCPIP_DHCPS_RES_OK - the call is successful and the DHCP server has been enabled on the selected interface - 0 - An error code if DHCP server could not be started wrong interface etc - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) ",
							" TCPIP_DHCPS_EVENT_TYPE Type ",
							" C typedef const void* TCPIP_DHCPS_EVENT_HANDLE; ",
							" Description DHCP Server Event handle A handle that a client can use after the event handler has been registered ",
							" TCPIP_DHCPS_EVENT_HANDLER Type ",
							" C typedef void (*TCPIP_DHCPS_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_DHCPS_EVENT_TYPE evType uint32_t evInfo1 uint32_t evInfo2 const void* param); ",
							" Description DHCP event handler prototype Prototype of a DHCP server event handler Clients can register a handler with the DHCP service Once an DHCP event occurs the DHCP service will called the registered handler Remarks : The handler has to be short and fast It is meant for setting an event flag i not /i for lengthy processing ",
							" Parameters Parameters Description hNet Interface handle on which the event has occurred evType the type of event that has occurred evInfo1 additional info associated with the event  See the TCPIP_DHCPS_EVENT_TYPE definition evInfo2 additional info associated with the event  See the TCPIP_DHCPS_EVENT_TYPE definition hParam user supplied handle parameter  Not used by the DHCP module ",
							" TCPIP_DHCPS_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_DHCPS_EVENT_NONE = 0 TCPIP_DHCPS_EVENT_ECHO_PROBE_SENT TCPIP_DHCPS_EVENT_DISCOVER TCPIP_DHCPS_EVENT_REQUEST_OFFERRED TCPIP_DHCPS_EVENT_REQUEST_RENEW TCPIP_DHCPS_EVENT_REQUEST_REBIND TCPIP_DHCPS_EVENT_REQUEST_EXPIRED TCPIP_DHCPS_EVENT_OTHER_SELECT TCPIP_DHCPS_EVENT_INFORM TCPIP_DHCPS_EVENT_PROCESS_LOCK = -1 TCPIP_DHCPS_EVENT_TICK_LOCK = -2 TCPIP_DHCPS_EVENT_MSG_OVERFLOW = -3 TCPIP_DHCPS_EVENT_MSG_UNDERFLOW = -4 TCPIP_DHCPS_EVENT_IF_DISABLED = -5 TCPIP_DHCPS_EVENT_IF_ERROR = -6 TCPIP_DHCPS_EVENT_MSG_FORMAT_ERROR = -7 TCPIP_DHCPS_EVENT_POOL_EMPTY = -8 TCPIP_DHCPS_EVENT_CACHE_FULL = -9 TCPIP_DHCPS_EVENT_ECHO_PROBE_FAIL = -10 TCPIP_DHCPS_EVENT_ECHO_FAIL = -11 TCPIP_DHCPS_EVENT_REPROBE_FAIL = -12 TCPIP_DHCPS_EVENT_ARP_FAIL = -13 TCPIP_DHCPS_EVENT_REQ_ADDRESS_ERROR = -14 TCPIP_DHCPS_EVENT_REQ_UNKNOWN = -15 TCPIP_DHCPS_EVENT_REQ_FORMAT_ERROR = -16 TCPIP_DHCPS_EVENT_INFO_FORMAT_ERROR = -17 TCPIP_DHCPS_EVENT_REQ_UNEXPECT = -18 TCPIP_DHCPS_EVENT_DECLINED = -19 TCPIP_DHCPS_EVENT_INFORM_INVALID = -20 } TCPIP_DHCPS_EVENT_TYPE; ",
							" Description DHCP Event Type A DHCP Server reported event ",
							" Members Members Description TCPIP_DHCPS_EVENT_NONE DHCP no event client lease events 0 TCPIP_DHCPS_EVENT_ECHO_PROBE_SENT sent an ICMP probe  evInfo1: probe count  evInfo2: IP address (uint32_t network order) trying to ping TCPIP_DHCPS_EVENT_DISCOVER DHCP discovery received  evInfo1: IP address that server assigned to the client  evInfo2: current time at which the discovery occurred TCPIP_DHCPS_EVENT_REQUEST_OFFERRED lease ACK for offer request  evInfo1: IP address that server assigned to the client  evInfo2: current time at which the request occurred TCPIP_DHCPS_EVENT_REQUEST_RENEW lease ACK sent for renew request  evInfo1: IP address that server had for the client  evInfo2: current time at which the renew occurred TCPIP_DHCPS_EVENT_REQUEST_REBIND lease ACK sent for rebind request  evInfo1: IP address that server had for the client  evInfo2: current time at which the rebind occurred TCPIP_DHCPS_EVENT_REQUEST_EXPIRED lease ACK sent for an expired request  evInfo1: IP address that server had for the client  evInfo2: current time at which the request occurred TCPIP_DHCPS_EVENT_OTHER_SELECT DHCP client selected a different server  evInfo1: IP address that server had  evInfo2: IP address requested by client TCPIP_DHCPS_EVENT_INFORM DHCPINFORM from a client with an IP address already assigned  evInfo1: inform IP address of the client  evInfo2: current time at which the inform occurred error events 0 TCPIP_DHCPS_EVENT_PROCESS_LOCK DHCP message processing postponed as the DB access was locked  evInfo1: index of the interface  evInfo2: IP address (uint32_t network order) of the client that sent the message TCPIP_DHCPS_EVENT_TICK_LOCK DHCP timeout processing postponed as the DB access was locked  evInfo1: time (DHCPs second) when this occurred  evInfo2: 0 TCPIP_DHCPS_EVENT_MSG_OVERFLOW DHCP message received is than the internally allocated buffer  evInfo1: sizeof the received message  evInfo2: IP address (uint32_t network order) of the client that sent the message TCPIP_DHCPS_EVENT_MSG_UNDERFLOW DHCP message received is than the minimum DHCP valid message  evInfo1: sizeof the received message  evInfo2: IP address (uint32_t network order) of the client that sent the message TCPIP_DHCPS_EVENT_IF_DISABLED DHCP message received on an interface that has DHCP server disabled  evInfo1: index of the interface  evInfo2: IP address (uint32_t network order) of the client that sent the message TCPIP_DHCPS_EVENT_IF_ERROR DHCP message received on an interface that the DHCP server has not mapped internally  This should not normally happen  evInfo1: index of the interface  evInfo2: IP address (uint32_t network order) of the client that sent the message TCPIP_DHCPS_EVENT_MSG_FORMAT_ERROR DHCP message received is badly formatted:  operation  evInfo1: index of the interface  evInfo2: IP address (uint32_t network order) of the client that sent the message TCPIP_DHCPS_EVENT_POOL_EMPTY DHCP pool was empty cannot allocate a new lease  evInfo1: none  evInfo2: none TCPIP_DHCPS_EVENT_CACHE_FULL DHCP cache for the interface was full cannot store a new lease  evInfo1: number of cache entries that are reported as full (size of the cache)  evInfo2: none TCPIP_DHCPS_EVENT_ECHO_PROBE_FAIL Attempt to send an ICMP probe failed: ICMP module rejected the call  evInfo1: probe count  evInfo2: IP address (uint32_t network order) trying to ping TCPIP_DHCPS_EVENT_ECHO_FAIL ICMP probes failed completely; probes aborted  evInfo1: ICMP retries attempted  evInfo2: IP address (uint32_t network order) trying to ping TCPIP_DHCPS_EVENT_REPROBE_FAIL ICMP reprobes failed completely; probes aborted  evInfo1: ICMP reprobes attempted  evInfo2: IP address (uint32_t network order) trying to ping TCPIP_DHCPS_EVENT_ARP_FAIL attempt to inject to ARP cache failed  evInfo1: ARP reply  evInfo2: IP address (uint32_t network order) trying to inject TCPIP_DHCPS_EVENT_REQ_ADDRESS_ERROR DHCPREQUEST from client with wrong requested IP address  evInfo1: IP address that server had  evInfo2: IP address requested by client TCPIP_DHCPS_EVENT_REQ_UNKNOWN DHCPREQUEST from an unknown client no entry in the DB for it  evInfo1: IP address requested by client if it exists  evInfo2: time at which the event occurres TCPIP_DHCPS_EVENT_REQ_FORMAT_ERROR DHCPREQUEST from client with wrong format  evInfo1: IP address that server has for or requested by this client  evInfo2: a TCPIP_DHCPS_REQ_FORMAT_ERR_MASK value TCPIP_DHCPS_EVENT_INFO_FORMAT_ERROR DHCPINFORM from client with wrong format  evInfo1: IP address of the client  evInfo2: a TCPIP_DHCPS_REQ_FORMAT_ERR_MASK value TCPIP_DHCPS_EVENT_REQ_UNEXPECT unexpected DHCPREQUEST received a client ignored  evInfo1: IP address that server has for this client  evInfo2: the current TCPIP_DHCPS_LEASE_STATE for this lease TCPIP_DHCPS_EVENT_DECLINED client issues a DHCPDECLINE; address was in use  evInfo1: IP address that was declined  evInfo2: time at which the event occurres TCPIP_DHCPS_EVENT_INFORM_INVALID DHCPINFORM from a client with an IP address not in our network  evInfo1: inform IP address of the client  evInfo2: time at which the event occurres ",
							" TCPIP_DHCPS_HandlerDeRegister Function ",
							" C bool TCPIP_DHCPS_HandlerDeRegister(TCPIP_DHCPS_EVENT_HANDLE hDhcp) ",
							" Description Summary Deregisters a previously registered DHCP handler Description This function deregisters the DHCP event handler Precondition The DHCP module must be initialized ",
							" Parameters Parameters Description hDhcp A handle returned by a previous call to TCPIP_DHCPS_HandlerRegister ",
							" Returns - true - if the call succeeds - false - if no such handler is registered ",
							" TCPIP_DHCPS_HandlerRegister Function ",
							" C TCPIP_DHCPS_EVENT_HANDLE TCPIP_DHCPS_HandlerRegister(TCPIP_NET_HANDLE hNet TCPIP_DHCPS_EVENT_HANDLER handler const void* hParam) ",
							" Description Summary Registers a DHCP server Handler Description This function registers a DHCP event handler The DHCP module will call the registered handler when a DHCP event (TCPIP_DHCPS_EVENT_TYPE) occurs Precondition The DHCPs module must be initialized ",
							" Parameters Parameters Description hNet selected interface handle  use hNet == 0 to register on all interfaces available handler Handler to be called when a DHCP event occurs hParam Parameter to be used in the handler call  This is user supplied and is not used by the DHCP module ",
							" Returns - a valid handle if the call succeeds - a null handle if the call failed (out of memory for example) Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing The hParam is passed by the client and will be used by the DHCP when the notification is made It is used for per-thread content or if more modules for example share the same handler and need a way to differentiate the callback ",
							" TCPIP_DHCPS_INTERFACE_CONFIG Structure ",
							" C typedef struct { uint8_t ifIndex; uint8_t configFlags; uint16_t leaseEntries; uint32_t leaseDuration; uint32_t minLeaseDuration; uint32_t maxLeaseDuration; uint32_t unreqOfferTmo; const char* serverIPAddress; const char* startIPAddress; size_t prefixLen; const TCPIP_DHCPS_CLIENT_OPTION_CONFIG* pOptConfig; uint16_t nOptConfigs; }TCPIP_DHCPS_INTERFACE_CONFIG; ",
							" Description Structure: TCPIP_DHCPS_INTERFACE_CONFIG DHCP server configuration for a specific interface DHCP server configuration and network initialization data Configuration is part of tcpip_stack_init c ",
							" Members Members Description ifIndex interface number to which this configuration refers to configFlags a TCPIP_DHCPS_CONFIG_FLAGS value leaseEntries max number of leases for this interface  Must be = TCPIP_DHCPS_MAX_LEASES leaseDuration default lease duration to be granted to clients seconds minLeaseDuration minimum lease duration that can be requested by a client seconds  if 0 then a default of 60 seconds will be used  should be = leaseDuration maxLeaseDuration maximum lease duration that can be requested by a client seconds  if 0 then the leaseDuration will be used  should be = leaseDuration unreqOfferTmo timeout for unrequested offer sent to the client seconds  Note: used if TCPIP_DHCPS_CONFIG_FLAG_KEEP_UNREQ_OFFERS is not set  if 0 a default of 5 seconds will be used serverIPAddress server IP address on this interface startIPAddress start lease IP address  the pool of addresses will be  where endIPAddress is given by the prefixLen prefixLen the number of the leading 1 bits in the network mask  number = 32  the address is specified in the CIDR format: add/prefix_len  the maximum size of the pool is dictated by the prefixLen  For example: 192 168 0 0/24 will have 254 leases available  (192 168 0 0 and 192 168 0 255 are excluded)  and endIPAddress == 192 168 0 254  Note: the number of possible leases == min(leaseEntries endIPAddress - startIPAddress)  The number of leases derived from startIPAddress/prefixLen should be leaseEntries pOptConfig pointer to array of client options for the DHCP server nOptConfigs number of option configurations in the pOptConfig array ",
							" TCPIP_DHCPS_IsEnabled Function ",
							" C bool TCPIP_DHCPS_IsEnabled(TCPIP_NET_HANDLE hNet) ",
							" Description Summary Determines if the DHCP Server is enabled on the specified interface Description This function returns the current state of the DHCP Server on the specified interface Precondition The DHCP Server module must be initialized ",
							" Parameters Parameters Description hNet Interface to query ",
							" Returns - true - server is enabled on the selected interface - false - server is disabled; or wrong interface service is down etc Remarks In multi-threaded environments the returned information is info only and can change at any time ",
							" TCPIP_DHCPS_LEASE_INFO Structure ",
							" C typedef struct { IPV4_ADDR ipAddress; uint32_t leaseTime; uint8_t leaseState; uint8_t clientIdLen; uint8_t clientId[]; }TCPIP_DHCPS_LEASE_INFO; ",
							" Description Structure: TCPIP_DHCPS_LEASE_INFO DHCP Server module lease data DHCP Server lease info data Remarks : The clientId field should hold at least TCPIP_DHCPS_CLIENT_ID_MAX_SIZE characters otherwise truncation will occur ",
							" Members Members Description ipAddress leased IP address leaseTime remaining lease time leaseState A TCPIP_DHCPS_LEASE_STATE value the current state clientIdLen on input this stores the size of the clientId  on return this field stores the actual client ID size clientId the client ID used for this lease  should hold = than TCPIP_DHCPS_CLIENT_ID_MAX_SIZE  otherwise it will be truncated  normally a hardware MAC address  but clients can use other IDs ",
							" TCPIP_DHCPS_LEASE_SET Structure ",
							" C typedef struct { IPV4_ADDR ipAddress; uint32_t leaseTime; uint8_t leaseState; uint8_t clientIdLen; uint8_t clientId[]; }TCPIP_DHCPS_LEASE_SET; ",
							" Description Structure: TCPIP_DHCPS_LEASE_SET DHCP Server module lease set data Structure used to set a DHCP server lease Remarks : If clientIdLen than TCPIP_DHCPS_CLIENT_ID_MAX_SIZE characters then truncation will occur ",
							" Members Members Description ipAddress IP address to set leaseTime lease time  use 0xffffffff for permanent lease leaseState The state of the lease  Normally should be TCPIP_DHCPS_LEASE_STATE_BOUND  Only TCPIP_DHCPS_LEASE_STATE_BOUND TCPIP_DHCPS_LEASE_STATE_RELEASED or TCPIP_DHCPS_LEASE_STATE_EXPIRED allowed clientIdLen the size of the clientId clientId the client ID used for this lease ",
							" TCPIP_DHCPS_LEASE_STATE Enumeration ",
							" C typedef enum { TCPIP_DHCPS_LEASE_STATE_IDLE = 0 TCPIP_DHCPS_LEASE_STATE_SEND_PROBE TCPIP_DHCPS_LEASE_STATE_WAIT_PROBE TCPIP_DHCPS_LEASE_STATE_REPROBE TCPIP_DHCPS_LEASE_STATE_SEND_OFFER TCPIP_DHCPS_LEASE_STATE_OFFERED TCPIP_DHCPS_LEASE_STATE_BOUND TCPIP_DHCPS_LEASE_STATE_RELEASED TCPIP_DHCPS_LEASE_STATE_EXPIRED TCPIP_DHCPS_LEASE_STATE_INFORM }TCPIP_DHCPS_LEASE_STATE; ",
							" Description Enumeration: TCPIP_DHCPS_LEASE_STATE DHCP Server lease state DHCP server state associated with a specific lease in the server database Remarks : 8 bit values only ",
							" Members Members Description TCPIP_DHCPS_LEASE_STATE_IDLE none/invalid state TCPIP_DHCPS_LEASE_STATE_SEND_PROBE send probe with IP address (ICMP echo) TCPIP_DHCPS_LEASE_STATE_WAIT_PROBE wait for ICMP probe result TCPIP_DHCPS_LEASE_STATE_REPROBE probe failed re-issue new IP address and probe TCPIP_DHCPS_LEASE_STATE_SEND_OFFER offer address to the client TCPIP_DHCPS_LEASE_STATE_OFFERED address offered waiting for the client request TCPIP_DHCPS_LEASE_STATE_BOUND client bound to this IP address TCPIP_DHCPS_LEASE_STATE_RELEASED client released the IP address TCPIP_DHCPS_LEASE_STATE_EXPIRED client lease expired TCPIP_DHCPS_LEASE_STATE_INFORM client acquired an IP address by some other means and informed the server ",
							" TCPIP_DHCPS_LeaseAddById Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseAddById(TCPIP_NET_HANDLE netH const TCPIP_DHCPS_LEASE_SET* pLeaseSet); ",
							" Description Summary Add a lease to the DHCP server DB Description This function is used to add one entry to the DB of the selected interface Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description hNet selected interface handle pLeaseSet the lease data to be set ",
							" Returns - TCPIP_DHCPS_RES_OK - if the selected lease was found and updated - 0 - if wrong interface or DHCP server is not running on that interface or lease could not be added - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks The maximum size of the client ID should be TCPIP_DHCPS_CLIENT_ID_MAX_SIZE Extra characters will be truncated Function exists only when build symbol TCPIP_DHCPS_DYNAMIC_DB_ACCESS = 0 An existing lease will be overwritten by this call If the lease does not exist it will be added ",
							" TCPIP_DHCPS_LeaseEntriesGet Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseEntriesGet(TCPIP_NET_HANDLE netH uint16_t* pLeases uint16_t* pInUse); ",
							" Description Summary Get the total and in use number of lease entries for the selected interface Description This function returns the total and in use number of entries in the DB for the selected interface Precondition The DHCP Server module must be initialized ",
							" Parameters Parameters Description hNet Interface to query pLeases address to store the total number of leases  Can be NULL if not needed pInUse address to store the number of in use lease entries  Can be NULL if not needed ",
							" Returns - TCPIP_DHCPS_RES_OK - the call is successful and the number of entries in the DB for the selected interface have been updated - 0 - An error code if wrong interface or DHCP server is not running on that interface - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks The returned value in pLeases should match the corresponding TCPIP_DHCPS_INTERFACE_CONFIG::leaseEntries; ",
							" TCPIP_DHCPS_LeaseGetInfo Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseGetInfo(TCPIP_NET_HANDLE netH TCPIP_DHCPS_LEASE_INFO* pLeaseInfo uint16_t leaseIx); ",
							" Description Summary Get the lease entry details for the requested lease index Description This function returns a DB lease entry info for the selected index on the selected interface Precondition The DHCP Server module must be initialized ",
							" Parameters Parameters Description hNet the selected interface pLeaseInfo address to store the lease entry details  Could be NULL if details not needed leaseIx lease index ",
							" Returns - TCPIP_DHCPS_RES_OK - the call is successful and the pLeaseInfo has been updated if not NULL - 0 - if wrong interface or DHCP server is not running on that interface or wrong/unused index - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks None ",
							" TCPIP_DHCPS_LeaseGetInfoById Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseGetInfoById(TCPIP_NET_HANDLE netH const uint8_t* clientId size_t idLen TCPIP_DHCPS_LEASE_INFO* pLeaseInfo); ",
							" Description Summary Get the lease entry details for the requested client ID Description This function returns a DB lease entry info for the selected ID on the selected interface Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description hNet selected interface handle clientId the client ID usually a MAC address idLen length of the ID pLeaseInfo address to store the lease entry details Could be NULL if details not needed Returns - TCPIP_DHCPS_RES_OK - the call is successful and the pLeaseInfo has been updated if not NULL - 0 - if wrong interface or DHCP server is not running on that interface or wrong/unused index - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks The maximum size of the client ID should be TCPIP_DHCPS_CLIENT_ID_MAX_SIZE Extra characters will be truncated Usually the client ID is a MAC address However some clients can use different longer IDs ",
							" TCPIP_DHCPS_LeaseRemove Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseRemove(TCPIP_NET_HANDLE netH uint16_t leaseIx bool keepAddBusy); ",
							" Description Summary Remove one entry from the DHCP server DB Description This function is used to remove one entry from the DB of the selected interface Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description hNet selected interface handle leaseIx lease index keepAddBusy - if true the corresponding IP address (if the entry exists) will continue to be marked as busy  and it won't be used for other client leases  - otherwise the IP address will be marked as available  This should be the default ",
							" Returns - TCPIP_DHCPS_RES_OK - if the selected entry was found and deleted from the selected interface - 0 - if wrong interface or DHCP server is not running on that interface or wrong/unused index - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks Function exists only when build symbol TCPIP_DHCPS_DYNAMIC_DB_ACCESS = 0 The function will delete permanent leases too When a server lease is removed a corresponding client (if exists) will still hold a valid lease When the client eventually contacts the server to renew its lease the operation will fail as the server has no knwoledge of the client lease ",
							" TCPIP_DHCPS_LeaseRemoveAll Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseRemoveAll(TCPIP_NET_HANDLE netH bool keepPerm bool keepAddBusy); ",
							" Description Summary Remove all entries from the DHCP server DB Description This function is used to remove all entries from the DB of the selected interface Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description hNet selected interface handle keepPerm - if true the permanent entries will not be deleted  - otherwise the permanent entries will be deleted as well keepAddBusy - if true the corresponding IP address (if the entry exists) will continue to be marked as busy  and it won't be used for other client leases  - otherwise the IP address will be marked as available  This should be the default ",
							" Returns - TCPIP_DHCPS_RES_OK - if the operation completed successfully - 0 - if wrong interface or DHCP server is not running on that interface - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks Function exists only when build symbol TCPIP_DHCPS_DYNAMIC_DB_ACCESS = 0 When the server leases are removed the corresponding clients (if they exist) will still hold valid leases When the clients eventually contact the server to renew their leases the operation will fail as the server has no more knwoledge of the client lease ",
							" TCPIP_DHCPS_LeaseRemoveById Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_LeaseRemoveById(TCPIP_NET_HANDLE netH const uint8_t* clientId size_t idLen bool keepAddBusy); ",
							" Description Summary Remove one entry from the DHCP server DB Description This function is used to remove one entry from the DB of the selected interface Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description hNet selected interface handle clientId the client ID usually a MAC address idLen length of the ID keepAddBusy - if true the corresponding IP address (if the entry exists) will continue to be marked as busy  and it won't be used for other client leases  - otherwise the IP address will be marked as available  This should be the default ",
							" Returns - TCPIP_DHCPS_RES_OK - if the selected entry was found and deleted from the selected interface - 0 - if wrong interface or DHCP server is not running on that interface or client entry not found - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks The maximum size of the client ID should be TCPIP_DHCPS_CLIENT_ID_MAX_SIZE Extra characters will be truncated Usually the client ID is a MAC address However some clients can use different longer IDs Function exists only when build symbol TCPIP_DHCPS_DYNAMIC_DB_ACCESS = 0 The function will delete permanent leases too When a server lease is removed a corresponding client (if exists) will still hold a valid lease When the client eventually contacts the server to renew its lease the operation will fail as the server has no knwoledge of the client lease ",
							" TCPIP_DHCPS_MODULE_CONFIG Structure ",
							" C typedef struct { const TCPIP_DHCPS_INTERFACE_CONFIG* pIfConfig; uint16_t nConfigs; uint8_t nProbes; uint8_t conflictAttempts; } TCPIP_DHCPS_MODULE_CONFIG; ",
							" Description DHCP Server module runtime and initialization configuration data DHCP server configuration and initialization data Configuration is part of tcpip_stack_init c Remarks : The number of interfaces that DHCPs supports cannot exceed the number of interfaces in the stack ",
							" Members Members Description pIfConfig array of DHCP server configurations per interface nConfigs number of DHCP server configurations in the pIfConfig array one per interface  Cannot exceed the TCPIP_DHCPS_INTERFACE_COUNT which is the number of interfaces the server can support nProbes number of ICMP echo probes to send when doing address conflict detection - default 1 conflictAttempts number of attempts to find a new IP address when ICMP detected an address conflict - default 1 ",
							" TCPIP_DHCPS_REQ_FORMAT_ERR_MASK Enumeration ",
							" C typedef enum { TCPIP_DHCPS_REQ_FORMAT_ERR_NONE = 0 TCPIP_DHCPS_REQ_FORMAT_ERR_SRV_ID_SET = 0x0001 TCPIP_DHCPS_REQ_FORMAT_ERR_SRV_ID_MISS = 0x0002 TCPIP_DHCPS_REQ_FORMAT_ERR_REQUEST_IP_SET = 0x0004 TCPIP_DHCPS_REQ_FORMAT_ERR_REQUEST_IP_MISS = 0x0008 TCPIP_DHCPS_REQ_FORMAT_ERR_CIADDR_ERR = 0x0010 }TCPIP_DHCPS_REQ_FORMAT_ERR_MASK; ",
							" Description DHCPs error mask for a TCPIP_DHCPS_EVENT_REQ_FORMAT_ERROR event List of errors that can be signaled by a TCPIP_DHCPS_EVENT_REQ_FORMAT_ERROR event More that one error could be set ",
							" Members Members Description TCPIP_DHCPS_REQ_FORMAT_ERR_NONE no error occurred TCPIP_DHCPS_REQ_FORMAT_ERR_SRV_ID_SET server identifier set when it should have been cleared TCPIP_DHCPS_REQ_FORMAT_ERR_SRV_ID_MISS server identifier missing when it should have been set TCPIP_DHCPS_REQ_FORMAT_ERR_REQUEST_IP_SET requested IP address set when it should have been cleared TCPIP_DHCPS_REQ_FORMAT_ERR_REQUEST_IP_MISS requested IP address missing TCPIP_DHCPS_REQ_FORMAT_ERR_CIADDR_ERR wrong 'ciaddr' field ",
							" TCPIP_DHCPS_RES Enumeration ",
							" C typedef enum { TCPIP_DHCPS_RES_OK = 0 // errors TCPIP_DHCPS_RES_NO_INIT_DATA = -1 TCPIP_DHCPS_RES_IF_CONFIG_ERR = -2 TCPIP_DHCPS_RES_NOT_AVAILABLE = -3 TCPIP_DHCPS_RES_IF_REPEAT_ERR = -4 TCPIP_DHCPS_RES_LEASE_PARAM_ERR = -5 TCPIP_DHCPS_RES_PREFIX_LEN_ERR = -6 TCPIP_DHCPS_RES_INVALID_ADDRESS = -7 TCPIP_DHCPS_RES_NULL_ADDRESS = -8 TCPIP_DHCPS_RES_NOT_ENOUGH_LEASES = -9 TCPIP_DHCPS_RES_SUBNET_ERR = -10 TCPIP_DHCPS_RES_OPTION_ERR = -11 TCPIP_DHCPS_RES_T1_T2_ERR = -12 TCPIP_DHCPS_RES_ALLOC_ERR = -13 TCPIP_DHCPS_RES_SIGNAL_ERR = -14 TCPIP_DHCPS_RES_SKT_CREATE_ERR = -15 TCPIP_DHCPS_RES_SKT_SIGNAL_ERR = -16 TCPIP_DHCPS_RES_SKT_OPTION_ERR = -17 TCPIP_DHCPS_RES_ACCESS_LOCKED = -18 TCPIP_DHCPS_RES_INVALID_IF = -19 TCPIP_DHCPS_RES_INVALID_INDEX = -20 TCPIP_DHCPS_RES_UNUSED_INDEX = -21 TCPIP_DHCPS_RES_PARAM_ERROR = -22 TCPIP_DHCPS_RES_NO_LEASE = -23 TCPIP_DHCPS_RES_DB_FULL = -24 TCPIP_DHCPS_RES_STATE_ERROR = -25 TCPIP_DHCPS_RES_SERVICE_START_ERROR = -26 TCPIP_DHCPS_RES_SERVICE_STOP_ERROR = -27 TCPIP_DHCPS_RES_SERVICE_ERROR = -77 }TCPIP_DHCPS_RES; ",
							" Description Enumeration: TCPIP_DHCPS_RES DHCPs operation result During the initialization process the DHCPs module will print an error code if the initialization failed This is a quick pointer to what went wrong in the initialization process Error codes will be also returned by the DHCP server API ",
							" Members Members Description TCPIP_DHCPS_RES_OK initialization/operation successful TCPIP_DHCPS_RES_NO_INIT_DATA missing initialization data TCPIP_DHCPS_RES_IF_CONFIG_ERR interface configuration number error TCPIP_DHCPS_RES_NOT_AVAILABLE DHCP service does not support the functionality TCPIP_DHCPS_RES_IF_REPEAT_ERR same interface specified twice TCPIP_DHCPS_RES_LEASE_PARAM_E wrong lease entries or lease duration TCPIP_DHCPS_RES_PREFIX_LEN_ER invalid prefix length TCPIP_DHCPS_RES_INVALID_ADDRE invalid IP address supplied TCPIP_DHCPS_RES_NULL_ADDRESS server or start IP address are NULL TCPIP_DHCPS_RES_NOT_ENOUGH_LE not enough leases in the address range TCPIP_DHCPS_RES_SUBNET_ERR server address not in the same subnet with the start IP address TCPIP_DHCPS_RES_OPTION_ERR unsupported/unknown client option in the configuration TCPIP_DHCPS_RES_T1_T2_ERR bad T2 T1 values T2 = T1 TCPIP_DHCPS_RES_ALLOC_ERR memory allocation error TCPIP_DHCPS_RES_SIGNAL_ERR could not register signal handler TCPIP_DHCPS_RES_SKT_CREATE_ER could not open the socket TCPIP_DHCPS_RES_SKT_SIGNAL_ER could not register socket signal handler TCPIP_DHCPS_RES_SKT_OPTION_ER could not get/set options for the socket TCPIP_DHCPS_RES_ACCESS_LOCKED DHCP DB locked by another thread TCPIP_DHCPS_RES_INVALID_IF invalid interface specified TCPIP_DHCPS_RES_INVALID_INDEX invalid lease index specified TCPIP_DHCPS_RES_UNUSED_INDEX no such entry exists/is populated TCPIP_DHCPS_RES_PARAM_ERROR a bad parameter was supplied TCPIP_DHCPS_RES_NO_LEASE no such lease exists TCPIP_DHCPS_RES_DB_FULL another lease could not be added the DB (cache) is full TCPIP_DHCPS_RES_STATE_ERROR a bad state was specified when adding a lease TCPIP_DHCPS_RES_SERVICE_START_ERROR DHCP service could not be started TCPIP_DHCPS_RES_SERVICE_STOP_ERROR DHCP service could not be stopped TCPIP_DHCPS_RES_SERVICE_ERROR DHCP service internal error; Should not happen ",
							" TCPIP_DHCPS_STATISTICS_DATA Structure ",
							" C typedef struct __attribute__((packed)) { uint16_t releasedDelCount; uint16_t expiredDelCount; uint16_t cacheFullCount; uint16_t poolEmptyCount; uint16_t declinedCount; uint16_t arpFailCount; uint16_t echoFailCount; uint16_t icmpFailCount; uint16_t msgOvflCount; uint16_t icmpProbeCount; uint16_t arpInjectCount; uint16_t sktNotReadyCount; }TCPIP_DHCPS_STATISTICS_DATA; ",
							" Description Structure: TCPIP_DHCPS_STATISTICS_DATA DHCP Server module statistics data DHCP server statistics maintained at run time Remarks : The symbol TCPIP_DHCPS_ENABLE_STATISTICS needs to be defined and = 0 ",
							" Members Members Description releasedDelCount number of released DB entries that have been deleted to make room for other clients expiredDelCount number of expired DB entries that have been deleted to make room for other clients cacheFullCount number of times the allocation of a new hash entry in the DB failed poolEmptyCount number of times the allocation of a new IP address from the pool failed declinedCount number of times an IP address has been declined by a client arpFailCount number of times an ARP set operation failed echoFailCount number of times an ping operation failed icmpFailCount number of times ICMP rejected a ping operation msgOvflCount number of times a DHCP packet then the reserved buffer for it was received icmpProbeCount number of ICMP probes successfully sent arpInjectCount number of ARP injections to send replies directly to clients sktNotReadyCount number of failed send messagges because of no socket TX buffer ",
							" TCPIP_DHCPS_StatisticsDataGet Function ",
							" C TCPIP_DHCPS_RES TCPIP_DHCPS_StatisticsDataGet(TCPIP_NET_HANDLE netH TCPIP_DHCPS_STATISTICS_DATA* pStatData); ",
							" Description Summary Returns the DHCPS statistics data Description This function is used to return the DHCPS statistics data Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description hNet selected interface handle pStatData address to store the statistics  Could be NULL ",
							" Returns - TCPIP_DHCPS_RES_OK - if the DHCP server runs on the selected interface and statistics are copied to pStatData - 0 - if wrong interface or DHCP server is not running on that interface - TCPIP_DHCPS_RES_ACCESS_LOCKED - if access to the DHCP server DB is locked by another thread and the the call can be retried Multi-threaded access is enabled (build symbol TCPIP_DHCPS_MULTI_THREADED_ACCESS = 0) Remarks The symbol TCPIP_DHCPS_ENABLE_STATISTICS needs to be defined and = 0 for this function to exist ",
							" TCPIP_DHCPS_Task Function ",
							" C void TCPIP_DHCPS_Task(void) ",
							" Description Summary Standard TCP/IP stack module task function Description This function performs DHCP Server module tasks in the TCP/IP stack Precondition The DHCP Server module should have been initialized ",
							" Parameters Parameters Description None  ",
							" Returns None Remarks None ",
							" DHCPv6 Module The DHCPv6 client module will allow your application to dynamically obtain an IPv6 address from a DHCPv6 server Additionally the DHCPv6 client will get other parameters such as DNS servers and the domain search list Abstraction Model This module provides software abstraction of the DHCPv6 module existent in the TCP/IP Stack implementation The DHCPv6 module works together with the IPv6 Stateless Address Auto-configuration protocol and provides stateful temporary/non-temporary (IATA IANA) global addresses for the IPv6 host dhcpv6_diagram1 How the Library Works The IPv6 Dynamic Host Configuration Protocol (DHCPv6) is a standard networking protocol used to automatically allocate IPv6 addresses for hosts in a network The DHCPv6 server has a pool of IP addresses which are leased for clients requesting them The leases have a limited lifetime after which the hosts need to renew the lease or acquire a new one The DHCPv6 client module in the TCP/IP stack takes care of the communication with the DHCPv6 server and renewing the lease when the lifetime expires Library Interface Name Description Macros  TCPIP_DHCPV6_CLIENT_DUID_TYPE Default DUID type to be used by the client TCPIP_DHCPV6_CLIENT_PORT Clients listen for DHCP messages on UDP port: TCPIP_DHCPV6_DNS_SERVERS_NO number of DNS servers to store from a DHCP server reply TCPIP_DHCPV6_DOMAIN_SEARCH_LIST_SIZE space for the Domain Search List option - multiple of 16 TCPIP_DHCPV6_FORCED_SERVER_PREFERENCE preference value that forces the server selection 8 bit value TCPIP_DHCPV6_IA_FREE_DESCRIPTORS_NO maximum number of free IA descriptors per client TCPIP_DHCPV6_IA_SOLICIT_ADDRESS_PREF_LTIME default lifetimes for the solicited addresses TCPIP_DHCPV6_IA_SOLICIT_ADDRESS_VALID_LTIME This is macro TCPIP_DHCPV6_IA_SOLICIT_ADDRESS_VALID_LTIME TCPIP_DHCPV6_IANA_DEFAULT_T1 default values for IANA T1 T2 TCPIP_DHCPV6_IANA_DEFAULT_T2 This is macro TCPIP_DHCPV6_IANA_DEFAULT_T2 TCPIP_DHCPV6_IANA_DESCRIPTORS_NO maximum number of IANA descriptors per client TCPIP_DHCPV6_IANA_SOLICIT_ADDRESSES_NO default addresses for IANA in a solicit message TCPIP_DHCPV6_IANA_SOLICIT_DEFAULT_ADDRESS default values for the IANA Solicit addresses irrelevant if TCPIP_DHCPV6_IANA_SOLICIT_ADDRESSES_NO == 0 should be a value for each TCPIP_DHCPV6_IANA_SOLICIT_ADDRESSES_NO TCPIP_DHCPV6_IANA_SOLICIT_T1 default values for IANA T1 T2 in a solicit message TCPIP_DHCPV6_IANA_SOLICIT_T2 This is macro TCPIP_DHCPV6_IANA_SOLICIT_T2 TCPIP_DHCPV6_IATA_DEFAULT_T1 default values for IATA T1 T2 If 0 the timeout will be infinite (0xffffffff) TCPIP_DHCPV6_IATA_DEFAULT_T2 This is macro TCPIP_DHCPV6_IATA_DEFAULT_T2 TCPIP_DHCPV6_IATA_DESCRIPTORS_NO maximum number of IATA descriptors per client TCPIP_DHCPV6_IATA_SOLICIT_ADDRESSES_NO default addresses for IATA in a solicit message TCPIP_DHCPV6_IATA_SOLICIT_DEFAULT_ADDRESS default values for the IANA Solicit addresses irrelevant if TCPIP_DHCPV6_IATA_SOLICIT_ADDRESSES_NO == 0 should be a value for each TCPIP_DHCPV6_IATA_SOLICIT_ADDRESSES_NO TCPIP_DHCPV6_MESSAGE_BUFFER_SIZE default value of the buffer to assemble messages etc TCPIP_DHCPV6_MESSAGE_BUFFERS default number of buffers TCPIP_DHCPV6_MIN_UDP_TX_BUFFER_SIZE minimum size of a UDP buffer TCPIP_DHCPV6_SERVER_PORT Servers and relay agents listen for DHCP messages on UDP port: TCPIP_DHCPV6_SKIP_DAD_PROCESS defining this symbol will skip the DAD processing for DHCPv6 generated addresses TCPIP_DHCPV6_STATUS_CODE_MESSAGE_LEN number of character to reserve for a server status code associated message TCPIP_DHCPV6_TASK_TICK_RATE The DHCPv6 task processing rate: number of milliseconds to generate an DHCPv6 tick Used by the DHCPv6 state machine The default value is 100 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_STACK_USE_DHCPV6_CLIENT enable IPv6 DHCP client functionality DCHPV6_CONFIG_H This is macro DCHPV6_CONFIG_H  Configuration Functions  TCPIP_DHCPV6_HandlerDeRegister DHCPV6 event deregistration TCPIP_DHCPV6_HandlerRegister DHCPV6 event registration TCPIP_DHCPV6_Task Standard TCP/IP stack module task function Status Functions  TCPIP_DHCPV6_ClientInfoGet client status reporting TCPIP_DHCPV6_IaInfoGet IA status reporting Data Types and Constants  TCPIP_DHCPV6_CLIENT_INFO DHCPv6 client info TCPIP_DHCPV6_CLIENT_STATE DHCPv6 Current Status TCPIP_DHCPV6_CONFIG_FLAGS DHCPV6 start up flags TCPIP_DHCPV6_DUID_TYPE types of DUID for DHCPv6 TCPIP_DHCPV6_EVENT_HANDLER DHCPv6 event handler prototype TCPIP_DHCPV6_HANDLE a DHCPV6 handle TCPIP_DHCPV6_IA_EVENT IA event info TCPIP_DHCPV6_IA_INFO DHCPv6 IA info TCPIP_DHCPV6_IA_STATE IA run states TCPIP_DHCPV6_IA_SUBSTATE IA run substates most IA run states that must send a message go through these substates TCPIP_DHCPV6_IA_TYPE supported types of IA TCPIP_DHCPV6_MODULE_CONFIG DHCPv6 module configuration TCPIP_DHCPV6_SERVER_STATUS_CODE DHCPV6 server status code __DHCPV6_H This is macro __DHCPV6_H TCPIP_DHCPV6_USER_NOTIFICATION allow DHCPV6 client user notification if enabled the TCPIP_DHCPV6_HandlerRegister/TCPIP_DHCPV6_HandlerDeRegister functions exist and can be used ",
							" TCPIP_DHCPV6_CLIENT_INFO Structure ",
							" C typedef struct { TCPIP_DHCPV6_CLIENT_STATE clientState; int nIanas; int nIatas; int nFreeIas; uint32_t dhcpTime; TCPIP_DHCPV6_SERVER_STATUS_CODE lastStatusCode; void* statusBuff; size_t statusBuffSize; int nDnsServers; IPV6_ADDR* dnsBuff; size_t dnsBuffSize; int domainSearchListSize; void* domainBuff; size_t domainBuffSize; } TCPIP_DHCPV6_CLIENT_INFO; ",
							" Description DHCPv6 client info ",
							" Members Members Description clientState Client state at the moment of the call nIanas Number of IANA the client has nIatas Number of IATA the client has nFreeIas Number of free IAs the client has dhcpTime Current DHCPV6 time in seconds lastStatusCode Last status code for the client statusBuff Buffer to copy the latest status message associated with the client statusBuffSize Size of this buffer nDnsServers Number of DNS servers dnsBuff Buffer to copy the DNS Servers obtained from the DHCPV6 server dnsBuffSize Size of this buffer domainSearchListSize Size of domainSearchList  domainBuff Buffer to store the domain Search list obtained from the DHCPv6 server domainBuffSize Size of this buffer ",
							" TCPIP_DHCPV6_CLIENT_STATE Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_CLIENT_STATE_INIT = 0 TCPIP_DHCPV6_CLIENT_STATE_IDLE TCPIP_DHCPV6_CLIENT_STATE_RUN TCPIP_DHCPV6_CLIENT_STATE_WAIT_LINK TCPIP_DHCPV6_CLIENT_STATE_NUMBER } TCPIP_DHCPV6_CLIENT_STATE; ",
							" Description Enumeration: TCPIP_DHCPV6_CLIENT_STATE This enumeration lists the current status of the DHCPv6 module Used in getting info about the DHCPv6 state machine ",
							" Members Members Description TCPIP_DHCPV6_CLIENT_STATE_INIT = 0 Initialization state/unknown TCPIP_DHCPV6_CLIENT_STATE_IDLE Idle/inactive state TCPIP_DHCPV6_CLIENT_STATE_RUN Up and running in one of the run states TCPIP_DHCPV6_CLIENT_STATE_WAIT_LINK Up and running waiting for a connection TCPIP_DHCPV6_CLIENT_STATE_NUMBER Number of states ",
							" TCPIP_DHCPV6_ClientInfoGet Function ",
							" C bool TCPIP_DHCPV6_ClientInfoGet( TCPIP_NET_HANDLE hNet TCPIP_DHCPV6_CLIENT_INFO* pClientInfo ); ",
							" Description Client status reporting ",
							" TCPIP_DHCPV6_CONFIG_FLAGS Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_FLAG_NONE = 0 TCPIP_DHCPV6_FLAG_START_ENABLE = 0x01 TCPIP_DHCPV6_FLAG_DAD_DISABLE = 0x02 TCPIP_DHCPV6_FLAG_IA_IGNORE_RENEW_LTIME = 0x04 TCPIP_DHCPV6_FLAG_IA_IGNORE_REBIND_LTIME = 0x08 TCPIP_DHCPV6_FLAG_IA_NOTIFY_SUB_STATE = 0x80 } TCPIP_DHCPV6_CONFIG_FLAGS; ",
							" Description DHCPV6 start up flags ",
							" Members Members Description TCPIP_DHCPV6_FLAG_START_ENABLE = 0x01 Enable the DHCPv6 at stack start up TCPIP_DHCPV6_FLAG_DAD_DISABLE = 0x02 Disable the DAD processing for DHCP generated addresses Use only for testing or in special cases Default should be disabled TCPIP_DHCPV6_FLAG_IA_IGNORE_RENEW_LTIME = 0x04 If enabled the IA (and its associated address) renew process will be valid as dictated by t1/defaultIataT1 and its address preferred lifetime will be ignored If disabled the IA and its address will attempt renew when the minimum of address preferred lifetime and t1/defaultIataT1 expired Default should be disabled TCPIP_DHCPV6_FLAG_IA_IGNORE_REBIND_LTIME = 0x08 If enabled the IA (and its associated address) rebind process will be valid as dictated by t2/defaultIataT2 and its address valid lifetime will be ignored If disabled the IA and its address will attempt rebind when the minimum of address valid lifetime and t2/defaultIataT2 expired Default should be disabled TCPIP_DHCPV6_FLAG_IA_NOTIFY_SUB_STATE = 0x80 If enabled the IA notifications will be generated for IA substate changes too (finer grain) if disabled notifications will be generated for IA state changes only Default should be disabled ",
							" TCPIP_DHCPV6_DUID_TYPE Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_DUID_TYPE_NONE = 0 TCPIP_DHCPV6_DUID_TYPE_LLT = 1 TCPIP_DHCPV6_DUID_TYPE_EN = 2 TCPIP_DHCPV6_DUID_TYPE_LL = 3 } TCPIP_DHCPV6_DUID_TYPE; ",
							" Description Types of DUID for DHCPv6 ",
							" Members Members Description TCPIP_DHCPV6_DUID_TYPE_NONE = 0 Invalid TCPIP_DHCPV6_DUID_TYPE_LLT = 1 LinkLayer + time TCPIP_DHCPV6_DUID_TYPE_EN = 2 Enterprise number TCPIP_DHCPV6_DUID_TYPE_LL = 3 Link Layer Address ",
							" TCPIP_DHCPV6_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_DHCPV6_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_DHCPV6_CLIENT_STATE clientState const TCPIP_DHCPV6_IA_EVENT* pDhcpIaEv const void* param); ",
							" Description DHCPv6 reported event structure: Type: TCPIP_DHCPV6_EVENT_HANDLER Prototype of a DHCP event handler Clients can register a handler with the DHCP service Once an DHCP event occurs the DHCP service will called the registered handler The handler has to be short and fast It is meant for setting an event flag not for lengthy processing if pDhcpIaEvent == 0 no info is carried for a specific IA if pDhcpIaEvent = 0 the info carried by this pointer is not persistent and is valid only within the context of this event handler ",
							" TCPIP_DHCPV6_HANDLE Type ",
							" C typedef const void* TCPIP_DHCPV6_HANDLE; ",
							" Description A DHCPv6 handle ",
							" TCPIP_DHCPV6_HandlerDeRegister Function ",
							" C bool TCPIP_DHCPV6_HandlerDeRegister( TCPIP_DHCPV6_HANDLE hDhcp ); ",
							" Description DHCPv6 event deregistration ",
							" TCPIP_DHCPV6_HandlerRegister Function ",
							" C TCPIP_DHCPV6_HANDLE TCPIP_DHCPV6_HandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_DHCPV6_EVENT_HANDLER handler const void* hParam ); ",
							" Description DHCPv6 event registration ",
							" TCPIP_DHCPV6_IA_EVENT Union ",
							" C typedef union { uint32_t eventVal; struct { uint8_t iaType; uint8_t iaState; uint8_t iaSubState; uint8_t iaIndex; } } TCPIP_DHCPV6_IA_EVENT; ",
							" Description IA event info ",
							" Members Members Description iaType A TCPIP_DHCPV6_IA_TYPE value iaState A TCPIP_DHCPV6_IA_STATE value iaSubState A TCPIP_DHCPV6_IA_SUBSTATE value iaIndex Index/ID of this IA for this client ",
							" TCPIP_DHCPV6_IA_INFO Structure ",
							" C typedef struct { TCPIP_DHCPV6_IA_TYPE iaType; TCPIP_DHCPV6_IA_STATE iaState; TCPIP_DHCPV6_IA_SUBSTATE iaSubState; int iaIndex; uint32_t iaId; uint32_t tAcquire; uint32_t t1; uint32_t t2; IPV6_ADDR ipv6Addr; uint32_t prefLTime; uint32_t validLTime; TCPIP_DHCPV6_SERVER_STATUS_CODE lastStatusCode; void* statusBuff; size_t statusBuffSize; } TCPIP_DHCPV6_IA_INFO; ",
							" Description DHCPv6 IA info ",
							" Members Members Description iaType IA type iaState IA state iaSubState IA substate iaIndex Index of this IA for this client iaId ID of this IA the following fields are meaningful only for iaState = TCPIP_DHCPV6_IA_STATE_BOUND tAcquire Time of which the address was acquired t1 IANA only: extend lifetime contact server time t2 IANA only: extend lifetime contact any server time ipv6Addr 16 bytes IPV6 address associated with this IA prefLTime Preferred life time for the IPv6 address in seconds validLTime Valid life time for the IPv6 address in seconds lastStatusCode Last status code for this IA statusBuff Buffer to copy the latest status message associated with this IA statusBuffSize Size of this buffer ",
							" TCPIP_DHCPV6_IA_STATE Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_IA_STATE_SOLICIT TCPIP_DHCPV6_IA_STATE_REQUEST TCPIP_DHCPV6_IA_STATE_DAD TCPIP_DHCPV6_IA_STATE_DECLINE TCPIP_DHCPV6_IA_STATE_BOUND TCPIP_DHCPV6_IA_STATE_RENEW TCPIP_DHCPV6_IA_STATE_REBIND TCPIP_DHCPV6_IA_STATE_CONFIRM TCPIP_DHCPV6_IA_STATE_RELEASE TCPIP_DHCPV6_IA_STATE_ERROR_TRANSIENT TCPIP_DHCPV6_IA_STATE_ERROR_FATAL TCPIP_DHCPV6_IA_STATE_NUMBER } TCPIP_DHCPV6_IA_STATE; ",
							" Description IA run states ",
							" Members Members Description TCPIP_DHCPV6_IA_STATE_SOLICIT Solicitation TCPIP_DHCPV6_IA_STATE_REQUEST Perform request TCPIP_DHCPV6_IA_STATE_DAD Start the DAD state TCPIP_DHCPV6_IA_STATE_DECLINE Decline the DAD addresses TCPIP_DHCPV6_IA_STATE_BOUND Bound TCPIP_DHCPV6_IA_STATE_RENEW Renew address TCPIP_DHCPV6_IA_STATE_REBIND Rebind address TCPIP_DHCPV6_IA_STATE_CONFIRM Confirm address TCPIP_DHCPV6_IA_STATE_RELEASE Release address TCPIP_DHCPV6_IA_STATE_ERROR_TRANSIENT An error ocurred for which either user intervention is required TCPIP_DHCPV6_IA_STATE_ERROR_FATAL Fatal error occurred; not properly configured options/buffers etc TCPIP_DHCPV6_IA_STATE_NUMBER Number of run states ",
							" TCPIP_DHCPV6_IA_SUBSTATE Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_IA_SUBSTATE_START TCPIP_DHCPV6_IA_SUBSTATE_IDELAY TCPIP_DHCPV6_IA_SUBSTATE_TRANSMIT TCPIP_DHCPV6_IA_SUBSTATE_WAIT_REPLY TCPIP_DHCPV6_IA_SUBSTATE_NUMBER } TCPIP_DHCPV6_IA_SUBSTATE; ",
							" Description IA run substates most IA run states that must send a message go through these substates ",
							" Members Members Description TCPIP_DHCPV6_IA_SUBSTATE_START Message start/preparation TCPIP_DHCPV6_IA_SUBSTATE_IDELAY Message wait for iDelay TCPIP_DHCPV6_IA_SUBSTATE_TRANSMIT Send/transmit message TCPIP_DHCPV6_IA_SUBSTATE_WAIT_REPLY Wait message reply TCPIP_DHCPV6_IA_SUBSTATE_NUMBER Number of standard message sub-states ",
							" TCPIP_DHCPV6_IA_TYPE Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_IA_TYPE_NONE TCPIP_DHCPV6_IA_TYPE_IANA TCPIP_DHCPV6_IA_TYPE_IATA TCPIP_DHCPV6_IA_TYPE_NUMBER } TCPIP_DHCPV6_IA_TYPE; ",
							" Description Supported types of IA ",
							" Members Members Description TCPIP_DHCPV6_IA_TYPE_NONE Unused IA association TCPIP_DHCPV6_IA_TYPE_IANA IANA association TCPIP_DHCPV6_IA_TYPE_IATA IATA association TCPIP_DHCPV6_IA_TYPE_NUMBER Number of types ",
							" TCPIP_DHCPV6_IaInfoGet Function ",
							" C bool TCPIP_DHCPV6_IaInfoGet( TCPIP_NET_HANDLE hNet int iaIx TCPIP_DHCPV6_IA_INFO* pIaInfo ); ",
							" Description IA status reporting ",
							" TCPIP_DHCPV6_MODULE_CONFIG Structure ",
							" C typedef struct { TCPIP_DHCPV6_CONFIG_FLAGS configFlags; uint16_t dhcpCliPort; uint16_t dhcpSrvPort; uint16_t duidType; uint16_t nIanaDcpts; uint16_t nIataDcpts; uint16_t nFreeDcpts; uint32_t defaultIanaT1; uint32_t defaultIanaT2; uint32_t defaultIataT1; uint32_t defaultIataT2; uint32_t ianaSolicitT1; uint32_t ianaSolicitT2; uint32_t solicitPrefLTime; uint32_t solicitValidLTime; int nMsgBuffers; int msgBufferSize; } TCPIP_DHCPV6_MODULE_CONFIG; ",
							" Description DHCPv6 module configuration ",
							" Members Members Description configFlags DHCPv6 client configuration flags dhcpCliPort Client port for DHCPv6 client transactions dhcpSrvPort Remote server port for DHCPv6 server messages duidType TCPIP_DHCPV6_DUID_TYPE: type to use for the DHCPv6 clients nIanaDcpts Number of IANAs per client; default should be 1 nIataDcpts Number of IATAs per client; default should be 0 nFreeDcpts Number of free IAs per client - they could be added at run time; default should be 0 defaultIanaT1 The default time at which the client contacts the server to extend the lifetimes of the assigned IA_NA addresses If the IANA t1 value received from the server is 0 then this value will be used to override A value of 0 means the t1 is infinite default value should be 0 defaultIanaT2 The default time at which the client contacts any available server to extend the lifetimes of the assigned IA_NA addresses If the IANA t2 value received from the server is 0 then this value will be used to override if 0 it should be defaultIanaT1 Has to be t1 A value of 0 means the t2 is infinite default value should be 0 defaultIataT1 The default time at which the client contacts the server to extend the lifetimes of the assigned IATA addresses If 0 the timeout will be infinite (0xffffffff) defaultIataT2 The default time at which the client contacts any available server to extend the lifetimes of the assigned IA_TA addresses if 0 it should be defaultIataT1 If 0 the timeout will be infinite (0xffffffff) ianaSolicitT1 The default T1 time to solicit from the server default should be 0 ianaSolicitT2 The default T2 time to solicit from the server default should be 0 solicitPrefLTime Default addresses preferred lifetime to solicit from the server default should be 0 solicitValidLTime Default addresses valid lifetime to solicit from the server default should be 0 nMsgBuffers Number of message buffers to allocate for this client these buffers are used for the TX/RX operations Enough buffers need to be allocated for gathering server advertisements and being able to transmit messages default should be 4 msgBufferSize Size of the message buffers default is 512 bytes ",
							" TCPIP_DHCPV6_SERVER_STATUS_CODE Enumeration ",
							" C typedef enum { TCPIP_DHCPV6_SERVER_STAT_SUCCESS = 0 TCPIP_DHCPV6_SERVER_STAT_UNSPEC_FAIL = 1 TCPIP_DHCPV6_SERVER_STAT_NO_ADDRS_AVAIL = 2 TCPIP_DHCPV6_SERVER_STAT_NO_BINDING = 3 TCPIP_DHCPV6_SERVER_STAT_NOT_ON_LINK = 4 TCPIP_DHCPV6_SERVER_STAT_USE_MULTICAST = 5 TCPIP_DHCPV6_SERVER_STAT_MAX_CODE = 5 TCPIP_DHCPV6_SERVER_STAT_EXT_ERROR = -1 } TCPIP_DHCPV6_SERVER_STATUS_CODE; ",
							" Description DHCPv6 server status code ",
							" Members Members Description TCPIP_DHCPV6_SERVER_STAT_SUCCESS = 0 Success TCPIP_DHCPV6_SERVER_STAT_UNSPEC_FAIL = 1 Failure reason unspecified; this status code is sent by either a client or a server to indicate a failure not explicitly specified in the RFC TCPIP_DHCPV6_SERVER_STAT_NO_ADDRS_AVAIL = 2 Server has no addresses available to assign to the IA(s) TCPIP_DHCPV6_SERVER_STAT_NO_BINDING = 3 Client record (binding) unavailable TCPIP_DHCPV6_SERVER_STAT_NOT_ON_LINK = 4 The prefix for the address is not appropriate for the link to which the client is attached TCPIP_DHCPV6_SERVER_STAT_USE_MULTICAST = 5 Sent by a server to a client to force the client to send messages to the server using the All_DHCP_Relay_Agents_and_Servers address TCPIP_DHCPV6_SERVER_STAT_MAX_CODE = 5 Maximum valid value TCPIP_DHCPV6_SERVER_STAT_EXT_ERROR = -1 An error occurred status code not found etc ",
							" TCPIP_DHCPV6_Task Function ",
							" C void TCPIP_DHCPV6_Task(); ",
							" Description This function performs DHCPv6 module tasks in the TCP/IP stack ",
							" Preconditions DHCPv6 module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_DHCPV6_USER_NOTIFICATION Macro ",
							" C #define TCPIP_DHCPV6_USER_NOTIFICATION false ",
							" Description Allow DHCPV6 client user notification if enabled the TCPIP_DHCPV6_HandlerRegister()/TCPIP_DHCPV6_HandlerDeRegister() functions exist and can be used ",
							" DNS Module The Domain Name Service associates host names (i e www microchip com) with IP addresses (i e 10 0 54 2) The DNS Client module provides DNS resolution capabilities to the stack As illustrated in the figure a typical resolution process is as follows: The DNS Client also known as the DNS Resolver will try to resolve the IP address from its local resources which includes the Name to Address mappings in the local DNS cache DNS clients are capable of caching the previous DNS query results and this module supports a maximum number of cached entries configured with the DNS_CLIENT_CACHE_ENTRIES parameter Each cache entry is capable of storing the maximum number of IPv4 and IPv6 address which is configured using the DNS_CLIENT_CACHE_PER_IPV4_ADDRESS and DNS_CLIENT_CACHE_PER_IPV6_ADDRESS parameters The DNS resolver will use these available local resources and if it cannot find the IP Address corresponding to the requested DNS Record type it will then query a DNS server for the IP Address The DNS server will directly answer the query if it is the authoritative server for the particular domain (ex : www microchip com); otherwise it will check its local cache of the previous queries If it cannot find the IP Address it will then query the DNS servers on the Internet Next the DNS Server will query one of the root servers requesting a list of Authoritative servers for the COM domain The Root server will respond with the list of servers addresses hosting the COM domain The Authoritative DNS server will then respond with the IP Address or a list of IP Address (if more than one server hosts the website www microchip com) for www microchip com The address that the DNS server returns back to the DNS client is then passed to the DNS application which initially requested the IP Address information DNS resolver clients are both internal stack modules (SNTP for example) as well as applications using the TCP/IP stack DNS Figure 1 Abstraction Model DNS is part of the Application Layer Following is a description of how the DNS Client works and how it should be used By default the DNS client is enabled and included in the TCP/IP stackbuild The DNS Client module will use a UDP socket on port number 53 to contact the DNS server The DNS client can be enabled/disabled dynamically at run time When the TCP/IP commands module is built in the stack commands for manipulation of the DNS module are available: The DNS module can be enabled using the command \"dns eth0 on\" The DNS client module can be disabled from the command prompt using \"dns eth0 off\" In the above examples the first Ethernet interface is used Any valid network interface can be used Applications or demonstrations such as berkeley_tcp_client berkeley_udp_client tcpip_tcp_client and tcpip_udp_client use the TCPIP_DNS_Resolve function with Host name and Record type as arguments to resolve the domain host name The DNS module supports the Record type of \"A\" for IPv4 addresses and \"AAAA\" for IPv6 The resolved domain name and the mapped IPv4 or IPv6 address will be stored in a table with the expiration time which is calculated from the DNS server response The server supplied IPv4 and IPv6 addresses will be cached internally (see the DNS_CLIENT_CACHE_PER_IPV4_ADDRESS and DNS_CLIENT_CACHE_PER_IPV6_ADDRESS parameters) The TCPIP_DNS_IsResolved function will return DNS_RES_OK if the domain name resolve is successful The TCPIP_DNS_GetNumberOfIPAddresses function can be used to obtain the number of the IPv4 or IPv6 addresses present in the DNS Resolver tables The DNS Resolver table (cache) stores the dcorresponding name the IP address and the expiration time returned by the server The functions TCPIP_DNS_GetIPv4Address and TCPIP_DNS_GetIPv6Address can be used to obtain the IPv4 or Ipv6 addresses for a resolved name entry dnsClientFlowChart Library Interface Name Description General Functions  TCPIP_DNS_HandlerDeRegister Deregisters a previously registered DNS client handler TCPIP_DNS_HandlerRegister Registers a DNS client Handler TCPIP_DNS_IsEnabled Determines if the DNS client is enabled on that specified interface TCPIP_DNS_ClientInfoGet Get the current DNS client parameters TCPIP_DNS_ClientTask Standard TCP/IP stack module task function TCPIP_DNS_Disable Disables the DNS Client for the specified interface TCPIP_DNS_Enable Enables the DNS Client for the specified interface TCPIP_DNS_EntryQuery Queries a DNS Resolver specific entry TCPIP_DNS_GetIPAddressesNumber Get the count of resolved IPv4 and/or IPv6 address for a host name TCPIP_DNS_GetIPv4Addresses Get IPV4 addresses for a DNS resolved name TCPIP_DNS_GetIPv6Addresses Get IPV6 addresses for a DNS resolved name TCPIP_DNS_IsNameResolved Determines if the DNS resolution is complete and provides the host IP address TCPIP_DNS_IsResolved Determines if the DNS resolution is complete and provides the host IP address TCPIP_DNS_RemoveAll Removes all the cached entries from DNS resolver TCPIP_DNS_RemoveEntry Remove a hostname from the DNS Hash entry TCPIP_DNS_Resolve Begins resolution of an address TCPIP_DNS_Send_Query Forces resolution of an address Data Types and Constants  TCPIP_DNS_EVENT_HANDLER Notification handler that can be called when a specific entry is resolved and entry is timed out TCPIP_DNS_EVENT_TYPE This enumeration is used to notify DNS client applications TCPIP_DNS_HANDLE DNS client handle TCPIP_DNS_RESULT DNS client result codes TCPIP_DNS_CLIENT_INFO General DNS client info TCPIP_DNS_CLIENT_MODULE_CONFIG Provides a place holder for DNS client configuration TCPIP_DNS_ENABLE_FLAGS Flags for enabling the DNS service on an interface TCPIP_DNS_ENTRY_QUERY DNS module query data for both IPv4 and IPv6 TCPIP_DNS_RESOLVE_TYPE DNS query record type TCPIP_DNS_CLIENT_ADDRESS_TYPE This parameter can be used to choose ithe type of IP connection for the DNS client: IPv4 or IPv6 Currently only IPv4 is supported and this parameter is not used Reserved for future development TCPIP_DNS_CLIENT_CACHE_DEFAULT_TTL_VAL Default TTL time for a solved entry in the cache This value will be used when the DNS server TTL value for an entry is 0 TCPIP_DNS_CLIENT_CACHE_ENTRIES Number of DNS resolver entries TCPIP_DNS_CLIENT_CACHE_ENTRY_TMO DNS client cache entry time-out If this symbol is zero then the entry time-out will be the one specified by the DNS server when the name was solved Otherwise this value will be used as the cache entry time-out Default should be 0 TCPIP_DNS_CLIENT_CACHE_PER_IPV4_ADDRESS Maximum and default number of IPv4 answers to be considered while processing DNS response from server for a query TCPIP_DNS_CLIENT_CACHE_PER_IPV6_ADDRESS Maximum and default number of IPv6 answers to be considered while processing DNS response from server for a query TCPIP_DNS_CLIENT_CACHE_UNSOLVED_ENTRY_TMO Time-out for the a unsolved name in seconds The name resolution will be aborted if the TMO elapsed and the name could not be solved Should be greater than TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO Retry lookup for a unsolved entry in the cache in seconds If the TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO seconds elapsed and the name has not been solved then the name entry will be marked with server timeout and the resolution will be retried Should be less than TCPIP_DNS_CLIENT_CACHE_UNSOLVED_ENTRY_TMO TCPIP_DNS_CLIENT_MAX_HOSTNAME_LEN Max DNS host name size Use an appropriate value depending on the names that need to be solved TCPIP_DNS_CLIENT_MAX_SELECT_INTERFACES Max number of interfaces to take part in the DNS selection algorithm Should be always greater than 1: the default interface should always be considered for DNS resolution Depending on how many active interfaces select those to be considered for DNS resolution TCPIP_DNS_CLIENT_SERVER_TMO When the DNS Client connected to the DNS Server this is the elapsed time after which an the communication is considered to have timed failed if there was no reply from the server In seconds TCPIP_DNS_CLIENT_TASK_PROCESS_RATE DNS Client task processing rate in milliseconds The DNS Client module will process a timer event with this rate for processing its own state machine etc The default value is 200 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_DNS_CLIENT_USER_NOTIFICATION allow DNS client user notification if enabled the TCPIP_DNS_HandlerRegister/TCPIP_DNS_HandlerDeRegister functions exist and can be used ",
							" TCPIP_DNS_CLIENT_ADDRESS_TYPE Macro ",
							" C #define TCPIP_DNS_CLIENT_ADDRESS_TYPE IP_ADDRESS_TYPE_IPV4 ",
							" Description This parameter can be used to choose ithe type of IP connection for the DNS client: IPv4 or IPv6 Currently only IPv4 is supported and this parameter is not used Reserved for future development ",
							" TCPIP_DNS_CLIENT_CACHE_DEFAULT_TTL_VAL Macro ",
							" C #define TCPIP_DNS_CLIENT_CACHE_DEFAULT_TTL_VAL (20 * 60) ",
							" Description Default TTL time for a solved entry in the cache This value will be used when the DNS server TTL value for an entry is 0 ",
							" TCPIP_DNS_CLIENT_CACHE_ENTRIES Macro ",
							" C #define TCPIP_DNS_CLIENT_CACHE_ENTRIES 5 ",
							" Description Number of DNS resolver entries ",
							" TCPIP_DNS_CLIENT_CACHE_ENTRY_TMO Macro ",
							" C #define TCPIP_DNS_CLIENT_CACHE_ENTRY_TMO 0 ",
							" Description DNS client cache entry time-out If this symbol is zero then the entry time-out will be the one specified by the DNS server when the name was solved Otherwise this value will be used as the cache entry time-out Default should be 0 ",
							" TCPIP_DNS_CLIENT_CACHE_PER_IPV4_ADDRESS Macro ",
							" C #define TCPIP_DNS_CLIENT_CACHE_PER_IPV4_ADDRESS 5 ",
							" Description Maximum and default number of IPv4 answers to be considered while processing DNS response from server for a query ",
							" TCPIP_DNS_CLIENT_CACHE_PER_IPV6_ADDRESS Macro ",
							" C #define TCPIP_DNS_CLIENT_CACHE_PER_IPV6_ADDRESS 1 ",
							" Description Maximum and default number of IPv6 answers to be considered while processing DNS response from server for a query ",
							" TCPIP_DNS_CLIENT_CACHE_UNSOLVED_ENTRY_TMO Macro ",
							" C #define TCPIP_DNS_CLIENT_CACHE_UNSOLVED_ENTRY_TMO (10) ",
							" Description Time-out for the a unsolved name in seconds The name resolution will be aborted if the TMO elapsed and the name could not be solved Should be greater than TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO ",
							" TCPIP_DNS_CLIENT_INFO Structure ",
							" C typedef struct { TCPIP_NET_HANDLE strictNet; TCPIP_NET_HANDLE prefNet; uint32_t dnsTime; uint16_t pendingEntries; uint16_t currentEntries; uint16_t totalEntries; } TCPIP_DNS_CLIENT_INFO; ",
							" Description Structure: TCPIP_DNS_CLIENT_INFO DNS module data structure used for getting information about the module settings ",
							" Members Members Description strictNet Current strict DNS interface entrySolvedTmo Current preferred DNS interface dnsTime Current DNS time seconds pendingEntries Number of entries that need to be solved currentEntries Number of solved and unslolved name entries totalEntries Total number of supported name entries ",
							" Remarks None ",
							" TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO Macro ",
							" C #define TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO (3) ",
							" Description Retry lookup for a unsolved entry in the cache in seconds If the TCPIP_DNS_CLIENT_LOOKUP_RETRY_TMO seconds elapsed and the name has not been solved then the name entry will be marked with server timeout and the resolution will be retried Should be less than TCPIP_DNS_CLIENT_CACHE_UNSOLVED_ENTRY_TMO ",
							" TCPIP_DNS_CLIENT_MAX_HOSTNAME_LEN Macro ",
							" C #define TCPIP_DNS_CLIENT_MAX_HOSTNAME_LEN (64) ",
							" Description Max DNS host name size Use an appropriate value depending on the names that need to be solved ",
							" TCPIP_DNS_CLIENT_MAX_SELECT_INTERFACES Macro ",
							" C #define TCPIP_DNS_CLIENT_MAX_SELECT_INTERFACES 4 ",
							" Description Max number of interfaces to take part in the DNS selection algorithm Should be always greater than 1: the default interface should always be considered for DNS resolution Depending on how many active interfaces select those to be considered for DNS resolution ",
							" TCPIP_DNS_CLIENT_MODULE_CONFIG Structure ",
							" C typedef struct { bool deleteOldLease; int cacheEntries; uint32_t entrySolvedTmo; int nIPv4Entries; IP_ADDRESS_TYPE ipAddressType; int nIPv6Entries; } TCPIP_DNS_CLIENT_MODULE_CONFIG; ",
							" Description Structure: TCPIP_DNS_CLIENT_MODULE_CONFIG DNS module runtime configuration and initialization parameters ",
							" Members Members Description deleteOldLease Delete old cache if still in place specific DNS parameters cacheEntries Max number of cache entries entrySolvedTmo Solved entry removed after this tmo if not referenced in seconds nIPv4Entries Number of IPv4 entries per DNS name and Default value is 1 ipAddressType IP protocol type to use for connecting to the DNS server: IPv4 or IPv6 Currently only IPv4 is supported and this parameter is not used Reserved for future improvements nIPv6Entries Number of IPv6 address per DNS Name Default value is 1 and is used only when IPv6 is enabled ",
							" Remarks None ",
							" TCPIP_DNS_CLIENT_SERVER_TMO Macro ",
							" C #define TCPIP_DNS_CLIENT_SERVER_TMO (1*60) ",
							" Description When the DNS Client connected to the DNS Server this is the elapsed time after which an the communication is considered to have timed failed if there was no reply from the server in seconds ",
							" TCPIP_DNS_CLIENT_TASK_PROCESS_RATE Macro ",
							" C #define TCPIP_DNS_CLIENT_TASK_PROCESS_RATE (200) ",
							" Description DNS Client task processing rate in milliseconds The DNS Client module will process a timer event with this rate for processing its own state machine etc The default value is 200 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ",
							" TCPIP_DNS_CLIENT_USER_NOTIFICATION Macro ",
							" C #define TCPIP_DNS_CLIENT_USER_NOTIFICATION false ",
							" Description Allow DNS client user notification if enabled the TCPIP_DNS_HandlerRegister/TCPIP_DNS_HandlerDeRegister functions exist and can be used ",
							" TCPIP_DNS_ClientInfoGet Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_ClientInfoGet( TCPIP_DNS_CLIENT_INFO* pClientInfo ); ",
							" Description This function is used to get the current settings of the DNS client ",
							" Preconditions The DNS client module must be initialized ",
							" Paramaters Parameters Description pClientInfo Pointer to a TCPIP_DNS_CLIENT_INFO data structure to receive the DNS client information ",
							" Returns TCPIP_DNS_RES_OK - On success TCPIP_DNS_RES_NO_SERVICE - DNS resolver non existent/uninitialized ",
							" Remarks None ",
							" TCPIP_DNS_ClientTask Function ",
							" C void TCPIP_DNS_ClientTask(); ",
							" Description This function performs DNS module tasks in the TCP/IP stack ",
							" Preconditions The DNS module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_DNS_Disable Function ",
							" C bool TCPIP_DNS_Disable( TCPIP_NET_HANDLE hNet bool clearCache ); ",
							" Description This function disables the DNS Client for the specified interface ",
							" Preconditions The DNS module must be initialized ",
							" Parameters Parameters Description hNet Interface to disable the DNS Client clearCache If true all the existent name entries will be cleared from the cache ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks When the DNS client is disabled on a requested interface the previously solved names will still be part of the cache and will expire when their timeout occurs If the TTL for a name sent by the DNS server was ignored and another default/arbitrary value was used then the entry will stay cached until that timeout occurs (i e timeout not specified by the DNS server) To avoid this you can clear the cache by setting the clearCache parameter to true If the disabled interface matches the strict interface set by TCPIP_DNS_Enable this function will set the strict interface to 0 If the disabled interface matches the preferred interface set by TCPIP_DNS_Enable this function will set the preferred interface to 0 ",
							" TCPIP_DNS_Enable Function ",
							" C bool TCPIP_DNS_Enable( TCPIP_NET_HANDLE hNet TCPIP_DNS_ENABLE_FLAGS flags ); ",
							" Description This function enables the DNS Client name resolution for the specified interface The additional flags give better control on how the name resolution is performed ",
							" Preconditions The DNS module must be initialized ",
							" Parameters Parameters Description hNet Interface to enable the DNS Client on flags Specify further attributes for this interface: act as a strict preferred or default interface ",
							" Returns True - If successful False - If unsuccessful: the requested interface could not be selected for DNS name resolving ",
							" Remarks The interface selection for the name resolution tries to find a valid interface i e an interface that is up and has a valid DNS server The selection is done following these rules: if a strict interface is set only that interface is used for name resolution else if there is a preferred interface that one will be tried first else the default interface is used else any available interface will be used Additionally if a retry is attempted using the same selected interface an alternate DNS server from that interface will be selected if available Only one strict interface can exist at any time Selecting a new strict interface will replace the old one Only one preferred interface can exist at any time Selecting a new preferred interface will replace the old one The selected interface has to be up and running for the call to succeed ",
							" TCPIP_DNS_ENABLE_FLAGS Enumeration ",
							" C typedef enum { TCPIP_DNS_ENABLE_DEFAULT = 0 TCPIP_DNS_ENABLE_STRICT TCPIP_DNS_ENABLE_PREFERRED } TCPIP_DNS_ENABLE_FLAGS; ",
							" Description Enumeration: TCPIP_DNS_ENABLE_FLAGS This enumeration lists the TCPIP_DNS_ENABLE_FLAGS argument for TCPIP_DNS_Enable ",
							" Members Members Description TCPIP_DNS_ENABLE_DEFAULT = 0 The interface is capable of performing DNS name resolution TCPIP_DNS_ENABLE_STRICT Only this interface will be used for DNS name resolution TCPIP_DNS_ENABLE_PREFERRED Prefer this interface when doing DNS name resolution ",
							" Remarks See the TCPIP_DNS_Enable description for details ",
							" TCPIP_DNS_ENTRY_QUERY Structure ",
							" C typedef struct { char* hostName; int nameLen; IPV4_ADDR * ipv4Entry; int nIPv4Entries; IPV6_ADDR * ipv6Entry; int nIPv6Entries; TCPIP_DNS_RESULT status; uint32_t ttlTime; TCPIP_NET_HANDLE hNet; int serverIx; int nIPv4ValidEntries; int nIPv6ValidEntries; } TCPIP_DNS_ENTRY_QUERY; ",
							" Description Structure: TCPIP_DNS_ENTRY_QUERY DNS module uses this structure to return information about a resolved IPv4 and IPv6 address ",
							" Members Members Description hostName Pointer to a name to receive the host name for that particular entry nameLen hostName buffer size ipv4Entry Array of IPv4 entries/addresses to be populated nIPv4Entries Number of entries in the ipv4Entry array ipv6Entry Array of IPv6 entries/addresses to be populated nIPv6Entries Number of entries in the ipv6Entry array status current status for this name: - TCPIP_DNS_RES_OK: name is resolved - TCPIP_DNS_RES_PENDING: name is pending - TCPIP_DNS_RES_SERVER_TMO: server timeout ttlTime Time to live for a solved DNS entry hNet Interface the name was obtained or on which the query is currently ongoing serverIx Index of the server used on that interface nIPv4ValidEntries Number of valid entries written to the ipv4Entry nIPv6ValidEntries Number of valid entries written to the ipv6Entry ",
							" Remarks None ",
							" TCPIP_DNS_EntryQuery Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_EntryQuery( TCPIP_DNS_ENTRY_QUERY * pDnsQuery int queryIndex ); ",
							" Description This function is used to query the DNS client for a specified entry The entry to be queried is selected by its index ",
							" Preconditions The DNS client module must be initialized ",
							" Parameters Parameters Description pDnsQuery Address to store the the query result queryIndex Entry index to be selected; should start with 0 ",
							" Returns TCPIP_DNS_RES_OK - valid address for this index successful Errors: TCPIP_DNS_RES_NO_SERVICE - DNS resolver non existent/uninitialized TCPIP_DNS_RES_INVALID_HOSTNAME - invalid string len pDnsQuery provided TCPIP_DNS_RES_EMPTY_IX_ENTRY - no name associated with this entry TCPIP_DNS_RES_NO_IX_ENTRY - invalid query index ",
							" Remarks None ",
							" TCPIP_DNS_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_DNS_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_DNS_EVENT_TYPE evType const char* name const void* param); ",
							" Description Type: TCPIP_DNS_EVENT_HANDLER The format of a notification handler registered with the DNS module Once an DNS event occurs the DNS service will be called for the registered handler ",
							" Members Members Description hNet The interface on which the DNS event occurred evType The DNS reported event name The host name associated with the event param Additional user parameter - see TCPIP_DNS_HandlerRegister ",
							" Remarks If pNetIf == 0 the notification is called for events on any interface ",
							" TCPIP_DNS_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_DNS_EVENT_NONE TCPIP_DNS_EVENT_NAME_QUERY TCPIP_DNS_EVENT_NAME_RESOLVED TCPIP_DNS_EVENT_NAME_EXPIRED TCPIP_DNS_EVENT_NAME_REMOVED TCPIP_DNS_EVENT_NAME_ERROR TCPIP_DNS_EVENT_SOCKET_ERROR TCPIP_DNS_EVENT_NO_INTERFACE } TCPIP_DNS_EVENT_TYPE; ",
							" Description Enumeration: TCPIP_DNS_EVENT_TYPE These events are used while notifying to the registered applications ",
							" Members Members Description TCPIP_DNS_EVENT_NONE DNS no event TCPIP_DNS_EVENT_NAME_QUERY DNS Query sent TCPIP_DNS_EVENT_NAME_RESOLVED DNS Name resolved TCPIP_DNS_EVENT_NAME_EXPIRED Name entry expired TCPIP_DNS_EVENT_NAME_REMOVED Name removed to make room for another entry TCPIP_DNS_EVENT_NAME_ERROR No such name reported by the DNS server TCPIP_DNS_EVENT_SOCKET_ERROR No such name reported by the DNS server TCPIP_DNS_EVENT_NO_INTERFACE A DNS probe could not be sent no DNS interface could be selected ",
							" Remarks None ",
							" TCPIP_DNS_GetIPAddressesNumber Function ",
							" C int TCPIP_DNS_GetIPAddressesNumber( const char* hostName IP_ADDRESS_TYPE type ); ",
							" Description This function returns the total count of IPv4 and/or IPv6 addresses that exist for a resolved host name ",
							" Preconditions TCPIP_DNS_Resolve() has been called ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host name type IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6/IP_ADDRESS_TYPE_ANY ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_DNS_GetIPv4Addresses Function ",
							" C int TCPIP_DNS_GetIPv4Addresses( const char* hostName int startIndex IPV4_ADDR* pIPv4Addr int nIPv4Addresses ); ",
							" Description This function will return IPv4 addresses for a host name if the DNS resolution has been completed ",
							" Preconditions TCPIP_DNS_Resolve() has been called ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host name startIndex Starting index of the IP address to be returned when multiple addresses are available The max number of addresses that can be stored for a host name is given by TCPIP_DNS_CLIENT_MODULE_CONFIG::n4Entries The current number of valid entries for an address is given by TCPIP_DNS_GetIPAddressesNumber() A valid index is [0 TCPIP_DNS_GetIPAddressesNumber(IP_ADDRESS_TYPE_4)) pIPv4Addr Pointer to array of IPv4 addresses to store the host 4 addresses nIPv4Addresses Number of IPv46 addresses in the p4Addr array ",
							" Returns 0 - The number of addresses copied to the p4Addr array 0 - If the host name was not found invalid index bad parameter etc ",
							" Remarks None ",
							" TCPIP_DNS_GetIPv6Addresses Function ",
							" C int TCPIP_DNS_GetIPv6Addresses( const char* hostName int startIndex IPV6_ADDR* pIPv6Addr int nIPv6Addresses ); ",
							" Description This function will return IPv6 addresses for a host name if the DNS resolution has been completed ",
							" Preconditions TCPIP_DNS_Resolve() has been called ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host name startIndex Starting index of the IP address to be returned when multiple addresses are available The max number of addresses that can be stored for a host name is given by TCPIP_DNS_CLIENT_MODULE_CONFIG::nIPv6Entries The current number of valid entries for an address is given by TCPIP_DNS_GetIPAddressesNumber() A valid index is [0 TCPIP_DNS_GetIPAddressesNumber(IP_ADDRESS_TYPE_IPV6)) pIPv6Addr Pointer to array of IPv6 addresses to store the host IPv6 addresses nIPv6Addresses Number of IPv6 addresses in the pIPv6Addr array ",
							" Returns 0 - The number of addresses copied to the pIPv6Addr array 0 - If the host name was not found invalid index bad parameter etc ",
							" Remarks None ",
							" TCPIP_DNS_HANDLE Type ",
							" C typedef const void* TCPIP_DNS_HANDLE; ",
							" Description Type: TCPIP_DNS_HANDLE A handle that a application needs to use when deregistering a notification handler ",
							" Remarks This handle can be used by the application after the event handler has been registered ",
							" TCPIP_DNS_HandlerDeRegister Function ",
							" C bool TCPIP_DNS_HandlerDeRegister( TCPIP_DNS_HANDLE hDns ); ",
							" Description This function deregisters the DNS client event handler ",
							" Preconditions The DNS module must be initialized ",
							" Paramaters Parameters Description hDns A handle returned by a previous call to TCPIP_DNS_HandlerRegister() ",
							" Returns True - If the call succeeds False - If no such handler is registered ",
							" Remarks None ",
							" TCPIP_DNS_HandlerRegister Function ",
							" C TCPIP_DNS_HANDLE TCPIP_DNS_HandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_DNS_EVENT_HANDLER handler const void* hParam ); ",
							" Description This function registers a DNS client event handler The DNS client module will call the registered handler when a DNS client event (TCPIP_DNS_EVENT_TYPE) occurs ",
							" Preconditions The DNS module must be initialized ",
							" Paramaters Parameters Description hNet Interface handle Use hNet == 0 to register on all interfaces available handler Handler to be called when a DNS client event occurs hParam Pointer to non-volatile ASCIIZ string to be used in the handler call It is used as a domain/host name If not NULL a DNS notification will be delivered only for a name resolution that matches the hParam If the hParam == 0 then the notification is triggered for any host name resolution ",
							" Returns Returns a valid handle if the call succeeds Returns null handle if the call failed (out of memory for example) ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" TCPIP_DNS_IsEnabled Function ",
							" C bool TCPIP_DNS_IsEnabled( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the current state of DNS Client on the specified interface ",
							" Preconditions The DNS module must be initialized ",
							" Paramaters Parameters Description hNet Interface to query ",
							" Returns True - If the DNS client service is enabled on the specified interface False - If the DNS client service is not enabled on the specified interface ",
							" TCPIP_DNS_IsNameResolved Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_IsNameResolved( const char* hostName IPV4_ADDR* hostIPv4 IPV6_ADDR* hostIPv6 ); ",
							" Description Call this function to determine if the DNS name resolution has been completed This function allows for retrieval of separate IPv4 and IPv6 addresses for a name ",
							" Preconditions TCPIP_DNS_Resolve() has been called ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host for which to resolve an IP hostIPv4 A pointer to an IPV4_ADDR structure in which to store the resolved IPv4 address if resolution is complete Could be NULL if not needed hostIPv6 A pointer to an IPV6_ADDR structure in which to store the resolved IPv6 address if resolution is complete Could be NULL if not needed ",
							" Remarks The function will set either an IPv6 or an IPv4 address to the hostIP address depending on what's available ",
							" TCPIP_DNS_IsResolved Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_IsResolved( const char* hostName IP_MULTI_ADDRESS* hostIP IP_ADDRESS_TYPE type ); ",
							" Description Call this function to determine if the DNS resolution of an address has been completed If so the resolved address will be provided in hostIP ",
							" Preconditions TCPIP_DNS_Resolve() has been called ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host for which to resolve an IP hostIP A pointer to an IP_MULTI_ADDRESS structure in which to store the resolved IPv4/IPv6 address if resolution is complete Could be NULL if not needed type type of address needed: IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6/IP_ADDRESS_TYPE_ANY ",
							" Remarks The function will set either an IPv6 or an IPv4 address to the hostIP address depending on what's available If type IP_ADDRESS_TYPE_ANY is specified the hostIP will be updated with the first available solved address: either IPv6 or IPv4 ",
							" TCPIP_DNS_RemoveAll Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_RemoveAll(); ",
							" Description This function is used to remove all the entries from the DNS cache It removes both the solved and unresolved entries ",
							" Preconditions The DNS module must be initialized ",
							" Returns TCPIP_DNS_RES_OK - If successful TCPIP_DNS_RES_NO_SERVICE - DNS resolver non existent/uninitialized ",
							" Remarks None ",
							" TCPIP_DNS_RemoveEntry Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_RemoveEntry( const char * hostName ); ",
							" Description This function is used to remove an entry (host name) from the DNS cache ",
							" Preconditions The DNS module must be initialized ",
							" Parameters Parameters Description hostName Domain name to be inserted ",
							" Returns TCPIP_DNS_RES_OK - If name was successfully removed TCPIP_DNS_RES_INVALID_HOSTNAME - Invalid name supplied TCPIP_DNS_RES_NO_SERVICE - DNS resolver non existent/uninitialized TCPIP_DNS_RES_NO_NAME_ENTRY - No such name exists ",
							" Remarks None ",
							" TCPIP_DNS_Resolve Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_Resolve( const char* hostName TCPIP_DNS_RESOLVE_TYPE type ); ",
							" Description This function attempts to resolve a host name to an IP address When called it will attempt to send a DNS query to a DNS server for resolving the name Call TCPIP_DNS_IsResolved to determine if name resolution is complete ",
							" Preconditions DNS client module initialized ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host for which to resolve an IP type A TCPIP_DNS_RESOLVE_TYPE value specifying the desired resolution ",
							" Returns TCPIP_DNS_RES_OK - Success name is solved TCPIP_DNS_RES_PENDING - Operation is ongoing TCPIP_DNS_RES_NAME_IS_IPADDRESS - Name request is a IPv4 or IPv6 address An error code if an error occurred ",
							" Remarks To clear the cache use TCPIP_DNS_Disable(hNet true); ",
							" TCPIP_DNS_RESOLVE_TYPE Enumeration ",
							" C typedef enum { TCPIP_DNS_TYPE_A = 1 TCPIP_DNS_TYPE_MX = 15 TCPIP_DNS_TYPE_AAAA = 28u TCPIP_DNS_TYPE_ANY = 0xff } TCPIP_DNS_RESOLVE_TYPE; ",
							" Description Enumeration: TCPIP_DNS_RESOLVE_TYPE This enumeration lists the RecordType argument for TCPIP_DNS_Resolve The stack supports DNS_TYPE_A and DNS_TYPE_AAAA ",
							" Members Members Description TCPIP_DNS_TYPE_A = 1 Indicates an A (standard address) record TCPIP_DNS_TYPE_MX = 15 Indicates an MX (mail exchanger) record TCPIP_DNS_TYPE_AAAA = 28u Indicates a quad-A (IPv6 address) address record ",
							" Remarks None ",
							" TCPIP_DNS_RESULT Enumeration ",
							" C typedef enum { TCPIP_DNS_RES_OK = 0 TCPIP_DNS_RES_PENDING TCPIP_DNS_RES_NAME_IS_IPADDRESS TCPIP_DNS_RES_NO_NAME_ENTRY = -1 TCPIP_DNS_RES_NO_IP_ENTRY = -2 TCPIP_DNS_RES_NO_IX_ENTRY = -3 TCPIP_DNS_RES_EMPTY_IX_ENTRY = -4 TCPIP_DNS_RES_SERVER_TMO = -5 TCPIP_DNS_RES_NO_SERVICE = -6 TCPIP_DNS_RES_NO_INTERFACE = -7 TCPIP_DNS_RES_CACHE_FULL = -8 TCPIP_DNS_RES_INVALID_HOSTNAME = -9 TCPIP_DNS_RES_SOCKET_ERROR = -10 } TCPIP_DNS_RESULT; ",
							" Description Enumeration: TCPIP_DNS_RESULT DNS Client operations results ",
							" Members Members Description TCPIP_DNS_RES_OK = 0 Operation succeeded TCPIP_DNS_RES_PENDING Operation is ongoing TCPIP_DNS_RES_NAME_IS_IPADDRESS DNS request is a IPv4 or IPv6 address TCPIP_DNS_RES_NO_NAME_ENTRY = -1 No such name exists TCPIP_DNS_RES_NO_IP_ENTRY = -2 No such IP type exists TCPIP_DNS_RES_NO_IX_ENTRY = -3 No such index exists TCPIP_DNS_RES_EMPTY_IX_ENTRY = -4 No entry associated to this index exists TCPIP_DNS_RES_SERVER_TMO = -5 DNS server response tmo TCPIP_DNS_RES_NO_SERVICE = -6 DNS service not implemented or uninitialized TCPIP_DNS_RES_NO_INTERFACE = -7 No interface for DNS traffic available TCPIP_DNS_RES_CACHE_FULL = -8 The cache is full and no entry could be added TCPIP_DNS_RES_INVALID_HOSTNAME = -9 Invalid hostname TCPIP_DNS_RES_SOCKET_ERROR = -10 DNS UDP socket error: not ready TX error etc ",
							" Remarks None ",
							" TCPIP_DNS_Send_Query Function ",
							" C TCPIP_DNS_RESULT TCPIP_DNS_Send_Query( const char* hostName TCPIP_DNS_RESOLVE_TYPE type ); ",
							" Description This function attempts to send a query packet for the supplied host name and DNS type ",
							" Preconditions The DNS client module must be initialized ",
							" Parameters Parameters Description hostName A pointer to the null terminated string specifying the host for which to resolve an IP type A TCPIP_DNS_RESOLVE_TYPE value specifying the desired resolution ",
							" Returns TCPIP_DNS_RES_OK - Success name is solved TCPIP_DNS_RES_PENDING - Operation is ongoing TCPIP_DNS_RES_NAME_IS_IPADDRESS - Name request is a IPv4 or IPv6 address An error code if an error occurred ",
							" Remarks If the name is already part of the DNS resolution process (has been previously requested with TCPIP_DNS_Resolve or TCPIP_DNS_Send_Query) the function will force a new DNS query If the name resolution is already solved and completed this function will mark it as incomplete and a new response from the server will be requested If the name was not part of the DNS client resolution then this function is equivalent to TCPIP_DNS_Resolve() ",
							" DNS Server Module A step-by-step analysis of the DNS Server is as follows: DNS server can be enabled or disabled at run time If the TCP/IP commands module is built in it contains a \"dnss\" command that could be used for interfacing with the DNSS module A client sends some query to the DNS Server of the TCP/IP stack for a name resolution The DNS Server of the TCP/IP Stack first checks the configuration value of replyBoardAddr This Boolean flag is passed to the DNSS module at initialization time If replyBoardAddr is true the DNS server will reply to the client query with its own board address If replyBoardAddr is false the DNSS will check its cache for an entry for that name If a valid entry is found the reply is sent to the client requesting the info Otherwise no reply is provided To update the DNSS cache new entries can be added either using the DNSS API or directly from the console using the \"dnss\" command The dnsserv command is used to add delete and display the DNS server details Authoritative Name servers and Addition Name servers are not processed The client may store the answer to the DNS query in it's own cache for future use DNSS Figure 1 Abstraction Model DNSS is part of the Application Layer as illustrated in the following figure DNSS_tcpip_stack_diagram DNSS resolution operations follow a simple state machine as indicated in the following diagram dns server flow chart Library Interface Name Description General Functions  TCPIP_DNSS_AddressCntGet Get DNS Server IPv4 or IPv4 Address count details for the Input value of Index TCPIP_DNSS_CacheEntryRemove Remove DNS server cache entry by Hostname and IP Type and IP(v4 or v6) address TCPIP_DNSS_Disable Disables the DNS Server for the specified interface TCPIP_DNSS_Enable Enables the DNS server for the specified interface TCPIP_DNSS_EntryAdd Add a IPv4 or IPv6 entry to the DNS server table TCPIP_DNSS_IsEnabled Determines if the DNS Server is enabled on the specified interface TCPIP_DNSS_EntryGet Get DNS server IP address details from resolver pool entry TCPIP_DNSS_Task Standard TCP/IP stack module task function Data Types and Constants  TCPIP_DNSS_MODULE_CONFIG Provides a place holder for DNS server configuration TCPIP_DNSS_RESULT DNS result codes TCPIP_DNSS_CACHE_MAX_SERVER_ENTRIES Maximum DNS server Cache entries It is the sum of TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS and TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS Maximum and default number of IPv4 entries will be allowed to be configured from command prompt and these many entries will be allowed to be sent in response for the DNS query with record type TCPIP_DNS_TYPE_A TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS Maximum and default number of IPv6 entries will be allowed to be configured from command prompt and these many entries will be allowed to be sent in response for the DNS query with record type TCPIP_DNS_TYPE_AAAA TCPIP_DNSS_HOST_NAME_LEN Default DNS host name length TCPIP_DNSS_REPLY_BOARD_ADDR Reply DNS info with Board info only if the requested DNS host name is not present if TCPIP_DNSS_REPLY_BOARD_ADDR = 1 then return no such name This is used for a boolean variable the value should be 0 or 1 TCPIP_DNSS_TASK_PROCESS_RATE DNS Server time out task processing rate in milliseconds The DNS Server module will process a timer event with this rate for processing its own state machine etc The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_DNSS_TTL_TIME Default TTL time for a IP address is 10 minutes __DNSS_H This is macro __DNSS_H DNSS_CONFIG_H This is macro DNSS_CONFIG_H  ",
							" __DNSS_H Macro ",
							" C #define __DNSS_H ",
							" Description This is macro __DNSS_H ",
							" _DNSS_CONFIG_H_ Macro ",
							" C #define _DNSS_CONFIG_H_ ",
							" Description This is macro _DNSS_CONFIG_H_ ",
							" TCPIP_DNSS_AddressCntGet Function ",
							" C TCPIP_DNSS_RESULT TCPIP_DNSS_AddressCntGet( int index uint8_t * hostName uint8_t * ipCount ); ",
							" Description This function is used to get the number of IPv4 and IPv6 address entry details from hash entry table Here input parameter is index value Output will be the hostname and IP address count IP address count is the summation of both IPv4 and IPv6 address ",
							" Preconditions DNSServerInit() should be called ",
							" Parameters Parameters Description hostName Get DNS host name ipCount Get the number of IPv4 or IPv6 Server address index Server count details per index value ",
							" Returns TCPIP_DNSS_RES_OK - If entry remove is successful TCPIP_DNSS_RES_NO_ENTRY - No such entry is present TCPIP_DNSS_RES_MEMORY_FAIL - No Memory is present for IPv4 or IPv6 address type ",
							" Remarks None ",
							" TCPIP_DNSS_CACHE_MAX_SERVER_ENTRIES Macro ",
							" C #define TCPIP_DNSS_CACHE_MAX_SERVER_ENTRIES (TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS+TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS) ",
							" Description Maximum DNS server Cache entries It is the sum of TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS and TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS ",
							" TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS Macro ",
							" C #define TCPIP_DNSS_CACHE_PER_IPV4_ADDRESS 2 ",
							" Description Maximum and default number of IPv4 entries will be allowed to be configured from command prompt and these many entries will be allowed to be sent in response for the DNS query with record type TCPIP_DNS_TYPE_A ",
							" TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS Macro ",
							" C #define TCPIP_DNSS_CACHE_PER_IPV6_ADDRESS 1 ",
							" Description Maximum and default number of IPv6 entries will be allowed to be configured from command prompt and these many entries will be allowed to be sent in response for the DNS query with record type TCPIP_DNS_TYPE_AAAA ",
							" TCPIP_DNSS_CacheEntryRemove Function ",
							" C TCPIP_DNSS_RESULT TCPIP_DNSS_CacheEntryRemove( const char* name IP_ADDRESS_TYPE type IP_MULTI_ADDRESS* pAdd ); ",
							" Description This function is used for command prompt dnsDelSrv and to delete a entry IPv4 or IPv6 from hostName Every time this is used to delete either one IPv4 or IPv6 address with respect to the DNS hostname there will be an expire time for a Host entry ",
							" Preconditions The DNS server must be initialized ",
							" Parameters Parameters Description name Hostname type IP_ADDRESS_TYPE_IPV4 or IP_ADDRESS_TYPE_IPV6 pAdd V4 or V6 address ",
							" Returns TCPIP_DNSS_RES_OK - If entry remove is successful TCPIP_DNSS_RES_NO_ENTRY - No such entry is present TCPIP_DNSS_RES_MEMORY_FAIL - No Memory is present for IPv4 or IPv6 address type ",
							" Remarks None ",
							" TCPIP_DNSS_Disable Function ",
							" C bool TCPIP_DNSS_Disable( TCPIP_NET_HANDLE hNet ); ",
							" Description This function disables the DNS Server for the specified interface If it is already disabled no action is taken ",
							" Preconditions The DNS server must be initialized ",
							" Parameters Parameters Description hNet Interface to disable the DNS server on ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DNSS_Enable Function ",
							" C bool TCPIP_DNSS_Enable( TCPIP_NET_HANDLE hNet ); ",
							" Description This function enables the DNS Server for the specified interface if it is disabled If it is already enabled nothing is done ",
							" Preconditions The DNS server must be initialized ",
							" Parameters Parameters Description hNet Interface to enable the DNS server on ",
							" Returns True - If successful False - If unsuccessful ",
							" Remarks None ",
							" TCPIP_DNSS_EntryAdd Function ",
							" C TCPIP_DNSS_RESULT TCPIP_DNSS_EntryAdd( const char* name IP_ADDRESS_TYPE type IP_MULTI_ADDRESS* pAdd uint32_t entryTimeout ); ",
							" Description This function is used to add a IPv4 or IPv6 entry Every time this is used to add either one IPv4 or IPv6 address with respect to the DNS hostname there will be an expire time for a Host entry \"entryTimeout\" parameter is used as the timeout value for this specific entry ",
							" Preconditions The DNS server must be initialized ",
							" Parameters Parameters Description name Hostname type IP_ADDRESS_TYPE_IPV4 or IP_ADDRESS_TYPE_IPV6 pAdd IPv4 or IPv6 address entryTimeout Time-out value for the entry ",
							" Returns TCPIP_DNSS_RES_OK - If entry remove is successful TCPIP_DNSS_RES_NO_ENTRY - If Hostname is NULL value and Invalid IP type TCPIP_DNSS_RES_MEMORY_FAIL - No Memory is present for IPv4 or IPv6 address type TCPIP_DNSS_RES_CACHE_FULL - If there is no space for the new entry ",
							" Remarks When the DNS server entryTimeout value is 0 it specifies that the entry is a permanent entry user can remove this entry by using TCPIP_DNSS_CacheEntryRemove() TTL time for this entry will be the value of TCPIP_DNSS_PERMANENT_ENTRY_TTL_TIME ",
							" TCPIP_DNSS_EntryGet Function ",
							" C TCPIP_DNSS_RESULT TCPIP_DNSS_EntryGet( uint8_t * hostName IP_ADDRESS_TYPE type int index IP_MULTI_ADDRESS* pGetAdd uint32_t * ttltime ); ",
							" Description This function is used to get the DNS server IPv4 or IPv6 address from resolver pool entry as per hostname and IP type and from the index value This IP type can be a IPv4 and IPv6 type This is used for DNS record type ",
							" Preconditions DNSServerInit() should be called ",
							" Parameters Parameters Description hostName DNS host name type DNS IP type ( it will be ipv4 or ipv6 type and it is mapped to DNS record type) this can be used for DNS record type index Get the next entry after this index value pGetAdd Get the zero th IPv4 or IPv6 address ttltime Timeout value ",
							" Returns TCPIP_DNSS_RESULT ",
							" Remarks None ",
							" TCPIP_DNSS_HOST_NAME_LEN Macro ",
							" C #define TCPIP_DNSS_HOST_NAME_LEN 64u ",
							" Description Default DNS host name length ",
							" TCPIP_DNSS_IsEnabled Function ",
							" C bool TCPIP_DNSS_IsEnabled( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the current state of the DNS Server on the specified interface ",
							" Preconditions The DNS server must be initialized ",
							" Parameters Parameters Description hNet Interface to query ",
							" Returns True - If the DNS Server is enabled on the specified interface False - If the DNS Server is not enabled on the specified interface ",
							" Remarks None ",
							" TCPIP_DNSS_MODULE_CONFIG Structure ",
							" C typedef struct { bool deleteOldLease; bool replyBoardAddr; size_t IPv4EntriesPerDNSName; size_t IPv6EntriesPerDNSName; } TCPIP_DNSS_MODULE_CONFIG; ",
							" Description Structure: TCPIP_DNSS_MODULE_CONFIG DNS Server run-time configuration and initialization parameter ",
							" Members Members Description deleteOldLease Delete old cache if still in place replyBoardAddr Reply with board address specific DNS server parameters IPv4EntriesPerDNSName Number of IPv4 entries per DNS name Default value is 1 IPv6EntriesPerDNSName Number of IPv6 address per DNS Name Default value is 1 Used only when IPv6 is enabled ",
							" Remarks None ",
							" TCPIP_DNSS_REPLY_BOARD_ADDR Macro ",
							" C #define TCPIP_DNSS_REPLY_BOARD_ADDR 1 ",
							" Description Reply DNS info with Board info only if the requested DNS host name is not present if TCPIP_DNSS_REPLY_BOARD_ADDR = 1 then return no such name This is used for a boolean variable the value should be 0 or 1 ",
							" TCPIP_DNSS_RESULT Enumeration ",
							" C typedef enum { TCPIP_DNSS_RES_OK = 0 TCPIP_DNSS_RES_NO_SERVICE = -1 TCPIP_DNSS_RES_CACHE_FULL = -2 TCPIP_DNSS_RES_NO_ENTRY = -3 TCPIP_DNSS_RES_NO_IPADDRESS = -4 TCPIP_DNSS_RES_MEMORY_FAIL = -5 TCPIP_DNSS_RES_DUPLICATE_ENTRY = -6 } TCPIP_DNSS_RESULT; ",
							" Description Enumeration: TCPIP_DNSS_RESULT DNS Server operations results ",
							" Members Members Description TCPIP_DNSS_RES_OK = 0 Operation succeeded TCPIP_DNSS_RES_NO_SERVICE = -1 DNS service not implemented or uninitialized TCPIP_DNSS_RES_CACHE_FULL = -2 The cache is full and no entry could be added TCPIP_DNSS_RES_NO_ENTRY = -3 DNSS no such name TCPIP_DNSS_RES_NO_IPADDRESS = -4 No such IP address TCPIP_DNSS_RES_MEMORY_FAIL = -5 Out of memory failure TCPIP_DNSS_RES_DUPLICATE_ENTRY = -6 Duplicate entry was found ",
							" Remarks None ",
							" TCPIP_DNSS_Task Function ",
							" C void TCPIP_DNSS_Task(); ",
							" Description This function performs DNSS module tasks in the TCP/IP stack ",
							" Preconditions The DNSS module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_DNSS_TASK_PROCESS_RATE Macro ",
							" C #define TCPIP_DNSS_TASK_PROCESS_RATE (33) ",
							" Description DNS Server time out task processing rate in milliseconds The DNS Server module will process a timer event with this rate for processing its own state machine etc The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ",
							" TCPIP_DNSS_TTL_TIME Macro ",
							" C #define TCPIP_DNSS_TTL_TIME (10*60) ",
							" Description Default TTL time for a IP address is 10 minutes ",
							" Dynamic DNS Module The Dynamic DNS Client module provides a method for updating a dynamic IP address to a public DDNS service These services can be used to provide DNS hostname mapping to devices that behind routers firewalls and/or on networks that dynamically assign IP addresses Note that this only solves one of the two problems for communicating to devices on local subnets from the Internet While Dynamic DNS can help to locate the device the router or firewall it sits behind must still properly forward the incoming connection request This generally requires port forwarding to be configured for the router behind which the device is located The Dynamic DNS client supports the popular interface used by No-IP (noip com) and DNS-O-Matic (dnsomatic com) Important: The dynamic DNS services stipulate that updates should be made no more frequently than 10 minutes and only when the IP address has changed Updates made more often than that are considered abusive and may eventually cause your account to be disabled Production devices that get rebooted frequently may need to store the last known IP in non-volatile memory You also should not enable this module while testing the rest of your application Abstraction Model TCPIP DDNS Abstraction Model Library Interface Name Description Macros  TCPIP_DDNS_CHECKIP_SERVER Default CheckIP server for determining current IP address TCPIP_DDNS_TASK_TICK_RATE dynDNS task rate ms The default value is hundreds of milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE Functions  TCPIP_DDNS_Task Standard TCP/IP stack module task function TCPIP_DDNS_LastIPGet Returns the last known external IP address of the device TCPIP_DDNS_LastStatusGet Returns the status of the most recent update TCPIP_DDNS_ServiceSet Selects a preconfigured Dynamic DNS service TCPIP_DDNS_UpdateForce Forces an immediate DDNS update Data Types and Constants  DDNS_SERVICES Dynamic DNS Services Must support the DynDNS API (Auxlang) and correspond to ddnsServiceHosts and ddnsServicePorts in DynDNS c DDNS_STATUS Status message for DynDNS client GOOD and NOCHG are okay but ABUSE through 911 are fatal UNCHANGED through INVALID are locally defined DDNS_MODULE_CONFIG This is type DDNS_MODULE_CONFIG DDNSClient Global DDNS Configuration parameters DDNS_POINTERS Configuration parameters for the Dynamic DNS Client TCPIP_DNSS_RESOLVE_TYPE DNS query record type TCPIP_DNSS_RESULT_OBSOLETE DNS result codes ",
							" DDNS_MODULE_CONFIG Structure ",
							" C typedef struct { void* reserved; } DDNS_MODULE_CONFIG; ",
							" Description This is type DDNS_MODULE_CONFIG ",
							" DDNS_POINTERS Structure ",
							" C typedef struct { union { uint8_t * szRAM; const uint8_t * szROM; } CheckIPServer; uint16_t CheckIPPort; union { uint8_t * szRAM; const uint8_t * szROM; } UpdateServer; uint16_t UpdatePort; union { uint8_t * szRAM; const uint8_t * szROM; } Username; union { uint8_t * szRAM; const uint8_t * szROM; } Password; union { uint8_t * szRAM; const uint8_t * szROM; } Host; struct { unsigned char CheckIPServer : 1; unsigned char UpdateServer : 1; unsigned char Username : 1; unsigned char Password : 1; unsigned char Host : 1; } ROMPointers; } DDNS_POINTERS; ",
							" Description This structure of pointers configures the Dynamic DNS Client Initially all pointers will be null and the client will be disabled Set DDNSClient szRAM to use a string stored in RAM or DDNSClient szROM to use a string stored in const Where is one of the following parameters If a const string is specified DDNSClient ROMPointers must also be set to 1 to indicate that this field should be retrieved from const instead of RAM ",
							" Members Members Description CheckIPServer Indicates an A (standard address) record CheckIPPort Indicates an MX (mail exchanger) record UpdateServer Indicates a quad-A (IPv6 address) address record UpdatePort Port on the above server to connect to Username The user name for the dynamic DNS server Password The password to supply when making updates Host The host name you wish to update ROMPointers Indicates which parameters to read from const instead of RAM ",
							" Remarks None ",
							" DDNS_SERVICES Enumeration ",
							" C typedef enum { DYNDNS_ORG = 0u NO_IP_COM DNSOMATIC_COM } DDNS_SERVICES; ",
							" Description Dynamic DNS Services Must support the DynDNS API (Auxlang) and correspond to ddnsServiceHosts and ddnsServicePorts in DynDNS c ",
							" Members Members Description DYNDNS_ORG = 0u www dyndns org NO_IP_COM www no-ip com DNSOMATIC_COM www dnsomatic com ",
							" DDNS_STATUS Enumeration ",
							" C typedef enum { DDNS_STATUS_GOOD = 0u DDNS_STATUS_NOCHG DDNS_STATUS_ABUSE DDNS_STATUS_BADSYS DDNS_STATUS_BADAGENT DDNS_STATUS_BADAUTH DDNS_STATUS_NOT_DONATOR DDNS_STATUS_NOT_FQDN DDNS_STATUS_NOHOST DDNS_STATUS_NOT_YOURS DDNS_STATUS_NUMHOST DDNS_STATUS_DNSERR DDNS_STATUS_911 DDNS_STATUS_UPDATE_ERROR DDNS_STATUS_UNCHANGED DDNS_STATUS_CHECKIP_ERROR DDNS_STATUS_DNS_ERROR DDNS_STATUS_SKT_ERROR DDNS_STATUS_INVALID DDNS_STATUS_UNKNOWN } DDNS_STATUS; ",
							" Description Status message for DynDNS client GOOD and NOCHG are okay but ABUSE through 911 are fatal UNCHANGED through INVALID are locally defined ",
							" Members Members Description DDNS_STATUS_GOOD = 0u Update successful hostname is now updated DDNS_STATUS_NOCHG Update changed no setting and is considered abusive Additional 'nochg' updates will cause hostname to be blocked DDNS_STATUS_ABUSE The hostname specified is blocked for update abuse DDNS_STATUS_BADSYS System parameter not valid Should be dyndns statdns or custom DDNS_STATUS_BADAGENT The user agent was blocked or not sent DDNS_STATUS_BADAUTH The username and password pair do not match a real user DDNS_STATUS_NOT_DONATOR An option available only to credited users (such as offline URL) was specified but the user is not a credited user If multiple hosts were specified only a single donator will be returned DDNS_STATUS_NOT_FQDN The hostname specified is not a fully-qualified domain name (not in the form hostname dyndns org or domain com) DDNS_STATUS_NOHOST The hostname specified does not exist in this user account (or is not in the service specified in the system parameter) DDNS_STATUS_NOT_YOURS The hostname specified does not belong to this user account DDNS_STATUS_NUMHOST Too many hosts specified in an update DDNS_STATUS_DNSERR Unspecified DNS error encountered by the DDNS service DDNS_STATUS_911 There is a problem or scheduled maintenance with the DDNS service DDNS_STATUS_UPDATE_ERROR Error communicating with Update service DDNS_STATUS_UNCHANGED The IP Check indicated that no update was necessary DDNS_STATUS_CHECKIP_ERROR Error communicating with CheckIP service DDNS_STATUS_DNS_ERROR DNS error resolving the CheckIP service DDNS_STATUS_SKT_ERROR TCP socket opening error DDNS_STATUS_INVALID DDNS Client data is not valid DDNS_STATUS_UNKNOWN DDNS client has not yet been executed with this configuration ",
							" DDNSClient Variable ",
							" C DDNS_POINTERS DDNSClient; ",
							" Description Global DDNS Configuration parameters ",
							" TCPIP_DDNS_LastIPGet Function ",
							" C uint32_t TCPIP_DDNS_LastIPGet(); ",
							" Description This function returns the last known external IP address of the device ",
							" Preconditions None ",
							" Returns The last known external IP address of the device ",
							" TCPIP_DDNS_LastStatusGet Function ",
							" C DDNS_STATUS TCPIP_DDNS_LastStatusGet(); ",
							" Description This function returns the status of the most recent update See the DDNS_STATUS enumeration for possible codes ",
							" Preconditions None ",
							" Returns DDNS_STATUS indicating the status code for the most recent update ",
							" TCPIP_DDNS_ServiceSet Function ",
							" C void TCPIP_DDNS_ServiceSet( DDNS_SERVICES svc ); ",
							" Description This function selects a Dynamic DNS service based on parameters configured in ddnsServiceHosts and ddnsServicePorts These arrays must match the DDNS_SERVICES enumeration ",
							" Preconditions None ",
							" Parameters Parameters Description svc One of the DDNS_SERVICES elements to indicate the selected service ",
							" Returns None ",
							" TCPIP_DDNS_Task Function ",
							" C void TCPIP_DDNS_Task(); ",
							" Description Performs DDNS module tasks in the TCP/IP stack ",
							" Preconditions DDNS module should have been initialized ",
							" Returns None ",
							" TCPIP_DDNS_UpdateForce Function ",
							" C void TCPIP_DDNS_UpdateForce(); ",
							" Description This function forces the DDNS Client to execute a full update immediately Any error message is cleared and the update will be executed whether the IP address has changed or not Call this function every time the DDNSClient parameters have been modified ",
							" Preconditions TCPIP_DDNS_Initialize() must have been called ",
							" Returns None ",
							" TCPIP_DNSS_RESOLVE_TYPE Enumeration ",
							" C typedef enum { TCPIP_DNSS_TYPE_A = 1 TCPIP_DNSS_TYPE_MX = 15 TCPIP_DNSS_TYPE_AAAA = 28u TCPIP_DNSS_TYPE_ANY = 0xff } TCPIP_DNSS_RESOLVE_TYPE; ",
							" Description Enumeration: TCPIP_DNSS_RESOLVE_TYPE This enumeration lists the RecordType argument for TCPIP_DNSS_Resolve The stack supports DNSS_TYPE_A and DNSS_TYPE_AAAA ",
							" Members Members Description TCPIP_DNSS_TYPE_A = 1 Indicates an A (standard address) record TCPIP_DNSS_TYPE_MX = 15 Indicates an MX (mail exchanger) record TCPIP_DNSS_TYPE_AAAA = 28u Indicates a quad-A (IPv6 address) address record ",
							" Remarks None ",
							" TCPIP_DNSS_RESULT_OBSOLETE Enumeration ",
							" C typedef enum { DNSS_RES_OK = 0 DNSS_RES_NO_SERVICE = -1 DNSS_RES_CACHE_FULL = -2 DNSS_RES_NO_ENTRY = -3 DNSS_RES_NO_IPADDRESS = -4 DNSS_RES_MEMORY_FAIL = -5 DNSS_RES_DUPLICATE_ENTRY = -6 } TCPIP_DNSS_RESULT_OBSOLETE; ",
							" Description Enumeration: TCPIP_DNSS_RESULT_OBSOLETE DNS Server operations results ",
							" Members Members Description DNSS_RES_OK = 0 Operation succeeded DNSS_RES_NO_SERVICE = -1 DNS service not implemented or uninitialized DNSS_RES_CACHE_FULL = -2 The cache is full and no entry could be added DNSS_RES_NO_ENTRY = -3 DNSS no such name DNSS_RES_NO_IPADDRESS = -4 No such IP address DNSS_RES_MEMORY_FAIL = -5 Out of memory failure DNSS_RES_DUPLICATE_ENTRY = -6 Duplicate entry was found ",
							" Remarks This type is obsolete and it will be removed Please use the TCPIP_DNSS_RESULT() ",
							" FTP Client Module The File Transfer Protocol (FTP) Client module will allow your application to upload the files to and download the files from any FTP server This protocol enables transfer of data reliably and efficiently between different devices without worrying about the different file storage systems among hosts Abstraction Model FTP Model How The Library Works Files are transferred via the data connection The control connection is used for the transfer of commands and the replies to these commands Several commands are concerned with the transfer of data between hosts These data transfer commands include the command which specify how the data is to be transmitted and the way in which the data is to be represented The mechanism of transferring data consists of setting up the data connection to the appropriate ports and choosing the parameters for the transfer The passive data transfer process shall \"listen\" on the data port prior to sending a transfer request command The FTP request command determines the direction of the data transfer The server upon receiving the transfer request will initiate the data connection to the port When the connection is established the data transfer begins between DTP’s and the server-PI sends a confirming reply to the user-PI It is possible for the user to specify an alternate data port by use of the PORT command In general it is the server’s responsibility to maintain the data connection to initiate it and to close it Library Interface Name Description Macros  TCPIP_FTPC_DATA_SKT_RX_BUFF_SIZE_DFLT Specify the Default Receive Buffer Size for the FTP Client Data Socket if 0 the TCP Socket Receive buffer size will be used by FTPC data socket TCPIP_FTPC_DATA_SKT_TX_BUFF_SIZE_DFLT Specify the Default Transmit Buffer Size for the FTP Client Data Socket if 0 the TCP Socket Transmit buffer size will be used by FTPC data socket TCPIP_FTPC_MAX_NUM_CLIENT Specify the maximum number of supported simultaneous FTP client connections TCPIP_FTPC_TASK_TICK_RATE The FTP Client task rate in milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_FTPC_TMO Specify the time-out for FTP Client commands in seconds This is the time to wait for a response from FTP server TCPIP_FTPC_COMMANDS Specify whether FTP Client command in the tcpip_commands is enabled Functions  TCPIP_FTPC_Change_Dir FTP Client change working directory TCPIP_FTPC_ChangeToParentDir FTP Client make parent directory as working directory TCPIP_FTPC_Connect FTP Client Connect function TCPIP_FTPC_DeleteFile FTP Client delete file TCPIP_FTPC_Disconnect FTP Client Disconnect function TCPIP_FTPC_Get_Status FTP Client status info function TCPIP_FTPC_Get_WorkingDir FTP Client print the name of working directory TCPIP_FTPC_GetFile FTP Client Get file function TCPIP_FTPC_List FTP Client List function TCPIP_FTPC_Login FTP Client Login function TCPIP_FTPC_Logout FTP Client instance logout TCPIP_FTPC_MakeDir FTP Client create a new directory TCPIP_FTPC_NameList FTP Client Name List function TCPIP_FTPC_PutFile FTP Client Put file function TCPIP_FTPC_RemoveDir FTP Client remove the directory TCPIP_FTPC_SetActiveMode Set FTP Client connection mode as Active TCPIP_FTPC_SetMode Set FTP Client Transfer Mode TCPIP_FTPC_SetPassiveMode Set FTP Client connection mode as Passive TCPIP_FTPC_SetStruct Set FTP Client File structure type TCPIP_FTPC_SetType Set FTP Client Data representation type TCPIP_FTPC_Task Standard TCP/IP stack module task function Data Types and Constants  TCPIP_FTPC_CMD FTP Client Commands TCPIP_FTPC_CTRL_EVENT_TYPE FTPC Control Socket Events TCPIP_FTPC_DATA_EVENT_TYPE FTPC Data Socket Events TCPIP_FTPC_DATA_REP_TYPE FTPC data representation types TCPIP_FTPC_DATA_STRUCT_TYPE FTPC data structure types TCPIP_FTPC_ERROR_TYPE FTPC Error Types TCPIP_FTPC_RETURN_TYPE FTPC API return types TCPIP_FTPC_TRANSFER_MODE_TYPE FTPC Transfer Modes TCPIP_FTPC_CTRL_CONN_TYPE FTP Client control connection parameters TCPIP_FTPC_DATA_CONN_TYPE FTP Client data connection parameters TCPIP_FTPC_FILE_OPT_TYPE FTP file handling options TCPIP_FTPC_MODULE_CONFIG_TYPE FTP Client Module Configuration run-time parameters TCPIP_FTPC_STATUS_TYPE FTP Client status information TCPIP_FTPC_CONN_HANDLE_TYPE Defines a handle for FTP Client Connection TCPIP_FTPC_CTRL_EVENT_CALLBACK_TYPE Defines a FTP Client callback for control socket events TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE Defines a FTP Client callback for data socket events ",
							" TCPIP_FTPC_Change_Dir Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_Change_Dir(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle const char * pathname); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to change the working directory to a different one ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pathname pointer to string for new directory path   ",
							" TCPIP_FTPC_ChangeToParentDir Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_ChangeToParentDir(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to switch the root(parent) directory as working directory ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection ",
							" TCPIP_FTPC_CMD Enumeration ",
							" C typedef enum { TCPIP_FTPC_CMD_NONE = 0 TCPIP_FTPC_CMD_CONNECT TCPIP_FTPC_CMD_USER TCPIP_FTPC_CMD_PASS TCPIP_FTPC_CMD_ACCT TCPIP_FTPC_CMD_TYPE TCPIP_FTPC_CMD_STRU TCPIP_FTPC_CMD_MODE TCPIP_FTPC_CMD_PASV TCPIP_FTPC_CMD_PORT TCPIP_FTPC_CMD_GET TCPIP_FTPC_CMD_PUT TCPIP_FTPC_CMD_NLST TCPIP_FTPC_CMD_LIST TCPIP_FTPC_CMD_DELE TCPIP_FTPC_CMD_CWD TCPIP_FTPC_CMD_CDUP TCPIP_FTPC_CMD_MKD TCPIP_FTPC_CMD_RMD TCPIP_FTPC_CMD_PWD } TCPIP_FTPC_CMD; ",
							" Description Enumeration: TCPIP_FTPC_CMD Enumeration list commands supported by FTP Client ",
							" Remarks None ",
							" TCPIP_FTPC_COMMANDS Macro ",
							" C #define TCPIP_FTPC_COMMANDS false ",
							" Description Specify whether FTP Client command in the tcpip_commands is enabled ",
							" TCPIP_FTPC_CONN_HANDLE_TYPE Type ",
							" C typedef const void* TCPIP_FTPC_CONN_HANDLE_TYPE; ",
							" Description Type: TCPIP_FTPC_CONN_HANDLE_TYPE Data type describing a handle that identifies a FTP connection This handle is to be used by all FTP Client APIs A valid handle is = 0 ",
							" Remarks None ",
							" TCPIP_FTPC_Connect Function ",
							" C TCPIP_FTPC_CONN_HANDLE_TYPE TCPIP_FTPC_Connect(TCPIP_FTPC_CTRL_CONN_TYPE * pftpcConn TCPIP_FTPC_CTRL_EVENT_CALLBACK_TYPE ctrlCallback TCPIP_FTPC_RETURN_TYPE* pResult); ",
							" Returns a valid handle ( = 0) - if successfully scheduled opening and connecting a control socket TCPIP_FTPC_RET_FAILURE - if call failed an error code otherwise ",
							" Description This function opens a control socket and establish connection with the specified server port ",
							" Remarks None ",
							" Preconditions FTPC module should have been initialized ",
							" Parameters Parameters Description pftpcConn pointer to a TCPIP_FTPC_CTRL_CONN_TYPE describing the control connectionparameters ctrlCallback callback function during Control Socket Event pResult address to store the operation result ",
							" TCPIP_FTPC_CTRL_CONN_TYPE Structure ",
							" C typedef struct { IP_MULTI_ADDRESS* ftpcServerAddr; IP_ADDRESS_TYPE ftpcServerIpAddrType; uint16_t serverCtrlPort; } TCPIP_FTPC_CTRL_CONN_TYPE; ",
							" Members Members Description IP_MULTI_ADDRESS* ftpcServerAddr; server address; IP_ADDRESS_TYPE ftpcServerIpAddrType; connection type: IPv4/IPv6/ANY uint16_t serverCtrlPort; port number of control socket ",
							" Description Structure: TCPIP_FTPC_CTRL_CONN_TYPE This data structure describes the FTPC control connection parameters ",
							" Remarks None ",
							" TCPIP_FTPC_CTRL_EVENT_CALLBACK_TYPE Type ",
							" C typedef void (* TCPIP_FTPC_CTRL_EVENT_CALLBACK_TYPE)(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_CTRL_EVENT_TYPE ftpcEvent TCPIP_FTPC_CMD cmd char * ctrlbuff uint16_t ctrllen); ",
							" Description Type: TCPIP_FTPC_CTRL_EVENT_CALLBACK_TYPE Data type describing a function that will be called by the FTPC module upon control socket events FTPC will parse and process the FTP client-server control messages anyway but it can optionally pass the information to the user ",
							" Remarks None ",
							" Parameters Parameters Description ftpcHandle handle identifying the connection ftpcEvent the control socket event cmd FTP Command ctrlbuff pointer to control socket data buffer ctrllen receive data length   ",
							" TCPIP_FTPC_CTRL_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_FTPC_CTRL_EVENT_SUCCESS = 1 TCPIP_FTPC_CTRL_EVENT_FAILURE TCPIP_FTPC_CTRL_EVENT_DISCONNECTED TCPIP_FTPC_CTRL_RCV TCPIP_FTPC_CTRL_SEND } TCPIP_FTPC_CTRL_EVENT_TYPE; ",
							" Members Members Description TCPIP_FTPC_CTRL_EVENT_SUCCESS = 1 when command thru Control Socket is successful TCPIP_FTPC_CTRL_EVENT_FAILURE when command thru Control Socket failed TCPIP_FTPC_CTRL_EVENT_DISCONNECTED when control socket is disconnected TCPIP_FTPC_CTRL_RCV when control socket received server response TCPIP_FTPC_CTRL_SEND when command sent thru control socket ",
							" Description Enumeration describing the possible event codes for FTP client control socket ",
							" Remarks None ",
							" TCPIP_FTPC_DATA_CONN_TYPE Structure ",
							" C typedef struct { bool ftpcIsPassiveMode; TCPIP_FTPC_TRANSFER_MODE_TYPE ftpcTransferMode; TCPIP_FTPC_DATA_REP_TYPE ftpcDataType; TCPIP_FTPC_DATA_STRUCT_TYPE ftpcDataStructure; IP_MULTI_ADDRESS dataServerAddr; IP_ADDRESS_TYPE dataServerIpAddrType; uint16_t dataServerPort; uint16_t ftpcDataTxBuffSize; uint16_t ftpcDataRxBuffSize; } TCPIP_FTPC_DATA_CONN_TYPE; ",
							" Members Members Description bool ftpcIsPassiveMode; FTP active/passive mode TCPIP_FTPC_TRANSFER_MODE_TYPE ftpcTransferMode; FTP Client data transfer mode TCPIP_FTPC_DATA_REP_TYPE ftpcDataType; FTP Client data type representation TCPIP_FTPC_DATA_STRUCT_TYPE ftpcDataStructure; FTP Client data structure IP_MULTI_ADDRESS dataServerAddr; Address of Data Server IP_ADDRESS_TYPE dataServerIpAddrType; connection type: IPv4/IPv6/ANY uint16_t dataServerPort; Port Number at Data Server uint16_t ftpcDataTxBuffSize; Data Tx Buff Size; Data Socket Tx Buffer size will be updated uint16_t ftpcDataRxBuffSize; Data Rx Buff Size; Data Socket Rx Buffer size will be updated ",
							" Description Structure: TCPIP_FTPC_DATA_CONN_TYPE This data structure describes the FTPC data connection parameters ",
							" Remarks None ",
							" TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE Type ",
							" C typedef bool (* TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE)(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_EVENT_TYPE ftpcEvent TCPIP_FTPC_CMD cmd char * databuff uint16_t * datalen); ",
							" Returns Return 'true' when callback function does the processing of Rx and Tx Data; no need to save data on file system Return 'false' when callback function does not process Rx and Tx Data; should save data on file system ",
							" Description Type: TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE Data type describing a function that will be called by the FTPC module upon data socket events FTPC will parse and process the FTP client-server data messages anyway but it can optionally pass the information to the user ",
							" Remarks When FTP Client receives data (for GET NLST LIST commands) \"databuff\" is the address of buffer where received data is stored The\"datalen\" is the number of bytes received When FTP Client transmits data (for PUT commands) \"databuff\" is the address where data to be copied for transmission The \"datalen\" is the number of bytes to be transmitted by FTP Client ",
							" Parameters Parameters Description ftpcEvent the data socket event cmd FTP Command databuff pointer to Data socket data buffer datalen pointer to receive data length   ",
							" TCPIP_FTPC_DATA_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_FTPC_DATA_RCV TCPIP_FTPC_DATA_RCV_DONE TCPIP_FTPC_DATA_SEND_READY TCPIP_FTPC_DATA_SEND_DONE } TCPIP_FTPC_DATA_EVENT_TYPE; ",
							" Members Members Description TCPIP_FTPC_DATA_RCV when data received on Data Socket TCPIP_FTPC_DATA_RCV_DONE when data receive complete TCPIP_FTPC_DATA_SEND_READY when Data Socket is ready to transmit data TCPIP_FTPC_DATA_SEND_DONE when data transmission complete ",
							" Description Enumeration: TCPIP_FTPC_DATA_EVENT_TYPE Enumeration describing the possible event codes for FTP client data socket ",
							" Remarks None ",
							" TCPIP_FTPC_DATA_REP_TYPE Enumeration ",
							" C typedef enum { TCPIP_FTPC_DATA_REP_ASCII TCPIP_FTPC_DATA_REP_EBCDIC TCPIP_FTPC_DATA_REP_IMAGE TCPIP_FTPC_DATA_REP_UNSUPPORTED } TCPIP_FTPC_DATA_REP_TYPE; ",
							" Description Enumeration: TCPIP_FTPC_DATA_REP_TYPE Enumeration describing the different Data Representations in FTP protocol ",
							" Remarks None ",
							" TCPIP_FTPC_DATA_SKT_RX_BUFF_SIZE_DFLT Macro ",
							" C #define TCPIP_FTPC_DATA_SKT_RX_BUFF_SIZE_DFLT (0) ",
							" Description Specify the Default Receive Buffer Size for the FTP Client Data Socket if 0 the TCP Socket Receive buffer size will be used by FTPC data socket ",
							" TCPIP_FTPC_DATA_SKT_TX_BUFF_SIZE_DFLT Macro ",
							" C #define TCPIP_FTPC_DATA_SKT_TX_BUFF_SIZE_DFLT (0) ",
							" Description Specify the Default Transmit Buffer Size for the FTP Client Data Socket if 0 the TCP Socket Transmit buffer size will be used by FTPC data socket ",
							" TCPIP_FTPC_DATA_STRUCT_TYPE Enumeration ",
							" C typedef enum { TCPIP_FTPC_STRUCT_FILE = 1 TCPIP_FTPC_STRUCT_RECORD TCPIP_FTPC_STRUCT_PAGE TCPIP_FTPC_STRUCT_UNSUPPORTED } TCPIP_FTPC_DATA_STRUCT_TYPE; ",
							" Description Enumeration: TCPIP_FTPC_DATA_STRUCT_TYPE Enumeration describing the different Data structure in FTP protocol ",
							" Remarks None ",
							" TCPIP_FTPC_DeleteFile Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_DeleteFile(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle const char * pathname); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to delete a file in FTP server ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pathname pointer to file path name to be removed   ",
							" TCPIP_FTPC_Disconnect Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_Disconnect(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully disconnected control socket TCPIP_FTPC_RET_BUSY - could not execute the function due to busy state TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function closes a control socket connection with server port ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized and connected using TCPIP_FTPC_Connect() ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection ",
							" TCPIP_FTPC_ERROR_TYPE Enumeration ",
							" C C typedef enum { TCPIP_FTPC_ERROR_NONE TCPIP_FTPC_ERROR_CTRL_RESPONSE TCPIP_FTPC_ERROR_TIMEOUT TCPIP_FTPC_ERROR_FILE_OPEN TCPIP_FTPC_ERROR_FILE_ACCESS TCPIP_FTPC_ERROR_FILE_WRITE TCPIP_FTPC_ERROR_OPEN_CTRL_SOCKET TCPIP_FTPC_ERROR_BIND_CTRL_SOCKET TCPIP_FTPC_ERROR_CONNECT_CTRL_SOCKET TCPIP_FTPC_ERROR_OPEN_DATA_SOCKET TCPIP_FTPC_ERROR_BIND_DATA_SOCKET TCPIP_FTPC_ERROR_CONNECT_DATA_SOCKET } TCPIP_FTPC_ERROR_TYPE; ",
							" Description Enumeration: TCPIP_FTPC_ERROR_TYPE Enumeration describing the different errors reported by FTP Client ",
							" Remarks None ",
							" TCPIP_FTPC_FILE_OPT_TYPE Structure ",
							" C typedef struct { const char * serverPathName; const char * clientPathName; bool store_unique; } TCPIP_FTPC_FILE_OPT_TYPE; ",
							" Members Members Description const char * serverPathName; pathname/filename to read/write at FTP Server const char * clientPathName; pathname/filename to read/write at FTP Client bool store_unique; to store file at server with unique name; STOU command ",
							" Description Structure: TCPIP_FTPC_FILE_OPT_TYPE This data structure describes the FTPC file handling parameters ",
							" Remarks None ",
							" TCPIP_FTPC_Get_Status Function ",
							" C void TCPIP_FTPC_Get_Status(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_STATUS_TYPE * ftpcStatus); ",
							" Returns None ",
							" Description This function returns the current state of FTP Client ",
							" Remarks None ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection ftpcStatus pointer to FTP Client status information for returning the status   ",
							" TCPIP_FTPC_Get_WorkingDir Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_Get_WorkingDir(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to get the name of working directory ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection ",
							" TCPIP_FTPC_GetFile Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_GetFile(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_CONN_TYPE * pftpcDataConn TCPIP_FTPC_FILE_OPT_TYPE * pfileOptions TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE dataCallback); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to get a file from FTP server ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pftpcDataConn pointer to data connection parameters pfileOptions pointer to file options dataCallback callback function during Data Socket Event   ",
							" TCPIP_FTPC_List Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_List(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_CONN_TYPE * pftpcDataConn TCPIP_FTPC_FILE_OPT_TYPE * pfileOptions TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE dataCallback); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to get the list of files in a directory ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pftpcDataConn pointer to data connection parameters pfileOptions pointer to file options dataCallback callback function during Data Socket Event   ",
							" TCPIP_FTPC_Login Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_Login(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle const char * username const char * password const char * account); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled login process TCPIP_FTPC_RET_BUSY - could not schedule login process as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function starts the Login process for FTP Client ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized and connected ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection username username for FTP server password password for FTP server account account for FTP server   ",
							" TCPIP_FTPC_Logout Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_Logout(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to logout from the server This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection ",
							" TCPIP_FTPC_MakeDir Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_MakeDir(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle const char * dirname); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to create a new directory inside current working directory ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection dirname pointer to string for directory name   ",
							" TCPIP_FTPC_MAX_NUM_CLIENT Macro ",
							" C #define TCPIP_FTPC_MAX_NUM_CLIENT (3) ",
							" Description Specify the maximum number of supported simultaneous FTP client connections ",
							" TCPIP_FTPC_MODULE_CONFIG_TYPE Structure ",
							" C typedef struct { int nMaxClients; uint32_t ftpcTmo; uint16_t data_tx_buffsize_dflt; uint16_t data_rx_buffsize_dflt; } TCPIP_FTPC_MODULE_CONFIG_TYPE; ",
							" Members Members Description int nMaxClients; maximum number of simultaneous Client supported This is for multi-client support uint32_t ftpcTmo; timeout for reply on FTP Control and Data Connections in seconds; hould be adjusted according to the server responsivity uint16_t data_tx_buffsize_dflt; Data Socket Transmit Buffer default size uint16_t data_rx_buffsize_dflt; Data Socket Receive Buffer default size ",
							" Description Structure: TCPIP_FTPC_MODULE_CONFIG_TYPE This data structure describes the FTPC configuration data It is presented to the module as part of the module initialization None ",
							" TCPIP_FTPC_NameList Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_NameList(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_CONN_TYPE * pftpcDataConn TCPIP_FTPC_FILE_OPT_TYPE * pfileOptions TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE dataCallback); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to get the name list of files in a directory ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pftpcDataConn pointer to data connection parameters pfileOptions pointer to file options dataCallback callback function during Data Socket Event   ",
							" TCPIP_FTPC_PutFile Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_PutFile(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_CONN_TYPE * pftpcDataConn TCPIP_FTPC_FILE_OPT_TYPE * pfileOptions TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE dataCallback); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to put a file to FTP server ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description pftpcDataConn pointer to data connection parameters pfileOptions pointer to file options dataCallback callback function during Data Socket Event   TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_PutFile(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_CONN_TYPE *pftpcDataConn TCPIP_FTPC_FILE_OPT_TYPE *pfileOptions TCPIP_FTPC_DATA_EVENT_CALLBACK_TYPE dataCallback);   ",
							" TCPIP_FTPC_RemoveDir Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_RemoveDir(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle const char * pathname); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to remove a directory at FTP server ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pathname pointer to directory name to be removed   ",
							" TCPIP_FTPC_RETURN_TYPE Enumeration ",
							" C C typedef enum { TCPIP_FTPC_RET_OK = 0 TCPIP_FTPC_RET_BUSY = 1 TCPIP_FTPC_RET_FAILURE = -1 TCPIP_FTPC_RET_NOT_CONNECT = -2 TCPIP_FTPC_RET_NOT_LOGIN = -3 } TCPIP_FTPC_RETURN_TYPE; ",
							" Description Enumeration: TCPIP_FTPC_RETURN_TYPE Enumeration describing the different return types for external FTPC APIs ",
							" Remarks None ",
							" TCPIP_FTPC_SetActiveMode Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_SetActiveMode(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_CONN_TYPE * pftpcDataConn); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to set active mode for data connection ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection pftpcDataConn pointer to data connection parameters   ",
							" TCPIP_FTPC_SetMode Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_SetMode(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_TRANSFER_MODE_TYPE mode); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to set the Transfer Mode ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection mode File Structure to be set ",
							" TCPIP_FTPC_SetPassiveMode Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_SetPassiveMode(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to set passive mode for data connection ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection ",
							" TCPIP_FTPC_SetStruct Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_SetStruct(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_STRUCT_TYPE file_struct); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to set the file structure This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection file_struct File Structure to be set   ",
							" TCPIP_FTPC_SetType Function ",
							" C TCPIP_FTPC_RETURN_TYPE TCPIP_FTPC_SetType(TCPIP_FTPC_CONN_HANDLE_TYPE ftpcHandle TCPIP_FTPC_DATA_REP_TYPE type); ",
							" Returns TCPIP_FTPC_RET_OK - if successfully scheduled function TCPIP_FTPC_RET_BUSY - could not schedule function as FTP Client is busy TCPIP_FTPC_RET_NOT_CONNECT - Not connected to FTP server TCPIP_FTPC_RET_NOT_LOGIN -Connected but not Logged in ",
							" Description This function schedules the process to set the type of data representation ",
							" Remarks This function will execute after the completion of previous FTPC function; otherwise it will return TCPIP_FTPC_RET_BUSY ",
							" Preconditions FTPC module should have been initialized connected and logged-in ",
							" Parameters Parameters Description ftpcHandle handle identifying the control connection type Data representation type to be set   ",
							" TCPIP_FTPC_STATUS_TYPE Structure ",
							" C C typedef struct { NET_PRES_SKT_HANDLE_T ctrlSocket; NET_PRES_SKT_HANDLE_T dataSocket; TCPIP_FTPC_CMD cmd; TCPIP_FTPC_ERROR_TYPE error; uint32_t dataRxLen; uint32_t dataTxLen; uint16_t ctrlRxLen; uint16_t ctrlTxLen; bool busy; bool isConnected; bool isLoggedIn; } TCPIP_FTPC_STATUS_TYPE; ",
							" Members Members Description NET_PRES_SKT_HANDLE_T ctrlSocket; control socket NET_PRES_SKT_HANDLE_T dataSocket; data socket TCPIP_FTPC_CMD cmd; currently executing or completed command TCPIP_FTPC_ERROR_TYPE error; last reported error if any uint32_t dataRxLen; Data Socket receive length uint32_t dataTxLen; Data Socket transmit length uint16_t ctrlRxLen; Control Socket receive length uint16_t ctrlTxLen; Control Socket transmit length bool busy; client busy/ready bool isConnected; client control socket connected to server bool isLoggedIn; client logged in to server ",
							" Description Structure: TCPIP_FTPC_STATUS_TYPE This data structure describes the details of FTPC errors ",
							" Remarks None ",
							" TCPIP_FTPC_Task Function ",
							" C void TCPIP_FTPC_Task(); ",
							" Returns None ",
							" Description this function performs FTPC module tasks in the TCP/IP stack ",
							" Remarks None ",
							" Preconditions FTPC module should have been initialized ",
							" TCPIP_FTPC_TASK_TICK_RATE Macro ",
							" C #define TCPIP_FTPC_TASK_TICK_RATE (5) ",
							" Description The FTP Client task rate in milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ",
							" TCPIP_FTPC_TMO Macro ",
							" C #define TCPIP_FTPC_TMO (2) ",
							" Description Specify the time-out for FTP Client commands in seconds This is the time to wait for a response from FTP server ",
							" TCPIP_FTPC_TRANSFER_MODE_TYPE Enumeration ",
							" C typedef enum { TCPIP_FTPC_TRANS_STREAM_MODE = 1 TCPIP_FTPC_TRANS_BLOCK_MODE TCPIP_FTPC_TRANS_COMPRESS_MODE TCPIP_FTPC_TRANS_UNSUPPORTED } TCPIP_FTPC_TRANSFER_MODE_TYPE; ",
							" Description Enumeration: TCPIP_FTPC_TRANSFER_MODE_TYPE Enumeration describing the different Transfer modes for FTP protocol ",
							" Remarks None ",
							" FTP Server Module An embedded File Transfer Protocol (FTP) server is an excellent addition to any network-enabled device FTP server capability facilitates the uploading of files to and downloading of files from an embedded device Almost all computers have at the very least a command line FTP client that will allow a user to_connect_to an embedded FTP server Library Interface Name Description Macros  TCPIP_FTP_PASSWD_LEN Specifies the max length of FTP login password TCPIP_FTP_USER_NAME_LEN Specifies the max length for user name TCPIP_FTP_DATA_SKT_RX_BUFF_SIZE Define the size of the RX buffer for the FTP Data socket Use 0 for default TCP RX buffer size The default recommended value for high throughput is 2MSS (3 KB) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput TCPIP_FTP_DATA_SKT_TX_BUFF_SIZE Define the size of the TX buffer for the FTP Data socket Use 0 for default TCP TX buffer size The default recommended value for high throughput is 2MSS (3 KB) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput TCPIP_FTP_MAX_CONNECTIONS Maximum number of FTP connections allowed TCPIP_FTP_PUT_ENABLED Comment this line out to disable MPFS TCPIP_FTP_TIMEOUT FTP timeout seconds General Functions  TCPIP_FTP_ServerTask Standard TCP/IP stack module task function Data Types and Constants  TCPIP_FTP_MODULE_CONFIG FTP Sever module runtime and initialization configuration data TCPIP_FTPS_TASK_TICK_RATE The FTP server task rate milliseconds The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the FTP server priority and higher transfer rates could be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ",
							" TCPIP_FTP_MODULE_CONFIG Structure ",
							" C typedef struct { uint16_t cmdPort; uint16_t dataPort; uint16_t nConnections; uint16_t dataSktTxBuffSize; uint16_t dataSktRxBuffSize; const char* mountPath; char * userName; char * password; } TCPIP_FTP_MODULE_CONFIG; ",
							" Description Structure: TCPIP_FTP_MODULE_CONFIG FTP server configuration and initialization data Configuration is part of tcpip_stack_init c ",
							" Members Members Description cmdPort FTP listening command port: TCPIP_FTP_COMMAND_PORT (21 990 etc ) dataPort FTP listening data port: TCPIP_FTP_DATA_PORT (20 989) etc nConnections Number of simultaneous FTP connections allowed dataSkTxBuffSize Size of data socket TX buffer for the associated socket Leave 0 for default dataSktRxBuffSize Size of data socket RX buffer for the associated socket Leave 0 for default The FTP server will access files located under this top directory No access is possible above this directory As a good practive to follow use something like: \"/mnt_point/ftp/\" to limit an external user access to this only directory in the file system when accessing files userName FTP login user name Size should not exceed more than TCPIP_FTP_USER_NAME_LEN password FTP login password Size should not exceed more than TCPIP_FTP_PASSWD_LEN ",
							" Remarks The obsolete authentication members will be eventually removed from the FTP server module configuration data New projects should use the run time authentication ",
							" TCPIP_FTP_ServerTask Function ",
							" C void TCPIP_FTP_ServerTask(); ",
							" Description This function performs FTP module tasks in the TCP/IP stack ",
							" Preconditions The FTP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_FTPS_TASK_TICK_RATE Macro ",
							" C #define TCPIP_FTPS_TASK_TICK_RATE 33 ",
							" Description The FTP server task rate in milliseconds The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the FTP server priority and higher transfer rates could be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ",
							" HTTP Module The HTTP Web Server module allows a development board to act as a Web server This facilitates an easy method to view status information and control applications using any standard Web browser Note: The HTTP module is deprecated and it is maintained for backward compatibility only It will be eventually removed from the TCP/IP Stack New designs should use the HTTP_NET module Abstraction Model Three main components are necessary to understand how the HTTP web server works: the web pages the MPFS2 Utility and the source files custom_http_app c and http_print h An overview of the entire process is shown in the following diagram TCPIP HTTP http_abstraction Web Pages This includes all the HTML and associated images CSS style sheets and JavaScript files necessary to display the website A sample application including all these components is located in the web_pages folder MPFS2 Utility This program supplied by Microchip packages the web pages into a format that can be efficiently stored in either external non-volatile storage or internal Flash program memory This program also indexes dynamic variables found in the web pages and updates http_print h with these indices The MPFS2 Utility generates a SYS_FS compatible file image that can be directly uploaded on the development board or stored in the Flash program memory as a source file image to be included in the project When dynamic variables are added or removed from your application the MPFS2 Utility will update http_print h When this happens the project must be recompiled in the MPLAB X IDE to ensure that all the new variable indices get added into the application custom_http_app c This file implements the Web application It describes the output for dynamic variables (via TCPIP_HTTP_Print_varname callbacks) parses data submitted through forms (in TCPIP_HTTP_GetExecute and TCPIP_HTTP_PostExecutePost) and validates authorization credentials (in TCPIP_HTTP_FileAuthenticate and TCPIP_HTTP_UserAuthenticate) The functionality of these callback functions is described within the demonstration application's web pages and is also documented within the custom_http_app c example that is distributed with the stack http_print h This file is generated automatically by the MPFS2 Utility It indexes all of the dynamic variables and provides the \"glue\" between the variables located in the Web pages and their associated TCPIP_HTTP_Print_varname callback functions defined in custom_http_app c This file does not require modification by the programmer HTTP Features Dynamic Variables Basic Use To create a dynamic variable simply enclose the name of the variable inside a pair of tilde (~) characters within the web pages' HTML source code (ex: ~myVariable~) When you run the MPFS2 Utility to generate the web pages it will automatically index these variables in http_print h This index will instruct your application to invoke the function TCPIP_HTTP_Print_myVariable when this string is encountered Here is an example of using a dynamic variable to insert the build date of your application into the web pages: div class=\"examplebox code\" ~builddate~ /div The associated callback will print the value into the web page: void TCPIP_HTTP_Print_builddate(HTTP_CONN_HANDLE connHandle) { TCP_SOCKET sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); TCPIP_TCP_StringPut(sktHTTP (const void*)__DATE__\" \"__TIME__); } Passing Parameters You can also pass parameters to dynamic variables by placing numeric values inside of parenthesis after the variable name For example ~led(2)~ will print the value of the second LED The numeric values are passed as 16 bit values to your callback function You can pass as many parameters as you wish to these functions and if your C code has constants defined those will be parsed as well (ex: ~pair(3 TRUE)~) The following code inserts the value of the push buttons into the web page all using the same callback function: div class=\"examplebox code\" btn(3)~ btn(2)~ btn(1)~ btn(0)~ /div This associated callback will print the value of the requested button to the web page: void TCPIP_HTTP_Print_btn(HTTP_CONN_HANDLE connHandle uint16_t num) { // Determine which button switch(num) { case 0: num = BUTTON0_IO; break; case 1: num = BUTTON1_IO; break; case 2: num = BUTTON2_IO; break; default: num = 0; } // Print the output TCPIP_TCP_StringPut(TCPIP_HTTP_CurrentConnectionSocketGet(connHandle) (num \"up\" : \"down\")); } Longer Outputs The HTTP protocol operates in a fixed memory buffer for transmission so not all data can be sent at once Care must be taken inside of your callback function to avoid overrunning this buffer The callback functions must check how much space is available write up to that many bytes and then return The callback will be invoked again when more space is free Note: For increased throughput performance it is recommended that the callback should always try to write as much data as possible in each call To manage the output state callbacks should make use of the callbackPos variable that is maintained by the Web server for each individual connection This 32-bit value can be manipulated with the TCPIP_HTTP_CurrentConnectionCallbackPosGet and TCPIP_HTTP_CurrentConnectionCallbackPosSet functions The callbackPos is set to zero when a callback is first invoked If a callback is only writing part of its output it should set this field to a non-zero value to indicate that it should be called again when more space is available This value will be available to the callback during the next call which allows the function to resume output where it left off A common use is to store the number of bytes written or remaining to be written in this field Once the callback is finished writing its output it must set callbackPos back to zero to indicate completion The following code outputs the value of the build date of the application into the web pages: div class=\"examplebox code\" ~builddate~ /div void TCPIP_HTTP_Print_builddate(HTTP_CONN_HANDLE connHandle) { TCP_SOCKET sktHTTP; sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); TCPIP_HTTP_CurrentConnectionCallbackPosSet(connHandle 0x01); if(TCPIP_TCP_PutIsReady(sktHTTP) strlen((const char*)__DATE__\" \"__TIME__)) return; TCPIP_HTTP_CurrentConnectionCallbackPosSet(connHandle 0x00); TCPIP_TCP_StringPut(sktHTTP (const void*)__DATE__\" \"__TIME__); } The initial call to TCPIP_TCP_PutIsReady determines how many bytes can be written to the buffer right now When there is not enough buffer space for performing the output operation the function sets the current value of the callbackPos and returns Once the output operation is performed the callbackPos is cleared to '0' Including Files Often it is useful to include the entire contents of another file in your output Most web pages have at least some portion that does not change such as the header menu of links and footer These sections can be abstracted out into separate files which makes them easier to manage and conserves storage space To include the entire contents of another file use a dynamic variable that starts with \"inc:\" such as ~inc:header inc~ This sequence will cause the file header inc to be read from the file system and inserted at this location The following example indicates how to include a standard menu bar section into every page: div id=\"menu\" ~inc:menu inc~ /div At this time dynamic variables are not recursive so any variables located inside files included in this manner are not parsed Form Processing The GET Method The GET method appends the data to the end of the URI This data follows the question mark ( ) in the browser's address bar (ex: http://mchpboard/form htm led1=0 led2=1 led3=0) Data sent via GET is automatically decoded and stored in the current connection data buffer Since it is to be stored in memory this data is limited to the size of the connection data buffer which by default is 100 bytes (configurable by HTTP_MAX_DATA_LEN build time symbol or by the run time data passed at the HTTP module initialization) It is generally easier to process data received in this manner The callback function TCPIP_HTTP_GetExecute is implemented by the application developer to process this data and perform any necessary actions The function TCPIP_HTTP_ArgGet provides an easy method to retrieve submitted values for processing See the custom _http_app c for an example of TCPIP_HTTP_GetExecute implementation The POST Method The POST method transmits data after all the request headers have been sent This data is not visible in the browser's address bar and can only be seen with a packet capture tool It does however use the same URL encoding method The HTTP server does not perform any preparsing of this data All POST data is left in the TCP buffer so the custom application will need to access the TCP buffer directly to retrieve and decode it The functions TCPIP_HTTP_PostNameRead and TCPIP_HTTP_PostValueRead have been provided to assist with these requirements However these functions can only be used when at least entire variables are expected to fit in the TCP buffer at once Most POST processing functions will be implemented as state machines to use these functions There is a status variable per each connection that stores the current state accessible with TCPIP_HTTP_CurrentConnectionPostSmGet and TCPIP_HTTP_CurrentConnectionPostSmSet functions This state machine variable is reset to zero with each new request Functions should generally implement a state to read a variable name and another to read an expected value Additional states may be helpful depending on the application The following example form accepts an e-mail address a subject and a message body Since this data will likely total over the size of the internal connection data buffer it should be submitted via POST form method=\"post\" action=\"/email htm\" To: input type=\"text\" name=\"to\" maxlength=\"50\" / br / Subject: input type=\"text\" name=\"subject\" maxlength=\"50\" / br / Message: br / textarea name=\"msg\" rows=\"6\" /textarea br / input type=\"submit\" value=\"Send Message\" / /div /form Suppose a user enters the following data into this form: To: joe@picsaregood com Subject: Sent by a PIC Message: I sent this message using my development board The TCPIP_HTTP_PostExecute function will be called with the following data still in the TCP buffer: to=joe%40picsaregood com subject=Sent+by+a+PIC msg=I+sent+this+message+using+my+development+board%21 To use the e-mail module the application needs to read in the address and the subject store those in RAM and then send the message However since the message is not guaranteed to fit in RAM all at once it must be read as space is available and passed to the e-mail module A state machine coupled with the TCPIP_HTTP_PostNameRead and TCPIP_HTTP_PostValueRead functions can simplify this greatly See the TCPIP_HTTP_PostExecute and HTTPPostEmail functions in the supplied custom_http_app c for a complete implementation of this example Authentication Authentication functionality is supported by two user-provided callback functions The first TCPIP_HTTP_FileAuthenticate determines if the requested page requires valid credentials to proceed The second TCPIP_HTTP_UserAuthenticate checks the user name and password against an accepted list and determines whether to grant or deny access The connection stores the current authorization setting which can be manipulated by using the TCPIP_HTTP_CurrentConnectionIsAuthorizedGet and TCPIP_HTTP_CurrentConnectionIsAuthorizedSet functions Note: The HTTP authentication is NOT secure The passwords are sent in clear over the network For a secure approach the HTTP_NET module with TLS enabled should be used Requiring Authentication When a request is first made the function TCPIP_HTTP_FileAuthenticate is called to determine if that page needs password protection This function returns a value to instruct the HTTP server how to proceed The most significant bit indicates whether or not access is granted That is values 0x80 and higher allow access unconditionally while values 0x79 and lower will require a user name and password at a later point The value returned is stored in the connection data so that it can be accessed by future callback functions The following example is the simplest case in which all files require a password for access: uint8_t TCPIP_HTTP_FileAuthenticate(HTTP_CONN_HANDLE connHandle uint8_t* cFile) { return 0; } In some cases only certain files will need to be protected The second example requires a password for any file located in the /treasure folder: uint8_t TCPIP_HTTP_FileAuthenticate(HTTP_CONN_HANDLE connHandle uint8_t* cFile) { // Compare to \"/treasure\" folder Don't use strcmp here because // cFile has additional path info such as \"/treasure/gold htm\" if(memcmp(cFile (const void*)\"treasure\" 8) == 0) { // Authentication will be needed later return 0; } // No authentication required return 0x80; } More complex uses could require an administrative user to access the /admin folder while any authenticated user can access the rest of the site This requires the TCPIP_HTTP_FileAuthenticate to return different authentication values for a different file Validating Credentials The TCPIP_HTTP_UserAuthenticate function determines if the supplied user name and password are valid to access the specific resource Again the most significant bit indicates whether or not access is granted The value returned is also stored in the connection internal data and it can be accessed by future callback functions The following example is the simplest case in which one user/password pair is accepted for all pages: uint8_t TCPIP_HTTP_UserAuthenticate(HTTP_CONN_HANDLE connHandle uint8_t* cUser uint8_t* cPass) { if( strcmp((char*)cUser (const char*)\"AliBaba\") strcmp((char*)cPass (const char*)\"Open Sesame \") ) { return 0x80; } return 0; } More complex uses are certainly feasible Many applications may choose to store the user names and passwords in protected files so that they may be updated by a privileged user In some cases you may have multiple users with various levels of access The application may wish to return various values above 0x80 in TCPIP_HTTP_UserAuthenticate so that later callback functions can determine which user logged in Cookies Cookies were added to the protocol description to solve this problem This feature allows a web server to store small bits of text in a user's browser These values will be returned to the server with every request allowing the server to associate session variables with a request Cookies are typically used for more advanced authentication systems Best practice is generally to store the bulk of the data on the server and store only a unique identifier with the browser This cuts down on data overhead and ensures that the user cannot modify the values stored with the session However logic must be implemented in the server to expire old sessions and allocate memory for new ones If sensitive data is being stored it is also important that the identifier be random enough so as to prevent stealing or spoofing another user's cookies Retrieving Cookies In the HTTP server cookies are retrieved automatically They are stored in the connection internal data buffer just as any other GET form argument or URL parameter would be The proper place to parse these values is therefore in the TCPIP_HTTP_GetExecute callback using the TCPIP_HTTP_ArgGet This model consumes some of the limited space available for URL parameters Ensure that cookies do not consume more space than is available (as defined by HTTP_MAX_DATA_LEN) and that they will fit after any data that may be submitted via a GET form If enough space is not available the cookies will be truncated Setting Cookies Cookies can be set in TCPIP_HTTP_GetExecute or TCPIP_HTTP_PostExecute To set a cookie store the name/value pairs in the connection internal buffer data as a series of null-terminated strings Then call TCPIP_HTTP_CurrentConnectionHasArgsSet with a parameter equal to the number of name/value pairs to be set For example the following code sets a cookie indicating a user's preference for a type of cookie: void TCPIP_HTTP_GetExecute(void) { // Set a cookie uint8_t* connData = TCPIP_HTTP_CurrentConnectionDataBufferGet(connHandle); uint16_t httpBuffSize = TCPIP_HTTP_CurrentConnectionDataBufferSizeGet(connHandle); if(strlen(“flavor”) + strlen(“oatmeal raisin) + 2 = httpBuffSize) { strcpy((char*)connData \"flavor\"); strcpy((char*)connData + strlen(\"flavor\") + 1 \"oatmeal raisin\"); TCPIP_HTTP_CurrentConnectionHasArgsSet(connHandle 1); } } After this all future requests from this browser will include the parameter \"flavor\" in the connection data along with the associated value of \"oatmeal raisin\" Compression The MPFS2 Utility will automatically determine which files can benefit from GZIP compression and will store the compressed file in the MPFS2 image when possible This generally includes all JavaScript and CSS files (Images are typically already compressed so the MPFS2 Utility will generally decide it is better to store them uncompressed ) This HTTP server will then seamlessly return this compressed file to the browser Less non-volatile storage space will be required for storing the pages image and faster transfers back to the client will result No special configuration is required for this feature To prevent certain extensions from being compressed use the Advanced Settings dialog in the MPFS2 Utility Library Interface Name Description Macros  TCPIP_STACK_USE_BASE64_DECODE Authentication requires Base64 decoding Enable basic authentication support HTTP_CONFIG_H This is macro HTTP_CONFIG_H  TCPIP_HTTP_CACHE_LEN Max lifetime (sec) of static responses as string TCPIP_HTTP_CONFIG_FLAGS Define the HTTP module configuration flags Use 0 for default See HTTP_MODULE_FLAGS definition for possible values TCPIP_HTTP_DEFAULT_FILE Indicate what HTTP file to serve when no specific one is requested TCPIP_HTTP_DEFAULT_LEN For buffer overrun protection Set to longest length of above two strings TCPIP_HTTP_FILE_UPLOAD_ENABLE Configure MPFS over HTTP updating Comment this line to disable updating via HTTP TCPIP_HTTP_FILE_UPLOAD_NAME This is macro TCPIP_HTTP_FILE_UPLOAD_NAME TCPIP_HTTP_MAX_CONNECTIONS Maximum numbers of simultaneous supported HTTP connections TCPIP_HTTP_MAX_DATA_LEN Define the maximum data length for reading cookie and GET/POST arguments (bytes) TCPIP_HTTP_MAX_HEADER_LEN Set to length of longest string above TCPIP_HTTP_MIN_CALLBACK_FREE Define the minimum number of bytes free in the TX FIFO before executing callbacks TCPIP_HTTP_NO_AUTH_WITHOUT_SSL Uncomment to require secure connection before requesting a password TCPIP_HTTP_SKT_RX_BUFF_SIZE Define the size of the RX buffer for the HTTP socket Use 0 for default TCP socket value The default recommended value for high throughput is 2MSS (3 KB) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput TCPIP_HTTP_SKT_TX_BUFF_SIZE Define the size of the TX buffer for the HTTP socket Use 0 for default TCP socket value The default recommended value for high throughput is 2MSS (3 KB) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput TCPIP_HTTP_TASK_RATE The HTTP task rate ms The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_HTTP_TIMEOUT Max time (sec) to await more data before timing out and disconnecting the socket TCPIP_HTTP_USE_AUTHENTICATION Enable basic authentication support TCPIP_HTTP_USE_COOKIES Enable cookie support TCPIP_HTTP_USE_POST Define which HTTP modules to use If not using a specific module comment it to save resources Enable POST support TCPIP_HTTP_FREE_FUNC HTTP corresponding deallocation function free style This is the function the HTTP will call for freeing the allocated memory Use standard C library 'free' or 0 as a default If it's 0 HTTP will use the allocation functions passed in at the stack initialization TCPIP_HTTP_MALLOC_FUNC HTTP allocation function malloc style This is the function the HTTP will call to allocate memory needed for file uploads Use standard C library 'malloc' or 0 as a default If it's 0 HTTP will use the allocation functions passed in at the stack initialization Functions  TCPIP_HTTP_ArgGet Locates a form field value in a given data array TCPIP_HTTP_FileInclude Writes a file byte-for-byte to the currently loaded TCP socket TCPIP_HTTP_PostNameRead Reads a name from a URL encoded string in the TCP buffer TCPIP_HTTP_PostValueRead Reads a value from a URL encoded string in the TCP buffer TCPIP_HTTP_URLDecode Parses a string from URL encoding to plain-text TCPIP_HTTP_CurrentConnectionByteCountDec Decrements the connection byte count TCPIP_HTTP_CurrentConnectionByteCountGet Returns how many bytes are available to be read TCPIP_HTTP_CurrentConnectionByteCountSet Sets how many bytes are available to be read TCPIP_HTTP_CurrentConnectionCallbackPosGet Returns the callback position indicator TCPIP_HTTP_CurrentConnectionCallbackPosSet Sets the callback position indicator TCPIP_HTTP_CurrentConnectionDataBufferGet Returns pointer to connection general purpose data buffer TCPIP_HTTP_CurrentConnectionFileGet Get handle to current connection's file TCPIP_HTTP_CurrentConnectionPostSmGet Get the POST state machine state TCPIP_HTTP_CurrentConnectionSocketGet Get the socket for the current connection TCPIP_HTTP_CurrentConnectionStatusSet Sets HTTP status TCPIP_HTTP_CurrentConnectionIsAuthorizedGet Gets the authorized state for the current connection TCPIP_HTTP_CurrentConnectionIsAuthorizedSet Sets the authorized state for the current connection TCPIP_HTTP_CurrentConnectionUserDataGet Gets the user data parameter for the current connection TCPIP_HTTP_CurrentConnectionUserDataSet Sets the user data parameter for the current connection TCPIP_HTTP_CurrentConnectionHasArgsGet Checks whether there are get or cookie arguments TCPIP_HTTP_CurrentConnectionPostSmSet Set the POST state machine state TCPIP_HTTP_CurrentConnectionStatusGet Gets HTTP status TCPIP_HTTP_FileAuthenticate Determines if a given file name requires authentication TCPIP_HTTP_GetExecute Processes GET form field variables and cookies TCPIP_HTTP_PostExecute Processes POST form variables and data TCPIP_HTTP_Print_varname Inserts dynamic content into a web page TCPIP_HTTP_UserAuthenticate Performs validation on a specific user name and password TCPIP_HTTP_ActiveConnectionCountGet Gets the number of active connections TCPIP_HTTP_CurrentConnectionHandleGet Gets the connection handle of a HTTP connection TCPIP_HTTP_CurrentConnectionIndexGet Gets the index of the HTTP connection TCPIP_HTTP_Task Standard TCP/IP stack module task function TCPIP_HTTP_CurrentConnectionDataBufferSizeGet Returns the size of the connection general purpose data buffer TCPIP_HTTP_CurrentConnectionSMSet Set the HTTP current connection state Machine TCPIP_HTTP_CurrentConnectionUploadBufferCurrGet Gets the current address of current connection upload buffer TCPIP_HTTP_CurrentConnectionUploadBufferCurrSet Set the current address of current connection upload buffer TCPIP_HTTP_CurrentConnectionUploadBufferEndGet Gets the end address of current connection upload buffer TCPIP_HTTP_CurrentConnectionUploadBufferEndSet Set the end address of current connection upload buffer TCPIP_HTTP_CurrentConnectionUploadBufferStartGet Gets the start address of current connection upload buffer TCPIP_HTTP_CurrentConnectionUploadBufferStartSet Set the start address of current connection upload buffer Data Types and ConstantsEnumerations  HTTP_MODULE_FLAGS HTTP module configuration flags Multiple flags can be OR-ed HTTP_IO_RESULT Result states for execution callbacks HTTP_FILE_TYPE File type definitions HTTP_READ_STATUS Result states for TCPIP_HTTP_PostNameRead TCPIP_HTTP_PostValueRead and TCPIP_HTTP_PostReadPair HTTP_STATUS Supported Commands and Server Response Codes TCPIP_HTTP_CurrentConnectionHasArgsSet Sets whether there are get or cookie arguments TCPIP_HTTP_MODULE_CONFIG HTTP module dynamic configuration data HTTP_CONN_HANDLE HTTP connection identifier handle of a HTTP connection ",
							" HTTP_CONN_HANDLE Type ",
							" C typedef const void* HTTP_CONN_HANDLE; ",
							" Description HTTP connection identifier handle of a HTTP connection ",
							" HTTP_FILE_TYPE Enumeration ",
							" C typedef enum { HTTP_TXT = 0u HTTP_HTM HTTP_HTML HTTP_CGI HTTP_XML HTTP_CSS HTTP_GIF HTTP_PNG HTTP_JPG HTTP_JS HTTP_JAVA HTTP_WAV HTTP_UNKNOWN } HTTP_FILE_TYPE; ",
							" Description File type definitions ",
							" Members Members Description HTTP_TXT = 0u File is a text document HTTP_HTM File is HTML (extension htm) HTTP_HTML File is HTML (extension html) HTTP_CGI File is HTML (extension cgi) HTTP_XML File is XML (extension xml) HTTP_CSS File is stylesheet (extension css) HTTP_GIF File is GIF image (extension gif) HTTP_PNG File is PNG image (extension png) HTTP_JPG File is JPG image (extension jpg) HTTP_JS File is java script (extension js) HTTP_JAVA File is java (extension class) HTTP_WAV File is audio (extension wav) HTTP_UNKNOWN File type is unknown ",
							" HTTP_IO_RESULT Enumeration ",
							" C typedef enum { HTTP_IO_DONE = 0u HTTP_IO_NEED_DATA HTTP_IO_WAITING } HTTP_IO_RESULT; ",
							" Description Result states for execution callbacks ",
							" Members Members Description HTTP_IO_DONE = 0u Finished with procedure HTTP_IO_NEED_DATA More data needed to continue call again later HTTP_IO_WAITING Waiting for asynchronous process to complete call again later ",
							" HTTP_MODULE_FLAGS Enumeration ",
							" C typedef enum { HTTP_MODULE_FLAG_DEFAULT = 0x00 HTTP_MODULE_FLAG_ADJUST_SKT_FIFOS = 0x01 HTTP_MODULE_FLAG_NO_DELAY = 0x02 } HTTP_MODULE_FLAGS; ",
							" Description HTTP module configuration flags Multiple flags can be OR-ed ",
							" Members Members Description HTTP_MODULE_FLAG_DEFAULT = 0x00 Default flags value HTTP_MODULE_FLAG_ADJUST_SKT_FIFOS = 0x01 Adjust corresponding socket FIFO at run time Improves throughput when the socket buffers are small HTTP_MODULE_FLAG_NO_DELAY = 0x02 Create the HTTP sockets with NO-DELAY option It will flush data as soon as possible ",
							" HTTP_READ_STATUS Enumeration ",
							" C typedef enum { HTTP_READ_OK = 0u HTTP_READ_TRUNCATED HTTP_READ_INCOMPLETE } HTTP_READ_STATUS; ",
							" Description Result states for TCPIP_HTTP_PostNameRead TCPIP_HTTP_PostValueRead and TCPIP_HTTP_PostReadPair ",
							" Members |Members |Description | |HTTP_READ_OK = 0u |Read was successful | |HTTP_READ_TRUNCATED |Buffer overflow prevented by truncating value | |HTTP_READ_INCOMPLETE |Entire object is not yet in the buffer Try again later | ",
							" HTTP_STATUS Enumeration ",
							" C typedef enum { HTTP_GET = 0u HTTP_POST HTTP_BAD_REQUEST HTTP_UNAUTHORIZED HTTP_NOT_FOUND HTTP_OVERFLOW HTTP_INTERNAL_SERVER_ERROR HTTP_NOT_IMPLEMENTED HTTP_REDIRECT HTTP_SSL_REQUIRED HTTP_MPFS_FORM HTTP_MPFS_UP HTTP_MPFS_SIGNATURE HTTP_MPFS_OK HTTP_MPFS_WAIT HTTP_MPFS_ERROR } HTTP_STATUS; ",
							" Description Supported commands and server response codes ",
							" Members Members Description HTTP_GET = 0u GET command is being processed HTTP_POST POST command is being processed HTTP_BAD_REQUEST 400 Bad Request will be returned HTTP_UNAUTHORIZED 401 Unauthorized will be returned HTTP_NOT_FOUND 404 Not Found will be returned HTTP_OVERFLOW 414 Request-URI Too Long will be returned HTTP_INTERNAL_SERVER_ERROR 500 Internal Server Error will be returned HTTP_NOT_IMPLEMENTED 501 Not Implemented (not a GET or POST command) HTTP_REDIRECT 302 Redirect will be returned HTTP_SSL_REQUIRED 403 Forbidden is returned indicating SSL is required HTTP_MPFS_FORM Show the MPFS Upload form HTTP_MPFS_UP An MPFS Upload is being processed HTTP_MPFS_SIGNATURE MPFS Upload looking for signature HTTP_MPFS_OK An MPFS Upload was successful HTTP_MPFS_WAIT An MPFS Upload waiting for the write operation to complete HTTP_MPFS_ERROR An MPFS Upload was not a valid image ",
							" TCPIP_HTTP_ActiveConnectionCountGet Function ",
							" C int TCPIP_HTTP_ActiveConnectionCountGet( int* pOpenCount ); ",
							" Description This function will return the number of active and total HTTP connections at the current time ",
							" Preconditions None ",
							" Parameters Parameters Description pOpenCount Address to store the number of total opened connections Could be NULL if not needed ",
							" Returns The number of active and total connections ",
							" Remarks The value returned by this function is informational only The number of active connections changes dynamically ",
							" Example int nConns; nConns = TCPIP_HTTP_ActiveConnectionCountGet(0); ",
							" TCPIP_HTTP_ArgGet Function ",
							" C const uint8_t* TCPIP_HTTP_ArgGet( const uint8_t* cData const uint8_t* cArg ); ",
							" Description This function searches through a data array to find the value associated with a given argument It can be used to find form field values in data received over GET or POST The end of data is assumed to be reached when a null name parameter is encountered This requires the string to have an even numner of null-terminated strings followed by an additional null terminator ",
							" Preconditions The data array has a vlaid series of null terminated name/value pairs ",
							" Parameters Parameters Description cData The buffer to search cArg The name of the argument to find ",
							" Returns A pointer to the argument value or NULL if not found ",
							" Remarks None ",
							" Example void TCPIP_HTTP_Print_cookiename(HTTP_CONN_HANDLE connHandle) { const uint8_t *ptr; TCP_SOCKET sktHTTP; ptr = TCPIP_HTTP_ArgGet(TCPIP_HTTP_CurrentConnectionDataBufferGet(connHandle) (const uint8_t*)\"name\"); sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); if(ptr) TCPIP_TCP_StringPut(sktHTTP ptr); else TCPIP_TCP_StringPut(sktHTTP (const uint8_t*)\"not set\"); } ",
							" TCPIP_HTTP_CurrentConnectionByteCountDec Function ",
							" C void TCPIP_HTTP_CurrentConnectionByteCountDec( HTTP_CONN_HANDLE connHandle uint32_t byteCount ); ",
							" Description This function decrements the current value of the counter showing the number of bytes available to be read from the connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle byteCount Byte count reduction ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionByteCountGet Function ",
							" C uint32_t TCPIP_HTTP_CurrentConnectionByteCountGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the current value of the counter showing the number of bytes available to be read on the connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Current connection byte count how many bytes have been read so far ",
							" Remarks None ",
							" Example switch(TCPIP_HTTP_CurrentConnectionPostSmGet(connHandle)) { case SM_CFG_SNMP_READ_NAME: // If all parameters have been read end if(TCPIP_HTTP_CurrentConnectionByteCountGet(connHandle) == 0u) { return HTTP_IO_DONE; } } ",
							" TCPIP_HTTP_CurrentConnectionByteCountSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionByteCountSet( HTTP_CONN_HANDLE connHandle uint32_t byteCount ); ",
							" Description This function sets the current value of the counter showing the number of bytes available to be read from the connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle byteCount Byte count to be set ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionCallbackPosGet Function ",
							" C uint32_t TCPIP_HTTP_CurrentConnectionCallbackPosGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function will return the current value of the callback position indicator for the HTTP connection identified by connHandle The callback position indicator is used in the processing of the HTTP dynamic variables ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Callback position indicator for connection defined by connHandle ",
							" Remarks None ",
							" Example uint32_t callbackPos; callbackPos = TCPIP_HTTP_CurrentConnectionCallbackPosGet(connHandle); if(callbackPos == 0x00u) callbackPos = (uint32_t)DDNSClient Host szRAM; callbackPos = (uint32_t)TCPIP_TCP_StringPut(TCPIP_HTTP_CurrentConnectionSocketGet(connHandle) (uint8_t*)callbackPos); if(*(uint8_t*)callbackPos == '0') callbackPos = 0x00; TCPIP_HTTP_CurrentConnectionCallbackPosSet(connHandle callbackPos); ",
							" TCPIP_HTTP_CurrentConnectionCallbackPosSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionCallbackPosSet( HTTP_CONN_HANDLE connHandle uint32_t callbackPos ); ",
							" Description This function will set the current value of the callback position indicator for the HTTP connection identified by connHandle The callback position indicator is used in the processing of the HTTP dynamic variables When set to a value = 0 it indicates to the HTTP server that the application has more pending processing that needs to be done ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle callbackPos New connection callback position value ",
							" Returns None ",
							" Remarks None ",
							" Example void TCPIP_HTTP_Print_builddate(HTTP_CONN_HANDLE connHandle) { TCP_SOCKET sktHTTP; sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); TCPIP_HTTP_CurrentConnectionCallbackPosSet(connHandle 0x01); if(TCPIP_TCP_PutIsReady(sktHTTP) strlen((const char*)__DATE__\" \"__TIME__)) { // Don't have room to output build date and time return; } TCPIP_HTTP_CurrentConnectionCallbackPosSet(connHandle 0x00); TCPIP_TCP_StringPut(sktHTTP (const void*)__DATE__\" \"__TIME__); } ",
							" TCPIP_HTTP_CurrentConnectionDataBufferGet Function ",
							" C uint8_t* TCPIP_HTTP_CurrentConnectionDataBufferGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns a pointer to the HTTP connection internal data buffer This gives access to the application to the data that's stored in the HTTP connection buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Pointer to the connection's general purpose data buffer ",
							" Remarks None ",
							" Example void TCPIP_HTTP_Print_cookiename(HTTP_CONN_HANDLE connHandle) { const uint8_t *ptr; TCP_SOCKET sktHTTP; ptr = TCPIP_HTTP_ArgGet(TCPIP_HTTP_CurrentConnectionDataBufferGet(connHandle) (const uint8_t*)\"name\"); sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); if(ptr) TCPIP_TCP_StringPut(sktHTTP ptr); else TCPIP_TCP_StringPut(sktHTTP (const uint8_t*)\"not set\"); } ",
							" TCPIP_HTTP_CurrentConnectionDataBufferSizeGet Function ",
							" C uint16_t TCPIP_HTTP_CurrentConnectionDataBufferSizeGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the size of the HTTP connection internal data buffer This buffer is created at the HTTP initialization using the size specified in TCPIP_HTTP_MODULE_CONFIG dataLen ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Size of the connection's general purpose data buffer ",
							" Remarks Currently the size of the buffer is the same for all connections The connHandle parameter is not used ",
							" TCPIP_HTTP_CurrentConnectionFileGet Function ",
							" C SYS_FS_HANDLE TCPIP_HTTP_CurrentConnectionFileGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the handle of the current HTTP connection file ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Handle to File System file belonging to the connection defined by connHandle ",
							" Remarks None ",
							" Example uint8_t myBuff[20]; // Get the file handle and read from that file SYS_FS_FileRead(myBuff sizeof(myBuff) TCPIP_HTTP_CurrentConnectionFileGet(connHandle)); ",
							" TCPIP_HTTP_CurrentConnectionHandleGet Function ",
							" C HTTP_CONN_HANDLE TCPIP_HTTP_CurrentConnectionHandleGet( int connIx ); ",
							" Description This function will return the connection handle of the requested HTTP connection index ",
							" Preconditions None ",
							" Parameters Parameters Description connIx The HTTP connection ix ",
							" Returns A valid connection handle if the connection index is valid 0 if there is no such connection ",
							" Remarks None ",
							" Example HTTP_CONN_HANDLE connHandle; connHandle = TCPIP_HTTP_CurrentConnectionHandleGet(0); ",
							" TCPIP_HTTP_CurrentConnectionHasArgsGet Function ",
							" C uint8_t TCPIP_HTTP_CurrentConnectionHasArgsGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description The function will get the value of the \"cookies or get arguments\" that are present ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns The current value of the connection hasArgs  ",
							" Remarks None ",
							" Example uint8_t hasArgs = TCPIP_HTTP_CurrentConnectionHasArgsGet(connHandle); ",
							" TCPIP_HTTP_CurrentConnectionHasArgsSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionHasArgsSet( HTTP_CONN_HANDLE connHandle uint8_t args ); ",
							" Description The function sets the value of the \"cookies or get arguments\" that are present ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle args Number of arguments ",
							" Returns None ",
							" Remarks None ",
							" Example else if( memcmp(filename \"cookies htm\" 11)) { TCPIP_HTTP_CurrentConnectionHasArgsSet(connHandle 1); } ",
							" TCPIP_HTTP_CurrentConnectionIndexGet Function ",
							" C int TCPIP_HTTP_CurrentConnectionIndexGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function will return the index of the requested HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle The HTTP connection handle ",
							" Returns The connection index ",
							" Remarks None ",
							" Example int connIx; connIx = TCPIP_HTTP_CurrentConnectionIndexGet(connHandle); ",
							" TCPIP_HTTP_CurrentConnectionIsAuthorizedGet Function ",
							" C uint8_t TCPIP_HTTP_CurrentConnectionIsAuthorizedGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the authorization status for the current HTTP connection This is one of the values returned by the TCPIP_HTTP_FileAuthenticate() function ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns A uint8_t representing the authorization status ",
							" Remarks None ",
							" Example uint8_t isAuth; isAuth = TCPIP_HTTP_CurrentConnectionIsAuthorizedGet(connHandle); ",
							" TCPIP_HTTP_CurrentConnectionIsAuthorizedSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionIsAuthorizedSet( HTTP_CONN_HANDLE connHandle uint8_t auth ); ",
							" Description This function sets the authorization status for the current HTTP connection This has to be one of the values in the set returned by the TCPIP_HTTP_FileAuthenticate() function ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle auth New authorization state ",
							" Returns None ",
							" Remarks None ",
							" Example uint8_t auth = 0x80; TCPIP_HTTP_CurrentConnectionIsAuthorizedSet(connHandle auth); ",
							" TCPIP_HTTP_CurrentConnectionPostSmGet Function ",
							" C uint16_t TCPIP_HTTP_CurrentConnectionPostSmGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the POST state machine state for the connection defined by connHandle This state is maintained by the HTTP connection and can be used by the user of the HTTP to maintain its own POST state machine The values of the POST state machine have significance only for the user of the HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns 16-bit integer POST state machine state ",
							" Remarks None ",
							" Example #define SM_POST_LCD_READ_NAME 1 #define SM_POST_LCD_READ_VALUE 2 switch(TCPIP_HTTP_CurrentConnectionPostSmGet(connHandle)) { // Find the name case SM_POST_LCD_READ_NAME: // Found the value so store the LCD and return case SM_POST_LCD_READ_VALUE: } ",
							" TCPIP_HTTP_CurrentConnectionPostSmSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionPostSmSet( HTTP_CONN_HANDLE connHandle uint16_t state ); ",
							" Description This function sets the POST state machine state for the connection defined by connHandle This state is maintained by the HTTP connection and can be used by the user of the HTTP to maintain its own POST state machine The values of the POST state machine have significance only for the user of the HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle state 16-bit integer state for POST state machine ",
							" Returns None ",
							" Remarks None ",
							" Example uint8_t* httpDataBuff; uint16_t httpBuffSize; #define SM_POST_LCD_READ_NAME 1 #define SM_POST_LCD_READ_VALUE 2 switch(TCPIP_HTTP_CurrentConnectionPostSmGet(connHandle)) { // Find the name case SM_POST_LCD_READ_NAME: // Read a name httpBuffSize = TCPIP_HTTP_CurrentConnectionDataBufferSizeGet(connHandle); if(TCPIP_HTTP_PostNameRead(connHandle httpDataBuff httpBuffSize) == HTTP_READ_INCOMPLETE) return HTTP_IO_NEED_DATA; TCPIP_HTTP_CurrentConnectionPostSmSet(connHandle SM_POST_LCD_READ_VALUE); // No break continue reading value // Found the value so store the LCD and return case SM_POST_LCD_READ_VALUE: } ",
							" TCPIP_HTTP_CurrentConnectionSMSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionSMSet( HTTP_CONN_HANDLE connHandle uint8_t stat ); ",
							" Description This function set the HTTP current connection state Machine ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle stat Current state ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionSocketGet Function ",
							" C TCP_SOCKET TCPIP_HTTP_CurrentConnectionSocketGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description The function returns the TCP socket of the specified HTTP connection The user gets access to the connection socket which it can use for sending/reading data ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns TCP_SOCKET for the connection defined by connHandle ",
							" Remarks None ",
							" Example uint32_t byteCount; TCP_SOCKET sktHTTP; byteCount = TCPIP_HTTP_CurrentConnectionByteCountGet(connHandle); sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); if(byteCount TCPIP_TCP_GetIsReady(sktHTTP) + TCPIP_TCP_FifoRxFreeGet(sktHTTP)) { // Configuration Failure TCPIP_HTTP_CurrentConnectionStatusSet(connHandle HTTP_REDIRECT); return HTTP_IO_DONE; } ",
							" TCPIP_HTTP_CurrentConnectionStatusGet Function ",
							" C HTTP_STATUS TCPIP_HTTP_CurrentConnectionStatusGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the current HTTP status of the selected HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns A HTTP_STATUS value ",
							" Remarks None ",
							" Example HTTP_STATUS currStat = TCPIP_HTTP_CurrentConnectionStatusGet(connHandle); ",
							" TCPIP_HTTP_CurrentConnectionStatusSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionStatusSet( HTTP_CONN_HANDLE connHandle HTTP_STATUS stat ); ",
							" Description Allows write access to the HTTP status of the selected HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle stat New HTTP_STATUS enumeration value ",
							" Returns None ",
							" Remarks None ",
							" Example byteCount = TCPIP_HTTP_CurrentConnectionByteCountGet(connHandle); sktHTTP = TCPIP_HTTP_CurrentConnectionSocketGet(connHandle); if(byteCount TCPIP_TCP_GetIsReady(sktHTTP) + TCPIP_TCP_FifoRxFreeGet(sktHTTP)) { // Configuration Failure // 302 Redirect will be returned TCPIP_HTTP_CurrentConnectionStatusSet(connHandle HTTP_REDIRECT); } ",
							" TCPIP_HTTP_CurrentConnectionUploadBufferCurrGet Function ",
							" C const void* TCPIP_HTTP_CurrentConnectionUploadBufferCurrGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function will return the current address of current connection upload buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns The current address of current connection upload buffer ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionUploadBufferCurrSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionUploadBufferCurrSet( HTTP_CONN_HANDLE connHandle uint8_t* uploadBufferCurr ); ",
							" Description This function sets the current address of current connection upload buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle uploadBufferCurr Current upload buffer ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionUploadBufferEndGet Function ",
							" C const void* TCPIP_HTTP_CurrentConnectionUploadBufferEndGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function will return the end address of current connection upload buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns The end address of current connection upload buffer ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionUploadBufferEndSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionUploadBufferEndSet( HTTP_CONN_HANDLE connHandle uint8_t* uploadBufferEnd ); ",
							" Description This function sets the end address of current connection upload buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle uploadBufferEnd End upload buffer ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionUploadBufferStartGet Function ",
							" C const void* TCPIP_HTTP_CurrentConnectionUploadBufferStartGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function will return the start address of current connection upload buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns The start address of current connection upload buffer ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionUploadBufferStartSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionUploadBufferStartSet( HTTP_CONN_HANDLE connHandle uint8_t* uploadBufferStart ); ",
							" Description This function will set the start address of current connection upload buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle uplaodBufferStart Start upload buffer ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_CurrentConnectionUserDataGet Function ",
							" C const void* TCPIP_HTTP_CurrentConnectionUserDataGet( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function returns the user data value for the current HTTP connection This data belongs to the user and is not used in any way by the HTTP server module It can be set by the user with TCPIP_HTTP_Current ConnectionUserDataSet(); ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns User data that's store as part of the connection ",
							" Remarks None ",
							" Example uint32_t myConnData; myConnData = (uint32_t)TCPIP_HTTP_CurrentConnectionUserDataGet(connHandle); ",
							" TCPIP_HTTP_CurrentConnectionUserDataSet Function ",
							" C void TCPIP_HTTP_CurrentConnectionUserDataSet( HTTP_CONN_HANDLE connHandle const void* uData ); ",
							" Description This function will set the user data value for the current HTTP connection This data belongs to the user and is not used in any way by the HTTP server module It is available to the usesr by calling TCPIP_HTTP_CurrentConnectionUserDataGet ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle uData User supplied data ",
							" Returns None ",
							" Remarks None ",
							" Example uint32_t myConnData; TCPIP_HTTP_CurrentConnectionUserDataSet(connHandle (const void*)myConnData); ",
							" TCPIP_HTTP_FileAuthenticate Function ",
							" C uint8_t TCPIP_HTTP_FileAuthenticate( HTTP_CONN_HANDLE connHandle uint8_t* cFile ); ",
							" Description This function is implemented by the application developer Its function is to determine if a file being requested requires authentication to view The user name and password if supplied will arrive later with the request headers and will be processed at that time Return values 0x80 - 0xff indicate that authentication is not required while values from 0x00 - 0x79 indicate that a user name and password are required before proceeding While most applications will only use a single value to grant access and another to require authorization the range allows multiple \"realms\" or sets of pages to be protected with different credential requirements for each The return value of this function is saved for the current connection and can be read using TCPIP_HTTP_CurrentConnectionIsAuthorizedGet() It will be available to future callbacks including TCPIP_HTTP_UserAuthenticate and any of the TCPIP_HTTP_GetExecute TCPIP_HTTP_PostExecute or TCPIP_HTTP_Pring_varname callbacks ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle cFile The name of the file being requested ",
							" Returns = 0x79 - Valid authentication is required = 0x80 - access is granted for this connection ",
							" Remarks This function may NOT write to the TCP buffer ",
							" TCPIP_HTTP_FileInclude Function ",
							" C void TCPIP_HTTP_FileInclude( HTTP_CONN_HANDLE connHandle const uint8_t* cFile ); ",
							" Description This function allows an entire file to be included as a dynamic variable providing a basic templating system for HTML web pages This reduces unneeded duplication of visual elements such as headers menus etc When pHttpCon- callbackPos is 0 the file is opened and as many bytes as possible are written The current position is then saved to pHttpCon- callbackPos and the file is closed On sobsequent calls reading begins at the saved location and continues Once the end of the input file is reached pHttpCon- callbackPos is set back to 0 to indicate completion ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle cFile The name of the file to be sent ",
							" Returns None ",
							" Remarks Users should not call this function directly but should instead add dynamic variables in the form of ~inc:filename ext~ in their HTML code to include the file at that specified location (for example \"filename ext\") The mpfs2 jar utility will handle the rest ",
							" TCPIP_HTTP_GetExecute Function ",
							" C HTTP_IO_RESULT TCPIP_HTTP_GetExecute( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function is implemented by the application developer Its purpose is to parse the data received from URL parameters (GET method forms) and cookies and perform any application-specific tasks in response to these inputs Any required authentication has already been validated When this function is called the connection data buffer (see TCPIP_HTTP_CurrentConnectionDataBufferGet()) contains sequential name/value pairs of strings representing the data received In this format TCPIP_HTTP_ArgGet can be used to search for specific variables in the input If data buffer space associated with this connection is required connection data buffer may be overwritten here once the application is done with the values Any data placed there will be available to future callbacks for this connection including TCPIP_HTTP_PostExecute and any TCPIP_HTTP_Print_varname dynamic substitutions This function may also issue redirection by setting the connection data buffer to the destination file name or URL and the connection httpStatus(TCPIP_HTTP_CurrentConnectionStatusSet()) to HTTP_REDIRECT Finally this function may set cookies Set connection data buffer to a series of name/value string pairs (in the same format in which parameters arrive) and then set the connection hasArgs (TCPIP_HTTP_CurrentConnectionHasArgsSet()) equal to the number of cookie name/value pairs The cookies will be transmitted to the browser and any future requests will have those values available in the connection data buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns HTTP_IO_DONE - Application is done processing HTTP_IO_NEED_DATA - This value may not be returned because more data will not become available HTTP_IO_WAITING - The application is waiting for an asynchronous process to complete and this function should be called again later ",
							" Remarks This function is only called if variables are received via URL parameters or Cookie arguments This function may NOT write to the TCP buffer This function may service multiple HTTP requests simultaneously Exercise caution when using global or static variables inside this routine Use the connection callbackPos (TCPIP_HTTP_CurrentConnectionCallbackPosGet()) or the connection data buffer for storage associated with individual requests ",
							" TCPIP_HTTP_MODULE_CONFIG Structure ",
							" C typedef struct { uint16_t nConnections; uint16_t nTlsConnections; uint16_t dataLen; uint16_t sktTxBuffSize; uint16_t sktRxBuffSize; uint16_t tlsSktTxBuffSize; uint16_t tlsSktRxBuffSize; uint16_t configFlags; void* (* http_malloc_fnc)(size_t bytes); void (* http_free_fnc)(void* ptr); const char* web_dir; } TCPIP_HTTP_MODULE_CONFIG; ",
							" Description HTTP module dynamic configuration data ",
							" Members Members Description nConnections Number of simultaneous HTTP connections allowed nTlsConnections Not used in the current implementation; number of simultaneous HTTPS connections allowed dataLen Size of the data buffer for reading cookie and GET POST arguments (bytes) sktTxBuffSize Size of TX buffer for the associated socket; leave 0 for default sktRxBuffSize Size of RX buffer for the associated socket; leave 0 for default tlsSktTxBuffSize Not used in the current implementation; Size of TLS TX buffer for the associated socket; leave 0 for default (min 512 bytes) tlsSktRxBuffSize Not used in the current implementation; Size of TLS RX buffer for the associated socket; leave 0 for default (min 512 bytes) configFlags A HTTP_MODULE_FLAGS value HTTP specific allocation functions These functions are used only for file upload buffer allocation (* http_malloc_fnc)(size_t bytes) Malloc style allocation function for HTTP module (* http_free_fnc)(void* ptr) Free style allocation function web_dir Web pages directory The HTTP server will serve pages located under this top directory No access is possible above this directory As a good practice to follow use something like \"/mnt_point/webpages/\" to limit an external user access to this only directory in the file system when using the web server ",
							" TCPIP_HTTP_PostExecute Function ",
							" C HTTP_IO_RESULT TCPIP_HTTP_PostExecute( HTTP_CONN_HANDLE connHandle ); ",
							" Description This function is implemented by the application developer Its purpose is to aprse the data received from POST forms and perform any application-specific tasks in response to these inputs Any required authentication has already been validated before this function is called When this function is called POST data will be waiting in the TCP buffer The connection byteCount (see TCPIP_HTTP_CurrentConnectionByteCountGet) will indicate the number of bytes remaining to be read before the browser request is complete Since data is still in the TCP buffer the application must call TCPIP_TCP_ArrayGet in order to retrieve bytes When this is done connection byteCount MUST be updated to reflect how many bytes now remain The functions TCPIP_TCP_ArrayFind and TCPIP_TCP_Find may be helpful to locate data in the TCP buffer In general data submitted from web forms via POST is URL encoded The TCPIP_HTTP_URLDecode function can be used to decode this information back to a standard string if required If data buffer space associated with this connection is required the connection data buffer (see TCPIP_HTTP_CurrentConnectionDataBufferGet()) may be overwritten here once the application is done with the values Any data placed there will be available to future callbacks for this connection including TCPIP_HTTP_PostExecute and any TCPIP_HTTP_Print_varname dynamic substitutions Whenever a POST from is processed it is recommended to issue a redirect back to the browser either to a status page or to the same form page that was posted This prevents accidental duplicate submissions (by clicking refresh or back/forward) and avoids browser warning about \"resubmitting form data\" Redirects may be ussued to the browser by setting the connection data buffer to the destination file or URL and the connection httpStatus (TCPIP_HTTP_CurrentConnectionStatusSet()) to HTTP_REDIRECT Finally this function may set cookies Set the connection data buffer to a series of name/value string pairs (in the same format in which parameters arrive) and then set the connection hasArgs (TCPIP_HTTP_CurrentConnectionHasArgsSet) equal to the number of cookie name/value pairs The cookies will be transmitted to the browser and any future requests will have those values available in the connection data buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns HTTP_IO_DONE - Application is done processing HTTP_IO_NEED_DATA - More data is needed to continue and this function should be called again later HTTP_IO_WAITING - The application is waiting for an asynchronous process to complete and this function should be called again later ",
							" Remarks This function is only called when the request method is POST and is only used when HTTP_USE_POST is defined This method may NOT write to the TCP buffer This function may service multiple HTTP requests simultaneously Exercise caution when using global or static variables inside this routine Use the connection callbackPos (TCPIP_HTTP_CurrentConnectionCallbackPosGet) or connection data buffer for storage associated with individual requests ",
							" TCPIP_HTTP_PostNameRead Function ",
							" C HTTP_READ_STATUS TCPIP_HTTP_PostNameRead( HTTP_CONN_HANDLE connHandle uint8_t* cData uint16_t wLen ); ",
							" Description This function reads a name from a URL encoded string in the TCP buffer This function is meant to be called from an TCPIP_HTTP_PostExecute callback to facilitate easier parsing of incoming data This function also prevents buffer overflows by forcing the programmer to indicate how many bytes are expected At least two extra bytes are needed in cData over the maximum length of data expected to be read This function will read until the next '=' character which indicates the end of a name parameter It assumes that the front of the buffer is the beginning of the name parameter to be read This function properly updates pHttpCon- byteCount by decrementing it by the number of bytes read It also removes the delimiting '=' from the buffer ",
							" Preconditions The front of the TCP buffer is the beginning of a name parameter and the rest of the TCP buffer contains a URL-encoded string with a name parameter terminated by a -=- character ",
							" Parameters Parameters Description connHandle HTTP connection handle cData Where to store the name once it is read wLen How many bytes can be written to cData ",
							" Returns -HTTP_READ_OK - Nmae was successfully read -HTTP_READ_TRUNCATED - Entire name could not fit in the buffer so the value was truncated and data has been lost -HTTP_READ_INCOMPLETE - Entire name was not yet in the buffer so call this function again later to retrieve ",
							" Remarks None ",
							" TCPIP_HTTP_PostReadPair Macro ",
							" C #define TCPIP_HTTP_PostReadPair(connHandle cData wLen) TCPIP_HTTP_PostValueRead(connHandle cData wLen) ",
							" Description Reads a name and value pair from a URL encoded string in the TCP buffer This function is meant to be called from a TCPIP_HTTP_PostExecute callback to facilitate easier parsing of incoming data This function also precents buffer overflows by forcing the programmer to indicate how many bytes are expected At least 2 extra bytes are needed in cData over the maximum length of data expected to be read This function will read until the next ' ' character which indicates the end of a value parameter It assumes that the front of the buffer is the beginning of the name parameter to be read This function properly updates the connection byteCount (see TCPIP_HTTP_CurrentConnectionByteCountGet()) by decrementing it by the number of bytes read It also removes the delimiting ' ' from the buffer Once complete two strings will exist in the cData buffer The first is the parameter name that was read while the second is the associated value ",
							" Preconditions The front of the TCP buffer is the beginning of a name parameter and the rest of the TCP buffer contains a URL-encoded string with a name parameter terminated by a '=' character and a value parameter terminated by a ' ' ",
							" Parameters Parameters Description connHandle HTTP connection handle cData Where to store the name and value strings once they are read wLen How many bytes can be written to cData ",
							" Returns HTTP_READ_OK - Name and value were successfully read HTTP_READ_TRUNCTATED - Entire name and value could not fit in the buffer so input was truncated and data has been lost HTTP_READ_INCOMPLETE - Entire name and value was not yet in the buffer so call this function again later to retrieve ",
							" Remarks This function is aliased to TCPIP_HTTP_PostValueRead since they effectively perform the same task The name is provided only for completeness ",
							" TCPIP_HTTP_PostValueRead Function ",
							" C HTTP_READ_STATUS TCPIP_HTTP_PostValueRead( HTTP_CONN_HANDLE connHandle uint8_t* cData uint16_t wLen ); ",
							" Description This function reads a value from a URL encoded string in the TCP buffer This function is meant to be called from a TCPIP_HTTP_PostExecute callback to facilitate easier parsing of incoming data This function also prevents buffer overflows by forcing the programmer to indicate how many bytes are expected At least 2 extra bytes are need in cData above the maximum length of data expected to be read This function will read until the next ' ' character which indicates the end of a value parameter It assumes that the front of the buffer is the beginning of the value parameter to be read If pHttpCon- byteCount indicates that all expected bytes are in the buffer it assumes that all remaining data is the value and acts accordingly This function properly updates pHttpCon- byteCount by decrementing it by the number of bytes read The terminating ' ' character is also removed from the buffer ",
							" Preconditions The front of the TCP buffer is the beginning of a name parameter and the rest of the TCP buffer contains a URL-encoded string with a name parameter terminated by a '=' character ",
							" Parameters Parameters Description connHandle HTTP connection handle cData Where to store the value once it is read wLen How many bytes can be written to cData ",
							" Returns HTTP_READ-OK - Value was successfully read HTTP_READ_TRUNCATED - Entire value could not fin in the buffer so the value was truncated and data has been lost HTTP_READ_INCOMPLETE - Entire value was not yet in the buffer so call this function again later to retrieve ",
							" Remarks None ",
							" TCPIP_HTTP_Print_varname Function ",
							" C void TCPIP_HTTP_Print_varname( HTTP_CONN_HANDLE connHandle uint16_t wParam1 uint16_t wParam2 ); ",
							" Description Functions in this style are implemented by the application developer These functions generate dynamic content to be inserted into web pages and other files returned by the HTTP server Functions of this type are called when a dynamic variable is located in a web page (i e ~varname~) The name between the tilde '~' characters is appended to the base function name In this example the callback would be name TCPIP_HTTP_Print_varname The function prototype is located in your project's http_print h which is automatically generated by the pmfs2 jar utility The prototype will have uint16_t parameters included for each parameter passed in the dynamic variable For example the variable \"~myArray(2 6)~\" will generate the prototype \"void TCPIP_HTTP_Print_varname(uint16_t uint16_t);\" When called this function should write its output directly to the TCP socket using any combination of TCPIP_TCP_PutIsReady TCPIP_TCP_Put TCPIP_TCP_ArrayPut TCPIP_TCP_StringPut TCPIP_TCP_ArrayPut and TCPIP_TCP_StringPut Before calling the HTTP serber gaurantees that at least HTTP_MIN_CALLBACK_FREE bytes (defaults to 16 bytes) are free in the output buffer If the function is writing less than this amount it should simply write the data to the socket and return In situations where a function needs to write more than this amoutn it must manage its output state using the connection callbackPos (TCPIP_HTTP_CurrentConnectionCallbackPosGet/TCPIP_HTTP_CurrentConnectionCallbackPosS) This value will be set to zero before the function is called If the function is managing its output state it must set this to a non-zero value before returning Typically this is used to track how many bytes have been written or how many remain to be written If the connection callbackPos is non-zero the function will be called again when more buffer space is available Once the callback completes set this value back to zero to resume normal servicing or the request ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle wParam1 First parameter passed in the dynamic variable (if any) wParam2 Second parameter passed in the dynamic variable (if any)  Additional parameters as necessary ",
							" Returns None ",
							" Remarks This function may service multiple HTTP requests simultaneously especially when managing its output state Exercise caution when using global or static variables inside this routine Use the connection callbackPos or the connection data buffer for storage associated with individual requests ",
							" TCPIP_HTTP_Task Function ",
							" C void TCPIP_HTTP_Task(); ",
							" Description This function performs HTTP module tasks in the TCP/IP stack ",
							" Preconditions The HTTP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_URLDecode Function ",
							" C uint8_t* TCPIP_HTTP_URLDecode( uint8_t* cData ); ",
							" Description This function parses a string from URL encoding to plain-text The following conversions are made: ‘=’ to ‘0’ ‘ ’ to ‘0’ ‘+’ to ‘ ‘ and “%xx” to a single hex byte After completion the data has been decoded and a null terminator signifies the end of a name or value A second null terminator (or a null name parameter) indicates the end of all the data ",
							" Preconditions The data parameter is null terminated and has at least one extra byte free ",
							" Parameters Parameters Description cData The string which is to be decoded in place ",
							" Returns A pointer to the last null terminator in data which is also the first free byte for new data ",
							" Remarks This function is called by the stack to parse GET arguments and cookie data User applications can use this function to decode POST data but first need to verify that the string is null-terminated ",
							" TCPIP_HTTP_UserAuthenticate Function ",
							" C uint8_t TCPIP_HTTP_UserAuthenticate( HTTP_CONN_HANDLE connHandle uint8_t* cUser uint8_t* cPass ); ",
							" Description This function is implemented by the application developer Its function is to determine if the user name and password supplied by the client are acceptable for this resource This callback function can thus be used to determine if only specific user names or passwords will be accepted for this resource Return values 0x80 - 0xff indicate that the credentials were accepted while values from 0x00 - 0x79 indicate that authorization failed While most applications will only use a single value to gran access flexibility is provided to store multiple values in order to indicate which user (or user's group) logged in The value returned by this function is stored in the corresponding connection data and will be available with TCPIP_HTTP_CurrentConnectionIsAuthorizedGet in any of the TCPIP_HTTP_GetExecute TCPIP_HTTP_PostExecute or TCPIP_HTTP_Print_varname callbacks ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle cUser The user name supplied by the client cPass The password supplied by the client ",
							" Returns = 0x79 - The credentials were rejected = 0x80 - Access is granted for this connection ",
							" Remarks This function is only called when an Authorization header is encountered This function may NOT write to the TCP buffer ",
							" HTTP Net Module The HTTP Net Web Server module allows a development board to act as a Web server This facilitates an easy method to view status information and control applications using any standard Web browser It uses the Networking Presentation Layer to integrate with an external encryption services provider (usually wolfSSL) allowing for secure connections Note: The HTTP_NET server supports encrypted communication by using the Networking Presentation layer to integrate an external encryption services provider (usually wolfSSL) for TLS support Abstraction Model HTTP NET Abstraction Model HTTP Net Features The HTTP Net module is a HTTP server module that works using the Networking Presentation Layer of the MPLAB Harmony framework This allows it to support both encrypted and plain text connections Some of the key features of the HTTP Net module include: The updated module implements HTTP 1 1 persistent connections by default using the “Transfer-Encoding: chunked” HTTP header It can be configured to operate with closing the connections like the previous HTTP server The application has to dynamically register its HTTP processing functions with the HTTP Net server using the TCPIP_HTTP_NET_UserHandlerRegister call The HTTP Net server no longer relies on well known function names The HTTP Net server supports either secure or plain text connections but not both simultaneously The specification of a secure or non-secure connection can be easily done by: Selecting the server listening port: 80 or 443 Using the module configuration flags The HTTP Net module reports run-time events that could be caught by the user application using the “eventReport” registered function that carries a TCPIP_HTTP_NET_EVENT_TYPE enumerated type Dynamic Variables Processing Parsing of the dynamic variables is done at run-time The web pages could be changed at run-time without the need for rebuilding the HTTP Net server This allows the TCP/IP Stack to run as a library and only the application code to be changed accordingly The application is required to register a “dynamicPrint” with the HTTP Net server This function will be called at run-time to process the dynamic variables The supported syntax is ~var_name(param1 param2 …)~ When parsing a string like this within a web page the HTTP Net server will invoke the “dynamicPrint” function using a TCPIP_HTTP_DYN_VAR_DCPT data structure that specifies the dynamic variable name its number and type of parameters as well as each parameter value For example the variable ~myVariable(2 6)~ will generate the “dynamicPrint” call with the following parameters: varDcpt dynName = \"myVariable\"; varDcpt nArgs = 2; varDcpt dynArgs- argType = TCPIP_HTTP_DYN_ARG_TYPE_INT32; varDcpt dynArgs- argInt32 = 2; (varDcpt dynArgs + 1)- argType = TCPIP_HTTP_DYN_ARG_TYPE_INT32; (varDcpt dynArgs + 1)- argInt32 = 6; String and int32_t variable types are currently supported The application needs to return a TCPIP_HTTP_DYN_PRINT_RES result specifying if it’s done with processing or it needs to be called again Applications no longer have direct access to the underlying transport socket for a HTTP connection All of the data write operations need to go through the required API function: TCPIP_HTTP_NET_DynamicWrite This function actually just attaches the data to be written to the connection using data descriptors The actual output occurs only when all data is gathered and the data size is known Buffers used in a TCPIP_HTTP_NET_DynamicWrite need to be persistent until the moment when the output is generated RAM buffers are supported by using a “dynamicAck” (TCPIP_HTTP_NET_DynAcknowledge) type function Once the output operation is completed the HTTP Net module will call back into the application indicating that the corresponding buffer is no longer used and can be freed/reused In situations where the dynamic variable print function needs to perform additional write operations or simply needs to be called again it must a special result code: TCPIP_HTTP_DYN_PRINT_RES_PROCESS_AGAIN/TCPIP_HTTP_DYN_PRINT_RES_AGAIN Typically this is used when outputting large amounts of data that cannot fit into one single buffer write operation or when the data is not available all at once Note: The parsing of the files for dynamic content is done at run time Therefore when generating the image files that contain dynamic content should not be compressed Include Files Processing The HTTP Net module dynamically parses the web pages and the file inclusion is done by the module itself completely transparent for the application The included files can contain dynamic variables that are parsed at run time File Processing File processing consists of the following: An included file can include other files that have dynamic variables Application can include a file as part of its dynamic variable processing using the TCPIP_HTTP_NET_ConnectionFileInclude()API That file can include other files The only limit to the depth of inclusion is the memory resources and the TCPIP_HTTP_NET_MODULE_CONFIG:: maxRecurseLevel setting A TCPIP_HTTP_NET_EVENT_DEPTH_ERROR event will be generated if the maximum depth is exceeded at run-time SSI Processing At run-time the HTTP Net server processes a subset of the Server Side Includes (SSI) commands SSI is a portable way to add small amounts of dynamic content on web pages in a standard way that is supported by most HTTP servers Currently the #include #set and #echo commands are supported Other commands will be eventually added This allows a better compatibility with other existing HTTP servers and is targeted at the removal of proprietary extensions Whenever executing an SSI command within a web page the HTTP Net server will notify the application by using the registered SSI callback: ssiNotify This callback contains a TCPIP_HTTP_SSI_NOTIFY_DCPT pointer to a structure describing the SSI context needed for processing: File name the SSI command belongs to The SSI command line Number of SSI attributes and their values etc The application can do any modifications it chooses to and returns a value instructing the HTTP Net server if the processing of the command is necessary or not SSI include Command The SSI Include command allows the dynamic inclusion of a file The supported syntax is: --#include virtual=\"file_name\" -- or --#include file=\"file_name\" -- Currently the arguments for both “virtual” and “file” commands are passed unaltered to the SYS_FS so they behave identically However it is recommended that the original SSI significance for these keywords should be maintained: Use “virtual” for specifying a URL relative to the document being server Use “file” for a file path relative to the current directory (it cannot be an absolute path) The ~inc:file_name~ keyword is maintained for backward compatibility However the SSI include command should be preferred SSI set Command The SSI set command allows to dynamically set a SSI variable value The supported syntax is: --#set var=\"v_name\" value=\"v_value\" -- String or integer variables are supported Variable reference is also supported: --#set var=\"n_name\" value=\"$otherVar\" -- This command will create or update the variable n_name to have the value of the variable otherVar if it exists A new SSI variable will be created if a variable having the name v_name does not exist If the variable v_name already exists it will have its value updated as the result of this command An existing variable can be deleted using the empty value set command: --#set var=\"v_name\" value=\"\" -- SSI echo Command The SSI echo command allows the dynamic print of a SSI variable The supported syntax is: --#echo var=\"v_name\" -- If the application ssiNotify exists the HTTP Net server will call it and the application may choose to change the current value dynamically If ssiNotify returns false the HTTP Net server will display the current value of the variable v_name as part of the current page The SSI API can be used to evaluate or change the current value of the SSI variables: TCPIP_HTTP_NET_SSIVariableGet TCPIP_HTTP_NET_SSIVariableSet TCPIP_HTTP_NET_SSIVariableDelete The maximum number of SSI variables is under the control of the application by using the configuration parameter: TCPIP_HTTP_NET_SSI_VARIABLES_NUMBER mpfs2 jar Utility Dynamic Variable Processing The HTTP Net server does not use the DynRecord bin and FileRcrd bin files for processing the dynamic variables The parsing and processing of dynamic variables is done at run-time Therefore the mpfs2 jar utility is no longer necessary other than to generate a mpfs_img2 c image file for the NVM MPFS image Application Custom Support Files The application custom support files generated with MHC have new names: custom_http_net_app c and http_net_print c However the http_net_print c file is not generated by the mpfs2 utility and is maintained only for easy comparison between HTTP and HTTP Net application processing The custom_http_net_app c file is entirely generated using a MHC template file and it is not dynamically updated in any way by the mpfs2 utility Generated File Name Currently the name of the generated file for MPFS image is maintained unchanged: mpfs_img2 c MPFS Image Generation for Internal NVM Storage The mpfs2 utility can still be used to generate the MPFS image for internal NVM storage It can also be useful because it parses the web pages and comes out with the http_print c file that contains the list of TCPIP_HTTP_Print functions This can be helpful in gathering info about the dynamic variables that are contained within the web pages Note: For demonstration applications that use SSI the file inclusion is now done in a standard way using HTML (i e htm) files Therefore when generating the image * htm must be added to Advanced Settings Do Not Compress Library Interface Name Description Macros  TCPIP_HTTP_NET_CACHE_LEN Max lifetime (sec) of static responses as string TCPIP_HTTP_NET_CONFIG_FLAGS Define the HTTP module configuration flags Use 0 for default See HTTP_MODULE_FLAGS definition for possible values TCPIP_HTTP_NET_COOKIE_BUFFER_SIZE Size of the buffer used for sending the cookies to the client Should be able to accommodate the longest cookie response Otherwise the cookies will be truncated TCPIP_HTTP_NET_DEFAULT_FILE Indicate what HTTP file to serve when no specific one is requested TCPIP_HTTP_NET_DYNVAR_ARG_MAX_NUMBER maximum number of arguments for a dynamic variable TCPIP_HTTP_NET_DYNVAR_DESCRIPTORS_NUMBER how many buffers descriptors for dynamic variable processing they are independent of the HTTP connection number all the HTTP connections use from the dynamic descriptors pool TCPIP_HTTP_NET_DYNVAR_MAX_LEN maximum size for a complete dynamic variable: name + args must be = TCPIP_HTTP_NET_FILE_PROCESS_BUFFER_SIZE If it is much larger than needed then inefficiency occurs when reading data from the file and then discarding it because a much larger than needed data buffer was read TCPIP_HTTP_NET_FILE_UPLOAD_ENABLE Configure MPFS over HTTP updating Comment this line to disable updating via HTTP TCPIP_HTTP_NET_FILE_UPLOAD_NAME This is macro TCPIP_HTTP_NET_FILE_UPLOAD_NAME TCPIP_HTTP_NET_FIND_PEEK_BUFF_SIZE Size of the peek buffer to perform searches into If the underlying transport layer supports offset peak operation with a offset the value could be smaller (80 characters for example); otherwise a one time peek is required and the buffer should be larger - recommended to be close to the size of the socket RX buffer TCPIP_HTTP_NET_MAX_CONNECTIONS Maximum numbers of simultaneous supported HTTP connections TCPIP_HTTP_NET_MAX_DATA_LEN Define the maximum data length for reading cookie and GET/POST arguments (bytes) TCPIP_HTTP_NET_MAX_HEADER_LEN The length of longest header string that can be parsed TCPIP_HTTP_NET_MAX_RECURSE_LEVEL The maximum depth of recursive calls for serving a web page: no dynvars files: 1; file including a file: 2 ; if the include file includes another file: +1 ; if a dyn variable: +1; Default value is 3; TCPIP_HTTP_NET_RESPONSE_BUFFER_SIZE Size of the buffer used for sending the response messages to the client Should be able to accommodate the longest server response: Default setting should be 300 bytes TCPIP_HTTP_NET_SKT_RX_BUFF_SIZE Define the size of the RX buffer for the HTTP socket Use 0 for default TCP socket value The default recommended value for high throughput is 2MSS (3 KB) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput TCPIP_HTTP_NET_SKT_TX_BUFF_SIZE Define the size of the TX buffer for the HTTP socket Use 0 for default TCP socket value The default recommended value for high throughput is 2MSS (3 KB) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput TCPIP_HTTP_NET_TASK_RATE The HTTP task rate ms The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_HTTP_NET_TIMEOUT Max time (sec) to await for more HTTP client data in an active connection state before timing out and disconnecting the socket TCPIP_HTTP_NET_USE_AUTHENTICATION Enable basic authentication support TCPIP_HTTP_NET_USE_COOKIES Enable cookie support TCPIP_HTTP_NET_USE_POST Define which HTTP modules to use If not using a specific module comment it to save resources Enable POST support TCPIP_HTTP_NET_CHUNK_RETRIES retry limit for allocating a chunk from the pool If more retries are not successful the operation will be aborted TCPIP_HTTP_NET_CHUNKS_NUMBER number of chunks that are created It depends on the TCPIP_HTTP_NET_MAX_RECURSE_LEVEL and on the number of connections Maximum number should be TCPIP_HTTP_NET_MAX_CONNECTIONS * TCPIP_HTTP_NET_MAX_RECURSE_LEVEL i e TCPIP_HTTP_NET_MODULE_CONFIG::nConnections * TCPIP_HTTP_NET_MODULE_CONFIG::nChunks All the chunks are in a pool and are used by all connections TCPIP_HTTP_NET_DYNVAR_PROCESS This symbol enables the processing of dynamic variables Make it evaluate to false (0) if dynamic variables are not needed All the following symbols referring to dynamic variables are relevant only when TCPIP_HTTP_NET_DYNVAR_PROCESS = 0 TCPIP_HTTP_NET_DYNVAR_PROCESS_RETRIES retry limit for a dynamic variable processing ths puts a limit on the number of times a dynamic variable \"dynamicPrint\" function can return TCPIP_HTTP_DYN_PRINT_RES_AGAIN/TCPIP_HTTP_DYN_PRINT_RES_PROCESS_AGAIN and avoids having the HTTP code locked up forever If more retries are attempted the processing will be considered done and dynamicPrint function will not be called again TCPIP_HTTP_NET_FILE_PROCESS_BUFFER_RETRIES Retry limit for allocating a file buffer from the pool If more retries are not successful the operation will be aborted TCPIP_HTTP_NET_FILE_PROCESS_BUFFER_SIZE Size of the buffer used for processing HTML dynamic variable and binary files For dynamic variable files it should be able to accommodate the longest HTML line size including CRLF TCPIP_HTTP_NET_FILE_PROCESS_BUFFERS_NUMBER Number of file buffers to be created; These buffers are used to store data while file processing is done They are organized in a pool Each file being processed needs a file buffer and tries to get it from the pool If a buffer is not available the HTTP conenction will wait for one to become available Once the file is done the file buffer is released and could be used by a different file The number depends on the number of files that are processed in parallel To avoid deadlock the number should be = than the number of more TCPIP_HTTP_NET_FILENAME_MAX_LEN maximum size of a HTTP file name with the path removed from the file name one extra char added for the string terminator TCPIP_HTTP_NET_SSI_ATTRIBUTES_MAX_NUMBER maximum number of attributes for a SSI command most SSI commands take just one attribute/value pair per line but multiple attribute/value pairs on the same line are allowed where it makes sense TCPIP_HTTP_NET_SSI_CMD_MAX_LEN maximum size for a SSI command line: command + attribute/value pairs must be = TCPIP_HTTP_NET_FILE_PROCESS_BUFFER_SIZE If it is much larger than needed then inefficiency occurs when reading data from the file and then discarding it because a much larger than needed data buffer was read TCPIP_HTTP_NET_SSI_ECHO_NOT_FOUND_MESSAGE message to echo when echoing a not found variable TCPIP_HTTP_NET_SSI_PROCESS This symbol enables the processing of SSI commands Make it evaluate to false (0) if SSI commands are not needed All the following symbols referring to SSI commands are relevant only when TCPIP_HTTP_NET_SSI_PROCESS = 0 TCPIP_HTTP_NET_SSI_STATIC_ATTTRIB_NUMBER number of static attributes associated to a SSI command if the command has more attributes than this number the excess will be allocated dynamically TCPIP_HTTP_NET_SSI_VARIABLE_NAME_MAX_LENGTH maximum length of a SSI variable name any excess characters will be truncated Note that this can result in multiple variables being represented as one SSI variable TCPIP_HTTP_NET_SSI_VARIABLE_STRING_MAX_LENGTH maximum size of a SSI string variable value any excess characters will be truncated Note that the variable value requires SSI storage that's allocated dynamically Also this value determines the size of an automatic (stack) buffer when the variable is echoed If this value is large make sure you have enough stack space TCPIP_HTTP_NET_SSI_VARIABLES_NUMBER maximum number of SSI variables that can be created at run time These variables are stored in an internal hash For max efficiency this number should be a prime TCPIP_HTTP_NET_CONNECTION_TIMEOUT Persistent connection idle timeout in seconds If a persistent connection is idle for more that this timeout the server will close it Usually the client closes the connection Using this timeout value the server can close the its side of the connection to avoid all connections to remain indefinitely open if the client misbehaves Use 0 to never timeout The timeout value has to be = 32767 seconds HTTP_NET_CONFIG_H This is macro HTTP_NET_CONFIG_H  TCPIP_HTTP_NET_FREE_FUNC HTTP corresponding deallocation function free style This is the function the HTTP will call for freeing the allocated memory Use standard C library 'free' or 0 as a default If it's 0 HTTP will use the allocation functions passed in at the stack initialization TCPIP_HTTP_NET_MALLOC_FUNC HTTP allocation function malloc style This is the function the HTTP will call to allocate memory needed for: dynamic variables SSI or file uploads Use standard C library 'malloc' or 0 as a default If it's 0 HTTP will use the allocation functions passed in at the stack initialization Functions  TCPIP_HTTP_NET_ConnectionByteCountDec Decrements the connection byte count TCPIP_HTTP_NET_ConnectionByteCountSet Sets how many bytes are available to be read TCPIP_HTTP_NET_ConnectionCallbackPosSet Sets the callback position indicator TCPIP_HTTP_NET_ConnectionDiscard Discards any pending data in the connection RX buffer TCPIP_HTTP_NET_ConnectionFlush Immediately transmits all connection pending TX data TCPIP_HTTP_NET_ConnectionHasArgsSet Sets whether there are get or cookie arguments TCPIP_HTTP_NET_ConnectionIsAuthorizedSet Sets the authorized state for the current connection TCPIP_HTTP_NET_ConnectionNetHandle Returns the network handle of the current connection TCPIP_HTTP_NET_ConnectionPeek Reads a specified number of data bytes from the connection RX buffer without removing them from the buffer TCPIP_HTTP_NET_ConnectionPostSmSet Set the POST state machine state TCPIP_HTTP_NET_ConnectionRead Reads an array of data bytes from a connection's RX buffer TCPIP_HTTP_NET_ConnectionReadBufferSize Returns the size of the connection RX buffer TCPIP_HTTP_NET_ConnectionReadIsReady Determines how many bytes can be read from the connection RX buffer TCPIP_HTTP_NET_ConnectionStatusSet Sets HTTP status TCPIP_HTTP_NET_ConnectionStringFind Helper to find a string of characters in an incoming connection buffer TCPIP_HTTP_NET_ConnectionUserDataSet Sets the user data parameter for the current connection TCPIP_HTTP_NET_DynamicWrite Writes a data buffer to the current connection TCPIP_HTTP_NET_DynamicWriteString Helper for writing a string within a dynamic variable context TCPIP_HTTP_NET_Task Standard TCP/IP stack module task function TCPIP_HTTP_NET_URLDecode Parses a string from URL encoding to plain text TCPIP_HTTP_NET_UserHandlerDeregister Deregisters a previously registered HTTP user handler TCPIP_HTTP_NET_UserHandlerRegister Registers a user callback structure with the HTTP server TCPIP_HTTP_NET_ActiveConnectionCountGet Gets the number of active (and inactive) connections TCPIP_HTTP_NET_ArgGet Locates a form field value in a given data array TCPIP_HTTP_NET_ConnectionByteCountGet Returns how many bytes are available to be read TCPIP_HTTP_NET_ConnectionCallbackPosGet Returns the callback position indicator TCPIP_HTTP_NET_ConnectionDataBufferGet Returns pointer to connection general purpose data buffer TCPIP_HTTP_NET_ConnectionFileGet Get handle to current connection's file TCPIP_HTTP_NET_ConnectionHasArgsGet Checks whether there are get or cookie arguments TCPIP_HTTP_NET_ConnectionIsAuthorizedGet Gets the authorized state for the current connection TCPIP_HTTP_NET_ConnectionPostSmGet Get the POST state machine state TCPIP_HTTP_NET_ConnectionSocketGet Get the socket for the current connection TCPIP_HTTP_NET_ConnectionStatusGet Gets HTTP status TCPIP_HTTP_NET_ConnectionUserDataGet Gets the user data parameter for the current connection TCPIP_HTTP_NET_ConnectionPostNameRead Reads a name from a URL encoded string in the network transport buffer TCPIP_HTTP_NET_ConnectionPostValueRead Reads a value from a URL encoded string in the network transport buffer TCPIP_HTTP_NET_ConnectionDataBufferSizeGet Returns the size of the connection general purpose data buffer TCPIP_HTTP_NET_ConnectionDynamicDescriptors Returns the number of dynamic variable descriptors TCPIP_HTTP_NET_SSIVariableDelete Function to delete an SSI variable TCPIP_HTTP_NET_SSIVariableGet Function to get access to an existing SSI variable TCPIP_HTTP_NET_SSIVariableGetByIndex Function to get access to an existing SSI variable TCPIP_HTTP_NET_SSIVariableSet Function to set an SSI variable TCPIP_HTTP_NET_SSIVariablesNumberGet Function to get the number of the current SSI variables TCPIP_HTTP_NET_ConnectionHandleGet Gets the connection handle of a HTTP connection TCPIP_HTTP_NET_ConnectionIndexGet Gets the index of the HTTP connection TCPIP_HTTP_NET_DynamicFileInclude Dynamically includes/writes a file to the HTTP connection Data Types and Constants  _tag_TCPIP_HTTP_NET_USER_CALLBACK HTTP user implemented callback data structure TCPIP_HTTP_DYN_ARG_DCPT HTTP dynamic argument descriptor TCPIP_HTTP_DYN_ARG_TYPE HTTP supported dynamic variables argument types TCPIP_HTTP_DYN_PRINT_RES Dynamic print result when a dynamic variable print callback function returns; TCPIP_HTTP_DYN_VAR_DCPT HTTP dynamic variable descriptor TCPIP_HTTP_DYN_VAR_FLAGS HTTP supported dynamic variables flags TCPIP_HTTP_NET_CONN_HANDLE HTTP connection identifier handle of a HTTP connection TCPIP_HTTP_NET_EVENT_TYPE HTTP reported run-time events TCPIP_HTTP_NET_IO_RESULT Result states for execution callbacks TCPIP_HTTP_NET_MODULE_CONFIG HTTP module dynamic configuration data TCPIP_HTTP_NET_MODULE_FLAGS HTTP module configuration flags Multiple flags can be OR-ed TCPIP_HTTP_NET_READ_STATUS Result states for TCPIP_HTTP_NET_ConnectionPostNameRead TCPIP_HTTP_NET_ConnectionPostValueRead and TCPIP_HTTP_NET_ConnectionPostReadPair TCPIP_HTTP_NET_STATUS Supported Commands and Server Response Codes TCPIP_HTTP_NET_USER_CALLBACK HTTP user implemented callback data structure TCPIP_HTTP_NET_USER_HANDLE HTTP user handle TCPIP_HTTP_NET_ConnectionPostReadPair Reads a name and value pair from a URL encoded string in the network transport buffer TCPIP_HTTP_SSI_ATTR_DCPT HTTP SSI attribute descriptor TCPIP_HTTP_SSI_NOTIFY_DCPT HTTP SSI notification descriptor _ HTTP_NET_H This is macro _ HTTP_NET_H  ",
							" _ HTTP_NET_H Macro ",
							" C #define __HTTP_NET_H_ ",
							" Description This is macro __HTTP_NET_H_ ",
							" TCPIP_HTTP_DYN_ARG_DCPT Structure ",
							" C typedef struct { uint16_t argType; uint16_t argFlags; union { int32_t argInt32; const char* argStr; } } TCPIP_HTTP_DYN_ARG_DCPT; ",
							" Description Data structure: TCPIP_HTTP_DYN_ARG_DCPT This data type defines the structure of a HTTP dynamic variable argument It is used for describing the dynamic variables arguments ",
							" Members Members Description argType A TCPIP_HTTP_DYN_ARG_TYPE value argFlags Extra argument flags argInt32 Use this member when the arg type is INT32 argStr Use this member when the arg type is string ",
							" Remarks The argument flags are currently not used They are meant for further extensions ",
							" TCPIP_HTTP_DYN_ARG_TYPE Enumeration ",
							" C typedef enum { TCPIP_HTTP_DYN_ARG_TYPE_INVALID = 0 TCPIP_HTTP_DYN_ARG_TYPE_INT32 TCPIP_HTTP_DYN_ARG_TYPE_STRING } TCPIP_HTTP_DYN_ARG_TYPE; ",
							" Description Enumeration: TCPIP_HTTP_DYN_ARG_TYPE This enumeration defines the types of the HTTP supported dynamic variables arguments ",
							" Members Members Description TCPIP_HTTP_DYN_ARG_TYPE_INVALID = 0 Invalid argument type TCPIP_HTTP_DYN_ARG_TYPE_INT32 The dynamic variable argument is an int32_t TCPIP_HTTP_DYN_ARG_TYPE_STRING The dynamic variable argument is an ASCII string ",
							" Remarks Currently a dynamic variable can have either string or int32_t parameters Only 16-bit values are currently supported ",
							" TCPIP_HTTP_DYN_PRINT_RES Enumeration ",
							" C typedef enum { TCPIP_HTTP_DYN_PRINT_RES_DONE = 0 TCPIP_HTTP_DYN_PRINT_RES_DEFAULT TCPIP_HTTP_DYN_PRINT_RES_PROCESS_AGAIN TCPIP_HTTP_DYN_PRINT_RES_AGAIN } TCPIP_HTTP_DYN_PRINT_RES; ",
							" Description Enumeration: TCPIP_HTTP_DYN_PRINT_RES This enumeration defines the results associated with the HTTP dynamic variables callbacks (template_DynPrint()) ",
							" Members Members Description TCPIP_HTTP_DYN_PRINT_RES_DONE = 0 Dynamic callback is done TCPIP_HTTP_DYN_PRINT_RES_DEFAULT No implementation supported for this dynamic variable call the default action TCPIP_HTTP_DYN_PRINT_RES_PROCESS_AGAIN Process the action of this call and then call again data written to the HTTP connection but more data is pending TCPIP_HTTP_DYN_PRINT_RES_AGAIN Do not process any action just call again No data was available to be written to the connection or the written data should be ignored this turn ",
							" Remarks Currently the default action for a user defined dynamic variable is \"do nothing\" Keywords like \"inc\" have an internal implementation and don't need to be processed by the user ",
							" TCPIP_HTTP_DYN_VAR_DCPT Structure ",
							" C typedef struct { const char* dynName; const char* fileName; uint16_t callbackID; uint8_t dynFlags; uint8_t nArgs; TCPIP_HTTP_DYN_ARG_DCPT* dynArgs; const void* dynContext; } TCPIP_HTTP_DYN_VAR_DCPT; ",
							" Description Data structure: TCPIP_HTTP_DYN_VAR_DCPT This data type defines the structure of a HTTP dynamic variable descriptor When the user registers a template_DynPrint() function for dynamic variable processing this callback will receive the dynamic variable descriptor as a parameter ",
							" Members Members Description dynName ASCII string storing the dynamic variable name fileName ASCII string storing the file name the dynamic variable belongs to callbackID Callback ID: the dynamic variable index within the file dynFlags A TCPIP_HTTP_DYN_VAR_FLAGS value nArgs Number of arguments that the variable has dynArgs Array of argument descriptors carrying the dynamic variable arguments dynContext Dynamic context of the callback This context is used by the HTTP server and is irrelevant to the user Should NOT be modified in any way by the user ",
							" Remarks None ",
							" TCPIP_HTTP_DYN_VAR_FLAGS Enumeration ",
							" C typedef enum { TCPIP_HTTP_DYN_VAR_FLAG_NONE = 0 TCPIP_HTTP_DYN_VAR_FLAG_NAME_TRUNCATED = 0x01 TCPIP_HTTP_DYN_VAR_FLAG_ARG_NAME_TRUNCATED = 0x02 TCPIP_HTTP_DYN_VAR_FLAG_ARG_NO_TRUNCATED = 0x04 } TCPIP_HTTP_DYN_VAR_FLAGS; ",
							" Description Enumeration: TCPIP_HTTP_DYN_VAR_FLAGS This enumeration defines the flags associated with the HTTP supported dynamic variables ",
							" Members Members Description TCPIP_HTTP_DYN_VAR_FLAG_NONE = 0 No flag associated with this dynamic variable TCPIP_HTTP_DYN_VAR_FLAG_NAME_TRUNCATED = 0x01 Dynamic variable field exceeded available parsing space The dynamic variable name has been truncated TCPIP_HTTP_DYN_VAR_FLAG_ARG_NAME_TRUNCATED = 0x02 Dynamic variable field exceeded available parsing space The dynamic variable arguments have been truncated TCPIP_HTTP_DYN_VAR_FLAG_ARG_NO_TRUNCATED = 0x04 Dynamic variable field exceeded available buffering space The number of arguments of the dynamic variable has been truncated ",
							" Remarks Multiple flags can be set simultaneously New flags will be eventually added Only 16-bit values are currently supported ",
							" TCPIP_HTTP_NET_ActiveConnectionCountGet Function ",
							" C int TCPIP_HTTP_NET_ActiveConnectionCountGet( int* pOpenCount ); ",
							" Description This function will return the number of active and total opened HTTP connections at the current time ",
							" Preconditions None ",
							" Parameters Parameters Description pOpenCount Address to store the number of total HTTP opened connections Could be NULL if not needed ",
							" Returns The number of active/total connections ",
							" Remarks The value returned by this function is informational only The number of active connections changes dynamically ",
							" Example int nConns; nConns = TCPIP_HTTP_NET_ActiveConnectionCountGet(0); ",
							" TCPIP_HTTP_NET_ArgGet Function ",
							" C const uint8_t* TCPIP_HTTP_NET_ArgGet( const uint8_t* cData const uint8_t* cArg ); ",
							" Description This function searches through a data array to find the value associated with a given argument It can be used to find form field values in data received over GET or POST The end of data is assumed to be reached when a null name parameter is encountered This requires the string to have an even number of null-terminated strings followed by an additional null terminator ",
							" Preconditions The data array has a valid series of null terminated name/value pairs ",
							" Parameters Parameters Description cData The buffer to search cArg The name of the argument to find ",
							" Returns A pointer to the argument value or NULL if not found ",
							" Remarks None ",
							" Example template_DynPrint(TCPIP_HTTP_NET_CONN_HANDLE connHandle const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const TCPIP_HTTP_NET_USER_CALLBACK* pCBack) { const uint8_t *ptr; ptr = TCPIP_HTTP_NET_ArgGet(TCPIP_HTTP_NET_ConnectionDataBufferGet(connHandle) (const uint8_t*)\"name\"); if(ptr == 0) { ptr = \"not set\"; } else { strncpy(myBuffer ptr sizeof(myBuffer)); ptr = myBuffer; } TCPIP_HTTP_NET_DynamicWrite(varDcpt ptr strlen(ptr) false); } ",
							" TCPIP_HTTP_NET_CONN_HANDLE Type ",
							" C typedef const void* TCPIP_HTTP_NET_CONN_HANDLE; ",
							" Description HTTP connection identifier handle of a HTTP connection ",
							" TCPIP_HTTP_NET_ConnectionByteCountDec Function ",
							" C void TCPIP_HTTP_NET_ConnectionByteCountDec( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint32_t byteCount ); ",
							" Description This function decrements the current value of the counter showing the number of bytes available to be read from the connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle byteCount Byte count reduction ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionByteCountGet Function ",
							" C uint32_t TCPIP_HTTP_NET_ConnectionByteCountGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the current value of the counter showing the number of bytes available to be read on the connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Current connection byte count - how many bytes have been read so far ",
							" Remarks None ",
							" Example switch(TCPIP_HTTP_NET_ConnectionPostSmGet(connHandle)) { case SM_CFG_SNMP_READ_NAME: // If all parameters have been read end if(TCPIP_HTTP_NET_ConnectionByteCountGet(connHandle) == 0u) { return TCPIP_HTTP_NET_IO_RES_DONE; } } ",
							" TCPIP_HTTP_NET_ConnectionByteCountSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionByteCountSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint32_t byteCount ); ",
							" Description This function sets the current value of the counter showing the number of bytes available to be read from the connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle byteCount Byte count to be set ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionCallbackPosGet Function ",
							" C uint32_t TCPIP_HTTP_NET_ConnectionCallbackPosGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function will return the current value of the clalback position indicator for the HTTP connection identified by connHandle The callback position indicator is used in the processing of the HTTP dynamic variables ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Callback position indicator for connection defined by connHandle  ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionCallbackPosSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionCallbackPosSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint32_t callbackPos ); ",
							" Description This function will set the current value of the callback position indicator for the HTTP connection identified by connHandle The callback position indicator is used in the processing of the HTTP dynamic variables When set to a value = 0 it indicates to the HTTP server that the application has more pending processing that needs to be done ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle callbackPos New connection callback position value ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionDataBufferGet Function ",
							" C uint8_t* TCPIP_HTTP_NET_ConnectionDataBufferGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns a pointer to the HTTP connection internal data buffer This gives access to the application to the data that's stored in the HTTP connection buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns A pointer to the connection's general purpose data buffer ",
							" Remarks None ",
							" Example template_DynPrint(TCPIP_HTTP_NET_CONN_HANDLE connHandle const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const TCPIP_HTTP_NET_USER_CALLBACK* pCBack) { const uint8_t *ptr; ptr = TCPIP_HTTP_NET_ArgGet(TCPIP_HTTP_NET_ConnectionDataBufferGet (connHandle) (const uint8_t*)\"name\"); if(ptr == 0) { ptr = \"not set\"; } else { strncpy(myBuffer ptr sizeof(myBuffer)); ptr = myBuffer; } TCPIP_HTTP_NET_DynamicWrite(varDcpt ptr strlen(ptr) false); } ",
							" TCPIP_HTTP_NET_ConnectionDataBufferSizeGet Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionDataBufferSizeGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the size of the HTTP connection internal data buffer ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Size of the connection's general purpose data buffer ",
							" Remarks This is the parameter that was used for HTTP initialization in TCPIP_HTTP_NET_MODULE_CONFIG::dataLen ",
							" Example // Read a name uint8_t* httpDataBuff = TCPIP_HTTP_NET_ConnectionDataBufferGet(connHandle); uint16_t httpDataLen = TCPIP_HTTP_NET_ConnectionDataBufferSizeGet(connHandle); if(TCPIP_HTTP_NET_ConnectionPostNameRead(connHandle httpDataBuff httpDataLen) == TCPIP_HTTP_NET_READ_INCOMPLETE) { return TCPIP_HTTP_NET_IO_RES_NEED_DATA; } ",
							" TCPIP_HTTP_NET_ConnectionDiscard Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionDiscard( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function discards data from the connection RX buffer ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle ",
							" Returns The number of bytes that have been discarded from the RX buffer ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionDynamicDescriptors Function ",
							" C int TCPIP_HTTP_NET_ConnectionDynamicDescriptors(); ",
							" Description This function returns the number of the dynamic variable buffer descriptors that are allocated by the HTTP for dynamic variable processing ",
							" Preconditions None ",
							" Returns The number of descriptors allocated by the HTTP module ",
							" Remarks Currently the dynamic variable descriptors are allocated at the HTTP initialization and cannot be changed at run-time ",
							" TCPIP_HTTP_NET_ConnectionFileGet Function ",
							" C SYS_FS_HANDLE TCPIP_HTTP_NET_ConnectionFileGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the handle of the current HTTP connection file ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns Handle to File System file belonging to the connection defined by connHandle  ",
							" Remarks None ",
							" Example uint8_t myBuff[20]; // Get the file handle and read from that file SYS_FS_FileRead(myBuff sizeof(myBuff) TCPIP_HTTP_NET_ConnectionFileGet(connHandle)); ",
							" TCPIP_HTTP_NET_ConnectionFlush Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionFlush( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function calls the transport layer's flush function ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle ",
							" Returns Number of flushed bytes 0 if no flushed bytes or some error ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionHandleGet Function ",
							" C TCPIP_HTTP_NET_CONN_HANDLE TCPIP_HTTP_NET_ConnectionHandleGet( int connIx ); ",
							" Description This function will return the connection handle of the requested HTTP connection index ",
							" Preconditions None ",
							" Parameters Parameters Description connIx The HTTP connection ix ",
							" Returns A valid connection handle if the connection index is valid 0 if there is no such connection ",
							" Remarks None ",
							" Example TCPIP_HTTP_NET_CONN_HANDLE connHandle; connHandle = TCPIP_HTTP_NET_ConnectionHandleGet(0); ",
							" TCPIP_HTTP_NET_ConnectionHasArgsGet Function ",
							" C uint8_t TCPIP_HTTP_NET_ConnectionHasArgsGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description The function will get the value of the \"cookies or get arguments\" that are present ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns The current value of the connection hasArgs  ",
							" Remarks None ",
							" Example uint8_t hasArgs = TCPIP_HTTP_NET_ConnectionHasArgsGet(connHandle); ",
							" TCPIP_HTTP_NET_ConnectionHasArgsSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionHasArgsSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint8_t args ); ",
							" Description This function sets the value of the \"cookies or get arguments\" that are present ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle args Number of arguments ",
							" Returns None ",
							" Remarks None ",
							" Example else if( memcmp(filename \"cookies htm\" 11)) { TCPIP_HTTP_NET_ConnectionHasArgsSet(connHandle 1); } ",
							" TCPIP_HTTP_NET_ConnectionIndexGet Function ",
							" C int TCPIP_HTTP_NET_ConnectionIndexGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function will return the index of the requested HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle The HTTP connection handle ",
							" Returns The connection index ",
							" Remarks None ",
							" Example int connIx; connIx = TCPIP_HTTP_NET_ConnectionIndexGet(connHandle); ",
							" TCPIP_HTTP_NET_ConnectionIsAuthorizedGet Function ",
							" C uint8_t TCPIP_HTTP_NET_ConnectionIsAuthorizedGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the authorization status for the current HTTP connection This is one of the values returned by the template_ConnectionFileAuthenticate() function ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns A uint8_t representing the authorization status ",
							" Remarks None ",
							" Example uint8_t isAuth; isAuth = TCPIP_HTTP_NET_ConnectionIsAuthorizedGet(connHandle); ",
							" TCPIP_HTTP_NET_ConnectionHasArgsSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionIsAuthorizedSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint8_t auth ); ",
							" Description This function sets the authorization status for the current HTTP connection This has to be one of the values in the set returned by the template_ConnectionFileAuthenticate() function ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle auth New authorization state ",
							" Returns None ",
							" Remarks None ",
							" Example uint8_t auth = 0x80; TCPIP_HTTP_NET_ConnectionIsAuthorizedSet(connHandle auth); ",
							" TCPIP_HTTP_NET_ConncetionNetHandle Function ",
							" C TCPIP_NET_HANDLE TCPIP_HTTP_NET_ConnectionNetHandle( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the network handle over which the current HTTP connection communicates ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle ",
							" Returns The connection network handle ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionPeek Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionPeek( TCPIP_HTTP_NET_CONN_HANDLE connHandle void * buffer uint16_t size ); ",
							" Description This function allows peeking into the connection buffer The data will still be available for a next read operation ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle buffer Destination to write the peeked data bytes size Length of bytes to peek from the connection RX buffer ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionPostNameRead Function ",
							" C TCPIP_HTTP_NET_READ_STATUS TCPIP_HTTP_NET_ConnectionPostNameRead( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint8_t* cData uint16_t wLen ); ",
							" Description This function reads a name from a URL encoded string in the network transport buffer This function is meant to be called from a template_ConnectionPostExecute() callback to facilitate easier parsing of incoming data This function also prevents buffer overflows by forcing the programmer to indicate how many bytes are expected At least two extra bytes are needed in cData over the maximum length of data expected to be read This function will read until the next '=' character which indicates the end of a name parameter It assumes that the front of the buffer is the beginning of the name parameter to be read This function properly updates pHttpCon- byteCount by decrementing it by the number of bytes read It also removes the delimiting '=' from the buffer ",
							" Preconditions The front of the network transport buffer is the beginning of a name parameter and the rest of the network transport buffer contains a URL-encoded string with a name parameter terminated by a '=' character ",
							" Parameters Parameters Description connHandle HTTP connection handle cData Where to store the name once it is read wLen How many bytes can be written to cData ",
							" Returns TCPIP_HTTP_NET_READ_OK - Name was successfully read TCPIP_HTTP_NET_READ_TRUNCTATED - Entire name could not fit in the buffer so the value was truncated and data has been lost TCPIP_HTTP_NET_READ_INCOMPLETE - Entire name was not ypet in the buffer so call this function again later to retrieve ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionPostReadPair Macro ",
							" C #define TCPIP_HTTP_NET_ConnectionPostReadPair(connHandle cData wLen) TCPIP_HTTP_NET_ConnectionPostValueRead(connHandle cData wLen) ",
							" Description Reads a name and value pair from a URL encoded string in the network transport buffer This function is meant to be called from an template_ConnectionPostExecute() callback to facilitate easier parsing of incoming data This function also prevents buffer overflows by forcing the programmer to indicate how many bytes are expected At least 2 extra bytes are needed in cData over the maximum length of data expected to be read This function will read until the next ' ' character which indicates the end of a value parameter It assumes that the front of the buffer is the beginning of the name parameter to be read This function properly updates the connection byteCount (see TCPIP_HTTP_NET_ConnectionByteCountGet) by decrementing it by the number of bytes read It also removes the delimiting ' ' from the buffer Once complete two strings will exist in the cData buffer The first is the parameter name that was read while the second is the associated value ",
							" Preconditions The front of the network transport buffer is the beginning of a name parameter and the rest of the network transport buffer contains a URL-encoded string with a name parameter terminated by a '=' character and a value parameter terminated by a ' ' ",
							" Parameters |Parameters |Description | |connHandle |HTTP connection handle | |cData |Where to store the name and value strings once they are read | |wLen |How many bytes can be written to cData | ",
							" TCPIP_HTTP_NET_ConnectionPostSmGet Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionPostSmGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the POST state machine state for the connection defined by connHandle This state is maintained by the HTTP connection and can be used by the user of the HTTP to maintain its own POST state machine The values of the POST state machine have significance only for the user of the HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns A 16-bit integer POST state machine state ",
							" Remarks None ",
							" Example #define SM_POST_LCD_READ_NAME 1 #define SM_POST_LCD_READ_VALUE 2 switch(TCPIP_HTTP_NET_ConnectionPostSmGet(connHandle)) { // Find the name case SM_POST_LCD_READ_NAME: // Found the value so store the LCD and return case SM_POST_LCD_READ_VALUE: } ",
							" TCPIP_HTTP_NET_ConnectionPostSmSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionPostSmSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint16_t state ); ",
							" Description This function sets the POST state machine state for the connection defined by connHandle This state is maintained by the HTTP connection and can be used by the user of the HTTP to maintain its own POST state machine The values of the POST state machine have significance only for the user of the HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle state 16-bit integer state for POST state machine ",
							" Returns None ",
							" Remarks None ",
							" Example uint8_t* httpDataBuff; uint16_t httpBuffSize; #define SM_POST_LCD_READ_NAME 1 #define SM_POST_LCD_READ_VALUE 2 switch(TCPIP_HTTP_NET_ConnectionPostSmGet(connHandle)) { // Find the name case SM_POST_LCD_READ_NAME: // Read a name httpBuffSize = TCPIP_HTTP_NET_ConnectionDataBufferSizeGet(connHandle); if(TCPIP_HTTP_NET_ConnectionPostNameRead(connHandle httpDataBuff httpBuffSize) == TCPIP_HTTP_NET_READ_INCOMPLETE) return TCPIP_HTTP_NET_IO_RES_NEED_DATA; TCPIP_HTTP_NET_ConnectionPostSmSet(connHandle SM_POST_LCD_READ_VALUE); // No break continue reading value // Found the value so store the LCD and return case SM_POST_LCD_READ_VALUE: } ",
							" TCPIP_HTTP_NET_ConnectionPostValueRead Function ",
							" C TCPIP_HTTP_NET_READ_STATUS TCPIP_HTTP_NET_ConnectionPostValueRead( TCPIP_HTTP_NET_CONN_HANDLE connHandle uint8_t* cData uint16_t wLen ); ",
							" Description This function reads a value from a URL encoded string in the network transport buffer This function is meant to be called from a template_ConnectionPostExecute() callback to facilitate easier parsing of incoming data This function also prevents buffer overflows by forcing the programmer to indicate how many bytes are expected At least two extra bytes are needed in cData above the maximum length of data expected to be read This function will read until the next ' ' character which indicates the end of a value parameter It assumes that the front of the buffer is the beginning of the value parameter to be read If pHttpCon- byteCount indicates that all expected bytes are in the buffer it assumes that all remaining data is the value and acts accordingly This function properly updates pHttpCon- byteCount by decrementing it by the number of bytes read The terminating ' ' character is also removed from the buffer ",
							" Preconditions The front of the network transport buffer is the beginning of a name parameter and the rest of the network transport buffer contains a URL-encoded string with a name parameter terminated by a '=' character ",
							" Parameters Parameters Description connHandle HTTP connection handle cData Where to store the value once it is read wLen How many bytes can be written to cData  ",
							" Returns TCPIP_HTTP_NET_READ_OK - Value was successfully read TCPIP_HTTP_NET_READ_TRUNCTATED - Entire value could not fit in the buffer so the value was truncated and data has been lost TCPIP_HTTP_NET_READ_INCOMPLETE - Entire value was not yet in the buffer so call this function again later to retrieve ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionRead Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionRead( TCPIP_HTTP_NET_CONN_HANDLE connHandle void * buffer uint16_t size ); ",
							" Description This function reads an array of data bytes from the connection RX buffer The data is removed from the FIFO in the process ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle buffer The pointer to the array to store data that was read size The number of bytes to read ",
							" Returns The number of bytes read from the socket If less than len the connection RX buffer became empty or the underlying socket is not connected ",
							" Remarks If the supplied buffer is null the data is simply discarded ",
							" TCPIP_HTTP_NET_ConnectionReadBufferSize Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionReadBufferSize( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function discards data from the connection RX buffer ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle ",
							" Returns The size of the connection RX buffer ",
							" Remarks None ",
							" TCPIP_HTTP_NET_ConnectionReadIsReady Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionReadIsReady( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function determines how many bytes can be read from the connection RX buffer ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle Connection handle ",
							" Returns The number of bytes available to be read from the connection RX buffer ",
							" Remarks When using an encrypted connection the number of available unencrypted bytes may turn out to be different than what this function returns ",
							" TCPIP_HTTP_NET_ConnectionSocketGet Function ",
							" C NET_PRES_SKT_HANDLE_T TCPIP_HTTP_NET_ConnectionSocketGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description The function returns the network transport socket of the specified HTTP connection The user gets access to the connection socket which it can use for debugging or directly sending/reading data ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns NET_PRES_SKT_HANDLE_T for the connection defined by connHandle  ",
							" Remarks This function gives direct access to the underlying transport socket It is meant for test/advanced usage only The regular connection functions should be used for manipulation of the connection data Using the socket directly for data manipulation will disrupt the HTTP server functionality ",
							" Example uint32_t byteCount; int sktRxSize; byteCount = TCPIP_HTTP_NET_ConnectionByteCountGet(connHandle); sktRxSize = TCPIP_HTTP_NET_ConnectionReadBufferSize(connHandle); if(byteCount sktRxSize) { // Configuration Failure TCPIP_HTTP_NET_ConnectionStatusSet(connHandle TCPIP_HTTP_NET_STAT_REDIRECT); return TCPIP_HTTP_NET_IO_RES_DONE; } ",
							" TCPIP_HTTP_NET_ConnectionStatusGet Function ",
							" C TCPIP_HTTP_NET_STATUS TCPIP_HTTP_NET_ConnectionStatusGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the current HTTP status of the selected HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns A TCPIP_HTTP_NET_STATUS value ",
							" Remarks None ",
							" Example TCPIP_HTTP_NET_STATUS currStat = TCPIP_HTTP_NET_ConnectionStatusGet(connHandle); ",
							" TCPIP_HTTP_NET_ConnectionStatusSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionStatusSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle TCPIP_HTTP_NET_STATUS stat ); ",
							" Description Allows write access to the HTTP status of the selected HTTP connection ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle stat new TCPIP_HTTP_NET_STATUS enumeration value ",
							" Returns None ",
							" Remarks None ",
							" Example byteCount = TCPIP_HTTP_NET_ConnectionByteCountGet(connHandle); int sktRxSize; sktRxSize = TCPIP_HTTP_NET_ConnectionReadBufferSize(connHandle); if(byteCount sktRxSize) { // Configuration Failure // 302 Redirect will be returned TCPIP_HTTP_NET_ConnectionStatusSet(connHandle TCPIP_HTTP_NET_STAT_REDIRECT); } ",
							" TCPIP_HTTP_NET_ConnectionStringFind Function ",
							" C uint16_t TCPIP_HTTP_NET_ConnectionStringFind( TCPIP_HTTP_NET_CONN_HANDLE connHandle const char* str uint16_t startOffs uint16_t searchLen ); ",
							" Description This function searches for an ASCIIZ string in the RX buffer of the connection It does the search by performing a peek operation in the RX buffer (i e the RX data in the buffer is not consumed and it is available for further read operations) It works for both encrypted and unencrypted connections ",
							" Preconditions connHandle - a valid HTTP connection ",
							" Parameters Parameters Description connHandle HTTP connection handle str 0 terminated ASCII string to search for startOffs Offset in the RX buffer to start the search from searchLen If 0 it is the length of buffer to search into (starting from startOffs) If 0 the whole buffer is searched ",
							" Returns If string was found - A zero-indexed position in the RX buffer of the string occurence 0xFFFF - Search array not found ",
							" Remarks This function currently performs the search by doing a whole buffer peek into one single operation Note that the search will fail if there's more data in the TCP socket than could be read at once ",
							" TCPIP_HTTP_NET_ConnectionUserDataGet Function ",
							" C const void* TCPIP_HTTP_NET_ConnectionUserDataGet( TCPIP_HTTP_NET_CONN_HANDLE connHandle ); ",
							" Description This function returns the user data value for the current HTTP connection This data belongs to the user and is not used in any way by the HTTP server module It can be set by the user with TCPIP_HTTP_NET_ConnectionUserDataSet() ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle ",
							" Returns User data that's stored as part of the connection ",
							" Remarks None ",
							" Example uint32_t myConnData; myConnData = (uint32_t)TCPIP_HTTP_NET_ConnectionUserDataGet(connHandle); ",
							" TCPIP_HTTP_NET_ConnectionUserDataSet Function ",
							" C void TCPIP_HTTP_NET_ConnectionUserDataSet( TCPIP_HTTP_NET_CONN_HANDLE connHandle const void* uData ); ",
							" Description This function will set the user data value for the current HTTP connection This data belongs to the user and is not used in any way by the HTTP server module It is available to the user by calling TCPIP_HTTP_NET_ConnectionUserDataGet() ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle uData User supplied data ",
							" Returns None ",
							" Remarks None ",
							" Example uint32_t myConnData; TCPIP_HTTP_NET_ConnectionUserDataSet(connHandle (const void*)myConnData); ",
							" TCPIP_HTTP_NET_DynamicFileInclude Function ",
							" C bool TCPIP_HTTP_NET_DynamicFileInclude( TCPIP_HTTP_NET_CONN_HANDLE connHandle const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const char* fileName ); ",
							" Description This function allows an entire file to be included as part of a dynamic variable processing This reduces unneeded duplication of visual elements such as headers menus etc This function is NOT meant for the processing of the \"inc\" keyword in the web pages (see the Remarks section below) ",
							" Preconditions None ",
							" Parameters Parameters Description connHandle HTTP connection handle fileName The name of the file to be included ",
							" Returns True - if the call succeeded False - if the file could not be opened ",
							" Remarks The function allows to insert a file as part of the dynamic variable processing Should be called ONLY from within a dynamic variable processing function context (i e from within a dynamicPrint() function) The connHandle and varDcpt need to be valid handles The included file can contain dynamic variables However there's a limit for recursive calls (see TCPIP_HTTP_NET_MAX_RECURSE_LEVEL()) The file is just added to the processing queue Returning true does not mean that the whole file has been already sent to the connection If the function returns true but an error occurs during the file processing an event will be reported using the template_EventReport() callback If the function returns false an event will be reported using the template_EventReport() callback with additional info Please note that the processing of HTTP dynamic keywords in the HTML code such as ~inc:filename ext~ is processed internally by the HTTP module For such a dynamic variable control is not passed to the user ",
							" TCPIP_HTTP_NET_DynamicWrite Function ",
							" C bool TCPIP_HTTP_NET_DynamicWrite( const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const void * buffer uint16_t size bool needAck ); ",
							" Description This function takes a buffer and sends it over the HTTP connection as part of the HTTP dynamic variable processing ",
							" Preconditions varDcpt - a valid dynamic variable descriptor ",
							" Parameters Parameters Description varDcpt Dynamic variable descriptor as passed in the template_DynPrint() function buffer The pointer to the persistent buffer to be written to the HTTP connection as part of this dynamic variable callback size The number of bytes to be written needAck If true once the buffer is processed internally template_DynAcknowledge() will be called ",
							" Returns True - Data buffer has been queued for output False - An invalid buffer was provided or the buffer could not be queued because of lack of resources (descriptors) ",
							" Remarks The buffer passed in by the user with this call is queued internally using an available dynamic variable buffer descriptor That means that the buffer has to be persistent Once the buffer is processed and sent to output the dynamicAck callback will be called to inform the user that the corresponding buffer can be reused/freed When multiple connections output their dynamic content concurrently the HTTP may run out of dynamic variable buffer descriptors that are used in queuing the requests and the call may fail If the call failed because the buffer could not be queued it may be retried by returning TCPIP_HTTP_DYN_PRING_RES_AGAIN() in the template_DynPrint() callback If sequential write calls are done from within the same template_dynPrint() call the HTTP module will try to append the new dynamic data to the existent one The number of internal HTTP dynamic variable buffer descriptors is contolled by TCPIP_HTTP_NET_DYNVAR_DESCRIPTORS_NUMBER() It can be obtained at run-time using the TCPIP_HTTP_NET_ConnectionDynamicDescriptors() function ",
							" TCPIP_HTTP_NET_DynamicWriteString Function ",
							" C bool TCPIP_HTTP_NET_DynamicWriteString( const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const char* str bool needAck ); ",
							" Description This function takes a 0 terminated ASCII string and sends it to the HTTP connection as part of the HTTP dynamic variable processing ",
							" Preconditions varDcpt - a valid dynamic variable descriptor ",
							" Parameters Parameters Description varDcpt Dynamic variable descriptor as passed in the template_DynPrint() function str The string to be written needAck If true once the buffer is processed internally template_DynAcknowledge() will be called ",
							" Returns True - Data buffer has been queued for output False - An invalid buffer was provided or the buffer could not be queued because of lack of resources (descriptors) ",
							" Remarks This is just a helper The actual function called is still TCPIP_HTTP_NET_DynamicWrite() That means that the supplied string has to be persistent See the remarks for TCPIP_HTTP_NET_DynamicWrite() ",
							" TCPIP_HTTP_NET_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_HTTP_NET_EVENT_NONE = 0 TCPIP_HTTP_NET_EVENT_FS_UPLOAD_COMPLETE TCPIP_HTTP_NET_EVENT_OPEN TCPIP_HTTP_NET_EVENT_CLOSE_DONE TCPIP_HTTP_NET_EVENT_CLOSE_TIMEOUT TCPIP_HTTP_NET_EVENT_CLOSE_POST_ERROR TCPIP_HTTP_NET_EVENT_CLOSE_REMOTE TCPIP_HTTP_NET_EVENT_FILE_OPEN TCPIP_HTTP_NET_EVENT_FILE_CLOSE TCPIP_HTTP_NET_EVENT_FILE_OPEN_ERROR = -1 TCPIP_HTTP_NET_EVENT_FILE_NAME_ERROR = -2 TCPIP_HTTP_NET_EVENT_FILE_NAME_SIZE_ERROR = -3 TCPIP_HTTP_NET_EVENT_FILE_SIZE_ERROR = -4 TCPIP_HTTP_NET_EVENT_FILE_READ_ERROR = -5 TCPIP_HTTP_NET_EVENT_FILE_PARSE_ERROR = -6 TCPIP_HTTP_NET_EVENT_DEPTH_ERROR = -7 TCPIP_HTTP_NET_EVENT_DYNVAR_PARSE_ERROR = -8 TCPIP_HTTP_NET_EVENT_FS_WRITE_ERROR = -9 TCPIP_HTTP_NET_EVENT_FS_MOUNT_ERROR = -10 TCPIP_HTTP_NET_EVENT_CHUNK_POOL_ERROR = -11 TCPIP_HTTP_NET_EVENT_FILE_BUFFER_POOL_ERROR = -12 TCPIP_HTTP_NET_EVENT_DYNVAR_ALLOC_ERROR = -13 TCPIP_HTTP_NET_EVENT_UPLOAD_ALLOC_ERROR = -14 TCPIP_HTTP_NET_EVENT_SSI_PARSE_ERROR = -15 TCPIP_HTTP_NET_EVENT_SSI_COMMAND_ERROR = -16 TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_ERROR = -17 TCPIP_HTTP_NET_EVENT_SSI_ALLOC_DESCRIPTOR_ERROR = -18 TCPIP_HTTP_NET_EVENT_PEEK_ALLOC_BUFFER_ERROR = -19 TCPIP_HTTP_NET_EVENT_SSI_ALLOC_ECHO_ERROR = -20 TCPIP_HTTP_NET_EVENT_DYNVAR_ARG_NAME_TRUNCATED = 0x8001 TCPIP_HTTP_NET_EVENT_DYNVAR_ARG_NUMBER_TRUNCATED = 0x8002 TCPIP_HTTP_NET_EVENT_DYNVAR_RETRIES_EXCEEDED = 0x8003 TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_NUMBER_TRUNCATED = 0x8004 TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_UNKNOWN = 0x8005 TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_NUMBER_MISMATCH = 0x8006 TCPIP_HTTP_NET_EVENT_SSI_VAR_NUMBER_EXCEEDED = 0x8007 TCPIP_HTTP_NET_EVENT_SSI_VAR_UNKNOWN = 0x8008 TCPIP_HTTP_NET_EVENT_SSI_VAR_VOID = 0x8009 TCPIP_HTTP_NET_EVENT_SSI_HASH_CREATE_FAILED = 0x800a TCPIP_HTTP_NET_EVENT_SSI_VAR_DELETED = 0x800b TCPIP_HTTP_NET_EVENT_CHUNK_POOL_EMPTY = 0x8020 TCPIP_HTTP_NET_EVENT_FILE_BUFFER_POOL_EMPTY = 0x8021 TCPIP_HTTP_NET_EVENT_PEEK_BUFFER_SIZE_EXCEEDED = 0x8030 } TCPIP_HTTP_NET_EVENT_TYPE; ",
							" Description Enumeration: TCPIP_HTTP_NET_EVENT_TYPE This enumeration defines the types of the HTTP reported events when processing dynamic variables files etc ",
							" Members Members Description TCPIP_HTTP_NET_EVENT_NONE = 0 No event TCPIP_HTTP_NET_EVENT_FS_UPLOAD_COMPLETE Notification that a FS upload operation was completed successfully TCPIP_HTTP_NET_EVENT_OPEN An attempt to open the connection was made data received - Subject to parsing and other validation it may result into a valid connection TCPIP_HTTP_NET_EVENT_CLOSE_DONE The non-persistent connection was done and closed TCPIP_HTTP_NET_EVENT_CLOSE_TIMEOUT The connection was closed due to a client timeout TCPIP_HTTP_NET_EVENT_CLOSE_POST_ERROR The connection was closed due to a POST processing error TCPIP_HTTP_NET_EVENT_CLOSE_REMOTE The connection was closed by the client TCPIP_HTTP_NET_EVENT_FILE_OPEN A HTTP file was successfully opened TCPIP_HTTP_NET_EVENT_FILE_CLOSE A HTTP file was closed TCPIP_HTTP_NET_EVENT_FILE_OPEN_ERROR = -1 An error occurred when opening a HTTP file TCPIP_HTTP_NET_EVENT_FILE_NAME_ERROR = -2 A file name was not specified TCPIP_HTTP_NET_EVENT_FILE_NAME_SIZE_ERROR = -3 A file name was longer than the HTTP storage space TCPIP_HTTP_NET_EVENT_FILE_SIZE_ERROR = -4 File size error TCPIP_HTTP_NET_EVENT_FILE_READ_ERROR = -5 File read error TCPIP_HTTP_NET_EVENT_FILE_PARSE_ERROR = -6 File parse error: line too long TCPIP_HTTP_NET_EVENT_DEPTH_ERROR = -7 The depth allowed for a recursive call was exceeded TCPIP_HTTP_NET_EVENT_DYNVAR_PARSE_ERROR = -8 An error occurred when parsing: dynamic variable name terminator could not be found for example TCPIP_HTTP_NET_EVENT_FS_WRITE_ERROR = -9 A write error was supported while performing an FS upload TCPIP_HTTP_NET_EVENT_FS_MOUNT_ERROR = -10 A write error was reported while mounting after an FS upload TCPIP_HTTP_NET_EVENT_CHUNK_POOL_ERROR = -11 The number of retries for getting a chunk from the pool has been exceeded TCPIP_HTTP_NET_EVENT_FILE_BUFFER_POOL_ERROR = -12 The number of retries for getting a file buffer has been exceeded TCPIP_HTTP_NET_EVENT_DYNVAR_ALLOC_ERROR = -13 Out of memory when trying to allocate space for a dynamic variable descriptor Note that dynamic allocation is used for the dynamic variable descriptor TCPIP_HTTP_NET_EVENT_UPLOAD_ALLOC_ERROR = -14 Out of memory when trying to allocate space for a file upload Note that dynamic allocation is used for the file upload buffer TCPIP_HTTP_NET_EVENT_SSI_PARSE_ERROR = -15 An error occurred when parsing an SSI command: SSI terminator could not be found for example TCPIP_HTTP_NET_EVENT_SSI_COMMAND_ERROR = -16 An unknown/unsupported SSI command TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_ERROR = -17 A SSI attribute error: command w/o attribute etc TCPIP_HTTP_NET_EVENT_SSI_ALLOC_DESCRIPTOR_ERROR = -18 Out of memory when trying to allocate space for a SSI command descriptor Not that dynamic allocation is used for the SSI commands TCPIP_HTTP_NET_EVENT_PEEK_ALLOC_BUFFER_ERROR = -19 Out of memory when trying to allocate memory for the peek buffer The peek operation failed TCPIP_HTTP_NET_EVENT_SSI_ALLOC_ECHO_ERROR = -20 Out of memory when trying to allocate memory for the SSI echo buffer The echo operation failed TCPIP_HTTP_NET_EVENT_DYNVAR_ARG_NAME_TRUNCATED = 0x8001 Warning: a dynamic variable argument name too long; truncated TCPIP_HTTP_NET_EVENT_DYNVAR_ARG_NUMBER_TRUNCATED = 0x8002 Warning: too many arguments for a dynamic variable; truncated TCPIP_HTTP_NET_EVENT_DYNVAR_RETRIES_EXCEEDED = 0x8003 Warning: too many retries for a dynamic variable; stopped TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_NUMBER_TRUNCATED = 0x8004 Warning: too many attributes for a SSI command; truncated TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_UNKNOWN = 0x8005 Warning: unrecognized/unsupported SSI command attribute TCPIP_HTTP_NET_EVENT_SSI_ATTRIB_NUMBER_MISMATCH = 0x8006 Warning: wrong number of SSI command attributes TCPIP_HTTP_NET_EVENT_SSI_VAR_NUMBER_EXCEEDED = 0x8007 Warning: number of SSI set variables exceeded TCPIP_HTTP_NET_EVENT_SSI_VAR_UNKNOWN = 0x8008 Warning: SSI variable does not exist TCPIP_HTTP_NET_EVENT_SSI_VAR_VOID = 0x8009 Warning: SSI variable is void - not echoed TCPIP_HTTP_NET_EVENT_SSI_HASH_CREATE_FAILED = 0x800a Warning: SSI variable hash could not be created allocation failed There will be no run time SSI variable support TCPIP_HTTP_NET_EVENT_SSI_VAR_DELETED = 0x800b Event: SSI variable deleted TCPIP_HTTP_NET_EVENT_CHUNK_POOL_EMPTY = 0x8020 Warning: allocation from the HTTP chunk pool failed (the allocation will be retried) TCPIP_HTTP_NET_EVENT_FILE_BUFFER_POOL_EMPTY = 0x8021 Warning: allocation from the HTTP file buffers pool failed (the allocation will be retried) TCPIP_HTTP_NET_EVENT_PEEK_BUFFER_SIZE_EXCEEDED = 0x8030 Warning: the HTTP peek buffer is too small and cannot contain all the data available in the transport socket buffer and a HTTP search operation may fail This will happen only for transport sockets that do not support peek operation with an offset parameter ",
							" Remarks Multiple warnings can be set simultaneously ",
							" TCPIP_HTTP_NET_IO_RESULT Enumeration ",
							" C typedef enum { TCPIP_HTTP_NET_IO_RES_DONE = 0u TCPIP_HTTP_NET_IO_RES_NEED_DATA TCPIP_HTTP_NET_IO_RES_WAITING TCPIP_HTTP_NET_IO_RES_ERROR } TCPIP_HTTP_NET_IO_RESULT; ",
							" Description Result states for execution callbacks ",
							" Members Members Description TCPIP_HTTP_NET_IO_RES_DONE = 0u Finished with procedure TCPIP_HTTP_NET_IO_RES_NEED_DATA More data needed to continue call again later TCPIP_HTTP_NET_IO_RES_WAITING Waiting for asynchronous process to complete call again later TCPIP_HTTP_NET_IO_RES_ERROR Some error has occurred operation will be aborted ",
							" TCPIP_HTTP_NET_MODULE_CONFIG Structure ",
							" C typedef struct { uint16_t nConnections; uint16_t dataLen; uint16_t sktTxBuffSize; uint16_t sktRxBuffSize; uint16_t listenPort; uint16_t nDescriptors; uint16_t nChunks; uint16_t maxRecurseLevel; uint16_t configFlags; uint16_t nFileBuffers; uint16_t fileBufferSize; uint16_t chunkPoolRetries; uint16_t fileBufferRetries; uint16_t dynVarRetries; uint16_t connTimeout; void* (* http_malloc_fnc)(size_t bytes); void (* http_free_fnc)(void* ptr); const char* web_dir; } TCPIP_HTTP_NET_MODULE_CONFIG; ",
							" Description HTTP module dynamic configuration data ",
							" Members Members Description nConnections Number of simultaneous HTTP connections allowed dataLen Size of the data buffer for reading cookie and GET POST arguments (bytes) skTxBuffSize Size of TX buffer for the associated socket Leave 0 for default skRxBuffSize Size of RX buffer for the associated socket Leave 0 for default listenPort HTTP listening port: 80 443 etc nDescriptors How many buffer descriptors for dynamic variable processing to create They are independent of the HTTP connection number all the HTTP connections use from the dynamic descriptors pool nChunks Maximum number of chunks that are created It depends on the TCPIP_HTTP_NET_MAX_RECURSE_LEVEL and on the number of connections Maximum number should be TCPIP_HTTP_NET_MAX_CONNECTIONS * TCPIP_HTTP_NET_MAX_RECURSE_LEVEL All the chunks are in a pool and are used by all connections maxRecurseLevel The maximum depth of recursive calls for serving a web page: - Files without dynvars: 1 - Files including another file: + 1 - File including a dynamic variable: + 1 etc configFlags A TCPIP_HTTP_NET_MODULE_FLAGS value nFileBuffers Number of file buffers to be created These buffers are used to store data while file processing is done They are organized in a pool Each file being processed needs a file buffer and tries to get it from the pool If a buffer is not available the HTTP conenction will wait for one to become available Once the file is done the file buffer is released and could be used by a different file The number depends on the number of files that are processed in parallel To avoid deadlock the number should be = than the number of maximum files that can be open simultaneously: i e for file1 - include file2 - include file3 you'll need = 3 file process buffers fileBufferSize Size of each of these file buffers should correspond to TCPIP_HTTP_NET_FILE_PROCESS_BUFFER_SIZE chunkPoolRetries How many retries to get chunk from the pool before giving up fileBufferRetries How many retries to get a fileBuffer before giving up dynVarRetries How many retries to havve for a dynamic variable dynamicPrint() function before calling it done connTimeout Persistent connection timeout in seconds If non 0 and a persistent connection is idle for more than this timeout the server will close it Maximum supported value is 32767 seconds HTTP specific allocation functions These functions are used for: - The dynamic variable descriptor - SSI commands - File upload buffer allocation (* http_malloc_fnc)(size_t bytes) Malloc style allocation function for HTTP module (* http_free_fnc)(void* ptr) Free style allocation function web_dir Web pages directory The HTTP server will serve pages located under this top directory No access is possible above this directory As a good practive to follow use something like: \"/mnt_point/webpages/\" to limit an external user access to this only directory in the file system when using the Web server ",
							" TCPIP)HTTP_NET_MODULE_FLAGS Enumeration ",
							" C typedef enum { TCPIP_HTTP_NET_MODULE_FLAG_DEFAULT = 0x00 TCPIP_HTTP_NET_MODULE_FLAG_NON_PERSISTENT = 0x01 TCPIP_HTTP_NET_MODULE_FLAG_NO_DELAY = 0x02 TCPIP_HTTP_NET_MODULE_FLAG_SECURE_ON = 0x10 TCPIP_HTTP_NET_MODULE_FLAG_SECURE_OFF = 0x20 TCPIP_HTTP_NET_MODULE_FLAG_SECURE_DEFAULT = 0x00 } TCPIP_HTTP_NET_MODULE_FLAGS; ",
							" Description HTTP module configuration flags Multiple flags can be OR-ed ",
							" Members Members Description TCPIP_HTTP_NET_MODULE_FLAG_DEFAULT = 0x00 Default flags value TCPIP_HTTP_NET_MODULE_FLAG_NON_PERSISTENT = 0x01 Use non-persistent connections This flag will cause the HTTP connections to be non-persistent and closed after serving each request to the client By default the HTTP connections are persistent TCPIP_HTTP_NET_MODULE_FLAG_NO_DELAY = 0x02 Create the HTTP sockets with NO-DELAY option It will flush data as soon as possible TCPIP_HTTP_NET_MODULE_FLAG_SECURE_ON = 0x10 All HTTP connections have to be secure (supposing the network presentation layer supports encryption) Cannot be used together with TCPIP_HTTP_NET_MODULE_FLAG_SECURE_OFF TCPIP_HTTP_NET_MODULE_FLAG_SECURE_OFF = 0x20 HTTP connections will be non-secure Cannot be used together with TCPIP_HTTP_NET_MODULE_FLAG_SECURE_ON TCPIP_HTTP_NET_MODULE_FLAG_SECURE_DEFAULT = 0x00 HTTP security is based on the port numbers ",
							" TCPIP_HTTP_NET_READ_STATUS Enumeration ",
							" C typedef enum { TCPIP_HTTP_NET_READ_OK = 0 TCPIP_HTTP_NET_READ_TRUNCATED TCPIP_HTTP_NET_READ_INCOMPLETE } TCPIP_HTTP_NET_READ_STATUS; ",
							" Description Result states for TCPIP_HTTP_NET_ConnectionPostNameRead TCPIP_HTTP_NET_ConnectionPostValueRead and TCPIP_HTTP_NET_ConnectionPostReadPair ",
							" Members Members Description TCPIP_HTTP_NET_READ_OK = 0 Read was successful TCPIP_HTTP_NET_READ_TRUNCATED Buffer overflow prevented by truncating value TCPIP_HTTP_NET_READ_INCOMPLETE Entire object is not yet in the buffer Try again later ",
							" TCPIP_HTTP_NET_SSIVariableDelete Function ",
							" C bool TCPIP_HTTP_NET_SSIVariableDelete( const char* varName ); ",
							" Description This function deletes an SSI variable if it exists ",
							" Preconditions The HTTP module should have been initialized SSI should be enabled ",
							" Parameters Parameters Description varName The SSI variable name ",
							" Returns True - If the variable existed and was deleted False - The variable didn't exist ",
							" Remarks None ",
							" TCPIP_HTTP_NET_SSIVariableGet Function ",
							" C const char* TCPIP_HTTP_NET_SSIVariableGet( const char* varName TCPIP_HTTP_DYN_ARG_TYPE* pVarType int32_t* pVarInt ); ",
							" Description This function performs a search for the corresponding SSI variable name and returns a pointer to the variable string representation ",
							" Preconditions The HTTP module should have been initialized SSI should be enabled ",
							" Parameters Parameters Description varName The SSI variable to search for pVarType Address to store the type of the SSI variable pVarInt Address to store the integer value of this variable if the variable exists and is an integer else this address won't be modified Could be NULL if not needed ",
							" Returns A valid pointer to the SSI variable string representation if the variable was found 0 if there is no variable with such name ",
							" Remarks The returned value points to the internal SSI variable representation This pointer should not be used for changing the SSI variable value ",
							" TCPIP_HTTP_NET_SSIVariableGetByIndex Function ",
							" C const char* TCPIP_HTTP_NET_SSIVariableGetByIndex( int varIndex const char** pVarName TCPIP_HTTP_DYN_ARG_TYPE* pVarType int32_t* pVarInt ); ",
							" Description This function accesses the corresponding SSI variable by its index and returns a pointer to the variable string representation ",
							" Preconditions The HTTP module should have been initialized SSI should be enabled ",
							" Parameters Parameters Description varIndex The index of the SSI variable to search for should be TCPIP_HTTP_NET_SSIVariablesNumberGet() pVarName Address to store a pointer to the variable name pVarType Address to store the type of the SSI variable pVarInt Address to store the integer value of this variable if the variable exists and is an integer else this address won't be modified Could be NULL if not needed ",
							" Returns A valid pointer to the SSI variable string representation if the variable was found 0 if there is no variable with such name ",
							" Remarks The returned value points to the internal SSI variable representation This pointer should not be used for changing the SSI variable value The pVarName points to to the internal SSI variable name representation This pointer MUST NOT be used for changing the SSI variable name ",
							" TCPIP_HTTP_NET_SSIVariableSet Function ",
							" C bool TCPIP_HTTP_NET_SSIVariableSet( const char* varName TCPIP_HTTP_DYN_ARG_TYPE varType const char* strValue int32_t intValue ); ",
							" Description This function sets the new values for an SSI variable If a variable with such name does not exist it is created ",
							" Preconditions The HTTP module should have been initialized SSI should be enabled ",
							" Parameters Parameters Description varName The SSI variable name varType The type of the SSI variable strValue Pointer to the string representation of the variable intValue The integer value of the variable if the type is integer ",
							" Returns True - If the variable was updated or created successfully False - The variable didn't exist and the attempt to create it failed (all slots already in use Increase TCPIP_HTTP_NET_SSI_VARIABLES_NUMBER()) ",
							" Remarks The string variable interpretation is needed even if the variable is of integer type HTTP module will use that representation instead of doing a conversion to string of the intValue The string representation should not exceed TCPIP_HTTP_NET_SSI_VARIABLE_STRING_MAX_LENGTH() Any excess variables will be truncated ",
							" TCPIP_HTTP_NET_SSIVariablesNumberGet Function ",
							" C int TCPIP_HTTP_NET_SSIVariablesNumberGet( int* pMaxNo ); ",
							" Description This function returns the number of SSI variables that currently exist It will also return the maximum number of variables that the SSI can hold ",
							" Preconditions The HTTP module should have been initialized SSI should be enabled ",
							" Parameters Parameters Description pMaxNo Pointer to store the maximum number of SSI variables that can exist Can be NULL if not needed ",
							" Returns The number of current SSI variables that are in use ",
							" Remarks None ",
							" TCPIP_HTTP_NET_STATUS Enumeration ",
							" C typedef enum { TCPIP_HTTP_NET_STAT_GET = 0u TCPIP_HTTP_NET_STAT_POST TCPIP_HTTP_NET_STAT_BAD_REQUEST TCPIP_HTTP_NET_STAT_UNAUTHORIZED TCPIP_HTTP_NET_STAT_NOT_FOUND TCPIP_HTTP_NET_STAT_OVERFLOW TCPIP_HTTP_NET_STAT_INTERNAL_SERVER_ERROR TCPIP_HTTP_NET_STAT_NOT_IMPLEMENTED TCPIP_HTTP_NET_STAT_REDIRECT TCPIP_HTTP_NET_STAT_TLS_REQUIRED TCPIP_HTTP_NET_STAT_UPLOAD_FORM TCPIP_HTTP_NET_STAT_UPLOAD_STARTED TCPIP_HTTP_NET_STAT_UPLOAD_WRITE TCPIP_HTTP_NET_STAT_UPLOAD_WRITE_WAIT TCPIP_HTTP_NET_STAT_UPLOAD_OK TCPIP_HTTP_NET_STAT_UPLOAD_ERROR } TCPIP_HTTP_NET_STATUS; ",
							" Description Supported commands and server response codes ",
							" Members Members Description TCPIP_HTTP_NET_STAT_GET = 0u GET command is being processed TCPIP_HTTP_NET_STAT_POST POST command is being processed TCPIP_HTTP_NET_STAT_BAD_REQUEST 400 Bad Request will be returned TCPIP_HTTP_NET_STAT_UNAUTHORIZED 401 Unauthorized will be returned TCPIP_HTTP_NET_STAT_NOT_FOUND 404 Not Found will be returned TCPIP_HTTP_NET_STAT_OVERFLOW 414 Request-URI Too Long will be returned TCPIP_HTTP_NET_STAT_INTERNAL_SERVER_ERROR 500 Internal Server Error will be returned TCPIP_HTTP_NET_STAT_NOT_IMPLEMENTED 501 Not Implemented (not a GET or POST command) TCPIP_HTTP_NET_STAT_REDIRECT 302 Redirect will be returned TCPIP_HTTP_NET_STAT_TLS_REQUIRED 403 Forbidden is returned indicating TLS is required TCPIP_HTTP_NET_STAT_UPLOAD_FORM Show the upload form TCPIP_HTTP_NET_STAT_UPLOAD_STARTED An upload operation is being processed TCPIP_HTTP_NET_STAT_UPLOAD_WRITE An upload operation is currently writing TCPIP_HTTP_NET_STAT_UPLOAD_WRITE_WAIT An upload operation is currently waiting for the write completion TCPIP_HTTP_NET_STAT_UPLOAD_OK An upload was successful TCPIP_HTTP_NET_STAT_UPLOAD_ERROR An upload was not a valid image ",
							" TCPIP_HTTP_NET_Task Function ",
							" C void TCPIP_HTTP_NET_Task(); ",
							" Description This function performs HTTP module tasks in the TCP/IP stack ",
							" Preconditions The HTTP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_HTTP_NET_URLDecode Function ",
							" C uint8_t* TCPIP_HTTP_NET_URLDecode( uint8_t* cData ); ",
							" Description This function parses a string from URL encoding to plain text The following conversions are made: ‘=’ to ‘0’ ‘ ’ to ‘0’ ‘+’ to ‘ ‘ and “%xx” to a single hex byte After completion the data has been decoded and a null terminator signifies the end of a name or value A second null terminator (or a null name parameter) indicates the end of all the data ",
							" Preconditions The data parameter is null terminated and has at least one extra byte free ",
							" Parameters Parameters Description cData The string which is to be decoded in place ",
							" Returns A pointer to the last null terminator in data which is also the first free byte for new data ",
							" Remarks This function is called by the stack to parse GET arguments and cookie data User applications can use this function to decode POST data but first need to verify that the string is null-terminated ",
							" TCPIP_HTTP_NET_USER_CALLBACK Structure ",
							" C typedef struct _tag_TCPIP_HTTP_NET_USER_CALLBACK { TCPIP_HTTP_NET_IO_RESULT (* getExecute)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); TCPIP_HTTP_NET_IO_RESULT (* postExecute)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); uint8_t (* fileAuthenticate)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const char* cFile const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); uint8_t (* userAuthenticate)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const char* cUser const char* cPass const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); TCPIP_HTTP_DYN_PRINT_RES (* dynamicPrint)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); void (* dynamicAck)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const void* buffer const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); void (* eventReport)(TCPIP_HTTP_NET_CONN_HANDLE connHandle TCPIP_HTTP_NET_EVENT_TYPE evType const void* evInfo const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); bool (* ssiNotify)(TCPIP_HTTP_NET_CONN_HANDLE connHandle TCPIP_HTTP_SSI_NOTIFY_DCPT* pSSINotifyDcpt const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); } TCPIP_HTTP_NET_USER_CALLBACK; ",
							" Description Structure: TCPIP_HTTP_NET_USER_CALLBACK This data structure defines the user callbacks that are implemented by the user and the HTTP server calls at run-time ",
							" Members Members Description TCPIP_HTTP_NET_IO_RESULT (* getExecute)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_ConnectionGetExecute GET process function TCPIP_HTTP_NET_IO_RESULT (* postExecute)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_ConnectionPostExecute POST process function uint8_t (* fileAuthenticate)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const char* cFile const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_ConnectionFileAuthenticate File Authenticate function uint8_t (* userAuthenticate)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const char* cUser const char* cPass const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_ConnectionUserAuthenticate User Authenticate function TCPIP_HTTP_DYN_PRINT_RES (* dynamicPrint)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const TCPIP_HTTP_DYN_VAR_DCPT* varDcpt const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_DynPrint Dynamic variable process function void (* dynamicAck)(TCPIP_HTTP_NET_CONN_HANDLE connHandle const void* buffer const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_DynAcknowledge Dynamic variable acknowledge function void (* eventReport)(TCPIP_HTTP_NET_CONN_HANDLE connHandle TCPIP_HTTP_NET_EVENT_TYPE evType const void* evInfo const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_EventReport run-time HTTP processing report bool (* ssiNotify)(TCPIP_HTTP_NET_CONN_HANDLE connHandle TCPIP_HTTP_SSI_NOTIFY_DCPT* pSSINotifyDcpt const struct _tag_TCPIP_HTTP_NET_USER_CALLBACK* pCBack); template_SSINotification run-time HTTP SSI processing ",
							" Remarks See the detailed explanation for each callback in the callback templates section The extra pCBack parameter is passed back for allowing the user to store additional info in the supplied TCPIP_HTTP_NET_USER_CALLBACK data structure that could be used at run-time ",
							" TCPIP_HTTP_NET_USER_HANDLE Type ",
							" C typedef const void* TCPIP_HTTP_NET_USER_HANDLE; ",
							" Description Type: TCPIP_HTTP_NET_USER_HANDLE A handle that a client can use after the HTTP user callback has been registered ",
							" TCPIP_HTTP_NET_UserHandlerDeregister Function ",
							" C bool TCPIP_HTTP_NET_UserHandlerDeregister( TCPIP_HTTP_NET_USER_HANDLE hHttp ); ",
							" Description This function deregisters a HTTP user callback handler ",
							" Preconditions The HTTP server module properly initialized ",
							" Parameters Parameters Description hHttp A handle returned by a previous call to TCPIP_HTTP_NET_UserHandlerRegister() ",
							" Returns True - If the call succeeds False - If no such handler is registered or there are active connections ",
							" Remarks The call will fail if there is active HTTP traffic The handler cannot be deregistered while HTTP traffic is in progress ",
							" TCPIP_HTTP_NET_UserHandlerRegister Function ",
							" C TCPIP_HTTP_NET_USER_HANDLE TCPIP_HTTP_NET_UserHandlerRegister( const TCPIP_HTTP_NET_USER_CALLBACK* userCallback ); ",
							" Description The function registers a user callback data structure with the HTTP server The HTTP server will call the user supplied callbacks at run-time when processing the web pages ",
							" Preconditions The HTTP server module properly initialized ",
							" Parameters Parameters Description userCallback User callback to be registered with the HTTP server ",
							" Returns A valid handle if the call succeeds A null handle if the call failed (out of memory for example) ",
							" Remarks Currently only one user callback structure could be registered The call will fail if a user callback structure is already registered ",
							" TCPIP_HTTP_SSI_ATTR_DCPT Structure ",
							" C typedef struct { const char* attribute; char* value; } TCPIP_HTTP_SSI_ATTR_DCPT; ",
							" Description Data structure: TCPIP_HTTP_SSI_ATTR_DCPT This data type defines the structure of a SSI command attribute descriptor When the user registers a template_SSINotification() function for SSI processing this callback will receive info about the SSI attribute descriptors ",
							" Members |Members |Description | |attribute |The SSI attribute of the command | |value |The SSI value | ",
							" Remarks The SSI commands consist of pairs of (attribute value) tokens For example: --#set var=\"varname\" value=\"varvalue\" -- has 2 pairs: pair 1 - attribute = var value = varname pair 2 - attribute = value value = varvalue ",
							" TCPIP_HTTP_SSI_NOTIFY_DCPT Structure ",
							" C typedef struct { const char* fileName; char* ssiCommand; int nAttribs; TCPIP_HTTP_SSI_ATTR_DCPT* pAttrDcpt; } TCPIP_HTTP_SSI_NOTIFY_DCPT; ",
							" Description Data structure: TCPIP_HTTP_SSI_NOTIFY_DCPT This data type defines the structure of a SSI notification descriptor When the user registers a template_SSINotification() function for SSI processing this callback will receive a SSI descriptor as a parameter ",
							" Members Members Description fileName The file containing the SSI command ssiCommand The SSI command parsed from the command line nAttribs Number of attributes descriptors in the command pAttrDcpt Pointer to an array of descriptors parsed from this SSI command ",
							" Remarks None ",
							" ICMP Module The Internet Control Message Protocol is used to send error and status messages and requests The ICMP module implements the Echo Reply message type (commonly referred to as a ping) which can be used to determine if a specified host is reachable across an IP network from a device running the TCP/IP stack An ICMP server is also supported to respond to pings from other devices Abstraction Model icmp_abstract_block Library Interface Name Description Macros  TCPIP_ICMP_CLIENT_USER_NOTIFICATION allow ICMP client user notification if enabled the TCPIP_ICMP_CallbackRegister/TCPIP_ICMP_CallbackDeregister functions exist and can be used Note that if disabled the tcpip console ping command won't be available TCPIP_ICMP_ECHO_REQUEST_TIMEOUT Timeout for a request that was sent and no reply was received milliseconds TCPIP_ICMP_TASK_TICK_RATE The ICMP task processing rate: number of milliseconds to generate an ICMP tick This is the tick that advances the ICMP state machine The default value is around 30 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_ICMP_ECHO_ALLOW_BROADCASTS allow replies to echo requests sent to a broadcast address by default this should be disabled to prevent broadcast flood attacks Functions  TCPIP_ICMP_CallbackDeregister Deregisters the ICMP callback function TCPIP_ICMP_CallbackRegister Registers a callback to allow the application layer to process incoming ICMPv4 packets TCPIP_ICMP_EchoRequestSend Sends an ICMP echo request to a remote node TCPIP_ICMP_Task Standard TCP/IP stack module task function TCPIP_ICMP_EchoRequest Sends an ICMP echo request containing user supplied data TCPIP_ICMP_EchoRequestCancel Cancels a previously sent ICMP echo request Data Types and Constants  ICMP_HANDLE a handle that a client can use after the event handler has been registered ICMP_ECHO_RESULT result of an ICMP Echo Request call TCPIP_ICMP_MODULE_CONFIG Placeholder for ICMP module configuration _tag_TCPIP_ICMP_ECHO_REQUEST Contains the data needed for an ICMP request operation TCPIP_ICMP_ECHO_REQUEST Contains the data needed for an ICMP request operation TCPIP_ICMP_ECHO_REQUEST_RESULT A result code for an Echo Request callback (as a result of an ICMP TCPIP_ICMP_EchoRequest call) TCPIP_ICMP_REQUEST_HANDLE This is type TCPIP_ICMP_REQUEST_HANDLE __ICMP_H This is macro __ICMP_H ",
							" __ICMP_H Macro ",
							" C #define __ICMP_H ",
							" Description This is macro __ICMP_H ",
							" ICMP_ECHO_RESULT Enumeration ",
							" C typedef enum { ICMP_ECHO_OK = 0 ICMP_ECHO_ALLOC_ERROR = -1 ICMP_ECHO_ROUTE_ERROR = -2 ICMP_ECHO_TRANSMIT_ERROR = -3 ICMP_ECHO_PARAMETER_ERROR = -4 ICMP_ECHO_BUSY = -5 ICMP_ECHO_BAD_HANDLE = -6 } ICMP_ECHO_RESULT; ",
							" Description Result of an ICMP echo request call ",
							" Members Members Description ICMP_ECHO_OK = 0 Operation successful error codes 0 ICMP_ECHO_ALLOC_ERROR = -1 Could not allocate memory ICMP_ECHO_ROUTE_ERROR = -2 Could not find a route to destination ICMP_ECHO_TRANSMIT_ERROR = -3 Could not transmit (dead interface etc ) ICMP_ECHO_PARAMETER_ERROR = -4 Null pointer etc ICMP_ECHO_BUSY = -5 Module currently busy ICMP_ECHO_BAD_HANDLE = -6 Invalid handle no such request exist ",
							" ICMP_HANDLE Type ",
							" C typedef const void* ICMP_HANDLE; ",
							" Description A handle that a client can use after the event handler has been registered ",
							" TCPIP_ICMP_CallbackDeregister Function ",
							" C bool TCPIP_ICMP_CallbackDeregister( ICMP_HANDLE hIcmp ); ",
							" Description This function notifies a stack client to remove its former registered notification handler After this operation the client will no longer be notified about the receiving of replies to the ICMP requests ",
							" Preconditions The TCP/IP Stack must be initialized and up and running A previous successful call to TCPIP_ICMP_CallbackRegister has been done ",
							" Parameters Parameters Description hIcmp An ICMP handle obtained by TCPIP_ICMP_CallbackRegister ",
							" Returns True - If the notification handler has bee successfully removed False - If such a notification handler could not be found ",
							" Remarks None ",
							" Example void MyICMPCallbackFunction(TCPIP_NET_HANDLE hNetIf IPV4_ADDR * remoteIP void * data); ICMP_HANDLE hIcmp = TCPIP_ICMP_CallbackRegister( MyICMPCallbackFunction); if(hIcmp = 0) { // successfully registered my handler // send requests and process the incoming results // // later on once we're done remove the notification handler TCPIP_ICMP_CallbackDeregister(hIcmp); } ",
							" TCPIP_ICMP_CallbackRegister Function ",
							" C ICMP_HANDLE TCPIP_ICMP_CallbackRegister( void (*callback)(TCPIP_NET_HANDLE hNetIf IPV4_ADDR * remoteIP void * data) ); ",
							" Description Allows a stack client to be notified of the receiving of a response from an ICMP query Once an echo request reply is received the notification handler callback will be called letting the client know of the result of the query The callback will contain as parameters: The network interface handle on which the query reply was received The remote host IP address A 32-bit value containing the sequence number in the low 16-bit part and the identifier value in the high 16-bit part ",
							" Preconditions The TCP/IP Stack must be initialized and up and running ",
							" Parameters Parameters Description callback Notification function to be registered This function will be called when an echo request reply is received ",
							" Returns A non-null handle if the registration succeeded 0 if the registration operation failed (out of memory for example) ",
							" Remarks None ",
							" Example // Callback function prototype void MyICMPCallbackFunction(TCPIP_NET_HANDLE hNetIf IPV4_ADDR * remoteIP void * data); // ***************************************************************************** // Register callback function ICMP_HANDLE hIcmp = TCPIP_ICMP_CallbackRegister( MyICMPCallbackFunction); if(hIcmp == 0) { // process error; couldn't register a handler } // success; I can send an Echo request and receive notification // ***************************************************************************** IPV4_ADDR remoteIP = 0xc0a00101; uint16_t mySequenceNumber = 1; uint16_t myId = 0x1234; // send an ICMP query request TCPIP_ICMP_EchoRequestSend( remoteIP mySequenceNumber myId); // ***************************************************************************** // process the ICMP reply in the callback function void MyICMPCallbackFunction(TCPIP_NET_HANDLE hNetIf IPV4_ADDR * remoteIP void * data) { // process request from interface hNetIf and remoteIP address uint16_t* pReply = (uint16_t*)data; uint16_t myRecvId = *pReply; uint16_t myRecvSequenceNumber = *(pReply + 1); // check that the sequence number ID and IP address match etc } ",
							" TCPIP_ICMP_ECHO_REQUEST Structure ",
							" C typedef struct _tag_TCPIP_ICMP_ECHO_REQUEST { TCPIP_NET_HANDLE netH; IPV4_ADDR targetAddr; uint16_t sequenceNumber; uint16_t identifier; uint8_t* pData; uint16_t dataSize; void (* callback)(const struct _tag_TCPIP_ICMP_ECHO_REQUEST* pReqData TCPIP_ICMP_REQUEST_HANDLE icmpHandle TCPIP_ICMP_ECHO_REQUEST_RESULT result); } TCPIP_ICMP_ECHO_REQUEST; ",
							" Description ICMP Request Data Structure This structure defines the information required for sending an ICMP request that contains user data ",
							" Remarks When the callback is made with an error result the TCPIP_ICMP_ECHO_REQUEST structure may identify the request if no reply was received (for example timeout) ",
							" TCPIP_ICMP_ECHO_REQUEST_RESULT Enumeration ",
							" C typedef enum { TCPIP_ICMP_ECHO_REQUEST_RES_OK = 0 TCPIP_ICMP_ECHO_REQUEST_RES_TMO = -1 } TCPIP_ICMP_ECHO_REQUEST_RESULT; ",
							" Description A result code for an echo request callback (as a result of an ICMP TCPIP_ICMP_EchoRequest() call) ",
							" Members Members Description TCPIP_ICMP_ECHO_REQUEST_RES_OK = 0 A reply has been successfully received error codes 0 TCPIP_ICMP_ECHO_REQUEST_RES_TMO = -1 No reply recceived The current request time out and will be deleted ",
							" TCPIP_ICMP_EchoRequest Function ",
							" C ICMP_ECHO_RESULT TCPIP_ICMP_EchoRequest( TCPIP_ICMP_ECHO_REQUEST* pEchoRequest TCPIP_ICMP_REQUEST_HANDLE* pHandle ); ",
							" Description This function allows a stack client to send an ICMP query message to a remote host The supplied sequence number and identifier will be used in the query message The request will also contain user supplied data The request is scheduled and the user will be notified of the outcome of the query using the callback function that's specified in the call ",
							" Preconditions The TCP/IP Stack must be initialized and up and running ",
							" Returns ICMP_ECHO_OK - Indicates the query request was successfully sent ICMP_ECHO_RESULT - The query request was unsuccessfully sent which results in an error code (interface not ready for transmission allocation error etc ) ",
							" Remarks The data buffer that's passed as part of the callback routine is no longer available after the callback routine returns control This routine is more generic than TCPIP_ICMP_EchoRequestSend() and is preferred The user has to enforce the fact that the \"identifier\" field has to be unique per (destination address source address) pair Currently there could be only one ping/echo request active at a time If another echo request is active a ICMP_ECHO_BUSY code will be returned Once the callback notification occurs the echo request is completed and the icmpHandle is invalidated ",
							" Example uint8_t myDataBuffer[200]; // buffer for the ping data void EchoCallback(TCPIP_ICMP_ECHO_REQUEST* pReqData TCPIP_ICMP_REQUEST_HANDLE icmpHandle TCPIP_ICMP_ECHO_REQUEST_RESULT result); // callback function to be called TCPIP_ICMP_ECHO_REQUEST myEchoRequest; myEchoRequest netH = 0; myEchoRequest targetAddr = 0xc0a00101; myEchoRequest sequenceNumber = 1; myEchoRequest identifier = 0x1234; myEchoRequest pData = myDataBuffer; myEchoRequest dataSize = sizeof(myDataBuffer); myEchoRequest callback = EchoCallback; if(TCPIP_ICMP_EchoRequest( myEchoRequest 0) == ICMP_ECHO_OK ) { // successfully sent the ICMP request // // EchoCallback() will be called and data can be examined } else { // process the error } ",
							" TCPIP_ICMP_EchoRequestCancel Function ",
							" C ICMP_ECHO_RESULT TCPIP_ICMP_EchoRequestCancel( TCPIP_ICMP_REQUEST_HANDLE icmpHandle ); ",
							" Description This function allows a stack client to cancel a pending ICMP echo request The request should have been previously scheduled with TCPIP_ICMP_EchoRequest() ",
							" Preconditions Valid handle obtained using TCPIP_iCMP_EchoReqequest() ",
							" Returns ICMP_ECHO_OK - Indicates the cancel request was successful ICMP_ECHO_BAD_HANDLE - No such request is currently scheduled Invalid handle ",
							" Remarks None ",
							" TCPIP_ICMP_EchoRequestSend Function ",
							" C ICMP_ECHO_RESULT TCPIP_ICMP_EchoRequestSend( TCPIP_NET_HANDLE netH IPV4_ADDR * targetAddr uint16_t sequenceNumber uint16_t identifier ); ",
							" Description This function allows a stack client to send an ICMP query message to a remote host The supplied sequence number and identifier will be used in the query message The user will be notified by the result of the query using a notification handle registered by using the TCPIP_ICMP_CallbackRegister() function ",
							" Preconditions The TCP/IP Stack must be initialized and up and running ",
							" Returns ICMP_ECHO_OK - Indicates the query request was successfully sent ICMP_ECHO_RESULT - The query request was unsuccessfully sent which results in an error code (interface not ready for transmission allocation error etc ) ",
							" Remarks This function does not allow the user to specify a data buffer to be sent as part of the request The preferred function to use is TCPIP_ICMP_EchoRequest() This function will eventually be obsoleted ",
							" Example IPV4_ADDR remoteAddress = 0xc0a00101; uint16_t mySequenceNumber = 1; uint16_t myId = 0x1234; if(TCPIP_ICMP_EchoRequestSend(0 remoteAddress mySequenceNumber myId) == ICMP_ECHO_OK ) { // successfully sent the ICMP request // } else { // process the error } ",
							" TCPIP_ICMP_MODULE_CONFIG Structure ",
							" C typedef struct { void* reserved; } TCPIP_ICMP_MODULE_CONFIG; ",
							" Description ICMP Module Configuration Structure Typedef Provides a placeholder for ICMP module configuration ",
							" Remarks None ",
							" TCPIP_ICMP_REQUEST_HANDLE Type ",
							" C typedef const void* TCPIP_ICMP_REQUEST_HANDLE; ",
							" Description This is type TCPIP_ICMP_REQUEST_HANDLE ",
							" TCPIP_ICMP_Task Function ",
							" C void TCPIP_ICMP_Task(); ",
							" Description This function performs ICMPv4 module tasks in the TCP/IP stack ",
							" Preconditions The ICMP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" ICMPv6 Module This document specifies a set of APIs of Internet Control Message Protocol (ICMP) messages for use with version 6 of the Internet Protocol (IPv6) The Internet Protocol version 6 (IPv6) is a new version of IP uses the Internet Control Message Protocol (ICMP) as defined for IPv4 with a number of changes It is called ICMPv6 and has an IPv6 Next Header value of 58 ICMPv6 messages are used by IPv6 nodes to report error messages and information messages ICMPv6 is also used for Ipv6 node diagnostic (i e IPv6 ping) The ICMPv6 protocol also provides a framework for the following: Neighbor Discovery Neighbor Discovery is a series of five ICMPv6 messages that manage node-to-node communication on a link Neighbor Discovery replaces Address Resolution Protocol (ARP) ICMP (IPv4) Router Discovery and the ICMP (IPv4) Redirect message Multicast Listener Discovery (MLD) Multicast Listener Discovery is a series of three ICMP messages that manage subnet multicast membership Multicast Listener Discovery replaces version 2 of the Internet Group Management Protocol (IGMP) for IPv4 Path MTU Discovery The maximum transmission unit (MTU) for a path is the minimum link MTU of all links on a path between a source and a destination IPv6 packets that are smaller than the path MTU do not require fragmentation by the host and are successfully forwarded by all routers on the path To discover the path MTU the sending host uses the receipt of ICMPv6 Packet Too Big messages ICMPv6 Common Messages Functions Echo Request Sent to check IPv6 connectivity to a particular host Echo Reply Sent in response to an ICMPv6 Echo Request Destination Unreachable Sent by a router or the destination host to inform the sending host that the packet or payload cannot be delivered Packet to big Sent by a router to inform a sending host that a packet is too large to forward Time exceeded Sent by a router to inform a sending host that the Hop Limit of an IPv6 packet has expired Parameter Problem Sent by a router to inform a sending host that an error was encountered in processing the IPv6 header or an IPv6 extension header Abstraction Model This module provides software abstraction of the IPv6 module existent in any TCP/IP Stack implementation It provides error reporting and diagnostics to the TCP/IP stack IPv6 Block Diagram icmpv6 NDP using ICMPv6 message type communication icmpv6_communication Library Interface Name Description Functions  TCPIP_ICMPV6_CallbackDeregister Deregisters an upper-layer function from ICMPv6 callback TCPIP_ICMPV6_Flush Flushes a ICMPv6 packet TCPIP_ICMPV6_HeaderEchoRequestPut Allocates a packet IPv6 Header and Upper-layer header for an ICMPv6 echo request TCPIP_ICMPV6_CallbackRegister Registers an upper-layer function for ICMPv6 callback TCPIP_ICMPV6_EchoRequestSend Sends an ICMPv6 echo request to a remote node Data Types and Constants  ICMPV6_ERR_DU_CODE ICMPv6 Destination Unreachable error code ICMPV6_ERR_PP_CODE ICMPv6 Parameter Problem error code ICMPV6_ERR_TE_CODE ICMPv6 Time Exceeded error code ICMPV6_HANDLE ICMPv6 handle ICMPV6_PACKET_TYPES ICMPv6 packet types ICMPV6_ERR_PTB_CODE ICMPv6 Packet Too Big error code ICMPV6_INFO_EREQ_CODE ICMPv6 Packet Echo Request information code ICMPV6_INFO_ERPL_CODE ICMPv6 Packet Echo Reply information code TCPIP_ICMPV6_PutHeaderEchoReply This is macro TCPIP_ICMPV6_PutHeaderEchoReply ",
							" TCPIP_ICMPV6_CallbackDeregister Function ",
							" C bool TCPIP_ICMPV6_CallbackDeregister(ICMPV6_HANDLE hIcmpv6); ",
							" Returns true - On Success false - On Failure (If no such handler registered) ",
							" Description This function deregisters a previously registered function from the ICMPv6 register list ",
							" Remarks None ",
							" Preconditions IPv6 and ICMPv6 are initialized ",
							" Parameters Parameters Description hIcmpv6 ICMPv6 handler   ",
							" TCPIP_ICMPV6_CallbackRegister Function ",
							" C ICMPV6_HANDLE TCPIP_ICMPV6_CallbackRegister(void (*callback)(TCPIP_NET_HANDLE hNetIf uint8_t type const IPV6_ADDR * localIP const IPV6_ADDR * remoteIP void * header)); ",
							" Returns ICMPV6_HANDLE Success - Returns a valid handle Failure - Null handle ",
							" Description This function registers an upper-layer function to handle ICMPv6 messages that may require action at the application layer (Echo Replies Error messages) ",
							" Remarks None ",
							" Preconditions IPv6 and ICMPv6 are initialized ",
							" Parameters Parameters Description type ICMPv6 header type localIP IPv6 destination address of the incoming message remoteIP IPv6 address of the node that originated the incoming message header Pointer to the ICMPv6 header   ",
							" TCPIP_ICMPV6_EchoRequestSend Function ",
							" C C bool TCPIP_ICMPV6_EchoRequestSend(TCPIP_NET_HANDLE netH IPV6_ADDR * targetAddr uint16_t sequenceNumber uint16_t identifier uint32_t packetSize); ",
							" Returns true - if the query request was successfully sent false - otherwise (interface not ready for transmission allocation error etc ) ",
							" Description This function allows a stack client to send an ICMPv6 Echo request message to a remote host The supplied sequence number and identifier will be used in the query message The user will be notified by the result of the query using a notification handle registered by using the TCPIP_ICMPV6_CallbackRegister function ",
							" Remarks None ",
							" Preconditions The TCP/IP Stack is initialized and up and running IPv6 and ICMPv6 are initialized ",
							" TCPIP_ICMPV6_Flush Function ",
							" C bool TCPIP_ICMPV6_Flush(IPV6_PACKET * pkt); ",
							" Returns true - if the packet was flushed false - if the packet was queued ",
							" Description Transmit out a ICMPv6 packet ",
							" Remarks None ",
							" Preconditions IPv6 and ICMPv6 are initialized ",
							" Parameters Parameters Description pkt The packet to flush ",
							" TCPIP_ICMPV6_HeaderEchoRequestPut Function ",
							" C IPV6_PACKET * TCPIP_ICMPV6_HeaderEchoRequestPut(TCPIP_NET_HANDLE hNetIf const IPV6_ADDR * localIP const IPV6_ADDR * remoteIP uint8_t type uint16_t identifier uint16_t sequenceNumber); ",
							" Returns IPV6_PACKET * - The constructed error packet or NULL ",
							" Description This function allocates a packet using TCPIP_ICMPV6_Open() and updates local and remote addresses Updates IPv6 Header with ICMPv6 type and upper-layer header for an ICMPv6 echo request ",
							" Remarks None ",
							" Preconditions IPv6 and ICMPv6 are initialized ",
							" Parameters Parameters Description pNetIf The interface for the outgoing packet localIP The local address that should be used for this packet remoteIP The packet's destination address type Echo Request or Echo Reply identifier The Echo Request id sequenceNumber The Echo request sequence number   ",
							" TCPIP_ICMPV6_PutHeaderEchoReply Macro ",
							" C #define TCPIP_ICMPV6_PutHeaderEchoReply TCPIP_ICMPV6_HeaderEchoRequestPut ",
							" Description This is macro TCPIP_ICMPV6_PutHeaderEchoReply ",
							" IGMP Module The IGMP module implements the IGMPv3 protocol This protocol is used by hosts and routers to establish multicast group memberships Abstraction Model IGMP Software Abstraction Block Diagram TCPIP IGMP Abstraction Model Library Interface Name Description Macros  IGMP_CONFIG_H This is macro IGMP_CONFIG_H  TCPIP_IGMP_INTERFACES the maximum number of interfaces that support IGMP Should be = interfaces that are present at the stack initialization TCPIP_IGMP_MCAST_GROUPS maximum number of multicast groups (addresses) for which a IGMP application can subscribe Each group can listen to multiple sources Should be prime number for best performance TCPIP_IGMP_ROBUSTNESS_VARIABLE The default Robustness Variable value The Robustness Variable allows tuning for the expected packet loss on a network If a network is expected to be lossy the Robustness Variable may be increased IGMP is robust to (Robustness Variable - 1) packet losses RFC 3376 IGMPv3: The Robustness Variable MUST NOT be zero and SHOULD NOT be one Default: 2 This is just a default value The actual value is taken from a router query TCPIP_IGMP_SOCKET_RECORDS_PER_SOURCE maximum number of socket records that are part of a IGMP source unicast address for a specific group G Note that same socket may need multiple records if it listens on multiple interfaces When operating in IGMPv2 style it represents the total number of sockets that can join/leave a specific group TCPIP_IGMP_SOURCES_PER_GROUP maximum number of unicast sources per group a IGMP application can listen to Each unicast source can be used by multiple sockets Should be prime number for best performance TCPIP_IGMP_TASK_TICK_RATE The IGMP task processing rate: number of milliseconds to generate an IGMP tick This is the tick that advances the IGMP state machine The default value is 33 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_IGMP_UNSOLICITED_REPORT_INTERVAL The default Unsolicited Report Interval milliseconds The Unsolicited Report Interval is the time between repetitions of a host’s initial report of membership in a group RFC 3376 IGMPv3: Default: 1 second TCPIP_IGMP_USER_NOTIFICATION enable/disable user notification functions TCPIP_IGMPV2_SUPPORT_ONLY If this symbol is 0 then only Join and Leave operations are supported without support for source addresses required by IGMPv3 This results in smaller code and less RAM needed by the IGMP module TCPIP_STACK_USE_IGMP IGMPv3 functionality Functions  TCPIP_IGMP_ExcludeSource Helper to unsubscribe from one source TCPIP_IGMP_GroupInfoGet Gets current info about a multicast group TCPIP_IGMP_GroupsGet Gets current info about multicast groups TCPIP_IGMP_HandlerDeRegister Deregisters a previously registered IGMP client handler TCPIP_IGMP_HandlerRegister Registers a IGMP client Handler TCPIP_IGMP_IncludeSource Helper to subscribe to one source TCPIP_IGMP_Join IGMPv2 style \"join\" function TCPIP_IGMP_Leave IGMPv2 style \"leave\" function TCPIP_IGMP_Subscribe Subscribes to an IGMP multicast group TCPIP_IGMP_SubscribeGet Returns the subscription to sources in an IGMP multicast group TCPIP_IGMP_Task Standard TCP/IP stack module task function TCPIP_IGMP_Unsubscribe Removes the subscription to sources in an IGMP multicast group Data Types and Constants  TCPIP_IGMP_EVENT_HANDLER Notification handler that can be called when an IGMP event ocurrs and the user needs to be notified TCPIP_IGMP_EVENT_TYPE This enumeration lists the IGMP events used to notify IGMP client applications TCPIP_IGMP_FILTER_TYPE This enumeration lists the supported IGMP filters TCPIP_IGMP_GROUP_INFO IGMP group information TCPIP_IGMP_HANDLE IGMP client handle TCPIP_IGMP_MODULE_CONFIG IGMP module run-time configuration/initialization data TCPIP_IGMP_RESULT This enumeration is used to report the result of an IGMP API call ",
							" TCPIP_IGMP_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_IGMP_EVENT_HANDLER)(IPV4_ADDR mcastAddress TCPIP_IGMP_EVENT_TYPE evType const void* param); ",
							" Description Type: TCPIP_IGMP_EVENT_HANDLER The format of a notification handler registered with the IGMP module Once an IGMP event occurs the IGMP service will call for the registered handler ",
							" Parameters Parameters Description mcastAddress The multicast group for which the IGMP event occurred evType The IGMP reported event param Additional user parameter - see TCPIP_IGMP_HandlerRegister ",
							" Remarks If mcastAddress == 0 the notification is called for events for any multicast group ",
							" TCPIP_IGMP_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_IGMP_EVENT_NONE = 0x0000 TCPIP_IGMP_EVENT_PACKET_EXCEED_MTU = 0x0001 TCPIP_IGMP_EVENT_PACKET_ALLOC_ERROR = 0x0002 TCPIP_IGMP_EVENT_PACKET_TRANSMIT_ERROR = 0x0004 TCPIP_IGMP_EVENT_GET_SC_REPORT_ERROR = 0x0008 TCPIP_IGMP_EVENT_GET_GEN_QUERY_REPORT_ERROR = 0x0010 TCPIP_IGMP_EVENT_GET_GROUP_QUERY_REPORT_ERROR = 0x0020 TCPIP_IGMP_EVENT_QUERY_SOURCE_NUMBER_EXCEEDED = 0x0040 } TCPIP_IGMP_EVENT_TYPE; ",
							" Description Enumeration: TCPIP_IGMP_EVENT_TYPE These events are used while notifying to the registered applications ",
							" Members Members Description TCPIP_IGMP_EVENT_NONE = 0x0000 IGMP no event TCPIP_IGMP_EVENT_PACKET_EXCEED_MTU = 0x0001 IGMP packet exceeded MTU and cannot be transmitted Currently this situation is handled by truncating the packet decrease number of TCPIP_IGMP_EVENT_PACKET_ALLOC_ERROR = 0x0002 An IGMP packet could not be allocated TCPIP_IGMP_EVENT_PACKET_TRANSMIT_ERROR = 0x0004 An IGMP packet could not be transmitted TCPIP_IGMP_EVENT_GET_SC_REPORT_ERROR = 0x0008 A free Source Change report could not be optained (all are already scheduled) TCPIP_IGMP_EVENT_GET_GEN_QUERY_REPORT_ERROR = 0x0010 A free general query report could not be obtained (all are already scheduled) TCPIP_IGMP_EVENT_GET_GROUP_QUERY_REPORT_ERROR = 0x0020 A free group query report could not be obtained (all are already scheduled) TCPIP_IGMP_EVENT_QUERY_SOURCE_NUMBER_EXCEEDED = 0x0040 Router is asking for a report of more sources than we can hold; reported sources will be truncated adjust TCPIP_IGMP_SOURCES_PER_GROUP ",
							" Remarks Multiple events can be set ",
							" TCPIP_IGMP_ExcludeSource Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_ExcludeSource( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress IPV4_ADDR sourceAddress ); ",
							" Description This function performs the unsubscription of a UDP socket to multicast traffic from one source ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket the UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress the multicast address to unsubscribe from It has to be within the IANA specified multicast address range sourceAddress destination source for which the socket wants to unsubscribe from ",
							" Returns TCPIP_IGMP_OK if - if operation succeeded otherwise an error code appears ",
							" Remarks The function supports ASM functionality It is a shortcut to TCPIP_IGMP_Subscribe(EXCLUDE 1 source) ",
							" TCPIP_IGMP_FILTER_TYPE Enumeration ",
							" C typedef enum { TCPIP_IGMP_FILTER_NONE TCPIP_IGMP_FILTER_INCLUDE TCPIP_IGMP_FILTER_EXCLUDE } TCPIP_IGMP_FILTER_TYPE; ",
							" Description Enumeration: TCPIP_IGMP_FILTER_TYPE These filters are currently supported by IGMPv3 ",
							" Members Members Description TCPIP_IGMP_FILTER_NONE inactive/invalid filter TCPIP_IGMP_FILTER_INCLUDE Interface is in include mode: listening to a set of sources ",
							" Remarks None ",
							" TCPIP_IGMP_GROUP_INFO Structure ",
							" C typedef struct { int listSize; IPV4_ADDR* sourceList; int presentSources; TCPIP_IGMP_FILTER_TYPE filterType; } TCPIP_IGMP_GROUP_INFO; ",
							" Description Structure: TCPIP_IGMP_GROUP_INFO This structure provides IGMP information for a specific group ",
							" Members Members Description listSize In: Number of elements in the sourceList array Could be 0 if the actual sources are not needed sourceList Array of IPv4 addresses Out: Array that will store the sources associated to this (group interface) pair Could be NULL if the actual sources are not needed Up to listSize number of sources will be copied Note: There may be more sources present if presentSources listSize presentSources Out: Number of sources that are present for this group filterType Out: Current interface filter ",
							" Remarks None ",
							" TCPIP_IGMP_GroupInfoGet Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_GroupInfoGet( TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress TCPIP_IGMP_GROUP_INFO* pInfo ); ",
							" Description This function returns current info about a multicast group status on a specified interface ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description hNet interface handle for which the query is made if 0 the default interface will be used mcastAddress the multicast group for which the query is made pInfo Pointer to a TCPIP_IGMP_GROUP_INFO structure that contains in/out parameters See the description of TCPIP_IGMP_GROUP_INFO ",
							" Returns TCPIP_IGMP_OK if - if the call succeeds and the pInfo is populated TCPIP_IGMP_GROUP_INVALID - if no such multicast group exists TCPIP_IGMP_ARG_ERROR - pInfo is NULL TCPIP_IGMP_IF_ERROR - no such interface ",
							" Remarks None ",
							" TCPIP_IGMP_GroupSet Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_GroupsGet( IPV4_ADDR* groupsList int listSize int* pnGroups ); ",
							" Description This function returns the current list of the multicast groups that are subscribed with IGMP Additional details about a specific group could be optained with TCPIP_IGMP_GroupInfoGet ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description groupsList Pointer to an array of IPv4 addresses that will receive the subscribed multicast groups Could be NULL if listSize == 0  listSize The number of entries in the groupsList array If 0 the groupsList will not be used/populated pnGroups Address to store the number of all subscribed groups Could be NULL if not needed ",
							" Returns TCPIP_IGMP_OK if - if the call succeeds and the pInfo is populated TCPIP_IGMP_GROUP_INVALID - if no such multicast group exists TCPIP_IGMP_ARG_ERROR - pInfo is NULL TCPIP_IGMP_IF_ERROR - no such interface ",
							" Remarks None ",
							" TCPIP_IGMP_HANDLE Type ",
							" C typedef const void* TCPIP_IGMP_HANDLE; ",
							" Description Type: TCPIP_IGMP_HANDLE A handle that an application needs to use when deregistering a notification handler ",
							" Remarks This handle can be used by the application after the event handler has been registered ",
							" TCPIP_IGMP_HandlerDeRegister Function ",
							" C bool TCPIP_IGMP_HandlerDeRegister( TCPIP_IGMP_HANDLE hIgmp ); ",
							" Description This function deregisters the IGMP client event handler ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description hIgmp A handle returned by a previous call to TCPIP_IGMP_HandlerRegister ",
							" Returns true - If the call succeeds false - If no such handler is registered ",
							" Remarks None ",
							" TCPIP_IGMP_HandlerRegister Function ",
							" C TCPIP_IGMP_HANDLE TCPIP_IGMP_HandlerRegister( IPV4_ADDR mcastAddress TCPIP_IGMP_EVENT_HANDLER handler const void* hParam ); ",
							" Description This function registers an IGMP client event handler The IGMP client module will call the registered handler when an IGMP client event (TCPIP_IGMP_EVENT_TYPE) occurs ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description hNet Interface handle Use hNet == 0 to register on all interfaces available handler Handler to be called when an IGMP client event occurs hParam Pointer to be used by the application to differentiate between IGMP events Not used by IGMP ",
							" Returns Valid handle - if the call succeeds NULL handle - if the call failed (out of memory for example) ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" TCPIP_IGMP_IncludeSource Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_IncludeSource( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress IPV4_ADDR sourceAddress ); ",
							" Description This function performs the subscription of a UDP socket to multicast traffic for one source ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket The UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress The multicast address to subscribe to It has to be within the IANA specified multicast address range sourceAddress Destination for source for which the socket wants to listen ",
							" Returns TCPIP_IGMP_OK - if operation succeeded An error code otherwise ",
							" Remarks The function supports both SSM and ASM functionality It is a shortcut to TCPIP_IGMP_Subscribe(INCLUDE 1 source) ",
							" TCPIP_IGMP_Join Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_Join( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress ); ",
							" Description This function performs the IGMPv2 style \"join\" operation for a UDP socket to a multicast group ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket The UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress The multicast address to join to It has to be within the IANA specified multicast address range ",
							" Returns TCPIP_IGMP_OK - if operation succeeded An error code otherwise ",
							" Remarks The function is an ASM helper It is a shortcut to TCPIP_IGMP_Subscribe(EXCLUDE {}) ",
							" TCPIP_IGMP_Leave Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_Leave( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress ); ",
							" Description This function performs the IGMPv2 style \"leave\" operation for a UDP socket from a multicast group ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket The UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress The multicast address to join to It has to be within the IANA specified multicast address range ",
							" Returns TCPIP_IGMP_OK - if operation succeeded An error code otherwise ",
							" Remarks The function is an ASM helper It is a shortcut to TCPIP_IGMP_Subscribe(EXCLUDE {}) ",
							" TCPIP_IGMP_MODULE_CONFIG Structure ",
							" C typedef struct { const char* lowSsmAddress; const char* highSsmAddress; int reportInterval; int nInterfaces; int nSockets; int nGroups; int nGroupSources; int nSourceSockets; } TCPIP_IGMP_MODULE_CONFIG; ",
							" Description Structure: TCPIP_IGMP_MODULE_CONFIG This structure defines IGMP module run-time configuration/initialization data ",
							" Members Members Description lowSsmAddress The lower limit of the SSM range if 0 the default value IANA 232 0 0 1 is used highSsmAddress The high limit of the SSM range if 0 default value IANA 232 255 255 255 is used reportInterval Unsolicited report interval ms - default 1 second The unsolicited report interval is the time between repetitions of a host's initial report of membership in a group RFC 3376 IGMPv3 default is 1 second nInterfaces The (maximum) number of interfaces that support IGMP multicast The minimum between this number and the actual number of present interfaces when the stack is initialized will be selected nSockets Maximum number of sockets that can subscibe to IGMP nGroups The (maximum) number of multicast groups (multicast destination addresses) that the IGMP module can accomodate nGroupSources The (maximum) number of sources that can belong to a group nSourceSockets Maximum number of different sockets that could listen on a source as part of a group ",
							" Remarks Currently the dynamic implementation is not supported ",
							" TCPIP_IGMP_RESULT Enumeration ",
							" C typedef enum { TCPIP_IGMP_OK = 0 TCPIP_IGMP_IF_ERROR = -1 TCPIP_IGMP_ARG_ERROR = -2 TCPIP_IGMP_MCAST_ADDRESS_ERROR = -3 TCPIP_IGMP_SOURCE_INVALID = -4 TCPIP_IGMP_FILTER_ERROR = -5 TCPIP_IGMP_SSM_FILTER_ERROR = -6 TCPIP_IGMP_GROUP_INVALID = -7 TCPIP_IGMP_SOCKET_INVALID = -8 TCPIP_IGMP_MCAST_CACHE_FULL = -9 TCPIP_IGMP_SOURCE_CACHE_FULL = -10 TCPIP_IGMP_SOCKET_RECORD_FULL = -11 TCPIP_IGMP_REPORT_POOL_EMPTY = -12 TCPIP_IGMP_PACKET_ALLOC_ERROR = -13 TCPIP_IGMP_PACKET_TRANSMIT_ERROR = -14 } TCPIP_IGMP_RESULT; ",
							" Description Enumeration: TCPIP_IGMP_RESULT These results are returned by the IGMP API functions ",
							" Members Members Description TCPIP_IGMP_OK = 0 Operation successful TCPIP_IGMP_IF_ERROR = -1 No such interface or multicast is not enabled on this interface or all multicast interfaces are already in use TCPIP_IGMP_ARG_ERROR = -2 Bad call argument TCPIP_IGMP_MCAST_ADDRESS_ERROR = -3 Invalid multicast address TCPIP_IGMP_SOURCE_INVALID = -4 Invalid/not supported source address TCPIP_IGMP_FILTER_ERROR = -5 Unsupported filter TCPIP_IGMP_SSM_FILTER_ERROR = -6 Invalid filter in SSM mode TCPIP_IGMP_GROUP_INVALID = -7 No such multicast source is registered TCPIP_IGMP_SOCKET_INVALID = -8 No such socket registered for the multicast source TCPIP_IGMP_MCAST_CACHE_FULL = -9 All multicast addresses are already used so no new group could be added TCPIP_IGMP_SOURCE_CACHE_FULL = -10 All source addresses are already used for this multicast address (group) Some sources could be added but not all TCPIP_IGMP_SOCKET_RECORD_FULL = -11 All socket records already used for source address in the multicast address (group) TCPIP_IGMP_REPORT_POOL_EMPTY = -12 All reports are bust so a new one could not be sent TCPIP_IGMP_PACKET_ALLOC_ERROR = -13 An IGMP packet could not be allocated TCPIP_IGMP_PACKET_TRANSMIT_ERROR = -14 An IGMP packet could not be transmitted ",
							" Remarks Negative code represent errors ",
							" TCPIP_IGMP_Subscribe Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_Subscribe( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress TCPIP_IGMP_FILTER_TYPE filterMode const IPV4_ADDR* sourceList size_t* listSize ); ",
							" Description This function performs the subscription of a UDP socket to multicast traffic Following this call the IGMP module will inform network routers of this host desire to take part in multicast traffic ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket The UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress The multicast address to subscribe to It has to be within the IANA specified multicast address range filterMode File type required for this subscription: include/exclude sourceList Array of destination sources for which the socket is supposed to listen (filer is include) or is not interested in (filter is exclude) listSize The number of sources in the sourceList array On input if listSize == 0 or *listSize == 0 then no sources will be considered and sourceList will be ignored On output if listSize = 0 it will contain the number of new sources added/removed ",
							" Returns TCPIP_IGMP_OK - if operation succeeded An error code otherwise ",
							" Remarks The function supports both SSM (Source Specific Multicast) and ASM (Any Source Multicast) functionality Subscribe(skt INCLUDE {a b}) and then Subscribe(skt INCLUDE {c d}) is legal and will just add new sources to include Subscribe(skt EXCLUDE {a b}) and then Subscribe(skt EXCLUDE {c d}) is also legal and will just exclude new sources However Subscribe(skt INCLUDE {a b}) and then Subscribe(sky EXCLUDE {c d}) will change the socket filter mode and old sources will be removed Same for Subscribe(skt EXCLUDE {a b}) and then Subscribe(skt INCLUDE {c d}) Subscribe(skt INCLUDE {}) will remove all subscriptions for the socket For SSM sources the EXCLUDE mode is not allowed ",
							" TCPIP_IGMP_SubscribeGet Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_SubscribeGet( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress TCPIP_IGMP_FILTER_TYPE* filterMode IPV4_ADDR* sourceList size_t* listSize ); ",
							" Description This function returns the subscription of a UDP socket to a multicast group ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket The UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress The multicast group address filterMode Address to store the filter type associated with this (Group interface) tuple sourceList Pointer to an array of destination sources that will be updated with the socket source subscriptions listSize Pointer to the number of sources that could be written in the sourceList array Could point to 0 if nothing is to be written to sourceList but only the number of sources is to be retrieved On output listSize will contain the number of sources that exist for this socket If sourceList = 0 it will contain the sources existent for this socket ",
							" Returns TCPIP_IGMP_OK - if operation succeeded An error code otherwise ",
							" Remarks The function supports both SSM and ASM functionality listSize == 0 or (*listSize = 0 and sourceList == 0) is invalid ",
							" TCPIP_IGMP_Task Function ",
							" C void TCPIP_IGMP_Task(); ",
							" Description This function performs IGMP module tasks in the TCP/IP stack ",
							" Preconditions The IGMP module must be initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IGMP_Unsubscribe Function ",
							" C TCPIP_IGMP_RESULT TCPIP_IGMP_Unsubscribe( UDP_SOCKET socket TCPIP_NET_HANDLE hNet IPV4_ADDR mcastAddress const IPV4_ADDR* sourceList size_t* listSize ); ",
							" Description This function removes the subscription of a UDP socket to multicast traffic sources Following this call the IGMP module will inform network routers of the host updates regarding the multicast traffic ",
							" Preconditions The IGMP module must be initialized ",
							" Parameters Parameters Description socket The UDP multicast socket hNet Interface handle if hNet == 0 then the default interface will be used mcastAddress The multicast group address to unsubscribe from It has to be within the IANA specified multicast address range filterMode Filter type required for this subscription: include/exclude sourceList Array of destination sources from which the socket requires unsubscription listSize The number of sources in the sourceList array On input if listSize == 0 or *listSize == 0 then no sources will be considered and sourceList will be ignored On output if listSize = 0 it will contain the number of new sources removed ",
							" Returns TCPIP_IGMP_OK - if operation succeeded An error code otherwise ",
							" Remarks The function supports both SSM and ASM functionality The function removes the subscription to the sources no matter the filter mode If sourceList is empty then unsubscribe all sources for this (G socket) pair will be performed This call is equivalent to Subscribe(INCLUDE {}) ",
							" Iperf Module Iperf is a networking tool that helps to measure networking bandwidth and performance Using Iperf Iperf is a networking tool that helps to measure networking bandwidth and performance The Iperf module can act as both a client and server for testing Iperf has the ability to test both UDP and TCP In the case of UDP you can specify the size of the UDP datagrams For TCP Iperf measures the throughput of the payload To run Iperf you will need a personal computer that has an Iperf application installed There is an open source version that is maintained as well as many other variants across the Internet Iperf is meant to be run on the command line On the MPLAB Harmony TCP/IP Stack device side there is also a built-in command console that can accept your different Iperf settings from a system console such as the UART Iperf measures performance data in a unidirectional format Therefore the side that the server is running on is considered the receiver and provides the most accurate performance values Command Synopsis iperf [ -s|-c IP addr ] [ -u ] [ -i sec ] [ -b bandwidth ] [ -t time ] -s Runs the Iperf server No IP address needs to be specified -c IP addr Runs the Iperf client The IP address is the IP address of the server -u Sends UDP datagrams -i sec Specified the time interval in seconds that the display will be updated -b bandwidth Specifies the amount of data to try and send This option is only valid with UDP datagrams -t time Amount of time in seconds to run the test Note: The_socket_size of TCP/UDP (especially TCP) will affect the benchmark result In addition activated TCP/IP modules will also consume CPU and Ethernet load The traffic load in your test network environment will also affect the benchmark test To get a reasonable maximum benchmark/evaluation data for a device target it is recommended to disable other modules such as HTTP client example server example etc and find a uncongested network Running the Demonstration First make sure the Iperf module and the System Console are enabled in your project Then rebuild and program your project into target board After powering on the development board and associating the connected network start the server side Iperf application first If you start Iperf as a server on the development board in the console this implies that you are trying to measure the device Ethernet receiver performance If you start the Iperf server on a personal computer you will be measuring MCHP device Ethernet transmit performance Iperf Running Example The following tests show receiver and transmitter performance respectively with the following settings: TCP TX and RX Socket Size = 512 UDP TX and RX Socket Size = 512 Built by MPLAB XC32 C/C++ Compiler without any optimization Personal Computer IP Address: 172 16 175 86 Device IP Address: 172 16 175 54 Note: The data does NOT show the maximum throughput of the device under test as the settings are not optimized for that Only the DHCP client and the TCP and UDP modules are enabled in this example Device under test as UDP server (receive): Command on the device: iperf -s -u -i 1 IPERF Figure 1 Command on personal computer: iperf -c 172 16 175 54 -b 10M -i 1 -t 5 IPERF Figure 2 Personal computer as UDP server (device transmit) Command on personal computer: iperf -s -u -i 1 IPERF Figure 3 Command on the device: iperf -c 172 16 175 86 -b 50M -i 1 -t 5 IPERF Figure 4 Device as TCP server (receiving): Command on the device under test: iperf -s -i 1 IPERF Figure 5 Command on personal computer: iperf -c 172 16 175 54 -i 1 -t 5 IPERF Figure 6 Personal computer as TCP server (device transmit): Command on personal computer: iperf -s -i 1 IPERF Figure 7 Command on the device: iperf -c 172 16 175 86 -x 10M -i 1 -t 5 IPERF Figure 8 Library Interface Name Description Macros  TCPIP_IPERF_RX_BUFFER_SIZE Default size of the Iperf RX buffer The default value is 4KB The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput Bigger buffers will help obtain higher performance numbers TCPIP_IPERF_TX_BUFFER_SIZE Default size of the Iperf TX buffer The default value is 4KB The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput Bigger buffers will help obtain higher performance numbers TCPIP_IPERF_TX_QUEUE_LIMIT for Iperf UDP client the limit to set to avoid memory allocation overflow on slow connections TCPIP_IPERF_TX_WAIT_TMO timeout to wait for TX channel to be ready to transmit a new packet; ms depends on the channel bandwidth TCPIP_IPERF_MAX_INSTANCES maximum number of simultaneously running iperf instances TCPIP_IPERF_TIMING_ERROR_MARGIN iperf timing error ms Accounts for timing uncertainty The higher the value the more relaxed is the iperf timing Lower limit is 0 TCPIP_IPERF_TX_BW_LIMIT Default TCP Tx Bandwidth Functions  TCPIP_IPERF_Task Standard TCP/IP stack module task function   ",
							" TCPIP_IPERF_Task Function ",
							" C void TCPIP_IPERF_Task(); ",
							" Description This function performs iPerf module tasks in the TCP/IP stack ",
							" Preconditions The iPerf module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" IPv4 Module IP is the workhorse protocol of the TCP/IP protocol suite All TCP UDP and ICMP data gets transmitted as IP datagrams IP provides an unreliable connectionless datagram delivery service IP provides a best effort service When something goes wrong such as a router temporarily running out of buffers IP has a simple error handling algorithm: throw away the datagram and try to send an ICMP message back to the source Any required reliability must be provided by the upper layers (e g TCP) The term connectionless means that IP does not maintain any state information about successive datagrams Each datagram is handled independently from all other datagrams This also means that IP datagrams can get delivered out of order If a source sends two consecutive datagrams (first A and then B) to the same destination each is routed independently and can take different routes with B arriving before A Abstraction Model This module provides software abstraction of the IPv4 module existent in any TCP/IP Stack implementation The typical usage of the IP layer_in a TCP/IP stack for transmitting a packet is shown in the following diagram: TCPIP IPv4 ip_abstraction Core Functionality TCPIP IPV4 ip_flow To transmit an IP packet over the network the application has to prepare an IPV4_PACKET data structure and properly format it so that the recipients of this packet (the IP and the MAC layers) can process the packet The TCP/IP Stack modules allocate the IPV4_PACKET data structures dynamically using the TCP/IP Stack private heap using packet allocation functions Note: Currently the packet and heap allocation functions are not exposed as public APIs as they are meant for stack’s private usage This may change in the future The IPV4_PACKET packet can be allocated statically by the application When the IPV4_PACKET is constructed an important thing to remember is to fill in the appropriate packet acknowledge function Once the MAC layer/driver is done with processing the packet (successfully or not) it will call the IPV4_PACKET acknowledge function indicating that the packet is now available (and could be freed or reused) The next step is to fill in the packet source and destination addresses as well as the outgoing interface (please keep in mind that the TCP/IP stack supports multiple network interfaces) This could be done with a call to TCPIP_IPV4_SelectSourceInterface or the application can select all these addresses manually All that’s left before handing the packet is to call TCPIP_IPV4_PacketFormatTx This call fills in the supplied packet with the IP header structure and updates the IP checksum Please note that this function expects a properly formatted packet with the source and destination addresses filled in After this the application can call TCPIP_IPV4_PacketTransmit This function does some basic packet checks and expects that the packet has a valid network interface selected otherwise the call will fail After further formatting (with the MAC required headers) the IP layer_will try to send the packet over the network If the destination hardware address is known (the ARP resolve call succeeds) the packet is handed over to the MAC Otherwise the IP will insert the packet into a queue waiting for the ARP resolution When ARP signals that the request is done (either success or timeout) the IP layer_intercepts the signal and removes the packet from the wait queue: either hands it over to the MAC for transmission or it discards it if the ARP resolution failed The MAC layer/driver in its turn can transmit it immediately queue the packet for transmission or discard it (if for example the network link is down) Regardless once the packet is processed the packet acknowledge function is called with an updated acknowledge result This informs the owner of the packet about the result of the operation and also that the packet is no longer in traffic Note: Transmission of chained packets is not supported Each packet has to be transmitted individually How the Library Works On the transmit side the IP layer_is responsible for routing and forwarding the IP datagrams to the required destination host To do that the IP layer_has internal functionality that allows the selection of the proper network interface and destination hardware address of a packet Based on the destination of a packet/datagram the IP layer_will send the packet to either a host on the network or to a gateway if either is available To accomplish this the IP module works closely with the ARP layer_from which it requests the destination hardware addresses for outgoing packets If the destination address of a packet is not known the IP module will request an ARP probe and will wait for the ARP module reply Whenever ARP signals that the solicited address is available the IP module will send the packet over the network If a time-out is reported (no such host could be found on that particular network) the packet is silently discarded On the receive side the IP module processes all the incoming IPv4 packets and performs a basic sanity check of the packet checksum and other attributes If the packet check fails the packet is simply discarded Otherwise it is dispatched for further processing to the appropriate module (UDP TCP ICMP etc ) The IP layer_operation within the TCP/IP stack is transparent to the applications using the preferred_socket_API (MCHP UDP TCP or BSD) This means that normally an application does not need to interface directly to the IP_layer However the IP module exposes an API that can be used by the application for sending IP datagrams directly bypassing the normal higher layer_protocols (UDP TCP) Notes: Currently it is not possible for an application to intercept the incoming IP datagrams and interfere with the default IP processing However this may change in the future and support can be added for the receive side For a detailed description of the IP layer_functionality please consult RFC 791 RFC 1122 RFC 2474 etc This implementation supports packet fragmentation both on transmit and receive side Library Interface Name Description Macros  TCPIP_IPV4_FRAGMENT_MAX_NUMBER Upper limit for the number of fragments in a fragmented stream This also imposes a limit on how large a packet could be depending on the MTU and fragmentations that occur If more fragments received for a certain stream the stream will be discarded TCPIP_IPV4_FRAGMENT_MAX_STREAMS Upper limit for the number of fragmented streams that could be handled simultaneously TCPIP_IPV4_FRAGMENT_TIMEOUT Initial fragment timeout in seconds Timer Lower Bound (RFC 791) The RFC states this value to be 15 seconds TCPIP_IPV4_FRAGMENTATION If 1 enable IPv4 fragmentation processing RX + TX If 0 (default) IPv4 fragmentation not supported TCPIP_IPV4_TASK_TICK_RATE The IP task processing rate: number of milliseconds to generate an IP tick This is the tick that advances the IP state machine The default value is around 30 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE The IP state machine tick is used only when fragmentation is enabled IP_CONFIG_H This is macro IP_CONFIG_H  TCPIP_IPV4_EXTERN_PACKET_PROCESS This setting enables/disables the processing of the RX packets by an external handler The user of the IPv4 can register an external function to process the incoming packets If true the functionality is built in and could be used by the application If false the functionality does not exist and the generated code is slightly smaller Functions  TCPIP_IPV4_PacketGetDestAddress Returns the IPv4 destination address associated with a TCPIP_MAC_PACKET TCPIP_IPV4_PacketGetSourceAddress Returns the IPv4 source address associated with a TCPIP_MAC_PACKET TCPIP_IPV4_PacketTransmit Transmits an IPV4 packet over the network TCPIP_IPV4_SelectSourceInterface Selects a source address and an interface based on the IPv4 destination address TCPIP_IPV4_PacketFilterClear Clears the IPV4 packet filters TCPIP_IPV4_PacketFilterSet Sets the IPV4 packet filters TCPIP_IPV4_Task Standard TCP/IP stack module task function TCPIP_IPV4_MacPacketTransmit Transmits a fully constructed MAC packet over the network TCPIP_IPV4_PacketAlloc Allocates an IPv4 packet for transmission over the network TCPIP_IPV4_PacketFormatTx Formats an IPV4 packet and makes it ready for transmission TCPIP_IPV4_PacketOptionFieldSet Helper to set an IPv4 packet option field TCPIP_IPV4_PacketOptionGet Helper to get the options that a IPv4 receive packet has TCPIP_IPV4_PacketOptionListGet Helper to get the options that a IPv4 receive packet has TCPIP_IPV4_IsFragmentationEnabled Helper to get the IPv4 fragmentation support TCPIP_IPV4_MaxDatagramDataSizeGet Helper to get the maximum datagream data size (MDDS) on a specific interface TCPIP_IPV4_PacketHandlerDeregister Deregisters a previously registered packet handler TCPIP_IPV4_PacketHandlerRegister Sets a new packet processing handler Data Types and Constants  IPV4_HEADER_TYPE List of supported protocols IPV4_PACKET IPv4 packet structure TCPIP_IPV4_FILTER_TYPE List of supported IPv4 packet filters TCPIP_IPV4_MODULE_CONFIG Initialization parameters supported by IPv4 IPV4_FRAGMENT_INFO Structure of an IPv4 fragment info IPV4_OPTION_FIELD Structure of an IPv4 option IPV4_TYPE_OF_SERVICE Structure of an IPv4 type of service field TCPIP_IPV4_OPTION_DCPT Structure describing the options for an IPv4 packet TCPIP_IPV4_OPTION_TYPE List of supported IPv4 options TCPIP_IPV4_PACKET_PARAMS IPv4 packet formatting parameters TCPIP_IPV4_PACKET_HANDLER Pointer to a function(handler) that will get called to process an incoming IPv4 packet TCPIP_IPV4_PROCESS_HANDLE Defines a IPv4 packet processing handle ",
							" IPV4_FRAGMENT_INFO Union ",
							" C typedef union { uint16_t val; struct { uint16_t fragOffset : 13; uint16_t MF : 1; uint16_t DF : 1; uint16_t reserved : 1; } } IPV4_FRAGMENT_INFO; ",
							" Description IPv4 packet fragment definition This is the structure of an IPv4 fragment info in the IPv4 header ",
							" Parameters Parameters Description uint16_t fragOffset : 13; Fragment offset uint16_t MF : 1; More fragments uint16_t DF : 1; Don't fragment ",
							" Returns None ",
							" Remarks None ",
							" IPV4_HEADER_TYPE Enumeration ",
							" C typedef enum { IP_PROT_ICMP = (1u) IP_PROT_IGMP = (2u) IP_PROT_TCP = (6u) IP_PROT_UDP = (17u) } IPV4_HEADER_TYPE; ",
							" Description IPv4 supported protocols This is the list of the protocols that are supported by this IPv4 implementation ",
							" Remarks None ",
							" IPV4_OPTION_FIELD Structure ",
							" C typedef struct { struct { uint8_t optNumber : 5; uint8_t optClass : 2; uint8_t optCopied : 1; } uint8_t optLength; uint16_t optData[]; } IPV4_OPTION_FIELD; ",
							" Description IPv4 packet option definition This is the structure of an IPv4 option field in the IPv4 header ",
							" Parameters Parameters Description uint8_t optNumber : 5; Specifies an option uint8_t optClass : 2; Option class: 0 - control; 2 - debugging and measurement; 1 3 - reserved uint8_t optCopied : 1; Option copied to all fragments uint8_t optLength; Size of the entire option uint16_t optData ; Option specific variable data ",
							" Returns None ",
							" Remarks None ",
							" IPV4_PACKET Structure ",
							" C typedef struct { TCPIP_MAC_PACKET macPkt; IPV4_ADDR srcAddress; IPV4_ADDR destAddress; TCPIP_NET_HANDLE netIfH; uint8_t optionLen; uint8_t optionOffset; uint16_t optionMask; } IPV4_PACKET; ",
							" Description IPv4 packet structure definition This is the structure of an IPv4 packet for transmission over the network ",
							" Parameters Parameters Description macPkt Standard MAC packet header safe cast to TCPIP_MAC_PACKET srcAddress Packet source destAddress Packet destination netIfH Packet interface optionLen Length of the options in the IPV4 packet; usually 0 optionOffset Offset of the current option; when multiple options are supported optionMask Internal options to be embedded in the packet ",
							" Returns None ",
							" Remarks None ",
							" IPV4_TYPE_OF_SERVICE Union ",
							" C typedef union { uint8_t val; struct { uint8_t reserved : 2; uint8_t reliability : 1; uint8_t throughput : 1; uint8_t delay : 1; uint8_t precedence : 3; } } IPV4_TYPE_OF_SERVICE; ",
							" Description IPv4 type of service definition This is the structure of an IPv4 type of service header field ",
							" Parameters Parameters Description uint8_t reserved : 2; Not used uint8_t reliability : 1; Reliability settings: normal/high uint8_t throughput : 1; Throughput settings: normal/high uint8_t delay : 1; Delay settings: normal/low uint8_t precedence : 3; Precedence; one of TCPIP_IPV4_PRECEDENCE_ values ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV4_FILTER_TYPE Enumeration ",
							" C typedef enum { TCPIP_IPV4_FILTER_NONE = 0x00 TCPIP_IPV4_FILTER_UNICAST = 0x01 TCPIP_IPV4_FILTER_BROADCAST = 0x02 TCPIP_IPV4_FILTER_MULTICAST = 0x04 } TCPIP_IPV4_FILTER_TYPE; ",
							" Description IPv4 packet filters This is the list of the packet filters that are supported by this IPv4 implementation There are 3 types of IPv4 packets currently supported: unicast broadcast multicast An IPV4 packet is accepted if the filter corresponding to the packet type is not set ",
							" Parameters Parameters Description TCPIP_IPV4_FILTER_NONE = 0x00 No packet filter active All packets are accepted TCPIP_IPV4_FILTER_UNICAST = 0x01 Unicast packets will be filtered out TCPIP_IPV4_FILTER_BROADCAST = 0x02 Broadcast packets will be filtered out TCPIP_IPV4_FILTER_MULTICAST = 0x04 Multicast packets will be filtered out ",
							" Returns None ",
							" Remarks Multiple filters can be set If no filter is set all packets are accepted; this is the default case ",
							" TCPIP_IPV4_IsFragmentationEnabled Function ",
							" C bool TCPIP_IPV4_IsFragmentationEnabled(); ",
							" Description This function is a helper to return the IPv4 fragmentation support ",
							" Preconditions IPv4 properly initialized ",
							" Returns True - If the fragmentation is enabled and supported by the IPv4 module False - Fragmentation is not supported ",
							" Remarks The IPv4 fragmentation support is a build time option ",
							" TCPIP_IPV4_MacPacketTransmit Function ",
							" C bool TCPIP_IPV4_MacPacketTransmit( TCPIP_MAC_PACKET* pPkt TCPIP_NET_HANDLE hNet IPV4_ADDR* pDestAddress ); ",
							" Description The function is a helper to transmit a fully constructed MAC packet over an interface The MAC packet is supposed to have all the fields properly constructed (including the TCPIP_MAC_ETHERNET_HEADER fields) The MAC packet does not need ARP resolution since the DestMACAddr is already known The packet acknowledge function should be properly set (it will be called by the MAC driver once the packet is transmitted) ",
							" Preconditions pPkt should have been properly formatted and constructed into a valid MAC packet that can go out over an interface pDestAddress - valid pointer ",
							" Parameters Parameters Description pPkt The packet to be transmitted hNet Interface over which the packet is to be transmitted pDestAddress The IPv4 packet destination address It is used only for routing purposes to decide if the packet is routed internally or sent to the network interface ",
							" Returns True - Iif the packet was handed to the MAC or queued internally False - The packet cannot be transmitted (wrong interface etc ) ",
							" Remarks Only single packets can be transmitted Chained packets are not supported for now The packet could be composed of multiple fragments If the transmission fails some fragments could have been transmitted while others failed The flag TCPIP_MAC_PKT_FLAG_QUEUED could be used to determine which fragments didn't make it through ",
							" TCPIP_IPV4_MaxDatagramDataSizeGet Function ",
							" C int TCPIP_IPV4_MaxDatagramDataSizeGet( TCPIP_NET_HANDLE netH ); ",
							" Description This function is a helper to allow retrieving the MDDS on the specified interface ",
							" Preconditions IPv4 properly initialized Interface properly initialized ",
							" Parameters Parameters Description netH Handle of the interface ",
							" Returns The maximum datagram data size that can be transported on the selected interface 0 - Invalid interface specified ",
							" Remarks None ",
							" TCPIP_IPV4_MODULE_CONFIG Structure ",
							" C typedef struct { size_t arpEntries; TCPIP_IPV4_FORWARD_FLAGS forwardFlags; size_t forwardTxQueueSize; size_t forwardTableMaxEntries; size_t forwardTableSize; const TCPIP_IPV4_FORWARD_ENTRY* forwardTable; } TCPIP_IPV4_MODULE_CONFIG; ",
							" Description IPv4 configuration The parameters needed for the IPv4 module initialization ",
							" Parameters Parameters Description arpEntries The number of entries that IPv4 can queue up for ARP resolution Usually it should be = the number of total ARP cache entries for all interfaces forwardFlags The maximum number of broadcast and multicast packets that can be queued and waiting for the output interface to transmit them This applies only for packets that have to be both forwarded and processed internally which is only broadcast or multicast Adjust depending on your traffic Note that if this limit is exceeded the packets won't be forwarded but still processed internally If 0 packets won't be forwarded just processed internally forwardTableMaxEntries The maximum number of entries in the forwarding table for each interface forwardTableSize The number of entries in the initialization forwarding table The number of entries per interface cannot exceed the forwardTableMaxEntries value forwardTable The forwarding table entries to start with It contains the entries for all interfaces involved in forwarding The type of the table is given by the flag TCPIP_IPV4_FWD_FLAG_BINARY_TABLE/TCPIP_IPV4_FWD_FLAG_ASCII_TABLE ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV4_OPTION_DCPT Structure ",
							" C typedef struct { TCPIP_IPV4_OPTION_TYPE optionType; int optionSize; } TCPIP_IPV4_OPTION_DCPT; ",
							" Description Descriptor for the IPv4 options This is a data structure describing options that are part of an IPv4 packet ",
							" Parameters Parameters Description optionType Current option type optionSize Current option type in bytes including the IPV4_OPTION_FIELD data ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV4_OPTION_TYPE Enumeraion ",
							" C typedef enum { TCPIP_IPV4_OPTION_NONE = 0 TCPIP_IPV4_OPTION_ROUTER_ALERT = 20 } TCPIP_IPV4_OPTION_TYPE; ",
							" Description IPv4 options This is the list of the options that are supported by this IPv4 implementation ",
							" Parameters Parameters Description TCPIP_IPV4_OPTION_NONE = 0 No option; standard packet TCPIP_IPV4_OPTION_ROUTER_ALERT = 20 Router alert option for IGMP traffic ",
							" Returns None ",
							" Remarks Currently only limited options are supported Other options will be eventually added including variable size ones ",
							" TCPIP_IPV4_PACKET_HANDLER Type ",
							" C typedef bool (* TCPIP_IPV4_PACKET_HANDLER)(TCPIP_NET_HANDLE hNet struct _tag_TCPIP_MAC_PACKET* rxPkt const void* hParam); ",
							" Description IPv4 packet handler pointer Pointer to a function that will be called by the IPv4 module when a RX packet is available ",
							" Parameters Parameters Description hNet Network handle on which the packet has arrived rxPkt Pointer to incoming packet hParam User passed parameter when handler was registered ",
							" Returns True - If the packet is processed by the external handler In this case the IPv4 module will no longer process the packet False - The packet needs to be processed internally by the IPv4 as usual ",
							" Remarks The packet handler is called in the IPv4 context The handler should be kept as short as possible as it affects the processing of all the other IPv4 RX traffic Before calling the external packet handler: The rxPkt- pNetLayer points to an IPV4_HEADER data structure The rxPkt- pktIf points to the interface receiving the packet No other checks are done (checksum versions etc ) IMPORTANT: When the packet handler returns true once it's done processing the packet it needs to acknowledge it i e return to the owner which is the MAC driver serving the network interface This means that the packet acknowledge function needs to be called with a proper acknowledge parameter and the QUEUED flag needs to be cleared if needed: if((*rxPkt- ackFunc)(rxPkt rxPkt- ackParam)) { rxPkt- pktFlags = ~TCPIP_MAC_PKT_FLAG_QUEUED; } Failure to do that will result in memory leaks and starvation of the MAC driver See the tcpip_mac h for details ",
							" TCPIP_IPV4_PACKET_PARAMS Structure ",
							" C typedef struct { TCPIP_IPV4_TOS_FLAGS tosFlags; uint8_t ttl; uint8_t df; } TCPIP_IPV4_PACKET_PARAMS; ",
							" Description IPv4 packet parameters This is the structure describing parameters that can be specified for the formatting of an IPv4 packet for transmission ",
							" Parameters Parameters Description tosFlags Type Of Service specification A value of 0 means TCPIP_IPV4_TOS_DEFAULT ttl Time to Live 0 means default df Don't Fragment - boolean 0 means default: fragmentation allowed ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV4_PacketAlloc Function ",
							" C IPV4_PACKET* TCPIP_IPV4_PacketAlloc( uint16_t pktPayload TCPIP_IPV4_OPTION_DCPT* pOptions int nOptions TCPIP_MAC_PACKET_FLAGS flags ); ",
							" Description The function is a helper to allocate an IPv4 packet that supports options For fixed size options the size of the options is determined by its type and the supplied size is ignored ",
							" Preconditions IPv4 properly initialized ",
							" Parameters Parameters Description PktPayload The packet payload pOptions Pointer to an array of option descriptors to be part of this packet nOptions Number of supplied options flags Standard MAC packet flags ",
							" Returns A valid IPV4_PACKET - If the allocation succeeded 0 - The packet cannot be allocated ",
							" Remarks If the option type contains a fixed option length for a supported type (TCPIP_IPV4_OPTION_ROUTER_ALERT for ex ) then the size of the the fixed option is calculated internally and the supplied option size is ignored For not supported or variable size options the supplied optionLen bytes will be added to the allocated packet ",
							" TCPIP_IPV4_PacketFilterClear Function ",
							" C TCPIP_IPV4_FILTER_TYPE TCPIP_IPV4_PacketFilterClear( TCPIP_IPV4_FILTER_TYPE filtType ); ",
							" Description The function will clear the IPv4 packet filters The filters that are present in the mask will be cleared Other filters won't be touched ",
							" Preconditions filtType - valid IPv4 filter IPv4 properly initialized ",
							" Parameters Parameters Description filtType Packet filter mask to clear ",
							" Returns The current value of the IPV4 packet filters after this mask was applied ",
							" Remarks None ",
							" TCPIP_IPV4_PacketFilterSet Function ",
							" C TCPIP_IPV4_FILTER_TYPE TCPIP_IPV4_PacketFilterSet( TCPIP_IPV4_FILTER_TYPE filtType ); ",
							" Description The function will set the IPv4 packet filters The filters that are present in the mask will be set Other filters won't be touched ",
							" Preconditions filtType - valid IPv4 filter IPv4 properly initialized ",
							" Parameters Parameters Description filtType Packet filter mask to set ",
							" Returns The current value of the IPV4 packet filters after this mask was applied ",
							" Remarks None ",
							" TCPIP_IPV4_PacketFormatTx Function ",
							" C void TCPIP_IPV4_PacketFormatTx( IPV4_PACKET* pPkt uint8_t protocol uint16_t ipLoadLen TCPIP_IPV4_PACKET_PARAMS* pParams ); ",
							" Description The necessary fields are set into the IPv4 packet ",
							" Preconditions Properly allocated pPkt The source and destination addresses should be updated in the packet The network interface should be updated in the IPV4_PACKET ",
							" Parameters Parameters Description pPkt The packet to be formatted protocol The protocol associated with the packet ipLoadLen The IPv4 packet payload length pParams Pointer to a structure containing parameters for this packet If NULL then default values are used ",
							" Returns None ",
							" Remarks The segments should be properly updated with the right number of bytes ( segLen ) The IP payload length ( ipLoadLen ) is added only to the 1st segment of the packet Other segments (for packets having multiple packets) are not touched ",
							" TCPIP_IPV4_PacketGetDestAddress Function ",
							" C TCPIP_IPV4_PacketGetDestAddress( TCPIP_MAC_PACKET* pPkt ); ",
							" Description The function will return a pointer to where the IPv4 destination address is located in the TCPIP_MAC_PACKET The TCPIP_MAC_PACKET is supposed to be a valid IPv4 packet that has destination address properly set ",
							" Preconditions pPkt - valid IPv4 packet pNetLayer filed properly set ",
							" Parameters Parameters Description pPkt Packet to query ",
							" Returns A valid pointer to an IPV$_ADDR - If it succeeds 0 - If call failed ",
							" Remarks This function is primarily meant for RX packets ",
							" TCPIP_IPV4_PacketGetSourceAddress Function ",
							" C TCPIP_IPV4_PacketGetSourceAddress( TCPIP_MAC_PACKET* pPkt ); ",
							" Description The function will return a pointer to where the IPv4 source address is located in the TCPIP_MAC_PACKET The TCPIP_MAC_PACKET is supposed to be a valid IPv4 packet that has properly source address set ",
							" Preconditions pPkt - valid IPv4 packet pNetLayer filed properly set ",
							" Parameters Parameters Description pPkt Packet to query ",
							" Returns A valid pointer to an IPV$_ADDR - If it succeeds 0 - If call failed ",
							" Remarks This function is primarily meant for RX packets ",
							" TCPIP_IPV4_PacketHandlerDeregister Function ",
							" C bool TCPIP_IPV4_PacketHandlerDeregister( TCPIP_IPV4_PROCESS_HANDLE pktHandle ); ",
							" Description This function removes a packet processing handler ",
							" Preconditions IPv4 properly initialized ",
							" Parameters Parameters Description pktHandle TCPIP packet handle obtained by a call to TCPIP_IPV4_PacketHandlerRegister() ",
							" Returns True - If the operation succeeded False - If the operation failed ",
							" Remarks Exists only if TCPIP_IPV4_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_IPV4_PROCESS_HANDLE myHandle = TCPIP_IPV4_PacketHandlerRegister(myPacketHandler myParam ); // process incoming packets // now we're done with it TCPIP_IPV4_PacketHandlerDeregister(myHandle); ",
							" TCPIP_IPV4_PacketHandlerRegister Function ",
							" C TCPIP_IPV4_PROCESS_HANDLE TCPIP_IPV4_PacketHandlerRegister( TCPIP_IPV4_PACKET_HANDLER pktHandler const void* handlerParam ); ",
							" Description This function registers a new packet processing handler The caller can use the handler to be notified of incoming packets and given a chance to examine/process them ",
							" Preconditions IPv4 properly initialized ",
							" Parameters Parameters Description pktHandler The packet handler which will be called for an incoming packet handlerParam Packet handler parameter ",
							" Returns A valid TCPIP_IPV4_PROCESS_HANDLE - If the operation succeeded NULL - If the operation failed ",
							" Remarks Currently only one packet handler is supported for the IPv4 module The call will fail if a handler is already registered Use TCPIP_IPV4_PacketHandlerDeregister() first Exists only if TCPIP_IPV4_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_IPV4_PROCESS_HANDLE pktHandle = TCPIP_IPV4_PacketHandlerRegister( myPktHandler myParam ); ",
							" TCPIP_IPV4_PacketOptionFieldSet Function ",
							" C IPV4_OPTION_FIELD* TCPIP_IPV4_PacketOptionFieldSet( IPV4_PACKET* pPkt uint16_t optionLen bool firstOption ); ",
							" Description This function is a helper to allow setting a specific option into an IPv4 packet that supports options It is meant for supporting user controlled and variable size options ",
							" Preconditions IPv4 properly initialized pPkt properly created with TCPIP_IPV4_PacketAlloc() ",
							" Parameters Parameters Description pPkt A packet allocated with TCPIP_IPV4_PacketALloc() optionLen Size for the option to set in bytes This is the size of the whole IPV4_OPTION_FIELD the option data included firstOption Specifies that this is the first option to be set to the packet ",
							" Returns A valid IPV4_OPTION_FIELD pointer that the caller can use to set the IPv4 option fields 0 - Invalid packet or the option field cannot hold the required option size ",
							" Remarks This function should be called for unsupported options or for options that have variable data It doesn't have to be used for standard supported options (TCPIP_IPV4_OPTION_ROUTER_ALERT for ex ) The packet should have been allocated with enough option space using TCPIP_IPV4_PacketAlloc() Sequential calls can be made using firstOption true for the first call and false for the subsequent calls When setting the option data optionLen MUST NOT be exceeded If the option doesn't take a multiple of 4 bytes it should be padded with the NOP option (0x01) ",
							" TCPIP_IPV4_PacketOptionGet Function ",
							" C int TCPIP_IPV4_PacketOptionGet( TCPIP_MAC_PACKET* pRxPkt TCPIP_IPV4_OPTION_TYPE optType IPV4_OPTION_FIELD* pOptField int optSize ); ",
							" Description This function is a helper to allow retrieving a specific option that is present in an IPv4 received packet ",
							" Preconditions IPv4 properly initialized pRxPkt a proper IPv4 packet received by the IPv4 module ",
							" Parameters Parameters Description pRxPkt A packet received by the IPv4 module optType Type of options to be searched/retrieved pOptField Address to store the option Could be NULL if not needed optSize Size of the pOptField structure including the optData part If 0 pOptField will not be updated ",
							" Returns Size of the option if found in the IPv4 packet 0 if such an option does not exist ",
							" Remarks The packet should be a proper IPv4 packet received through the IPv4 module Only minimal consistency check is done ",
							" TCPIP_IPV4_PacketOptionListGet Function ",
							" C int TCPIP_IPV4_PacketOptionListGet( TCPIP_MAC_PACKET* pRxPkt TCPIP_IPV4_OPTION_DCPT* pOptions int nOptions ); ",
							" Description This function is a helper to allow retrieving a list of options that are present in the received packet ",
							" Preconditions IPv4 properly initialized pRxPkt a proper IPv4 packet received by the IPv4 module ",
							" Parameters Parameters Description pRxPkt A packet received by the IPv4 module pOptions Pointer to an array of option descriptors to receive the options present in the packet nOptions Number of elements the array can store Could be 0 in which case pOptions is not updated ",
							" Returns The number of options found in the packet 0 - Invalid packet or packet without options ",
							" Remarks The packet should be a proper IPv4 packet received through the IPv4 module Only minimal consistency check is done On return the pOptions is updated up to nOptions ",
							" TCPIP_IPV4_PacketTransmit Function ",
							" C bool TCPIP_IPV4_PacketTransmit( IPV4_PACKET* pPkt ); ",
							" Description The IPv4 packet is sent to the MAC for transmission ",
							" Preconditions pPkt should have been properly formatted with TCPIP_IPV4_PacketFormatTx() The packet interface should be updated ",
							" Parameters Parameters Description pPkt The packet to be transmitted ",
							" Returns True - If the packet was handed to the MAC or is queued for transmission False - The packet cannot be transmitted (wrong interface etc ) ",
							" Remarks Only single packets can be transmitted Chained packets are not supported for now ",
							" TCPIP_IPV4_PROCESS_HANDLE Type ",
							" C typedef const void* TCPIP_IPV4_PROCESS_HANDLE; ",
							" Description Type: TCPIP_IPV4_PROCESS_HANDLE Definition of a packet processing handle used for packet processing registration by the IPv4 clients ",
							" TCPIP_IPV4_SelectSourceInterface Function ",
							" C TCPIP_NET_HANDLE TCPIP_IPV4_SelectSourceInterface( TCPIP_NET_HANDLE netH const IPV4_ADDR* pDestAddress IPV4_ADDR* pSrcAddress bool srcSet ); ",
							" Description Updates the pSrcAddress and returns the needed interface if successful: if srcSet == 1 and netH = 0 the function will not change anything if srcSet == 1 and netH == 0 the call will never fail it will use whatever value in pSrcAddress (even 0) and will try to come up with an appropriate interface if srcSet == 0 and netH == 0 it will use the destination address if srcSet == 0 and netH = 0 it will use the address of that interface ",
							" Preconditions netH has to be valid (if non-0) ",
							" Parameters Parameters Description netH Network interface handle pDestAddress Pointer to destination address pSrcAddress Pointer to source address srcSet Boolean; true if address pointed by pSrcAddress is valid ",
							" Returns A valid interface - If it succeeds and a valid source interface selected 0 - Interface selection failed ",
							" Remarks None ",
							" TCPIP_IPV4_Task Function ",
							" C void TCPIP_IPV4_Task(); ",
							" Description This function performs IPv4 module tasks in the TCP/IP stack ",
							" Preconditions The IPv4 module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" IPv6 Module IPv6 is the workhorse protocol of the TCP/IP protocol suite All TCP UDP ICMP and IGMP data gets transmitted as IP datagrams IP provides an unreliable connectionless datagram delivery service IPv6 provides a best effort service When something goes wrong such as a router temporarily running out of buffers IPv6 has a simple error handling algorithm: throw away the datagram and try to send an ICMP message back to the source Any required reliability must be provided by the upper layers (e g TCP) The term connectionless means that IPv6 does not maintain any state information about successive datagrams Each datagram is handled independently from all other datagrams This also means that IPv6 datagrams can get delivered out of order If a source sends two consecutive datagrams (first A and then B) to the same destination each is routed independently and can take different routes with B arriving before A Abstraction Model This module provides software abstraction of the IP module existent in any TCP/IP Stack implementation It provide raw datagram service to other modules in the stack IPv6 Abstraction Model Library Interface Name Description Functions  TCPIP_IPV6_HandlerRegister Registers an IPv6 event handler callback function TCPIP_IPV6_HandlerDeregister Deregisters an IPv6 event handler callback function TCPIP_IPV6_InterfaceIsReady Determines if an interface is ready for IPv6 transactions TCPIP_IPV6_PacketFree Frees a TCP/IP Packet structure from dynamic memory TCPIP_IPV6_PayloadSet Allocates a segment on the end of a packet segment chain and uses it to address prebuffered data TCPIP_IPV6_DASSourceAddressSelect Determines the appropriate source address for a given destination address TCPIP_IPV6_DestAddressGet Gets the destination address for a IPv6 packet TCPIP_IPV6_DestAddressSet Sets the destination address for a IPv6 packet TCPIP_IPV6_SourceAddressGet Gets the source address for an IPv6 packet TCPIP_IPV6_SourceAddressSet Sets the source address for a IPv6 packet TCPIP_IPV6_ArrayPutHelper Helper function to write data to a packet TCPIP_IPV6_Put Writes a character of data to a packet TCPIP_IPV6_TxIsPutReady Determines whether a TX packet can be written to TCPIP_IPV6_TxPacketAllocate Dynamically allocates a packet for transmitting IP protocol data TCPIP_IPV6_ArrayGet Reads the next byte of data from the specified MAC TCPIP_IPV6_Flush Flushes a IP TX packet TCPIP_IPV6_Get Reads the next byte of data from the specified MAC TCPIP_IPV6_UniqueLocalUnicastAddressAdd Adds a Unique Local Unicast Address (ULA) to a specified interface TCPIP_IPV6_RouterAddressAdd Adds a new router address to a specified interface TCPIP_IPV6_UnicastAddressAdd Adds a unicast address to a specified interface TCPIP_IPV6_DefaultRouterDelete Deletes the current router list for a specified interface TCPIP_IPV6_DefaultRouterGet Returns the current router address for a specified interface TCPIP_IPV6_Task Standard TCP/IP stack module task function TCPIP_IPV6_IsFragmentationEnabled Helper to get the IPv6 fragmentation support TCPIP_IPV6_MaxDatagramDataSizeGet Helper to get the maximum datagream data size (MDDS) on a specific interface TCPIP_IPV6_AddressUnicastRemove Removed a configured unicast address from an interface TCPIP_IPV6_MulticastListenerAdd Adds a multicast listener to an interface TCPIP_IPV6_MulticastListenerRemove Removes a multicast listener from a given interface TCPIP_IPV6_PacketHandlerDeregister Deregisters a previously registered packet handler TCPIP_IPV6_PacketHandlerRegister Sets a new packet processing handler Data Types and Constants  IPV6_DATA_SEGMENT_HEADER Data structure for IPv6 Data Segment header IPV6_NEXT_HEADER_TYPE Defines a list of IPv6 next header types IPV6_PACKET Packet structure/state tracking for IPv6 packets IPV6_PACKET_ACK_FNC Packet allocation and deallocation acknowledgment callback function IPV6_SEGMENT_TYPE Provides an enumeration of IPv6 segment types IPV6_ULA_FLAGS Provides a list of possible ULA action flags IPV6_ULA_RESULT Provides a list of possible ULA results IPV6_DATA_DYNAMIC_BUFFER Data to transmit is allocated in dynamically allocated RAM IPV6_DATA_NETWORK_FIFO Data to transmit is stored in the Network Controller's FIFOs IPV6_DATA_NONE The data segment is unused IPV6_DATA_PIC_RAM Data to transmit is stored in PIC RAM IPV6_NO_UPPER_LAYER_CHECKSUM Value flag for no upper layer checksum TCPIP_IPV6_PutArray Writes data to a packet _IPV6_DATA_SEGMENT_HEADER Data structure for IPv6 Data Segment header _IPV6_PACKET Packet structure/state tracking for IPv6 packets _IPV6_RX_FRAGMENT_BUFFER Data structure for IPv6 Received fragmented packet TCPIP_IPV6_MODULE_CONFIG Provides a place holder for IPv6 configuration IPV6_HEADER_OFFSET_DEST_ADDR Header offset for destination address IPV6_HEADER_OFFSET_NEXT_HEADER Header offset for next header IPV6_HEADER_OFFSET_PAYLOAD_LENGTH Header offset for payload length IPV6_HEADER_OFFSET_SOURCE_ADDR Header offset for source address IPV6_TLV_HBHO_PAYLOAD_JUMBOGRAM IPv6 Type-length-value type code for the Hop-by-hop \"Jumbo-gram Payload\" option IPV6_TLV_HBHO_ROUTER_ALERT IPv6 Type-length-value type code for the Hop-by-hop \"Router Alert\" option IPV6_TLV_PAD_1 IPv6 Type-length-value type code for the Pad 1 option IPV6_TLV_PAD_N IPv6 Type-length-value type code for the Pad N option IPV6_TLV_UNREC_OPT_DISCARD_PP IPv6 action code for the unrecognized option reaction to discard the packet and send an ICMP parameter problem message IPV6_TLV_UNREC_OPT_DISCARD_PP_NOT_MC IPv6 action code for the unrecognized option reaction to discard the packet and send an ICMP parameter problem message is the destination address isn't a multicast address IPV6_TLV_UNREC_OPT_DISCARD_SILENT IPv6 action code for the unrecognized option reaction to discard the packet silently IPV6_TLV_UNREC_OPT_SKIP_OPTION IPv6 action code for the unrecognized option reaction to skip the option IPV6_RX_FRAGMENT_BUFFER Data structure for IPv6 Received fragmented packet IPV6_TLV_OPTION_TYPE Data structure for IPv6 TLV options IPV6_HANDLE Pointer to IPv6 object IPV6_EVENT_TYPE This enumeration is used to notify IPv6 client applications IPV6_EVENT_HANDLER Clients can register a handler with the IPv6 service IPV6_ADDRESS_TYPE Data structure for IPv6 address types IPV6_ADDRESS_PREFERENCE Provides selection of public versus temporary addresses IPV6_ADDRESS_POLICY Data structure for IPv6 address policy IPV6_ACTION Provides a list of possible IPv6 actions TCPIP_IPV6_PACKET_HANDLER Pointer to a function(handler) that will get called to process an incoming IPv6 packet TCPIP_IPV6_PROCESS_HANDLE Defines a IPv6 packet processing handle ",
							" IPV6_ACTION Enumeration ",
							" C typedef enum { IPV6_ACTION_NONE = 0 IPV6_ACTION_DISCARD_SILENT IPV6_ACTION_DISCARD_PP_0 IPV6_ACTION_DISCARD_PP_2 IPV6_ACTION_DISCARD_PP_2_NOT_MC IPV6_ACTION_BEGIN_EX_HEADER_PROCESSING } IPV6_ACTION; ",
							" Desscription Enumeration: IPV6_ACTION Different actions need to be taken depending on the result of our header processing ",
							" Members Parameters Description IPV6_ACTION_NONE = 0 No action Skip the option IPV6_ACTION_DISCARD_SILENT Discard the packet silently IPV6_ACTION_DISCARD_PP_0 Discard the packet and send an ICMP parameter problem message with code value 0 IPV6_ACTION_DISCARD_PP_2 Discard the packet and send an ICMP parameter problem message with code value 2 IPV6_ACTION_DISCARD_PP_2_NOT_MC Discard the packet and send an ICMP parameter problem message with code value 3 IPV6_ACTION_BEGIN_EX_HEADER_PROCESSING Begin extension processing ",
							" Remarks None ",
							" IPV6_ADDRESS_POLICY Structure ",
							" C typedef struct { IPV6_ADDR address; unsigned char prefixLength; unsigned char precedence; unsigned char label; } IPV6_ADDRESS_POLICY; ",
							" Desscription Type: IPV6_ADDRESS_POLICY The policy table is the longest matching prefix lookup table and is used to select the destination IPv6 Address If Precedence(A) Precedence(B) address A has higher precedence than address B The label value Label(A) allows for policies that prefer a particular source address prefix for use with a destination address prefix Default Policy table - Prefix Precedence Label ::1/128 50 0 ::/0 40 1 2002::/16 30 2 ::/96 20 3 ::ffff:0 0 0 0/96 10 4 ",
							" Members Parameters Description address IPv6 address prefixLength IPv6 prefix length precedence IPv6 address precedence label IPv6 label type ",
							" Remarks None ",
							" Example const IPV6_ADDRESS_POLICY gPolicyTable[] = { {{{0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01}} 128 50 0} // Loopback address {{{0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}} 0 40 1} // Unspecified address {{{0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0x00 0x00 0x00 0x00}} 96 35 4} // IPv4-mapped address {{{0x20 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}} 16 30 2} // 2002::/15 - 6to4 {{{0x20 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}} 32 5 5} // 2001::/32 - Teredo tunneling {{{0xfc 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}} 7 3 13} // ULA }; ",
							" IPV6_ADDRESS_PREFERENCE Enumeration ",
							" C typedef enum { IPV6_PREFER_PUBLIC_ADDRESSES = 0 IPV6_PREFER_TEMPORARY_ADDRESSES } IPV6_ADDRESS_PREFERENCE; ",
							" Desscription Enumeration: IPV6_ADDRESS_PREFERENCE None ",
							" Remarks None ",
							" IPV6_ADDRESS_TYPE Union ",
							" C typedef union { unsigned char byte; struct { unsigned scope : 4; unsigned type : 2; } bits; } IPV6_ADDRESS_TYPE; ",
							" Desscription Type: IPV6_ADDRESS_TYPE This type defines the data structure for IPv6 address types ",
							" Remarks None ",
							" IPV6_DATA_DYNAMIC_BUFFER Macro ",
							" C #define IPV6_DATA_DYNAMIC_BUFFER (0x1u) // Data to transmit is allocated in dynamically allocated RAM ",
							" Description Data to transmit is allocated in dynamically allocated RAM ",
							" IPV6_DATA_NETWORK_FIFO Macro ",
							" C #define IPV6_DATA_NETWORK_FIFO (0x2u) // Data to transmit is stored in the Network Controller's FIFOs ",
							" Description Data to transmit is stored in the network controller's FIFOs ",
							" IPV6_DATA_NONE Macro ",
							" C #define IPV6_DATA_NONE (0x0u) // The data segment is unused ",
							" Description The data segment is unused ",
							" IPV6_DATA_PIC_RAM Macro ",
							" C #define IPV6_DATA_PIC_RAM (0x3u) // Data to transmit is stored in PIC RAM ",
							" Description Data to transmit is stored in PIC RAM ",
							" IPV6_DATA_SEGMENT_HEADER Structure ",
							" C typedef struct _IPV6_DATA_SEGMENT_HEADER { uint8_t* dataLocation; unsigned short segmentSize; unsigned short segmentLen; unsigned char memory; unsigned char segmentType; struct _IPV6_DATA_SEGMENT_HEADER * nextSegment; void * data[]; } IPV6_DATA_SEGMENT_HEADER; ",
							" Description Structure : IPV6_DATA_SEGMENT_HEADER Data structure is used to allocate a data segment header and an optional payload ",
							" Members Members Description dataLocation Location of the data to transmit segmentSize Size of this data segment segmentLen Number of bytes of data in this segment memory Type: IPV6_DATA_NONE IPV6_DATA_DYNAMIC_BUFFER IPV6_DATA_NETWORK_FIFO IPV6_DATA_PIC_RAM segmentType Type of segment contents nextSegment Pointer to the next data segment data Optional buffer space ",
							" Remarks None ",
							" IPV6_EVENT_HANDLER Type ",
							" C typedef void (* IPV6_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet IPV6_EVENT_TYPE evType const void* evParam const void* usrParam); ",
							" Desscription Type: IPV6_EVENT_HANDLER Once an IPv6 event occurs the IPv6 service will call the registered handler The handler has to be short and fast It is meant for setting an event flag not for lengthy processing evParam is a parameter that's associated to an IPv6 event For an address event (IPV6_EVENT_ADDRESS_ADDED IPV6_EVENT_ADDRESS_REMOVED) it should typecast to (const IPV6_ADDR_STRUCT*) For an IPV6_EVENT_ULA_ADDRESS_GENERATED ULA event it should typecast to (const IPV6_ADDR*) For an IPV6_EVENT_ULA_ADDRESS_FAILED ULA event the evParam is an IPV6_ULA_RESULT error code The evParam is invalid outside of the IPV6_EVENT_HANDLER context call and should not be stored by the caller Info that's needed has to be copied into caller's own context usrParam is a user-supplied parameter ",
							" Remarks For address related events the passed (const IPV6_ADDR_STRUCT*) parameter is invalid after the notification call ",
							" IPV6_EVENT_TYPE Enumeration ",
							" C typedef enum { IPV6_EVENT_ADDRESS_ADDED = 1 IPV6_EVENT_ADDRESS_REMOVED IPV6_EVENT_ULA_ADDRESS_GENERATED IPV6_EVENT_ULA_ADDRESS_FAILED } IPV6_EVENT_TYPE; ",
							" Description Enumeration: IPV6_EVENT_TYPE These events are used while notifying to the registered applications ",
							" Members Members Description IPV6_EVENT_ADDRESS_ADDED = 1 Event is generated when IPv6 added to the list IPV6_EVENT_ADDRESS_REMOVED Event is generated when IPv6 address removed from the list IPV6_EVENT_ULA_ADDRESS_GENERATED Event is generated when IPv6 unique local address included to the list IPV6_EVENT_ULA_ADDRESS_FAILED Event is generated when IPv6 unique local address is failed ",
							" Remarks None ",
							" IPV6_HANDLE Type ",
							" C typedef const void * IPV6_HANDLE; ",
							" Description Pointer to IPv6 object ",
							" IPV6_HEADER_OFFSET_DEST_ADDR Macro ",
							" C #define IPV6_HEADER_OFFSET_DEST_ADDR (0x08u + sizeof (IPV6_ADDR)) ",
							" Description Header offset for destination address ",
							" IPV6_HEADER_OFFSET_NEXT_HEADER Macro ",
							" C #define IPV6_HEADER_OFFSET_NEXT_HEADER (0x06u) ",
							" Description Header offset for next header ",
							" IPV6_HEADER_OFFSET_PAYLOAD_LENGTH Macro ",
							" C #define IPV6_HEADER_OFFSET_PAYLOAD_LENGTH (0x04u) ",
							" Description Header offset for payload length ",
							" IPV6_HEADER_OFFSET_SOURCE_ADDR Macro ",
							" C #define IPV6_HEADER_OFFSET_SOURCE_ADDR (0x08u) ",
							" Description Header offset for source address ",
							" IPV6_NEXT_HEADER_TYPE Enumeration ",
							" C typedef enum { IPV6_PROT_HOP_BY_HOP_OPTIONS_HEADER = (0u) IPV6_PROT_ICMP = (1u) IPV6_PROT_TCP = (6u) IPV6_PROT_UDP = (17u) IPV6_PROT_IPV6 = (41u) IPV6_PROT_ROUTING_HEADER = (43u) IPV6_PROT_FRAGMENTATION_HEADER = (44u) IPV6_PROT_ENCAPSULATING_SECURITY_PAYLOAD_HEADER = (50u) IPV6_PROT_AUTHENTICATION_HEADER = (51u) IPV6_PROT_ICMPV6 = (58u) IPV6_PROT_NONE = (59u) IPV6_PROT_DESTINATION_OPTIONS_HEADER = (60u) } IPV6_NEXT_HEADER_TYPE; ",
							" Description Enumeration: IPV6_NEXT_HEADER_TYPE Identifies the type of the next header immediately follows IPv6 header ",
							" Members Members Description IPV6_PROT_HOP_BY_HOP_OPTIONS_HEADER = (0u) IPv6 Hop-by-Hop Opt Header IPV6_PROT_ICMP = (1u) ICMPv4 Header IPV6_PROT_TCP = (6u) TCP protocol Header IPV6_PROT_UDP = (17u) UDP protocol Header IPV6_PROT_IPV6 = (41u) IPv6 Protocol IPV6_PROT_ROUTING_HEADER = (43u) IPv6 Routing Header IPV6_PROT_FRAGMENTATION_HEADER = (44u) IPv6 Fragmentation Header IPV6_PROT_ENCAPSULATING_SECURITY_PAYLOAD_HEADER = (50u) Encapsulating Security Payload Header IPV6_PROT_AUTHENTICATION_HEADER = (51u) Authentication Header IPV6_PROT_ICMPV6 = (58u) ICMPv6 Protocol IPV6_PROT_NONE = (59u) No next header IPV6_PROT_DESTINATION_OPTIONS_HEADER = (60u) Destination Options Header ",
							" Remarks None ",
							" IPV6_NO_UPPER_LAYER_CHECKSUM Macro ",
							" C #define IPV6_NO_UPPER_LAYER_CHECKSUM (0xFFFFu) // Value flag for no upper layer checksum ",
							" Description Value flag for no upper layer checksum ",
							" IPV6_PACKET Structure ",
							" C typedef struct _IPV6_PACKET { struct _IPV6_PACKET * next; unsigned short payloadLen; unsigned short headerLen; unsigned short upperLayerHeaderLen; unsigned short upperLayerChecksumOffset; unsigned char upperLayerHeaderType; union { struct { unsigned char reserved : 3; unsigned char useUnspecAddr : 1; unsigned char sourceSpecified : 1; unsigned char queued : 1; unsigned char addressType : 2; } unsigned char val; } flags; TCPIP_MAC_ADDR remoteMACAddr; IPV6_PACKET_ACK_FNC ackFnc; TCPIP_MAC_PACKET_ACK_FUNC macAckFnc; void* ackParam; void* clientData; void * neighbor; unsigned short offsetInSegment; uint32_t queuedPacketTimeout; TCPIP_NET_HANDLE netIfH; IPV6_HEADER ipv6Header; IPV6_DATA_SEGMENT_HEADER payload; } IPV6_PACKET; ",
							" Description Structure: IPV6_PACKET IPv6 packets are queued for future transmission queuedPacketTimeout is used to time-out IPv6 queued packets ",
							" Members Members Description next Next packet in a queue payloadLen Amount of data in payload buffer headerLen Total header length (IP header + IPv6 extension headers) upperLayerHeaderLen Total length of the upper layer header upperLayerChecksumOffset Offset of the upper layer checksum upperLayerHeaderType Type definition for the upper-layer header type useUnspecAddr: 1; This packet should use the unspecified address sourceSpecified: 1; The upper layer or application layer specified a source address queued : 1; Packet has been queued addressType : 2; IP_ADDRESS_TYPE_IPV6 or IP_ADDRESS_TYPE_IPV4 remoteMACAddr The packet's remote MAC address ackFnc Function to be called when IPv6 is done with the packet macAckFnc Function to be called when MAC is done with a TX packet ackParam Parameter to be used clientData Optional packet client data neighbor The neighbor that the message was received from offsetInSegment Offset used for storing fragment transmission information queuedPacketTimeout Time out for IPv6 packets which are queued netIfH Packet network interface ipv6Header IPv6 header definition payload IPv6 data segment payload ",
							" Remarks For IPv6 queuing the time out has to be 0 The queue is processed separately by the NDP IPV6_PACKET_ACK_FNC() is called after the successful removal and inclusion of the packet ",
							" IPV6_PACKET_ACK_FNC Type ",
							" C typedef bool (* IPV6_PACKET_ACK_FNC)(void* bool const void*); ",
							" Description Type: IPV6_PACKET_ACK_FNC Packet allocation and deallocation acknowledgment callback function ",
							" Parameters Parameters Description void * Pointer to the packet that was transmitted bool True if the packet was sent False otherwise const void* 0 ",
							" Returns True - If the packet needs the queuing flags removed (it is not deleted and still in use) False - If the packet does not need the queuing flags removed (either no longer exists or the flags updated) ",
							" Remarks None ",
							" IPV6_RX_FRAGMENT_BUFFER Structure ",
							" C typedef struct _IPV6_RX_FRAGMENT_BUFFER { struct _IPV6_RX_FRAGMENT_BUFFER * next; uint8_t * ptrPacket; uint32_t identification; uint16_t bytesInPacket; uint16_t packetSize; uint16_t firstFragmentLength; uint8_t secondsRemaining; } IPV6_RX_FRAGMENT_BUFFER; ",
							" Description Structure: IPV6_RX_FRAGMENT_BUFFER Each fragment is composed of unfragmentable parts and fragmentable parts Allocate memory for the fragmented packet w r t to TCPIP_IPV6_RX_FRAGMENTED_BUFFER_SIZE The RFC specifies that the fragments must be reassembled in one minute or less secondsRemaining is the times remaining for reassemble ",
							" Members Members Description next Next fragmented packet ptrPacket Packet information identification Fragment ID bytesInPacket Number of bytes written to a packet packetSize Packet size (packet is complete when this matches bytesInPacket ) firstFragmentLength Length of the first fragment secondsRemaining Number of seconds remaining during which the fragment can be reassembled ",
							" Remarks None ",
							" IPV6_SEGMENT_TYPE Enumeration ",
							" C typedef enum { TYPE_IPV6_HEADER = 1u TYPE_IPV6_EX_HEADER_HOP_BY_HOP_OPTIONS TYPE_IPV6_EX_HEADER_DESTINATION_OPTIONS_1 TYPE_IPV6_EX_HEADER_ROUTING TYPE_IPV6_EX_HEADER_FRAGMENT TYPE_IPV6_EX_HEADER_AUTHENTICATION_HEADER TYPE_IPV6_EX_HEADER_ENCAPSULATING_SECURITY_PAYLOAD TYPE_IPV6_EX_HEADER_DESTINATION_OPTIONS_2 TYPE_IPV6_UPPER_LAYER_HEADER TYPE_IPV6_UPPER_LAYER_PAYLOAD TYPE_IPV6_BEGINNING_OF_WRITABLE_PART TYPE_IPV6_END_OF_LIST } IPV6_SEGMENT_TYPE; ",
							" Description Enumeration: IPV6_SEGMENT_TYPE IPv6 extended header ",
							" Remarks None ",
							" IPV6_TLV_HBHO_PAYLOAD_JUMBOGRAM Macro ",
							" C #define IPV6_TLV_HBHO_PAYLOAD_JUMBOGRAM 0xC2u ",
							" Description IPv6 Type-length-value type code for the Hop-by-hop \"Jumbo-gram Payload\" option ",
							" IPV6_TLV_HBHO_ROUTER_ALERT Macro ",
							" C #define IPV6_TLV_HBHO_ROUTER_ALERT 0x05u ",
							" Description IPv6 Type-length-value type code for the Hop-by-hop \"Router Alert\" option ",
							" IPV6_TLV_OPTION_TYPE Union ",
							" C typedef union { unsigned char b; struct { unsigned option : 6; unsigned unrecognizedAction : 2; } bits; } IPV6_TLV_OPTION_TYPE; ",
							" Description Type: IPV6_TLV_OPTION_TYPE This type defines the data structure for IPv6 TLV options ",
							" Remarks None ",
							" IPV6_TLV_PAD_1 Macro ",
							" C #define IPV6_TLV_PAD_1 0u ",
							" Description IPv6 Type-length-value type code for the Pad 1 option ",
							" IPV6_TLV_PAD_N Macro ",
							" C #define IPV6_TLV_PAD_N 1u ",
							" Description IPv6 Type-length-value type code for the Pad N option ",
							" IPV6_TLV_UNREC_OPT_DISCARD_PP Macro ",
							" C #define IPV6_TLV_UNREC_OPT_DISCARD_PP 0x02 ",
							" Description IPv6 action code for the unrecognized option reaction to discard the packet and send an ICMP parameter problem message ",
							" IPV6_TLV_UNREC_OPT_DISCARD_PP_NOT_MC Macro ",
							" C #define IPV6_TLV_UNREC_OPT_DISCARD_PP_NOT_MC 0x03 ",
							" Description IPv6 action code for the unrecognized option reaction to discard the packet and send an ICMP parameter problem message if the destination address isn't a multicast address ",
							" IPV6_TLV_UNREC_OPT_DISCARD_SILENT Macro ",
							" C #define IPV6_TLV_UNREC_OPT_DISCARD_SILENT 0x01 ",
							" Description IPv6 action code for the unrecognized option reaction to discard the packet silently ",
							" IPV6_TLV_UNREC_OPT_SKIP_OPTION Macro ",
							" C #define IPV6_TLV_UNREC_OPT_SKIP_OPTION 0x00 ",
							" Description IPv6 action code for the unrecognized option reaction to skip the option ",
							" IPV6_ULA_FLAGS Enumeration ",
							" C typedef enum { IPV6_ULA_FLAG_NTPV4 = 0x01 IPV6_ULA_FLAG_GENERATE_ONLY = 0x02 IPV6_ULA_FLAG_SKIP_DAD = 0x04 } IPV6_ULA_FLAGS; ",
							" Description Enumeration: IPV6_ULA_FLAGS This enumeration provides a list of possible flags for the Unique Local Address (ULA) generation ",
							" Members Members Description IPV6_ULA_FLAG_NTPV4 = 0x01 Use an IPv4 NTP server access in Unique Local Address generation Default is an IPv6 server IPV6_ULA_FLAG_GENERATE_ONLY = 0x02 Generate an address only don't add it to the interface addresses IPV6_ULA_FLAG_SKIP_DAD = 0x04 When adding the address to the interface skip the Duplicate Address Detection ",
							" Remarks None ",
							" IPV6_ULA_RESULT Enumeration ",
							" C typedef enum { IPV6_ULA_RES_OK IPV6_ULA_RES_BUSY = -1 IPV6_ULA_RES_IF_ERR = -2 IPV6_ULA_RES_NTP_ACCESS_ERR = -3 IPV6_ULA_RES_NTP_TSTAMP_ERR = -4 } IPV6_ULA_RESULT; ",
							" Description Enumeration: IPV6_ULA_RESULT This enumeration provides a list of possible results for the Unique Local Address (ULA) generation ",
							" Members Members Description IPV6_ULA_RES_OK The address generation was started successfully IPV6_ULA_RES_BUSY = -1 Address generation module is busy IPV6_ULA_RES_IF_ERR = -2 Interface non-existent IPV6_ULA_RES_NTP_ACCESS_ERR = -3 NTP module could not be accessed IPV6_ULA_RES_NTP_TSTAMP_ERR = -4 Wrong NTP time stamp received ",
							" Remarks None ",
							" TCPIP_IPV6_AddressUnicastRemove Function ",
							" C void TCPIP_IPV6_AddressUnicastRemove( TCPIP_NET_HANDLE netH const IPV6_ADDR * address ); ",
							" Description This function is used to remove a configured unicast address from an interface ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description netH The interface to remove the address address The address ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_ArrayGet Function ",
							" C uint8_t TCPIP_IPV6_ArrayGet( TCPIP_MAC_PACKET* pRxPkt uint8_t * val uint16_t len ); ",
							" Description Reads a characer of data from a packet ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description pRxPkt The MAC RX packet to read data from val The buffer to store the data len The amount of data to read ",
							" Returns 0 - The number of bytes read 0 - No byte is available to read ",
							" Remarks None ",
							" TCPIP_IPV6_ArrayPutHelper Function ",
							" C unsigned short TCPIP_IPV6_ArrayPutHelper( IPV6_PACKET * pkt const void * dataSource uint8_t dataType unsigned short len ); ",
							" Description This is a helper function for writing data to a packet ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description ptrPacket The packet dataSource The address of the data on ts medium datatype Descriptor of the data type (dynamic memory on PIC in a network FIFO in static PIC RAM) len Length of the data ",
							" Returns Unsigned short - The number of bytes of data written ",
							" Remarks None ",
							" TCPIP_IPV6_DASSourceAddressSelect Function ",
							" C IPV6_ADDR_STRUCT * TCPIP_IPV6_DASSourceAddressSelect( TCPIP_NET_HANDLE hNetIf const IPV6_ADDR * dest IPV6_ADDR * requestedSource ); ",
							" Description The IPv6 policy table is used to select the destination address The destination address selection algorithm takes a list of IPv6 addresses ( gPolicyTable ) and sorts the linked list There are eight sorting rules Starting with the last rule and working to the most important using a stable sorting algorithm will produce a sorted list most efficiently The best average run time we'll get with a stable sort with O(1) memory usage is O(n^2) so we'll use an insertion sort This will usually be most efficient for small lists (which should be the typical case) If a rule determines a result then the remaining rules are not relevant and should be ignored ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description hNetIf The given interface dest The destination address requestedSource A specified source ",
							" Returns IPV6_ADDR * Pointer to the selected source address - On Success NULL - On Failure ",
							" Remarks None ",
							" TCPIP_IPV6_DefaultRouterDelete Function ",
							" C void TCPIP_IPV6_DefaultRouterDelete( TCPIP_NET_HANDLE netH ); ",
							" Description This function deletes all default routers on a given interface ",
							" Preconditions The IPv6 stack is initialized and the interface is up and configured ",
							" Parameters Parameters Description netH The interface for which to delete the router address ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_DefaultRouterGet Function ",
							" C const IPV6_ADDR* TCPIP_IPV6_DefaultRouterGet( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the current router address for a specified interface ",
							" Preconditions The IPv6 stack is initialized and the interface is up and configured ",
							" Parameters Parameters Description netH The interface for which to return the router address ",
							" Returns Valid IPV6_ADDR pointer - If the interface exists and a valid router address exists 0 - If the interface does not exist and a valid router address does not exist ",
							" Remarks None ",
							" TCPIP_IPV6_DestAddressGet Function ",
							" C IPV6_ADDR * TCPIP_IPV6_DestAddressGet( IPV6_PACKET * p ); ",
							" Description This function is used to get the destination address for a IPv6 packet ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description p Pointer to IPv6 packet ",
							" Returns IPV6_ADDR * Get a valid IPv6 Source address - On Success NULL - On Failure ",
							" Remarks None ",
							" TCPIP_IPV6_DestAddressSet Function ",
							" C void TCPIP_IPV6_DestAddressSet( IPV6_PACKET * p const IPV6_ADDR * addr ); ",
							" Description This API is used to configure the destination address for an IPv6 packet ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description p Pointer to IPv6 packet addr Destination address ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_Flush Function ",
							" C int TCPIP_IPV6_Flush( IPV6_PACKET * pkt ); ",
							" Description This function flushes an IP TX packet Determines the link-layer address if necessary and calculates the upper-layer checksum if necessary ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description ptrPacket The packet to flush ",
							" Returns 1 - If the packet has been transmitted 0 - If the packet has been queued 0 - If the packet has been discarded for some error ",
							" Remarks None ",
							" TCPIP_IPV6_Get Function ",
							" C uint8_t TCPIP_IPV6_Get( TCPIP_MAC_PACKET* pRxPkt uint8_t* pData ); ",
							" Description This function is used to read the next byte of data from a packet ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description pRxPkt The MAC RX packet to read data from pData Byte data to be read ",
							" Returns 1 - On successful read 0 - No byte is available to read ",
							" Remarks None ",
							" TCPIP_IPV6_HandlerDeregister Function ",
							" C bool TCPIP_IPV6_HandlerDeregister( IPV6_HANDLE hIpv6 ); ",
							" Description This function deregisters a previously registered IPv6 event handler callback function ",
							" Preconditions The IPv6 stack is initialized and the interface is up and configured ",
							" Parameters Parameters Description hIpv6 Handle to registered callback ",
							" Returns True - If deregister successful False - If deregister is not successful ",
							" Remarks None ",
							" TCPIP_IPV6_HandlerRegister Function ",
							" C IPV6_HANDLE TCPIP_IPV6_HandlerRegister( TCPIP_NET_HANDLE hNet IPV6_EVENT_HANDLER handler const void* hParam ); ",
							" Description This function is used to register a notification handler with the IPv6 module ",
							" Preconditions The IPv6 stack is initialized and the interface is up and configured ",
							" Parameters Parameters Description netH Specifies interface to register on handler Handler to be called for event hParam The hParam is passed by the client and will be used by the IPv6 when the notification is made It is used for per-thread content or if more modules for example share the same handler and need a way to differentiate the callback ",
							" Returns Handle to registered callback A valid handle - On success Null handle - On failure ",
							" Remarks None ",
							" TCPIP_IPV6_InterfaceIsReady Function ",
							" C bool TCPIP_IPV6_InterfaceIsReady( TCPIP_NET_HANDLE netH ); ",
							" Description Returns the current state of the IPv6 interface (i e determines if an interface is ready for IPv6 transactions) ",
							" Preconditions None ",
							" Parameters Parameters Description netH The interface to check ",
							" Returns True - If the interface has IPv6 functionality available False - If the interface does not have IPv6 functionality available ",
							" Remarks None ",
							" TCPIP_IPV6_IsFragmentationEnabled Function ",
							" C TCPIP_IPV6_IsFragmentationEnabled(); ",
							" Description This function is a helper to return the IPv6 fragmentation support ",
							" Preconditions IPv6 properly initialized ",
							" Returns True - If the fragmentation is enabled and supported by the IPv6 module False - Fragmentation is not supported ",
							" Remarks The IPv6 fragmentation support is always enabled ",
							" TCPIP_IPV6_MaxDatagramDataSizeGet Function ",
							" C int TCPIP_IPV6_MaxDatagramDataSizeGet( TCPIP_NET_HANDLE netH ); ",
							" Description This function is a helper to allow retrieving the MDDS on the specified interface ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description netH Handle of the interface ",
							" Returns The maximum datagram data size that can be transported on the selected interface 0 - Invalid interface specified ",
							" Remarks None ",
							" TCPIP_IPV6_MODULE_CONFIG Structure ",
							" C typedef struct { uint32_t rxfragmentBufSize; uint32_t fragmentPktRxTimeout; } TCPIP_IPV6_MODULE_CONFIG; ",
							" Description Structure: TCPIP_IPV6_MODULE_CONFIG IPv6 module runtime configuration and initialization parameters ",
							" Members Members Description rxfragmentBufSize RX fragmented buffer size fragmentPktRxTimeout Fragmented packet time out value ",
							" Remarks None ",
							" TCPIP_IPV6_MulticastListenerAdd Function ",
							" C IPV6_ADDR_STRUCT * TCPIP_IPV6_MulticastListenerAdd( TCPIP_NET_HANDLE hNet IPV6_ADDR * address ); ",
							" Description This function is used to add the IPv6 multicast address to an interface ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description netH The interface to add the address address The address ",
							" Returns IPV6_ADDR_STRUCT * On Success - Pointer to the new listener On Failure - NULL ",
							" Remarks None ",
							" TCPIP_IPV6_MulticastListenerRemove Function ",
							" C void TCPIP_IPV6_MulticastListenerRemove( TCPIP_NET_HANDLE netH IPV6_ADDR * address ); ",
							" Description This function removes a multicast listener from a given interface ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description netH The interface address The address ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_PACKET_HANDLER Type ",
							" C typedef bool (* TCPIP_IPV6_PACKET_HANDLER)(TCPIP_NET_HANDLE hNet struct _tag_TCPIP_MAC_PACKET* rxPkt const void* hParam); ",
							" Desscription IPv6 packet handler pointer Pointer to a function that will be called by the IPv6 module when a RX packet is available ",
							" Preconditions None ",
							" Parameters Parameters Description hNet Network handle on which the packet has arrived rxPkt Pointer to incoming packet hParam User passed parameter when handler was registered ",
							" Returns True - if the packet is processed by the external handler In this case the IPv6 module will no longer process the packet False - The packet needs to be processed internally by the IPv6 as usual ",
							" Remarks The packet handler is called in the IPv6 context The handler should be kept as short as possible as it affects the processing of all the other IPv6 RX traffic Before calling the external packet handler: The rxPkt- pktIf is updated The rxPkt- pNetLayer points to an IPV6_HEADER data structure IMPORTANT: When the packet handler returns true once it's done processing the packet it needs to acknowledge it i e return to the owner which is the MAC driver serving the network interface This means that the packet acknowledge function needs to be called with a proper acknowledge parameter and the QUEUED flag needs to be cleared if needed: if((*rxPkt- ackFunc)(rxPkt rxPkt- ackParam)) { rxPkt- pktFlags = ~TCPIP_MAC_PKT_FLAG_QUEUED; } Failure to do that will result in memory leaks and starvation of the MAC driver See the tcpip_mac h for details ",
							" TCPIP_IPV6_PacketFree Function ",
							" C void TCPIP_IPV6_PacketFree( IPV6_PACKET * pkt ); ",
							" Description This function frees a TCP/IP Packet structure from dynamic memory ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description ptrPacket The packet is free ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_PacketHandlerDeregister Function ",
							" C bool TCPIP_IPV6_PacketHandlerDeregister( TCPIP_IPV6_PROCESS_HANDLE pktHandle ); ",
							" Description This function removes a packet processing handler ",
							" Preconditions IPv6 properly initialized ",
							" Parameters Parameters Description pktHandle TCPIP packet handle obtained by a call to TCPIP_IPV6_PacketHandlerRegister() ",
							" Returns True - If the operation succeeded False - If the operation failed ",
							" Remarks Exists only if TCPIP_IPV6_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_IPV6_PROCESS_HANDLE myHandle = TCPIP_IPV6_PacketHandlerRegister(myPacketHandler myParam ); // process incoming packets // now we're done with it TCPIP_IPV6_PacketHandlerDeregister(myHandle); ",
							" TCPIP_IPV6_PacketHandlerRegister Function ",
							" C TCPIP_IPV6_PROCESS_HANDLE TCPIP_IPV6_PacketHandlerRegister( TCPIP_IPV6_PACKET_HANDLER pktHandler const void* handlerParam ); ",
							" Description This function registers a new packet processing handler The caller can use the handler to be notified of incoming packets and given a chance to examine/process them ",
							" Preconditions IPv6 properly initialized ",
							" Parameters Parameters Description pktHandler The packet handler which will be called for an incoming packet handlerParam Packet handler parameter ",
							" Returns A valid TCPIP_IPV6_PROCESS_HANDLE - If the operation succeeded NULL - If the operation failed ",
							" Remarks Currently only one packet handler is supported for the IPv6 module The call will fail if a handler is already registered Use TCPIP_IPV6_PacketHandlerDeregister() first Exists only if TCPIP_IPV6_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_IPV6_PROCESS_HANDLE pktHandle = TCPIP_IPV6_PacketHandlerRegister( myPktHandler myParam ); ",
							" TCPIP_IPV6_PayloadSet Function ",
							" C unsigned short TCPIP_IPV6_PayloadSet( IPV6_PACKET * pkt uint8_t* payload unsigned short len ); ",
							" Description This function will allocate a data segment header and append it to the end of a chain of segments in a TX packet It will set the data pointer in the packet segment to a pre-existing buffer of data ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description ptrPacket The packet payload Address of the data payload len Length of the data payload ",
							" Returns IPV6_ADDR * The amount of data added to the packet length - On Success 0 - On Failure ",
							" Remarks This function is useful for adding payloads to outgoing packets without copying them if the data is in another pre-existing buffer (i e TCP) ",
							" TCPIP_IPV6_PROCESS_HANDLE Type ",
							" C typedef const void* TCPIP_IPV6_PROCESS_HANDLE; ",
							" Desscription Type: TCPIP_IPV6_PROCESS_HANDLE Definition of a packet processing handle used for packet processing registration by the IPv6 clients ",
							" TCPIP_IPV6_Put Function ",
							" C bool TCPIP_IPV6_Put( IPV6_PACKET * pkt unsigned char v ); ",
							" Description This function writes a character of data to a packet ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description pkt The packet v The character ",
							" Returns True - If the character was written False - If the character was not written ",
							" Remarks None ",
							" TCPIP_IPV6_PutArray Macro ",
							" C #define TCPIP_IPV6_PutArray(pkt data len) TCPIP_IPV6_ArrayPutHelper(pkt data IPV6_DATA_PIC_RAM len) ",
							" Description This function writes data to an outgoing packet ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true The TCPIP_IPV6_TxIsPutReady() function must have returned a value greater than or equal to len  ",
							" Members Members Description ptrPacket The packet dataSource Pointer to the data to copy to the packet len Length of the data ",
							" Returns unsigned short - The number of bytes of data written ",
							" Remarks None ",
							" TCPIP_IPV6_RouterAddressAdd Function ",
							" C bool TCPIP_IPV6_RouterAddressAdd( TCPIP_NET_HANDLE netH IPV6_ADDR * rAddress unsigned long validTime int flags ); ",
							" Description This function adds a unicast address as a routing address to a specified interface ",
							" Preconditions rAddress - pointer to a valid IPv6 router address IPv6 stack initialized and interface up and configured ",
							" Parameters Parameters Description netH The interface to which the address is to be added rAddress The router address to add validTime The time this entry will be valid in seconds If 0 the entry will be valid forever flags Creation flags (not used for now should be 0) ",
							" Returns True - operation succeeded False - Operation failed (interface not valid interface still configuring no memory etc ) ",
							" Remarks The validTime parameter is relevant for an existent router on the network If such router does not exist the stack will eventually discard the entry automatically ",
							" TCPIP_IPV6_SourceAddressGet Function ",
							" C IPV6_ADDR * TCPIP_IPV6_SourceAddressGet( IPV6_PACKET * p ); ",
							" Description This API is used to get the source address for an IPv6 packet ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description p Pointer to IPv6 packet ",
							" Returns IPV6_ADDR * Get a valid IPv6 Source address - On Success NULL - On Failure ",
							" Remarks None ",
							" TCPIP_IPV6_SourceAddressSet Function ",
							" C void TCPIP_IPV6_SourceAddressSet( IPV6_PACKET * p const IPV6_ADDR * addr ); ",
							" Description This function is used to configure the source address for a IPv6 packet ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description p Pointer to IPv6 packet addr Source address ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_Task Function ",
							" C void TCPIP_IPV6_Task(); ",
							" Description This function performs IPv6 module tasks in the TCP/IP stack ",
							" Preconditions IPv6 properly initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_IPV6_TxIsPutReady Function ",
							" C unsigned short TCPIP_IPV6_TxIsPutReady( IPV6_PACKET * pkt unsigned short count ); ",
							" Description This function determines whether a TX packet can be written to This function will allocate additional space to the packet to accommodate the user ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description ptrPacket The packet to check count The amount of writable space to check for ",
							" Returns The amount of space available - On success 0 - On failure ",
							" Remarks None ",
							" TCPIP_IPV6_TxPacketAllocate Function ",
							" C IPV6_PACKET * TCPIP_IPV6_TxPacketAllocate( TCPIP_NET_HANDLE netH IPV6_PACKET_ACK_FNC ackFnc void* ackParam ); ",
							" Description This function dynamically allocates a packet for transmitting IP protocol data and sets the packet IPv6 protocol for a TX packet ",
							" Preconditions TCPIP_IPV6_Initialize() should be called TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description netH Interface of the outgoing packet ackFnc Function to be called when IP is done with the TX packet (finished transmitting) ackParam Parameter to be used for this callback This has meaning only for the caller of the TCPIP_IPV6_TxPacketAllocate() ",
							" Returns Pointer to the allocated packet - On success NULL - On failure ",
							" Remarks None ",
							" TCPIP_IPV6_UnicastAddressAdd Function ",
							" C IPV6_ADDR_STRUCT * TCPIP_IPV6_UnicastAddressAdd( TCPIP_NET_HANDLE netH IPV6_ADDR * address int prefixLen uint8_t skipProcessing ); ",
							" Description Adds a unicast address to a specified interface Starts duplicate address detection if necessary ",
							" Preconditions TCPIP_IPV6_Initialize() is required TCPIP_IPV6_InterfaceIsReady should be true ",
							" Parameters Parameters Description netH The interface to which the address is to be added address The address to add prefixLen The prefix length associated to this static address (providing the subnet prefix length) If 0 the default value of 64 will be used skipProcessing True to skip duplicate address detection; otherwise false ",
							" Returns IPV6_ADDR_STRUCT * On Success - Pointer to the structure of the newly allocated address On Failure - NULL ",
							" Remarks The RFC (4291) requires the interface ID for all unicast addresses (except those that start with the binary value 000) to be 64 bits long and to be constructed in Modified EUI-64 format Therefore the prefixLen parameter should probably always be 64 ",
							" TCPIP_IPV6_UniqueLocalUnicastAddressAdd Function ",
							" C IPV6_ULA_RESULT TCPIP_IPV6_UniqueLocalUnicastAddressAdd( TCPIP_NET_HANDLE netH uint16_t subnetID IPV6_ULA_FLAGS genFlags IP_MULTI_ADDRESS* ntpAddress ); ",
							" Description This function starts the process of adding a ULA address to the specified interface The segments of the generated address are as follows: FC00::/7 - ULA prefix L - 1 bit set to 1 locally assigned Global ID - 40 bit random generated identifier subnet ID - 16 bit subnet identifier Interface ID - 64 bit interface identifier generated as a EUI64 from the specified interface MAC The randomness of the \"Global ID\" prefix of the generated IPv6 address is obtained by using an NTP server The supplied NTP server will be contacted to obtain an NTP time stamp This time stamp together with the EUI64 identifier obtained from the interface MAC are passed through a 160 bits hash algorithm (SHA1) and the least significant 40 bits are used as the GlobalID of the interface ",
							" Preconditions The IPv6 stack is initialized and the interface is up and configured ",
							" Parameters Parameters Description netH The interface to add the address to subnetIP The subnet ID to be used genFlags Address generation flags:- IPV6_ULA_FLAG_NTPV4 - if set the NTP server will be contacted over an IPv4 connection Otherwise a default IPv6 connection will be attempted - IPV6_ULA_FLAG_GENERATE_ONLY - if set the address will not be added to the list of the addresses for the specified interface - IPV6_ULA_FLAG_SKIP_DAD - if set the DAD processing will be skipped ntpAddress The NTP server address - it is an IPv4/IPv6 address as selected by the IPV6_ULA_FLAG_NTPV4 flag (the IP address could be obtained with an DNS call into the stack) Not currently used ",
							" Returns IPV6_ULA_RES_BUSY - address generation module is busy IPV6_ULA_RES_IF_ERR - IPv6 interface is not up IPV6_ULA_RES_OK - if the call succeeded and the generation process was started ",
							" Remarks ULA generation needs to be enabled in the stack at build time Only one address generation at a time is supported for now Before attempting a new address generation the previous operation has to be completed otherwise the call will fail This function requires that the NTP client is enabled in the stack If not the call will fail The caller will be notified by the outcome of the operation by the stack using the standard IPv6 notification handler (registered by TCPIP_IPV6_HandlerRegister() call) The ntpAddress parameter is not currently used The NTP timestamp will be obtained using the default NTP server address ",
							" MAC Driver Module In the seven-layer OSI model of computer networking media access control (MAC) data communication protocol is a sub-layer of the data link_layer which itself is layer_2 The MAC sub-layer provides addressing and channel access control mechanisms that make it possible for several terminals or network nodes to communicate within a multiple access network that incorporates a shared medium (e g Ethernet) The hardware that implements the MAC is referred to as a medium access controller The MAC sub-layer acts as an interface between the logical link control (LLC) sub-layer and the network's physical_layer The MAC_layer emulates a full-duplex logical communication channel in a multi-point network This channel may provide unicast multicast or broadcast communication service Abstraction Model TCPIP MAC mac_abstraction How the Library WorksThe MAC layer_(together with the Logical Link Control – LLC) is intended to have the functionality described in the OSI model for the Data Link Layer There are two important functions to be performed in the MAC layer_as part of the Data Link Layer: Data Encapsulation (Transmit and Receive) Framing (frame boundary detection frame synchronization) Addressing (control of the source and destination addresses) Error detection (detection of transmission errors occurring in the physical medium) Media Access Management Medium allocation (collision avoidance) Contention resolution (collision handling) Beside this the receive packet filtering is another important functionality that is usually integrated in the MAC_layer The functionality previously presented is handled by the hardware itself as an intrinsic part of the data exchange that’s performed with the PHY From the software point of view the MAC driver exposes an API that’s focused on efficient data transfer routines Control of the driver and access to the transferred data is given by using regular driver client access functions Please note that the MAC model described here corresponds to a virtual MAC driver that the TCP/IP stack uses All the implementations of the physical MAC drivers (Ethernet Wi-Fi etc ) must adhere and implement this API required by the virtual MAC API This is how the TCP/IP stack achieves virtualization of the operation over multiple network interfaces The TCP/IP stack makes no assumption about the specifics of an actual implementation and expects all MACs to behave identically Core Functionality TCPIP MAC mac_flow The MAC driver is used internally by the TCP/IP Stack Manager and its API is not normally exposed outside the stack There is little need to interface directly with the MAC from the application level The TCP/IP Stack provides all the data interface functions to the application by exposing the_socket_API (TCP and UDP) and also low level IPv4 and IPv6 API However the functionality of the MAC driver is important for having a thorough understanding of how the TCP/IP Stack works or for integrating the MPLAB Harmony MAC driver into a third-party TCP/IP Stack The MAC driver needs to be initialized by a call to TCPIP_MAC_Initialize() with both stack and module specific initialization data The stack initialization data contains absolutely necessary data for the MAC driver to operate (memory allocation functions packet allocation functions event notification functions etc ) Note that the module initialization data could be different from one MAC module to another and if missing normally the MAC driver should use some default values specified in the tcpip_mac_config h file Once the initialization process succeeds a MAC client handle is obtained by using TCPIP_MAC_Open Other parameters can be set like the active events and receive filters by calling TCPIP_MAC_EventMaskSet TCPIP_MAC_RxFilterHashTableEntrySet etc By default the MAC driver operates in interrupts and the events are reported to the TCP/IP stack by using the event notification function that’s passed in at the MAC driver initialization However by using the TCPIP_MAC_EventPendingGet function it is possible to use the MAC driver in a polling manner To send a packet a MAC driver client has to obtain a TCPIP_MAC_PACKET data structure either statically or dynamically Note that the Harmony TCP/IP Stack uses dynamic packet allocation and has a packet allocation module that the Stack Manager calls for this purpose The packet has to be properly formatted with all the required fields before being passed to the MAC driver for transmission The MAC driver will perform a minimum sanity check and will try to transmit the packet over the network Once the corresponding interrupt signals to the driver that the packet was (successfully/non-successfully) transmitted the MAC driver will call the packet acknowledge function This will indicate to the owner of the packet (the module that created/allocated the packet) that the packet is no longer in use and it can be reused discarded etc The receive process is configured as part of the MAC driver initialization procedure Usually the MAC driver needs some buffers for storing the received network traffic How exactly this is done is driver specific and not part of this specification The Harmony Ethernet MAC driver for example allocates multiple receive buffers at initialization and uses those for the whole duration of the driver life Other implementations may choose to free the receive buffers once they are processed and allocate new ones as needed The receive process is initiated by the hardware indicating through an interrupt that a packet is pending This will trigger a notification event to the MAC client (the TCP/IP stack) and the actual packet receive function can be called Alternatively the MAC client can call the TCPIP_MAC_EventPendingGet function which can be used in a polling manner To actually receive the packet the TCP/IP stack should call the TCPIP_MAC_PacketRx function This function besides returning a pointer to the newly received packet will provide additional info about the packet status Also some MAC drivers have the possibility to mark the packet being received as being unicast multicast or broadcast Once a packet is obtained the stack has to dispatch it accordingly based on the info contained within the packet (ARP IPv4 IPv6 etc ) Note that in the Harmony TCP/IP stack it’s the Stack Manager that performs the receiving and dispatching function of the packets The recipient of the packet will be called to process the incoming packet and may forward the packet for further processing (TCP UDP ICMP) Note that during all this processing time this packet can no longer be used by the MAC driver for storing newly receive data Therefore once the final recipient of the received packet has processed the data it has to call the packet acknowledge function so that the packet can be returned to its owner the MAC driver in this case If the MAC driver reuses the packet (as the Harmony Ethernet MAC driver does) or simply discards it is driver implementation specific Once the data transfer of packets over the network is no longer needed the TCPIP_MAC_Close function can be called and also TCPIP_MAC_Deinitialize This is part of the normal procedure that the Harmony stack uses for shutting down and restarting a network interface dynamically For detailed information about the MAC layer_requirements and functionality please consult the IEEE 802 3 specifications Library Interface Name Description Macros  TCPIP_EMAC_ETH_OPEN_FLAGS Flags to use for the Ethernet connection A TCPIP_ETH_OPEN_FLAGS value Set to TCPIP_ETH_OPEN_DEFAULT unless very good reason to use different value TCPIP_EMAC_PHY_ADDRESS The PHY address as configured on the board By default all the PHYs respond to address 0 TCPIP_EMAC_PHY_CONFIG_FLAGS Flags to configure the MAC - PHY connection a DRV_ETHPHY_CONFIG_FLAGS This depends on the actual connection (MII/RMII default/alternate I/O) The DRV_ETHPHY_CFG_AUTO value will use the configuration fuses setting TCPIP_EMAC_PHY_LINK_INIT_DELAY The value of the delay for the link initialization ms This insures that the PHY is ready to transmit after it is reset A usual value is 500 ms up to 2000 ms The longer the delay the less chance that the PHY drops packets when the link is established Adjust to your needs TCPIP_EMAC_RX_BUFF_SIZE Size of a RX packet buffer Should be multiple of 16 This is the size of all receive packet buffers processed by the ETHC The size should be enough to accommodate any network received packet If the packets are larger they will have to take multiple RX buffers and the packet manipulation is less efficient #define TCPIP_EMAC_RX_BUFF_SIZE 512 Together with TCPIP_EMAC_RX_DEDICATED_BUFFERS it has impact on TCPIP_STACK_DRAM_SIZE setting TCPIP_EMAC_RX_DEDICATED_BUFFERS Number of MAC dedicated RX packet buffers These buffers are always owned by the MAC Note that the MAC driver allocates these buffers for storing the incoming network packets The bigger the storage capacity the higher data throughput can be obtained Note that these packet buffers are allocated from the private TCP/IP heap that is specified by the TCPIP_STACK_DRAM_SIZE setting TCPIP_EMAC_RX_DESCRIPTORS Number of the RX descriptors to be created If not using the run time replenish mechanism (see below) it should match the number of dedicated buffers: TCPIP_EMAC_RX_DEDICATED_BUFFERS; Otherwise it should be bigger than the sum of dedicated + non-dedicated buffers: TCPIP_EMAC_RX_DESCRIPTORS TCPIP_EMAC_RX_DEDICATED_BUFFERS + replenish_buffers TCPIP_EMAC_RX_FRAGMENTS MAC maximum number of supported RX fragments Based on the values of TCPIP_EMAC_MAX_FRAME and TCPIP_EMAC_RX_BUFF_SIZE an incoming frame may span multiple RX buffers (fragments) Note that excessive fragmentation leads to performance degradation The default and recommended value should be 1 #define TCPIP_EMAC_RX_FRAGMENTS 1 Alternatively you can use the calculation of the number of fragments based on the selected RX sizes: TCPIP_EMAC_RX_INIT_BUFFERS Number of non-dedicated buffers for the MAC initialization Buffers allocated at the MAC driver initialization TCPIP_EMAC_RX_LOW_FILL Number of RX buffers to allocate when below threshold condition is detected If 0 the MAC driver will allocate (scheduled buffers - rxThres) If 0 the MAC driver will allocate exactly TCPIP_EMAC_RX_LOW_FILL buffers TCPIP_EMAC_RX_LOW_THRESHOLD Minumum threshold for the buffer replenish process Whenever the number of RX scheduled buffers is = than this threshold the MAC driver will allocate new non-dedicated buffers (meaning that they will be released to the TCP/IP heap once they are processed) Setting this value to 0 disables the buffer replenishing process TCPIP_EMAC_TX_DESCRIPTORS Number of the TX descriptors to be created Because a TCP packet can span at most 3 buffers the value should always be = 4 The amount of memory needed per descriptor is not high (around 24 bytes) so when high MAC TX performance is needed make sure that this number is = 8 TCPIP_EMAC_RX_FILTERS MAC RX Filters These filters define the packets that are accepted and rejected by the MAC driver Adjust to your needs The default value allows the processing of unicast multicast and broadcast packets that have a valid CRC TCPIP_EMAC_LINK_MTU Link Maximum Transmission Unit (MTU) This symbol defines the largest network protocol data unit that can be transmitted over this link in a single frame It relates to the TCPIP_EMAC_MAX_FRAME value - see above The default value for an Ethernet link should be 1500 The minimum value for an Eternet link should be 576 If need to change this make sure that the TCPIP_EMAC_MAX_FRAME = TCPIP_EMAC_LINK_MTU + 18 where the value 18 represents the Ethernet frame header: 12 bytes - destination + source address 2 bytes - frame type 4 bytes - FCS TCPIP_EMAC_MAX_FRAME Maximum MAC supported RX/TX frame size The default value is 1536 (allows for VLAN tagged frames although the VLAN tagged frames are discarded on RX) On RX: any incoming ETH frame that's longer than this size will be discarded On TX: any frame that's longer than this size will be aborted by the MAC Normally there's no need to touch this value unless you know exactly the maximum size of the frames you want to process on your network TCPIP_EMAC_AUTO_FLOW_CONTROL_ENABLE This symbol enables/disables the auto flow control When in full-duplex mode and the auto flow control is enabled the MAC will send pause frames whenever the number of pending RX packets reached the full watermark Once this number drops to the empty watermark a pause frame with pause value of 0 is transmitted resuming the normal traffic Use 1 to enable 0 to disable Default should be enabled TCPIP_EMAC_FLOW_CONTROL_EMPTY_WMARK An 8 bit value representing the empty water mark in number of packets When the auto flow control is active and the number of pending received packets falls reaching this threshold the auto flow control pause frames will stop Always TCPIP_EMAC_FLOW_CONTROL_FULL_WMARK TCPIP_EMAC_FLOW_CONTROL_EMPTY_WMARK Used only when auto flow control is enabled Default value could be 0: resume normal traffic when there is no pending RX packet TCPIP_EMAC_FLOW_CONTROL_FULL_WMARK An 8 bit value representing the full water mark in number of packets When the number of pending received packets reaches this threshold the auto flow control kicks in A good rule to use for avoiding any packet overflow is to have enough receive room for at least 2 maximum packets i e fullWMMark = (rxScheduledBuffers x rxBuffSize) / TCPIP_EMAC_MAX_FRAME - (2 x TCPIP_EMAC_MAX_FRAME ) / rxBuffSize; Always TCPIP_EMAC_FLOW_CONTROL_FULL_WMARK TCPIP_EMAC_FLOW_CONTROL_EMPTY_WMARK Used only when auto flow control is enabled Adjust to your own value #define TCPIP_EMAC_FLOW_CONTROL_FULL_WMARK 2 Default value should use the calculation of the watermark based on the selected RX more TCPIP_EMAC_FLOW_CONTROL_PAUSE_BYTES Pause Time Value for the Auto Flow Control in bytes This represents the number of bytes to request the pause for when the auto flow control kicks in It is normally thought of in terms of RX packets: pauseBytes / rxBuffSize = pausePackets Using bytes instead of packets allows better granularity The value should be a multiple of 64 bytes The range is : 64 bytes = TCPIP_EMAC_FLOW_CONTROL_PAUSE_BYTES = (4 MB - 64) bytes (0x3fffc0) An usual value is 2 full packets For example 2 * 1536 bytes Used only when flow control is enabled Initialization Functions  TCPIP_MAC_Deinitialize MAC driver deinitialization function TCPIP_MAC_Initialize MAC driver initialization function TCPIP_MAC_ConfigGet Gets the current MAC driver configuration TCPIP_MAC_LinkCheck MAC link checking function TCPIP_MAC_Process MAC periodic processing function TCPIP_MAC_Reinitialize MAC driver reinitialization function TCPIP_MAC_Status Provides the current status of the MAC driver module TCPIP_MAC_Tasks Maintains the MAC driver's state machine Client Control and Status Functions  TCPIP_MAC_Close MAC driver close function TCPIP_MAC_Open MAC driver open function TCPIP_MAC_EventPendingGet Returns the currently pending MAC events TCPIP_MAC_ParametersGet MAC parameter get function TCPIP_MAC_RegisterStatisticsGet Gets the current MAC hardware statistics registers TCPIP_MAC_StatisticsGet Gets the current MAC statistics Event Functions  TCPIP_MAC_EventAcknowledge This function acknowledges a previously reported MAC event TCPIP_MAC_EventMaskSet MAC events report enable/disable function Filter Functions  TCPIP_MAC_RxFilterHashTableEntrySet Sets the current MAC hash table receive filter Data Transfer Functions  TCPIP_MAC_PacketRx A packet is returned if such a pending packet exists TCPIP_MAC_PacketTx MAC driver transmit function Data Types and Constants  TCPIP_MAC_POWER_MODE Supported MAC power mode state TCPIP_MODULE_MAC_PIC32INT_CONFIG Data that's passed to the MAC at initialization time as part of the TCPIP_MAC_INIT data structure TCPIP_MAC_ACTION Network interface action for initialization/deinitialization TCPIP_MAC_DATA_SEGMENT A data segment that's part of a TX/RX packet TCPIP_MAC_EVENT Defines the possible MAC event types TCPIP_MAC_EventF MAC event notification handler TCPIP_MAC_HEAP_CallocF MAC allocation function prototype TCPIP_MAC_HEAP_FreeF MAC allocation function prototype TCPIP_MAC_HEAP_HANDLE A handle used for memory allocation functions TCPIP_MAC_HEAP_MallocF MAC allocation function prototype TCPIP_MAC_MODULE_CTRL Data structure that's passed to the MAC at the initialization time TCPIP_MAC_PACKET_ACK_FUNC Prototype of a MAC packet acknowledge function TCPIP_MAC_PACKET_FLAGS Flags belonging to MAC packet TCPIP_MAC_PACKET_RX_STAT Status of a received packet TCPIP_MAC_PKT_ACK_RES List of MAC return codes for a packet acknowledge function TCPIP_MAC_PKT_AckF MAC packet acknowledge function prototype TCPIP_MAC_PKT_AllocF MAC packet allocation function prototype TCPIP_MAC_PKT_FreeF MAC packet free function prototype TCPIP_MAC_PROCESS_FLAGS List of the MAC processing flags TCPIP_MAC_SEGMENT_FLAGS Flags belonging to MAC data segment TCPIP_MAC_RX_STATISTICS MAC receive statistics data gathered at run time TCPIP_MAC_TX_STATISTICS MAC transmit statistics data gathered at run time TCPIP_MAC_HEAP_CallocFDbg This is type TCPIP_MAC_HEAP_CallocFDbg TCPIP_MAC_HEAP_FreeFDbg This is type TCPIP_MAC_HEAP_FreeFDbg TCPIP_MAC_HEAP_MallocFDbg This is type TCPIP_MAC_HEAP_MallocFDbg TCPIP_MAC_INIT Contains all the data necessary to initialize the MAC device TCPIP_MAC_PARAMETERS Data structure that tells the MAC run time parameters TCPIP_MAC_PKT_AllocFDbg This is type TCPIP_MAC_PKT_AllocFDbg TCPIP_MAC_PKT_FreeFDbg This is type TCPIP_MAC_PKT_FreeFDbg TCPIP_MAC_STATISTICS_REG_ENTRY Describes a MAC hardware statistics register TCPIP_MAC_SYNCH_REQUEST Defines the possible MAC synchronization request types TCPIP_MAC_SynchReqF MAC synchronization request function definition TCPIP_MAC_TYPE List of the MAC types TCPIP_MODULE_MAC_ID IDs of the MAC module supported by the stack TCPIP_MAC_RX_FILTER_TYPE Defines the possible MAC RX filter types TCPIP_MAC_LINK_MTU MTU size correspondig to the MAC types TCPIP_MAC_HANDLE Handle to a MAC driver TCPIP_MAC_RES List of return codes from MAC functions TCPIP_MAC_PACKET_RX_STAT_PIC32C Status of a received packet for PIC32C MAC driver TCPIP_MAC_PACKET Forward reference to a MAC packet TCPIP_MODULE_GMAC_QUEUE_CONFIG Configuration Structure for Queues in GMAC TCPIP_MODULE_MAC_PIC32C_CONFIG Data that's passed to the GMAC at initialization time as part of TCPIP_MAC_INIT data structure ",
							" _tag_MAC_DATA_SEGMENT Structure ",
							" C struct _tag_MAC_DATA_SEGMENT { struct _tag_MAC_DATA_SEGMENT* next; uint8_t* segLoad; uint16_t segLen; uint16_t segSize; uint16_t segFlags; uint16_t segLoadOffset; uint16_t segAllocSize; uint8_t segClientData[2]; }; ",
							" Description TCPIP MAC Data Segment Structure of a segment buffer transferred with the MAC A MAC TX or RX packet can consist of multiple data segments On TX the MAC has to be able to transmit packets that span multiple data segments On RX of a network frame the MAC may have to use multiple segments to construct a packet (For performance reasons a contiguous MAC packet with just one segment if possible is preferred) ",
							" Members Members Description next Multi-segment support next segment in the chain segLoad Pointer to segment data payload Points to TCPIP_MAC_SEGMENT_PAYLOAD::segmentPayload It specifies the address of the 1st payload byte If the processor has cache then it is always cache line size aligned Otherwise is 32 bits aligned segLen Segment payload size; TX: Number of bytes from this segment that has to be transmitted This is the total number of bytes including the Ethernet header but not the FCS (that should be added by the driver) RX: Number of payload bytes in the segment The MAC driver subtracts the FCS and Ethernet header length before handing over the packet to the stack Then the segLen field is updated by each stack layer in turn segSize Segment allocated total usable size This does not include the segLoadOffset (see below) segFlags TCPIP_MAC_SEGMENT_FLAGS segment flags: TCPIP_MAC_SEG_FLAG_STATIC TCPIP_MAC_SEG_FLAG_RX TCPIP_MAC_SEG_FLAG_RX TCPIP_MAC_SEG_FLAG_RX_STICKY segLoadOffset Offset in bytes between the address pointed by segLoad and the address where the segment buffer starts/was allocated It specifies the gap space at the beginning of the TCPIP_MAC_SEGMENT_PAYLOAD before the segmentPayload begins segLoadOffset == sizeof(TCPIP_MAC_SEGMENT_PAYLOAD::segmentPktPtr) + sizeof(TCPIP_MAC_SEGMENT_PAYLOAD::segmentDataGap) This currently is greater or equal than 8 bytes depending on the MAC drivers that are part of the build See TCPIP_MAC_DATA_SEGMENT For implementations that may work outside the Harmony TCP/IP stack it is up to the MAC to check that the value of this offset is enforced segAllocSize The size this segment payload allocation Debug/trace purposes segClientData[2] Additional client segment data Ignored by the MAC driver ",
							" Remarks See notes for the segLoadOffset member On 32-bit machines the segment payload is allocated so that it is always cache line size aligned and its size is 32-bits multiple ",
							" _tag_TCPIP_MAC_PACKET Structure ",
							" C struct _tag_TCPIP_MAC_PACKET { struct _tag_TCPIP_MAC_PACKET* next; struct _tag_TCPIP_MAC_PACKET* pkt_next; TCPIP_MAC_PACKET_ACK_FUNC ackFunc; const void* ackParam; TCPIP_MAC_DATA_SEGMENT* pDSeg; uint8_t* pMacLayer; uint8_t* pNetLayer; uint8_t* pTransportLayer; uint16_t totTransportLen; uint16_t pktFlags; uint32_t tStamp; const void* pktIf; int16_t ackRes; union { uint16_t pktClientData[3]; struct { uint16_t ipv4PktData; uint16_t ipv6PktData; uint16_t modPktData; }; }; uint8_t pktPriority; uint32_t pktClientLoad[]; }; ",
							" Description MAC Packet Structure of a packet transferred with the MAC This is the structure used for both TX and RX See the description of each individual field ",
							" Members Members Description next Multi-packet/queuing support This field is used for chaining/queuing packets pkt_next Multi-packet/queuing support This field is used for chaining packet fragments etc ackFunc Packet acknowledgment function On TX: A stack module owns the packet Once the MAC is done transmitting the packet (success or failure) it has to set an appropriate acknowledge result in the ackRes field ( a TCPIP_MAC_PKT_ACK_RES) adjust some packet flags (see TCPIP_MAC_PKT_FLAG_QUEUED) and call the packet acknowledge function (ackFunc) This call informs the packet owner that the MAC is done with using that packet It is up to the implementation what action the ackFunc takes: reuse free discard the packet or if some of the above steps are included in the ackFunc itself On RX: The packet is under the MAC control and it's passed to the stack when it contains valid data Once the recipient of the packet (IP ICMP UDP TCP etc ) is done with the packet processing it has to set an appropriate acknowledge result in the ackRes field ( a TCPIP_MAC_PKT_ACK_RES) adjust some packet flags (see TCPIP_MAC_PKT_FLAG_QUEUED) and call the packet acknowledge function (ackFunc) This call informs the packet owner (the MAC) that the processing of the packet is completed It is up to the implementation what action the ackFunc takes: reuse free discard the packet or if some of the above steps are included in the ackFunc itself ackParam Associated acknowledgment parameter to be used when ackFunc is called For TX packets: this is a client supplied parameter and is not used by the MAC driver For RX: If the MAC owns the RX packet then the MAC driver can use this field for further dispatching in the MAC driver owned acknowledgment function pDSeg Data (root) segment associated to this packet It is up to the design if the root data segment associated with a packet is contiguous in memory with the packet itself It can be 0 if the packet has no associated data pMacLayer Pointer to the MAC frame On TX: the sending higher layer protocol updates this field On RX: the MAC driver updates this field before handing over the packet (MCHP TCP/IP stack note: The packet allocation function update this field automatically) pNetLayer Pointer to the network layer data On TX: the sending higher layer protocol updates this field The MAC driver shouldn't need this field On RX: the MAC driver updates this field before handing over the packet (MCHP TCP/IP stack note: The packet allocation function updates this field automatically But not for IPv6 ) pTransportLayer Pointer to the transport layer The MAC driver does not use this field totTransportLen Total length of the transport layer The MAC driver shouldn't need this field pktFlags TCPIP_MAC_PACKET_FLAGS associated packet flags On TX: the MAC driver has to set: TCPIP_MAC_PKT_FLAG_QUEUED - if the driver needs to queue the packet On RX: the MAC driver updates this field before handing over the packet Flags that the MAC driver has to set/clear: TCPIP_MAC_PKT_FLAG_RX and TCPIP_MAC_PKT_FLAG_UNICAST TCPIP_MAC_PKT_FLAG_BCAST and TCPIP_MAC_PKT_FLAG_MCAST TCPIP_MAC_PKT_FLAG_QUEUED TCPIP_MAC_PKT_FLAG_SPLIT tStamp Time stamp value Statistics info On TX: the sending higher layer protocol updates this field The MAC driver shouldn't need this field On RX: the MAC driver updates this field before handing over the packet pktIf The packet interface On TX: the sending higher layer protocol updates this field The MAC driver doesn't use this field On RX: the receiving higher level protocol updates this value The MAC driver doesn't use this field ackRes A TCPIP_MAC_PKT_ACK_RES code associated with the packet On TX: The MAC driver sets this field when calling the packet ackFunc On RX: The higher level protocol which is the recipient of the packet sets this field when calling the packet ackFunc pktPriority Priority associated with the packet On TX: The MAC driver use this field to transmit packet using priority queues On RX: The MAC driver inform stack about the priority of the packet received pktClientLoad Additional client packet payload variable packet data Ignored by the MAC driver ",
							" Remarks Specific TCP/IP stack implementations might offer packet support functions to assist in driver development (For the MCHP TCP/IP stack see tcpip_packet h) Since the packets may be dynamically allocated an acknowledge function can result in data deallocation (blocking) Therefore the acknowledgment function should NOT be called from within an interrupt context ",
							" TCPIP_MAC_ACTION Enumeration ",
							" C typedef enum { TCPIP_MAC_ACTION_INIT TCPIP_MAC_ACTION_REINIT TCPIP_MAC_ACTION_DEINIT TCPIP_MAC_ACTION_IF_UP TCPIP_MAC_ACTION_IF_DOWN } TCPIP_MAC_ACTION; ",
							" Description TCP/IP MAC Action This enumeration defines network interface action for initialization and deinitialization ",
							" Members Members Description TCPIP_MAC_ACTION_INIT Stack is initiailized TCPIP_MAC_ACTION_REINIT Stack is reinitialized TCPIP_MAC_ACTION_DEINIT Stack is deinitialized TCPIP_MAC_ACTION_IF_UP Interface is brought up TCPIP_MAC_ACTION_IF_DOWN Interface is brought down ",
							" Remarks None ",
							" TCPIP_MAC_Close Function ",
							" C void TCPIP_MAC_Close( DRV_HANDLE hMac ); ",
							" Description This is the function that closes an instance of the MAC All per client data is released and the handle can no longer be used after this function is called ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac MAC client handle obtained by a call to TCPIP_MAC_Open() ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_MAC_ConfigGet Function ",
							" C size_t TCPIP_MAC_ConfigGet( DRV_HANDLE hMac void* configBuff size_t buffSize size_t* pConfigSize ); ",
							" Description This function will get the current MAC driver configuration and store it into a supplied buffer ",
							" Precondtions The TCPIP_MAC_Initialize() function should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client configBuff Pointer to a buffer to store the configuration Can be NULL if not needed buffSize Size of the supplied buffer pConfigSize Address to store the number of bytes needed for the storage of the MAC configuration Can be NULL if not needed ",
							" Returns The number of bytes copied into the supplied storage buffer ",
							" Remarks None ",
							" TCPIP_MAC_DATA_SEGMENT Structure ",
							" C typedef struct _tag_MAC_DATA_SEGMENT { struct _tag_MAC_DATA_SEGMENT* next; uint8_t* segLoad; uint16_t segLen; uint16_t segSize; uint16_t segFlags; uint16_t segLoadOffset; uint16_t segAllocSize; uint8_t segClientData[2]; } TCPIP_MAC_DATA_SEGMENT; ",
							" Description TCPIP MAC Data Segment Structure of a segment buffer transferred with the MAC A MAC TX or RX packet can consist of multiple data segments On TX the MAC has to be able to transmit packets that span multiple data segments On RX of a network frame the MAC may have to use multiple segments to construct a packet (For performance reasons a contiguous MAC packet with just one segment if possible is preferred) ",
							" Members Members Description next Multi-segment support next segment in the chain segLoad Pointer to segment data payload Points to TCPIP_MAC_SEGMENT_PAYLOAD::segmentPayload It specifies the address of the 1st payload byte If the processor has cache then it is always cache line size aligned Otherwise is 32 bits aligned segLen Segment payload size; TX: Number of bytes from this segment that has to be transmitted This is the total number of bytes including the Ethernet header but not the FCS (that should be added by the driver) RX: Number of payload bytes in the segment The MAC driver subtracts the FCS and Ethernet header length before handing over the packet to the stack Then the segLen field is updated by each stack layer in turn segSize Segment allocated total usable size This does not include the segLoadOffset (see below) segFlags TCPIP_MAC_SEGMENT_FLAGS segment flags: TCPIP_MAC_SEG_FLAG_STATIC TCPIP_MAC_SEG_FLAG_RX TCPIP_MAC_SEG_FLAG_RX TCPIP_MAC_SEG_FLAG_RX_STICKY segLoadOffset Offset in bytes between the address pointed by segLoad and the address where the segment buffer starts/was allocated It specifies the gap space at the beginning of the TCPIP_MAC_SEGMENT_PAYLOAD before the segmentPayload begins segLoadOffset == sizeof(TCPIP_MAC_SEGMENT_PAYLOAD::segmentPktPtr) + sizeof(TCPIP_MAC_SEGMENT_PAYLOAD::segmentDataGap) This currently is greater or equal than 8 bytes depending on the MAC drivers that are part of the build See TCPIP_MAC_DATA_SEGMENT For implementations that may work outside the Harmony TCP/IP stack it is up to the MAC to check that the value of this offset is enforced segAllocSize The size this segment payload allocation Debug/trace purposes segClientData[2] Additional client segment data Ignored by the MAC driver ",
							" Remarks See notes for the segLoadOffset member On 32-bit machines the segment payload is allocated so that it is always cache line size aligned and its size is 32-bits multiple ",
							" Structures Name Description _tag_MAC_DATA_SEGMENT A data segment that's part of a TX/RX packet ",
							" TCPIP_MAC_Deinitialize Function ",
							" C void TCPIP_MAC_Deinitialize( SYS_MODULE_OBJ object ); ",
							" Description MAC De-Initialize function void TCPIP_MAC_Deinitialize(SYS_MODULE_OBJ object); This is the function that deinitializes the MAC It is called by the stack as a result of one interface going down ",
							" Precondtions TCPIP_MAC_Initialize() should have been called ",
							" Parameters Parameters Description object Driver object handle returned from TCPIP_MAC_Initialize() ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_MAC_EVENT Enumeration ",
							" C typedef enum { TCPIP_MAC_EV_NONE = 0x0000 TCPIP_MAC_EV_RX_PKTPEND = 0x0001 TCPIP_MAC_EV_RX_OVFLOW = 0x0002 TCPIP_MAC_EV_RX_BUFNA = 0x0004 TCPIP_MAC_EV_RX_ACT = 0x0008 TCPIP_MAC_EV_RX_DONE = 0x0010 TCPIP_MAC_EV_RX_FWMARK = 0x0020 TCPIP_MAC_EV_RX_EWMARK = 0x0040 TCPIP_MAC_EV_RX_BUSERR = 0x0080 TCPIP_MAC_EV_TX_DONE = 0x0100 TCPIP_MAC_EV_TX_ABORT = 0x0200 TCPIP_MAC_EV_TX_BUSERR = 0x0400 TCPIP_MAC_EV_CONN_ESTABLISHED = 0x0800 TCPIP_MAC_EV_CONN_LOST = 0x1000 TCPIP_MAC_EV_RX_ALL = (TCPIP_MAC_EV_RX_PKTPEND|TCPIP_MAC_EV_RX_OVFLOW| TCPIP_MAC_EV_RX_BUFNA|TCPIP_MAC_EV_RX_ACT| TCPIP_MAC_EV_RX_DONE|TCPIP_MAC_EV_RX_FWMARK| TCPIP_MAC_EV_RX_EWMARK|TCPIP_MAC_EV_RX_BUSERR) TCPIP_MAC_EV_TX_ALL = (TCPIP_MAC_EV_TX_DONE|TCPIP_MAC_EV_TX_ABORT|TCPIP_MAC_EV_TX_BUSERR) TCPIP_MAC_EV_RXTX_ERRORS = (TCPIP_MAC_EV_RX_OVFLOW|TCPIP_MAC_EV_RX_BUFNA| TCPIP_MAC_EV_RX_BUSERR|TCPIP_MAC_EV_TX_ABORT| TCPIP_MAC_EV_TX_BUSERR) TCPIP_MAC_EV_CONN_ALL = (TCPIP_MAC_EV_CONN_ESTABLISHED|TCPIP_MAC_EV_CONN_LOST) } TCPIP_MAC_EVENT; ",
							" Description TCP/IP MAC Event TCP/IP MAC Events Codes This enumeration defines all the possible events that can be reported by the MAC to the stack Depending on the type of the hardware Ethernet/Wi-Fi interface etc not all events are possible ",
							" Members Members Description TCPIP_MAC_EV_NONE = 0x0000 no event TCPIP_MAC_EV_RX_PKTPEND = 0x0001 RX triggered events: A receive packet is pending TCPIP_MAC_EV_RX_OVFLOW = 0x0002 RX triggered events: RX FIFO overflow (system level latency no descriptors etc ) TCPIP_MAC_EV_RX_BUFNA = 0x0004 RX triggered events: no RX descriptor available to receive a new packet TCPIP_MAC_EV_RX_ACT = 0x0008 RX triggered events: There's RX data available TCPIP_MAC_EV_RX_DONE = 0x0010 RX triggered events: A packet was successfully received TCPIP_MAC_EV_RX_FWMARK = 0x0020 RX triggered events: the number of received packets is greater than or equal to than the RX Full Watermark TCPIP_MAC_EV_RX_EWMARK = 0x0040 RX triggered events: the number of received packets is less than or equal to than the RX Empty Watermark TCPIP_MAC_EV_RX_BUSERR = 0x0080 RX triggered events: a bus error encountered during an RX transfer TCPIP_MAC_EV_TX_DONE = 0x0100 TX triggered events: A packet was transmitted and its status is available TCPIP_MAC_EV_TX_ABORT = 0x0200 TX triggered events: a TX packet was aborted by the MAC (jumbo/system underrun/excessive defer/late collision/excessive collisions) TCPIP_MAC_EV_TX_BUSERR = 0x0400 TX triggered events: a bus error encountered during a TX transfer TCPIP_MAC_EV_CONN_ESTABLISHED = 0x0800 Connection triggered events: Connection established TCPIP_MAC_EV_CONN_LOST = 0x1000 Connection triggered events: Connection lost TCPIP_MAC_EV_RX_ALL = (TCPIP_MAC_EV_RX_PKTPEND|TCPIP_MAC_EV_RX_OVFLOW| TCPIP_MAC_EV_RX_BUFNA|TCPIP_MAC_EV_RX_ACT| TCPIP_MAC_EV_RX_DONE|TCPIP_MAC_EV_RX_FWMARK| TCPIP_MAC_EV_RX_EWMARK|TCPIP_MAC_EV_RX_BUSERR) Useful Masks: all RX related events TCPIP_MAC_EV_TX_ALL = (TCPIP_MAC_EV_TX_DONE|TCPIP_MAC_EV_TX_ABORT|TCPIP_MAC_EV_TX_BUSERR) Useful Masks: all TX related events TCPIP_MAC_EV_RXTX_ERRORS = (TCPIP_MAC_EV_RX_OVFLOW|TCPIP_MAC_EV_RX_BUFNA| TCPIP_MAC_EV_RX_BUSERR|TCPIP_MAC_EV_TX_ABORT| TCPIP_MAC_EV_TX_BUSERR) Abnormal traffic/system events: Action should be taken accordingly by the stack (or the stack user) TCPIP_MAC_EV_CONN_ALL = (TCPIP_MAC_EV_CONN_ESTABLISHED|TCPIP_MAC_EV_CONN_LOST) Mask of all Connection related events ",
							" Remarks None ",
							" TCPIP_MAC_EventAcknowledge Function ",
							" C bool TCPIP_MAC_EventAcknowledge( DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents ); ",
							" Description This function acknowledges and re-enables processed events Multiple events can be \"ORed\" together as they are processed together The events acknowledged by this function should be the events that have been retrieved from the MAC by calling TCPIP_MAC_EventPendingGet or have been passed to the MAC client by using the notification handler Once the events are acknowledged they will be re-enabled ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client macEvents MAC events that are acknowledged and re-enabled ",
							" Returns True - If events acknowledged False - If no events acknowledged ",
							" Remarks All events should be acknowledged in order to be re-enabled Some events are fatal errors and should not be acknowledged (TCPIP_MAC_EV_RX_BUSERR TCPIP_MAC_EV_TX_BUSERR) Stack re-initialization is needed under such circumstances Some events are just system/application behavior and they are intended only as simple info (TCPIP_MAC_EV_RX_OVFLOW TCPIP_MAC_EV_RX_BUFNA TCPIP_MAC_EV_TX_ABORT TCPIP_MAC_EV_RX_ACT) The TCPIP_MAC_EV_RX_FWMARK and TCPIP_MAC_EV_RX_EWMARK events are part of the normal flow control operation (if auto flow control was enabled) They should be enabled alternatively if needed The events are persistent They shouldn't be re-enabled unless they have been processed and the condition that generated them was removed Re-enabling them immediately without proper processing will have dramatic effects on the system performance ",
							" Example TCPIP_MAC_EventAcknowledge( hMac newMacEvents ); ",
							" TCPIP_MAC_EventF Type ",
							" C typedef void (* TCPIP_MAC_EventF)(TCPIP_MAC_EVENT event const void* eventParam); ",
							" Description Event notification Function: typedef void (*TCPIP_MAC_EventF)(TCPIP_MAC_EVENT event const void* eventParam); This function describes the MAC event notification handler This is a handler specified by the user of the MAC (the TCP/IP stack) The stack can use the handler to be notified of MAC events Whenever a notification occurs the passed events have to be eventually processed: Stack should process the TCPIP_EV_RX_PKTPEND/TCPIP_EV_RX_DONE TCPIP_EV_TX_DONE events Process the specific (error) condition Acknowledge the events by calling TCPIP_MAC_EventAcknowledge() so that they can be re-enabled ",
							" Members Members Description event Event that's reported (multiple events can be OR-ed) eventParam User parameter that's used in the notification handler ",
							" Returns None ",
							" Remarks The notification handler will be called from the ISR which detects the corresponding event The event notification handler has to be kept as short as possible and non-blocking Mainly useful for RTOS integration where this handler will wake-up a thread that waits for a MAC event to occur The event notification system also enables the user of the TCPIP stack to call into the stack for processing only when there are relevant events rather than being forced to periodically call from within a loop at unknown moments Without a notification handler the stack user can still call TCPIP_MAC_EventPendingGet() to see if processing by the stack needed This is a default way of adding MAC interrupt processing to the TCP/IP stack ",
							" TCPIP_MAC_EventMaskSet Function ",
							" C bool TCPIP_MAC_EventMaskSet( DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents bool enable ); ",
							" Description This is a function that enables or disables the events to be reported to the MAC client (TCP/IP stack) All events that are to be enabled will be added to the notification process All events that are to be disabled will be removed from the notification process The stack (or stack user) has to catch the events that are notified and process them After that the stack should call TCPIP_MAC_EventAcknowledge() so that the events can be re-enabled ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client macEvents Events that the MAC client wants to add/delete for notification enable If true the events will be enabled; else disabled ",
							" Returns True - If operation succeeded False - If some error occurred and the operation failed ",
							" Remarks Multiple events can be \"ORed\" together The event notification system enables the user of the MAC and of the stack to call into the stack for processing only when there are relevant events rather than being forced to periodically call from within a loop If the notification events are null the interrupt processing will be disabled Otherwise the event notification will be enabled and the interrupts relating to the requested events will be enabled Note that once an event has been caught by the MAC and reported through the notification handler it may be disabled until the TCPIP_MAC_EventAcknowledge() is called ",
							" Example TCPIP_MAC_EventMaskSet( hMac TCPIP_MAC_EV_RX_OVFLOW | TCPIP_MAC_EV_RX_BUFNA true ); ",
							" TCPIP_MAC_EventPendingGet Function ",
							" C TCPIP_MAC_EVENT TCPIP_MAC_EventPendingGet( DRV_HANDLE hMac ); ",
							" Description This function returns the currently MAC pending events Multiple events will be \"ORed\" together as they accumulate MAC processing is needed whenever a transmission related event is present (TCPIP_MAC_EV_RX_PKTPEND TCPIP_MAC_EV_TX_DONE) Other non critical events may be passed to an user for informational purposes All events have to be eventually acknowledged if re-enabling is needed ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client ",
							" Returns The current stack pending events ",
							" Remarks This is the preferred method to get the current pending MAC events Even with a notification handler in place it's better to use this function to get the current pending events rather than using the events passed by the notification handler which could be stale The returned value is just a momentary value The pending events can change any time ",
							" Example TCPIP_MAC_EVENT currEvents = TCPIP_MAC_EventPendingGet( hMac); ",
							" TCPIP_MAC_HANDLE Type ",
							" C typedef DRV_HANDLE TCPIP_MAC_HANDLE; ",
							" Description MAC Handle This data type defines a MAC client handle ",
							" TCPIP_MAC_HEAP_CallocF Type ",
							" C typedef void* (* TCPIP_MAC_HEAP_CallocF)(TCPIP_MAC_HEAP_HANDLE heapH size_t nElems size_t elemSize); ",
							" Description Memory Allocation Function: typedef void* (*TCPIP_MAC_HEAP_CallocF)(TCPIP_MAC_HEAP_HANDLE heapH size_t nElems size_t elemSize); This calloc style function is used by the MAC to allocate memory ",
							" Members Members Description heapH Heap handle to be used in call nElems Number of identical elements requested elemSize Size of one element in bytes ",
							" Returns Valid pointer - If the allocation request succeeded 0 - If the allocation request failed ",
							" Remarks The debug version adds the module identifier and source file line number ",
							" TCPIP_MAC_HEAP_CallocFDbg Type ",
							" C typedef void* (* TCPIP_MAC_HEAP_CallocFDbg)(TCPIP_MAC_HEAP_HANDLE heapH size_t nElems size_t elemSize int moduleId int lineNo); ",
							" Description This is type TCPIP_MAC_HEAP_CallocFDbg ",
							" TCPIP_MAC_HEAP_FreeF Type ",
							" C typedef size_t (* TCPIP_MAC_HEAP_FreeF)(TCPIP_MAC_HEAP_HANDLE heapH const void* pBuff); ",
							" Description Memory Allocation Function: typedef size_t (*TCPIP_MAC_HEAP_FreeF)(TCPIP_MAC_HEAP_HANDLE heapH const void* pBuff); This free style function is used by the MAC to free allocated memory ",
							" Returns Non-zero number - If the allocation request succeeded 0 - If the allocation request failed ",
							" Remarks The debug version adds the module identifier and source file line number ",
							" TCPIP_MAC_HEAP_FreeFDbg Type ",
							" C typedef size_t (* TCPIP_MAC_HEAP_FreeFDbg)(TCPIP_MAC_HEAP_HANDLE heapH const void* pBuff int moduleId int lineNo); ",
							" Description This is type TCPIP_MAC_HEAP_FreeFDbg ",
							" TCPIP_MAC_HEAP_HANDLE Type ",
							" C typedef const void* TCPIP_MAC_HEAP_HANDLE; ",
							" Description Handle to a heap This is the handle that's required for accessing memory allocation functions ",
							" Remarks None ",
							" TCPIP_MAC_HEAP_MallocF Type ",
							" C typedef void* (* TCPIP_MAC_HEAP_MallocF)(TCPIP_MAC_HEAP_HANDLE heapH size_t nBytes); ",
							" Description Memory Allocation Function: typedef void* (*TCPIP_MAC_HEAP_MallocF)(TCPIP_MAC_HEAP_HANDLE heapH size_t nBytes); This malloc style function is used by the MAC to allocate memory ",
							" Returns Valid pointer - If the allocation request succeeded 0 - If the allocation request failed ",
							" Remarks The debug version adds the module identifier and source file line number ",
							" TCPIP_MAC_HEAP_FreeFDbg Type ",
							" C typedef size_t (* TCPIP_MAC_HEAP_FreeFDbg)(TCPIP_MAC_HEAP_HANDLE heapH const void* pBuff int moduleId int lineNo); ",
							" Description This is type TCPIP_MAC_HEAP_FreeFDbg ",
							" TCPIP_MAC_INIT Structure ",
							" C typedef struct { SYS_MODULE_INIT moduleInit; const TCPIP_MAC_MODULE_CTRL* const macControl; const void* const moduleData; } TCPIP_MAC_INIT; ",
							" Description MAC Device Driver Initialization Data This data structure contains all the data necessary to initialize the MAC device ",
							" Members Members Description moduleInit System module initialization macControl Stack prepared data moduleData Driver specific initialization data ",
							" Remarks A pointer to a structure of this format containing the desired initialization data must be passed into the TCPIP_MAC_Initialize() routine ",
							" TCPIP_MAC_Initialize Function ",
							" C SYS_MODULE_OBJ TCPIP_MAC_Initialize( const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init ); ",
							" Description MAC Initialize function SYS_MODULE_OBJ TCPIP_MAC_Initialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); This is the function that initializes the MAC It is called by the stack as a result of one interface going up ",
							" Precondtions None ",
							" Parameters Parameters Description index Index for the MAC driver instance to be initialized init Pointer to TCPIP_MAC_INIT initialization data containing: - macControl - Stack prepared data - moduleData - Driver specific Dependent on the MAC type For PIC32 MAC driver the TCPIP_MODULE_MAC_PIC32INT_CONFIG is used ",
							" Returns A valid handle to a driver object - If successful SYS_MODULE_OBJ_INVALID - If initialization failed ",
							" Remarks If this function fails the stack won't turn up that interface If the operation needs to wait for the hardware the initialization function can return a pending code The returned object must be passed as argument to TCPIP_MAC_Reinitialize() TCPIP_MAC_Deinitialize() TCPIP_MAC_Tasks() and TCPIP_MAC_Status routines() ",
							" TCPIP_MAC_LINK_MTU Enumeration ",
							" C typedef enum { TCPIP_MAC_LINK_MTU_DEFAULT = 1500 TCPIP_MAC_LINK_MTU_ETH = 1500 TCPIP_MAC_LINK_MTU_WLAN = 1500 } TCPIP_MAC_LINK_MTU; ",
							" Description Link MTU per MAC Type Lists the Maximum Transmission Unit corresponding to a MAC type ",
							" Members Members Description TCPIP_MAC_LINK_MTU_DEFAULT = 1500 Default MTU link TCPIP_MAC_LINK_MTU_ETH = 1500 Wired ethernet MAC type TCPIP_MAC_LINK_MTU_WLAN = 1500 Wireless Wi-Fi type MAC ",
							" Remarks The MTU is usually set by the standards For special links the values can be updated The default value is normally used However the individual MAC drivers can be set to use other values if needed ",
							" TCPIP_MAC_LinkCheck Function ",
							" C bool TCPIP_MAC_LinkCheck( DRV_HANDLE hMac ); ",
							" Description This is a function that returns the current status of the link ",
							" Precondtions The TCPIP_MAC_Initialize() function should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client ",
							" Returns True - If the link is up False - If the link is down ",
							" Remarks The stack will call this function periodically Therefore this function is not required to initiate a new PHY transaction and to wait for the result It can just initiate a new PHY transaction and return immediately the result of the previous transaction ",
							" TCPIP_MAC_MODULE_CTRL Structure ",
							" C typedef struct { TCPIP_MAC_HEAP_MallocF mallocF; TCPIP_MAC_HEAP_CallocF callocF; TCPIP_MAC_HEAP_FreeF freeF; TCPIP_MAC_HEAP_HANDLE memH; TCPIP_MAC_PKT_AllocF pktAllocF; TCPIP_MAC_PKT_FreeF pktFreeF; TCPIP_MAC_PKT_AckF pktAckF; TCPIP_MAC_SynchReqF synchF; TCPIP_MAC_EventF eventF; const void* eventParam; uint16_t nIfs; uint16_t moduleId; uint16_t netIx; uint16_t segLoadOffset; uint8_t macAction; uint8_t powerMode; TCPIP_MAC_ADDR ifPhyAddress; } TCPIP_MAC_MODULE_CTRL; ",
							" Description MAC Initialization Data This is the data structure that the MAC user (TCP/IP stack) passes on to the MAC driver at the MAC initialization time It contains all the data needed for the MAC to initialize itself and to start processing packets ",
							" Members Members Description mallocF Malloc type allocation function callocF Calloc type allocation function freeF Free type allocation free function memH Handle to be used in the stack allocation service calls pktAllocF Packet allocation function pktFreeF Packet free function pktAckF Packet allocation function synchF Synchronization object request function eventF Event notification function used by the MAC for event reporting eventParam Parameter to be used when the event function is called nIfs Number of the interfaces supported in this session moduleId Module identifier Allows multiple channels/ports etc MAC support netIx Index of the current interface segLoadOffset The extra space allocated at the beginning of the segment data buffer: TCPIP_MAC_DATA_SEGMENT segLoad segLoadOffset == sizeof(TCPIP_MAC_SEGMENT_PAYLOAD::segmentPktPtr) + sizeof(TCPIP_MAC_SEGMENT_PAYLOAD::segmentDataGap) It can be different based on the MAC type included in the build MAC driver uses it to have the layout of the data segment macAction Current action for the MAC/stack: TCPIP_MAC_ACTION value powerMode The power mode for this interface to go to Valid only if stackAction == init/reinit Ignored for deinitialize operation TCPIP_MAC_POWER_MODE value ifPhyAddress Physical address of the interface MAC sets this field as part of the initialization function The stack will use this data as the interface address ",
							" Remarks Most of the data that's passed in this structure is permanent data It is maintained by the stack for one full session i e across Initialize() - DeInitialize() calls Some fields are module specific though (like the memory allocation handle allocation functions etc ) that could be different from one module to the other ",
							" TCPIP_MAC_Open Function ",
							" C DRV_HANDLE TCPIP_MAC_Open( const SYS_MODULE_INDEX drvIndex const DRV_IO_INTENT intent ); ",
							" Description This is the function that opens an instance of the MAC Once a MAC client handle is obtained all the MAC functions can be accessed using that handle ",
							" Precondtions TCPIP_MAC_Initialize() should have been called ",
							" Parameters Parameters Description drvIndex Identifier for the driver instance to be opened intent Zero or more of the values from the enumeration DRV_IO_INTENT ORed together to indicate the intended use of the driver ",
							" Returns Valid handle - if the open function succeeded DRV_HANDLE_INVALID - If an error occurs ",
							" Remarks The intent parameter is not used in the current implementation and is maintained only for compatibility with the generic driver Open function signature ",
							" TCPIP_MAC_PACKET Type ",
							" C typedef struct _tag_TCPIP_MAC_PACKET TCPIP_MAC_PACKET; ",
							" Description MAC Packet forward reference Forward reference needed in the MAC packet acknowledge function ",
							" Remarks None ",
							" Structures Name Description _tag_TCPIP_MAC_PACKET A TX/RX packet descriptor ",
							" TCPIP_MAC_PACKET_ACK_FUNC Type ",
							" C typedef bool (* TCPIP_MAC_PACKET_ACK_FUNC)(TCPIP_MAC_PACKET* pkt const void* param); ",
							" Description MAC Acknowledge Function This is the prototype of the function that the MAC calls once the TX/RX packet processing is done ",
							" Returns True - If the packet needs the queuing flags removed (it is not deleted and still in use) False - If the packet does not need the queuing flags removed (either no longer exists or the flags updated) ",
							" Remarks None ",
							" TCPIP_MAC_PACKET_FLAGS Enumeration ",
							" C typedef enum { TCPIP_MAC_PKT_FLAG_STATIC = 0x0001 TCPIP_MAC_PKT_FLAG_TX = 0x0002 TCPIP_MAC_PKT_FLAG_SPLIT = 0x0004 TCPIP_MAC_PKT_FLAG_QUEUED = 0x0008 TCPIP_MAC_PKT_FLAG_UNICAST = 0x0010 TCPIP_MAC_PKT_FLAG_BCAST = 0x0020 TCPIP_MAC_PKT_FLAG_MCAST = 0x0040 TCPIP_MAC_PKT_FLAG_CAST_MASK = 0x0070 TCPIP_MAC_PKT_FLAG_CAST_DISABLED = 0x0000 TCPIP_MAC_PKT_FLAG_USER = 0x0100 } TCPIP_MAC_PACKET_FLAGS; ",
							" Description MAC Packet Flags This enumeration contains the definitions of MAC packet flags: packet allocation flags and general purpose flags ",
							" Members Members Description TCPIP_MAC_PKT_FLAG_STATIC = 0x0001 Packet can not be dynamically deallocated Set when the packet is allocated TCPIP_MAC_PKT_FLAG_TX = 0x0002 If set it is a TX packet/segment Otherwise it is a RX packet TCPIP_MAC_PKT_FLAG_SPLIT = 0x0004 Packet data spans multiple segments - ZC functionality If not set then the packet has only one data segment It is set by the MAC driver when a RX packet spans multiple data segments TCPIP_MAC_PKT_FLAG_QUEUED = 0x0008 Packet data is queued somewhere cannot be freed The flag is set by a module processing the packet to show that the packet is in use and queued for further processing (normally the MAC driver does that) Cleared by the packet destination when the packet processing was completed TCPIP_MAC_PKT_FLAG_UNICAST = 0x0010 RX flag MAC updated Specifies an unicast packet TCPIP_MAC_PKT_FLAG_BCAST = 0x0020 RX flag MAC updated Specifies a broadcast packet TCPIP_MAC_PKT_FLAG_MCAST = 0x0040 RX flag MAC updated Specifies an multicast packet TCPIP_MAC_PKT_FLAG_CAST_MASK = 0x0070 Packet cast mask bits TCPIP_MAC_PKT_FLAG_CAST_DISABLED = 0x0000 Packet cast mask Specifies a packet where the MCAST/BCAST fields are not updated by the MAC RX process TCPIP_MAC_PKT_FLAG_USER = 0x0100 Available user flags ",
							" Remarks 16 bits only packet flags are supported ",
							" TCPIP_MAC_PACKET_RX_STAT Union ",
							" C typedef union { TCPIP_MAC_PACKET_RX_STAT_PIC32INT rxStatPIC32INT; TCPIP_MAC_PACKET_RX_STAT_PIC32C rxStatPIC32C; } TCPIP_MAC_PACKET_RX_STAT; ",
							" Description MAC Received Packet Status This structure contains the status of a received packet ",
							" Remarks MACs have different hardware support for the received packet status Not all the MACs have hardware support for the received packet status ",
							" TCPIP_MAC_PACKET_RX_STAT_PIC32C Union ",
							" C typedef union { uint32_t val; struct _TCPRxStatusBM { uint32_t len : 12; uint32_t offset : 2; uint32_t bSof : 1; uint32_t bEof : 1; uint32_t bCFI : 1; uint32_t vlanPriority : 3; uint32_t bPriorityDetected : 1; uint32_t bVlanDetected : 1; uint32_t bTypeIDMatch : 1; uint32_t bAddr4Match : 1; uint32_t bAddr3Match : 1; uint32_t bAddr2Match : 1; uint32_t bAddr1Match : 1; uint32_t reserved : 1; uint32_t bExtAddrMatch : 1; uint32_t bUniHashMatch : 1; uint32_t bMultiHashMatch : 1; uint32_t bBroadcastDetected : 1; } bm; } TCPIP_MAC_PACKET_RX_STAT_PIC32C; ",
							" Description PIC32C Received Packet Status This structure contains the status of a PIC32C received packet ",
							" Members Members Description len : 12 Length of frame including FCS offset : 2 Receive buffer offest bits 13:12 of frame length for jumbo frame bSof : 1 Start of frame bEof : 1 End of frame bCFI : 1 Concatenation Format Indicator vlanPriority : 3 VLAN priority (if VLAN detected) bPriorityDetected : 1 Priority tag detected bVlanDetected : 1 VLAN tag detected bTypeIDMatch : 1 Type ID match bAddr4Match : 1 Address register 4 match bAddr3Match : 1 Address register 3 match bAddr2Match : 1 Address register 2 match bAddr1Match : 1 Address register 1 match bExtAddrMatch : 1 External address match bUniHashMatch : 1 Unicast hash match bMultiHashMatch : 1 Multicast hash match bBroadcastDetected : 1 Global all ones broadcast address detected ",
							" Remarks MACs have different hardware support for the received packet status ",
							" TCPIP_MAC_PacketRx Function ",
							" C TCPIP_MAC_PACKET* TCPIP_MAC_PacketRx( DRV_HANDLE hMac TCPIP_MAC_RES* pRes const TCPIP_MAC_PACKET_RX_STAT** ppPktStat ); ",
							" Description This is the MAC receive function Once a pending packet is available in the MAC driver internal RX queues this function will dequeue the packet and hand it over to the MAC driver's client - i e the stack - for further processing The flags for a RX packet have to be updated by the MAC driver: TCPIP_MAC_PKT_FLAG_RX has to be set If the MAC supports it it should set: TCPIP_MAC_PKT_FLAG_UNICAST has to be set if that packet is a unicast packet TCPIP_MAC_PKT_FLAG_BCAST has to be set if that packet is a broadcast packet TCPIP_MAC_PKT_FLAG_MCAST has to be set if that packet is a multicast packet TCPIP_MAC_PKT_FLAG_QUEUED has to be set TCPIP_MAC_PKT_FLAG_SPLIT has to be set if the packet has multiple data segments Additional information about the packet is available by providing the pRes and ppPktStat fields ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client pRes Optional pointer to an address that will receive an additional result associated with the operation Can be 0 if not needed ppPktStat Optional pointer to an address that will receive the received packet status Note that this pointer cannot be used once the packet acknowledgment function was called Can be 0 if not needed ",
							" Returns Valid pointer to an available RX packet 0 if no packet pending/available ",
							" Remarks The MAC driver should dequeue and return to the caller just one single packet and not multiple chained packets Once the higher level layers in the stack are done with processing the RX packet they have to call the corresponding packet acknowledgment function that tells the owner of that packet that it can resume control of that packet Once the stack modules are done processing the RX packets and the acknowledge function is called it is up to the driver design to reuse the RX packets or simply return them to the pool they were allocated from (assuming that some sort of allocation is implemented) This document makes no requirement about how the MAC RX packets are obtained using dynamic or static allocation techniques This is up to the design of the MAC The MAC driver can use the TCPIP_MAC_Process() for obtaining new RX packets if needed Not all the MACs have hardware support for the received packet status If the MAC driver cannot supply the TCPIP_MAC_PACKET_RX_STAT info it should set the ppPktStat to 0 ",
							" TCPIP_MAC_PacketTx Function ",
							" C TCPIP_MAC_RES TCPIP_MAC_PacketTx( DRV_HANDLE hMac TCPIP_MAC_PACKET * ptrPacket ); ",
							" Description This is the MAC transmit function Using this function a packet is submitted to the MAC driver for transmission ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac MAC client handle obtained by a call to TCPIP_MAC_Open() ptrPacket Pointer to a TCPIP_MAC_PACKET that's completely formatted and ready to be transmitted over the network ",
							" Returns TCPIP_MAC_RES_OK - if all processing went on OK TCPIP_MAC_RES error code - if processing failed for some reason ",
							" Remarks A success code returned from this function signals only that the packet was successfully scheduled for transmission over the interface and not that the packet was actually transmitted An event will be triggered when the packet is transmitted The MAC driver has to support internal queuing Since the TCPIP_MAC_PACKET data structure contains internal queuing members the MAC can queue the packet at no expense Therefore a packet is to be rejected only if it's not properly formatted Otherwise it has to be scheduled for transmission in an internal MAC queue Once the packet is scheduled for transmission the MAC driver has to set the TCPIP_MAC_PKT_FLAG_QUEUED flag so that the stack is aware that this packet is under processing and cannot be modified Once the packet is transmitted the TCPIP_MAC_PKT_FLAG_QUEUED has to be cleared the proper packet acknowledgment result (ackRes) has to be set and the packet acknowledgment function (ackFunc) has to be called It is implementation dependent if all these steps are implemented as part of the ackFunc itself or as discrete steps On 32-bit machines the 1st segment payload of a packet is allocated so that it is always cache line size aligned and its size is a cache line multiple Harmony MAC driver specific : the driver checks that the segLoadOffset = 8 See notes for the segLoadOffset member The packet is not required to contain the Frame Check Sequence (FCS/CRC32) field The MAC driver/controller will insert that field itself if it's required The MAC driver is required to support the transmission of multiple chained packets ",
							" TCPIP_MAC_PARAMETERS Structure ",
							" C typedef struct { TCPIP_MAC_ADDR ifPhyAddress; TCPIP_MAC_PROCESS_FLAGS processFlags; TCPIP_MAC_TYPE macType; TCPIP_MAC_LINK_MTU linkMtu; TCPIP_MAC_CHECKSUM_OFFLOAD_FLAGS checksumOffloadRx; TCPIP_MAC_CHECKSUM_OFFLOAD_FLAGS checksumOffloadTx; uint8_t macTxPrioNum; uint8_t macRxPrioNum; } TCPIP_MAC_PARAMETERS; ",
							" Description MAC Run time parameters This is the data structure that the MAC user (TCP/IP stack) passes on to the MAC driver after the MAC initialization time to retrieve the settings resulted ",
							" Members Members Description ifPhyAddress Physical address of the interface MAC sets this field as part of the initialization process processFlags MAC process flags The stack will use this value to call into the MAC process function after receiving a MAC event macType MAC type: ETH Wi-Fi etc linkMtu MAC link MTU size checksumOffloadRx Rx Checksum offload Enable checksumOffloadTx Tx Checksum offload Enable macTxPrioNum Number of Tx priorities supported by MAC macRxPrioNum Number of Rx priorities supported by MAC ",
							" Remarks None ",
							" TCPIP_MAC_ParametersGet Function ",
							" C TCPIP_MAC_RES TCPIP_MAC_ParametersGet( DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams ); ",
							" Description This is a function that returns the run time parameters of the MAC driver ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client pMacParams Address to store the MAC parameters ",
							" Returns TCPIP_MAC_RES_OK - If pMacParams updated properly TCPIP_MAC_RES_OP_ERR error code - If processing failed for some reason ",
							" Remarks None ",
							" TCPIP_MAC_PKT_ACK_RES Enumeration ",
							" C typedef enum { TCPIP_MAC_PKT_ACK_NONE = 0 TCPIP_MAC_PKT_ACK_TX_OK = 1 TCPIP_MAC_PKT_ACK_RX_OK = 2 TCPIP_MAC_PKT_ACK_LINK_DOWN = -1 TCPIP_MAC_PKT_ACK_NET_DOWN = -2 TCPIP_MAC_PKT_ACK_BUFFER_ERR = -3 TCPIP_MAC_PKT_ACK_ARP_TMO = -4 TCPIP_MAC_PKT_ACK_ARP_NET_ERR = -5 TCPIP_MAC_PKT_ACK_MAC_REJECT_ERR = -6 TCPIP_MAC_PKT_ACK_CHKSUM_ERR = -10 TCPIP_MAC_PKT_ACK_SOURCE_ERR = -11 TCPIP_MAC_PKT_ACK_DEST_ERR = -12 TCPIP_MAC_PKT_ACK_TYPE_ERR = -13 TCPIP_MAC_PKT_ACK_STRUCT_ERR = -14 TCPIP_MAC_PKT_ACK_PROTO_DEST_ERR = -15 TCPIP_MAC_PKT_ACK_FRAGMENT_ERR = -16 TCPIP_MAC_PKT_ACK_PROTO_DEST_CLOSE = -17 TCPIP_MAC_PKT_ACK_ALLOC_ERR = -18 TCPIP_MAC_PKT_ACK_IP_REJECT_ERR = -19 TCPIP_MAC_PKT_ACK_EXTERN = -20 TCPIP_MAC_PKT_ACK_BRIDGE_DONE = -21 TCPIP_MAC_PKT_ACK_BRIDGE_DISCARD = -22 } TCPIP_MAC_PKT_ACK_RES; ",
							" Description MAC Packet Acknowledge Result This enumeration contains the list of MAC codes used for a packet acknowledgment ",
							" Members Members Description TCPIP_MAC_PKT_ACK_NONE = 0 Packet result unknown unspecified TCPIP_MAC_PKT_ACK_TX_OK = 1 TX success code - packet was transmitted successfully TCPIP_MAC_PKT_ACK_RX_OK = 2 RX success code - packet was received/processed successfully TCPIP_MAC_PKT_ACK_LINK_DOWN = -1 TX:packet was dropped because the link was down TCPIP_MAC_PKT_ACK_NET_DOWN = -2 TX:packet was dropped because the network is down TCPIP_MAC_PKT_ACK_BUFFER_ERR = -3 TX:packet was dropped because the buffer type is not supported TCPIP_MAC_PKT_ACK_ARP_TMO = -4 TX:packet was dropped because of an ARP timeout TCPIP_MAC_PKT_ACK_ARP_NET_ERR = -5 TX:packet associated interface is down or non existent TCPIP_MAC_PKT_ACK_MAC_REJECT_ERR = -6 TX:packet rejected by MAC TCPIP_MAC_PKT_ACK_CHKSUM_ERR = -10 RX: packet was dropped because the checksum was incorrect TCPIP_MAC_PKT_ACK_SOURCE_ERR = -11 RX: packet was dropped because of wrong interface source address TCPIP_MAC_PKT_ACK_DEST_ERR = -12 RX: packet was dropped because of wrong destination address TCPIP_MAC_PKT_ACK_TYPE_ERR = -13 RX: packet was dropped because the type was unknown TCPIP_MAC_PKT_ACK_STRUCT_ERR = -14 RX: internal packet structure error TCPIP_MAC_PKT_ACK_PROTO_DEST_ERR = -15 RX: the packet protocol couldn't find a destination for it TCPIP_MAC_PKT_ACK_FRAGMENT_ERR = -16 RX: the packet too fragmented TCPIP_MAC_PKT_ACK_PROTO_DEST_CLOSE = -17 RX: the packet destination is closing TCPIP_MAC_PKT_ACK_ALLOC_ERR = -18 RX: memory allocation error TCPIP_MAC_PKT_ACK_IP_REJECT_ERR = -19 RX/TX: Packet was rejected by the IP layer TCPIP_MAC_PKT_ACK_EXTERN = -20 RX: packet was dropped because it was processed externally TCPIP_MAC_PKT_ACK_BRIDGE_DONE = -21 RX: packet was directly processed successfuly by the bridge TCPIP_MAC_PKT_ACK_BRIDGE_DISCARD = -22 RX: packet was dropped by the bridge ",
							" Remarks 16 bits only acknowledge results are supported Positive codes indicate success Negative codes indicate a failure of some sort ",
							" TCPIP_MAC_PKT_AckF Type ",
							" C typedef void (* TCPIP_MAC_PKT_AckF)(TCPIP_MAC_PACKET* pPkt TCPIP_MAC_PKT_ACK_RES ackRes int moduleId); ",
							" Description Packet Acknowledgment Function: typedef void (*TCPIP_MAC_PKT_AckF)(TCPIP_MAC_PACKET* pPkt TCPIP_MAC_PKT_ACK_RES ackRes int moduleId); This function is used by the MAC to acknowledge a TCPIP_MAC_PACKET packet when the packet processing is completed ",
							" Parameters Parameters Description pPkt Pointer to a valid TCPIP_MAC_PACKET packet ackRes The result of the packet processing moduleId The ID of the module calling the acknowledge function ",
							" Returns None ",
							" Remarks A TCPIP_MAC_PACKET packet always has an acknowledgment function This function should clear the TCPIP_MAC_PKT_FLAG_QUEUED flag The packet's ackRes is updated only if the parameter ackRes = TCPIP_MAC_PKT_ACK_NONE ",
							" TCPIP_MAC_PKT_AllocF Type ",
							" C typedef TCPIP_MAC_PACKET* (* TCPIP_MAC_PKT_AllocF)(uint16_t pktLen uint16_t segLoadLen TCPIP_MAC_PACKET_FLAGS flags); ",
							" Description Packet Allocation Function: typedef TCPIP_MAC_PACKET* (*TCPIP_MAC_PKT_AllocF)(uint16_t pktLen uint16_t segLoadLen TCPIP_MAC_PACKET_FLAGS flags); This function is used by the MAC to allocate a TCPIP_MAC_PACKET packet ",
							" Parameters Parameters Description pktLen The size of the packet (it will be 32 bits rounded up) segLoadLen The payload size for the segment associated to this packet Payload is always 32 bit aligned If 0 no segment is created/attached to the packet moduleId Packet flags ",
							" Returns Valid packet pointer - If the allocation request succeeded 0 - If the allocation request failed ",
							" Remarks The returned allocated packet should always have the TCPIP_MAC_ETHERNET_HEADER added to the packet The debug version adds the module identifier ",
							" TCPIP_MAC_PKT_AllocFDbg Type ",
							" C typedef TCPIP_MAC_PACKET* (* TCPIP_MAC_PKT_AllocFDbg)(uint16_t pktLen uint16_t segLoadLen TCPIP_MAC_PACKET_FLAGS flags int moduleId); ",
							" Description This is type TCPIP_MAC_PKT_AllocFDbg ",
							" TCPIP_MAC_PKT_FreeF Type ",
							" C typedef void (* TCPIP_MAC_PKT_FreeF)(TCPIP_MAC_PACKET* pPkt); ",
							" Description Packet Allocation Function: typedef void (*TCPIP_MAC_PKT_FreeF)(TCPIP_MAC_PACKET* pPkt); This function is used by the MAC to free a previously allocated TCPIP_MAC_PACKET packet ",
							" Parameters Parameters Description pPkt Pointer to a previously allocated packet ",
							" Returns None ",
							" Remarks The function will free a previously allocated packet However packets or segments marked with TCPIP_MAC_PKT_FLAG_STATIC/TCPIP_MAC_SEG_FLAG_STATIC are not freed Also note that this function does not free explicitly the external segment payload A payload that was created contiguously when the segment was created will be automatically freed by this function The debug version adds the module identifier ",
							" TCPIP_MAC_PKT_FreeFDbg Type ",
							" C typedef void (* TCPIP_MAC_PKT_FreeFDbg)(TCPIP_MAC_PACKET* pPkt int moduleId); ",
							" Description This is type TCPIP_MAC_PKT_FreeFDbg ",
							" TCPIP_MAC_POWER_MODE Enumeration ",
							" C typedef enum { TCPIP_MAC_POWER_NONE TCPIP_MAC_POWER_FULL TCPIP_MAC_POWER_LOW TCPIP_MAC_POWER_DOWN } TCPIP_MAC_POWER_MODE; ",
							" Description TCP/IP MAC Power Mode List of supported MAC power modes ",
							" Members Members Description TCPIP_MAC_POWER_NONE Unknown power mode TCPIP_MAC_POWER_FULL Up and running; valid for init/reinit TCPIP_MAC_POWER_LOW Low power mode; valid for init/reinit TCPIP_MAC_POWER_DOWN Interface is down ",
							" Remarks None ",
							" TCPIP_MAC_Process Function ",
							" C TCPIP_MAC_RES TCPIP_MAC_Process( DRV_HANDLE hMac ); ",
							" Description This is a function that allows for internal processing by the MAC driver It is meant for processing that cannot be done from within ISR Normally this function will be called in response to an TX and/or RX event signaled by the driver This is specified by the MAC driver using the TCPIP_MAC_PARAMETERS::processFlags An alternative approach is that the MAC driver uses a system service to create a timer signal that will call the TCPIP_MAC_Process on a periodic basis ",
							" Precondtions The TCPIP_MAC_Initialize() function should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client ",
							" Returns TCPIP_MAC_RES_OK - If all processing went on OK TCPIP_MAC_RES error code - If processing failed for some reason ",
							" Remarks Some of the processing that this function is intended for: The MAC driver can process its pending TX queues (although it could do that from within the TX ISR) RX buffers replenishing If the number of packets in the RX queue falls below a specified limit the MAC driver can use this function to allocate some extra RX packets Similarly if there are too many allocated RX packets the MAC driver can free some of them ",
							" TCPIP_MAC_PROCESS_FLAGS Enumeration ",
							" C typedef enum { TCPIP_MAC_PROCESS_FLAG_NONE = 0x0000 TCPIP_MAC_PROCESS_FLAG_RX = 0x0001 TCPIP_MAC_PROCESS_FLAG_TX = 0x0002 TCPIP_MAC_PROCESS_FLAG_ANY = 0x0100 } TCPIP_MAC_PROCESS_FLAGS; ",
							" Description MAC Process Flags List of specific MAC processing flags that indicate to the user of the MAC (TCP/IP stack) the processing that is expected by the MAC driver ",
							" Parameters Parameters Description TCPIP_MAC_PROCESS_FLAG_NONE = 0x0000 The stack never has to call the TCPIP_MAC_Process() function TCPIP_MAC_PROCESS_FLAG_RX = 0x0001 The stack has to call the TCPIP_MAC_Process() after an RX signal TCPIP_MAC_PROCESS_FLAG_TX = 0x0002 The stack has to call the TCPIP_MAC_Process() after a TX signal TCPIP_MAC_PROCESS_FLAG_ANY = 0x0100 The stack has to call the TCPIP_MAC_Process() after any type of signal ",
							" Remarks Multiple flags can be ORed ",
							" TCPIP_MAC_RegisterStatisticsGet Function ",
							" C TCPIP_MAC_RES TCPIP_MAC_RegisterStatisticsGet( DRV_HANDLE hMac TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries int nEntries int* pHwEntries ); ",
							" Description This function will get the current value of the statistic registers maintained by the MAC hardware ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client pRegStatistics Pointer to a pRegEntries that will receive the current hardware statistics registers values Can be 0 if only the number of supported hardware registers is requested nEntries Provides the number of TCPIP_MAC_STATISTICS_REG_ENTRY structures present in pRegEntries Can be 0 if only the number of supported hardware registers is requested The register entries structures will be filled by the driver up to the supported hardware registers pHwEntries Pointer to an address to store the number of the statistics registers that the hardware supports It is updated by the driver Can be 0 if not needed ",
							" Returns TCPIP_MAC_RES_OK - If all processing went on OK TCPIP_MAC_RES_OP_ERR error code - If function not supported by the driver ",
							" Remarks The reported values are info only and change dynamically ",
							" TCPIP_MAC_Reinitialize Function ",
							" C void TCPIP_MAC_Reinitialize( SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init ); ",
							" Description MAC Re-Initialize function void TCPIP_MAC_Reinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); This is the function that re-initializes the MAC It is called by the stack as a result of the system changing power modes Allows reinitialization of the MAC with different power modes etc ",
							" Precondtions The TCPIP_MAC_Initialize() function should have been called ",
							" Parameters Parameters Description object Driver object handle returned from TCPIP_MAC_Initialize() init pointer to TCPIP_MAC_INIT initialization data containing: - macControl - Stack prepared data - moduleData - Driver specific Dependent on the MAC type For PIC32 MAC driver the TCPIP_MODULE_MAC_PIC32INT_CONFIG is used ",
							" Returns None ",
							" Remarks This function is optional and is not currently implemented ",
							" TCPIP_MAC_RES Enumeration ",
							" C typedef enum { TCPIP_MAC_RES_OK = 0 TCPIP_MAC_RES_PENDING = 1 TCPIP_MAC_RES_TYPE_ERR = -1 TCPIP_MAC_RES_IS_BUSY = -2 TCPIP_MAC_RES_INIT_FAIL = -3 TCPIP_MAC_RES_PHY_INIT_FAIL = -4 TCPIP_MAC_RES_EVENT_INIT_FAIL = -5 TCPIP_MAC_RES_OP_ERR = -6 TCPIP_MAC_RES_ALLOC_ERR = -7 TCPIP_MAC_RES_INSTANCE_ERR = -8 TCPIP_MAC_RES_FRAGMENT_ERR = -9 TCPIP_MAC_RES_PACKET_ERR = -10 TCPIP_MAC_RES_QUEUE_TX_FULL = -11 TCPIP_MAC_RES_SYNCH_LOCK_FAIL = -12 TCPIP_MAC_RES_NOT_READY_ERR = -13 } TCPIP_MAC_RES; ",
							" Description MAC Result Enumeration This is the list of codes that the MAC uses to specify the outcome of a MAC function ",
							" Members Members Description TCPIP_MAC_RES_OK = 0 Operation successful TCPIP_MAC_RES_PENDING = 1 Operation is pending upon some hardware resource Call again to completion TCPIP_MAC_RES_TYPE_ERR = -1 Unsupported type TCPIP_MAC_RES_IS_BUSY = -2 Device is in use TCPIP_MAC_RES_INIT_FAIL = -3 Generic initialization failure TCPIP_MAC_RES_PHY_INIT_FAIL = -4 PHY initialization failure TCPIP_MAC_RES_EVENT_INIT_FAIL = -5 Event system initialization failure TCPIP_MAC_RES_OP_ERR = -6 Unsupported operation TCPIP_MAC_RES_ALLOC_ERR = -7 Memory allocation error TCPIP_MAC_RES_INSTANCE_ERR = -8 Already instantiated initialized error TCPIP_MAC_RES_FRAGMENT_ERR = -9 Too fragmented RX buffer too small TCPIP_MAC_RES_PACKET_ERR = -10 Unsupported/corrupted packet error TCPIP_MAC_RES_QUEUE_TX_FULL = -11 TX queue exceeded the limit TCPIP_MAC_RES_SYNCH_LOCK_FAIL = -12 Synchronization object lock failed Could not get a lock TCPIP_MAC_RES_NOT_READY_ERR = -13 MAC is not ready for the operation ",
							" Remarks Benign operation results - always have positive values Error codes - always have negative values ",
							" TCPIP_MAC_RX_FILTER_TYPE Enumeration ",
							" C typedef enum { TCPIP_MAC_RX_FILTER_TYPE_BCAST_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_MCAST_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_UCAST_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_UCAST_OTHER_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_RUNT_REJECT TCPIP_MAC_RX_FILTER_TYPE_RUNT_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_CRC_ERROR_REJECT TCPIP_MAC_RX_FILTER_TYPE_CRC_ERROR_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_MCAST_HASH_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_UCAST_HASH_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_MAXFRAME_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_ALL_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_FRAMEERROR_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_JUMBOFRAME_ACCEPT TCPIP_MAC_RX_FILTER_TYPE_DEFAULT } TCPIP_MAC_RX_FILTER_TYPE; ",
							" Description MAC RX Filter Types This enumeration defines the RX filtering capabilities for the TCP/IP MAC driver ",
							" Members Members Description TCPIP_MAC_RX_FILTER_TYPE_BCAST_ACCEPT Broadcast packets are accepted TCPIP_MAC_RX_FILTER_TYPE_MCAST_ACCEPT Multicast packets are accepted TCPIP_MAC_RX_FILTER_TYPE_UCAST_ACCEPT Unicast packets to this host are accepted TCPIP_MAC_RX_FILTER_TYPE_UCAST_OTHER_ACCEPT Unicast packets to a different host are accepted TCPIP_MAC_RX_FILTER_TYPE_RUNT_REJECT Runt packets ( 64 bytes) are rejected TCPIP_MAC_RX_FILTER_TYPE_RUNT_ACCEPT Runt packets ( 64 bytes) are accepted TCPIP_MAC_RX_FILTER_TYPE_CRC_ERROR_REJECT Packets with CRC errors are rejected TCPIP_MAC_RX_FILTER_TYPE_CRC_ERROR_ACCEPT Packets with CRC errors are accepted TCPIP_MAC_RX_FILTER_TYPE_MCAST_HASH_ACCEPT Multicast HASH matching packets are accepted TCPIP_MAC_RX_FILTER_TYPE_UCAST_HASH_ACCEPT Unicast HASH matching packets are accepted TCPIP_MAC_RX_FILTER_TYPE_MAXFRAME_ACCEPT Maximum frame size packets(1536 bytes) are accepted TCPIP_MAC_RX_FILTER_TYPE_ALL_ACCEPT All packets are accepted TCPIP_MAC_RX_FILTER_TYPE_FRAMEERROR_ACCEPT Packets with Frame error are accepted TCPIP_MAC_RX_FILTER_TYPE_JUMBOFRAME_ACCEPT Packets with JUMBO Frame (up to 10240 bytes) is accepted TCPIP_MAC_RX_FILTER_TYPE_DEFAULT Default RX filter: will accept most valid packets ",
							" Remarks The Ethernet/Wi-Fi controllers have an RX filter module that takes part in the packet acceptance decision Multiple values can be OR-ed together There usually is a priority in the RX filter processing for a MAC module In order for a packet to be accepted it has to be specifically accepted by a filter Once a filter accepts or rejects a packet further filters are not tried If a packet isn't rejected/accepted after all filters are tried it will be rejected by default Not all MACs support all the RX filter types Current implementation does not suport more than 16 filters ",
							" TCPIP_MAC_RX_STATISTICS Structure ",
							" C typedef struct { int nRxOkPackets; int nRxPendBuffers; int nRxSchedBuffers; int nRxErrorPackets; int nRxFragmentErrors; int nRxBuffNotAvailable; } TCPIP_MAC_RX_STATISTICS; ",
							" Description MAC RX Statistics Data This structure defines the RX statistics data for the MAC driver ",
							" Parameters Parameters Description nRxOkPackets Number of OK RX packets nRxPendBuffers Number of unacknowledged pending RX buffers in the driver queues If each incoming packet fits within a RX buffer (the RX buffer is large enough) than this corresponds to the number of unacknowledged pending RX packets Otherwise the number of packets is less than the pending buffers nRxSchedBuffers Number of currently scheduled RX buffers in the driver queues These are available buffers ready to receive data nRxErrorPackets Number of RX packets with errors nRxFragmentErrors Number of RX fragmentation errors nRxBuffNotAvailable Number of occurences of 'RX Buffer Not Available' ",
							" Remarks This statistics are recorded by the driver not by the hardware ",
							" TCPIP_MAC_RxFilterHashTableEntrySet Function ",
							" C TCPIP_MAC_RES TCPIP_MAC_RxFilterHashTableEntrySet( DRV_HANDLE hMac const TCPIP_MAC_ADDR* DestMACAddr ); ",
							" Description This function sets the MAC hash table filtering to allow packets sent to DestMACAddr to be received It calculates a CRC-32 using polynomial 0x4C11DB7 over the 6 byte MAC address and then using bits 28:23 of the CRC will set the appropriate bits in the hash table filter registers The function will enable/disable the Hash Table receive filter if needed ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client DestMACAddr Destination MAC address (6 bytes) to allow through the Hash Table Filter If DestMACAddr is set to 00-00-00-00-00-00 then the hash table will be cleared of all entries and the filter will be disabled ",
							" Returns TCPIP_MAC_RES_OK - If all processing went on OK TCPIP_MAC_RES error code - If function failed for some reason ",
							" Remarks There is no way to individually remove destination MAC addresses from the hash table since it is possible to have a hash collision and therefore multiple MAC addresses relying on the same hash table bit A workaround is to have the stack store each enabled MAC address and to perform the comparison at run time A call to TCPIP_MAC_RxFilterHashTableEntrySet() using a 00-00-00-00-00-00 destination MAC address which will clear the entire hash table and disable the hash table filter This will allow the receive of all packets regardless of their destination ",
							" TCPIP_MAC_SEGMENT_FLAGS Enumeration ",
							" C typedef enum { TCPIP_MAC_SEG_FLAG_STATIC = 0x0001 TCPIP_MAC_SEG_FLAG_TX = 0x0002 TCPIP_MAC_SEG_FLAG_RX_STICKY = 0x0004 TCPIP_MAC_SEG_FLAG_USER_PAYLOAD = 0x0008 TCPIP_MAC_SEG_FLAG_ACK_REQUIRED = 0x0010 TCPIP_MAC_SEG_FLAG_USER = 0x0100 } TCPIP_MAC_SEGMENT_FLAGS; ",
							" Description MAC Segment Flags This enumeration contains the definitions of MAC segment flags: segment allocation flags and general purpose flags ",
							" Parameters Parameters Description TCPIP_MAC_SEG_FLAG_STATIC = 0x0001 Segment can not be dynamically deallocated Set when the segment is allocated TCPIP_MAC_SEG_FLAG_TX = 0x0002 If set it's a TX segment; otherwise is a RX packet TCPIP_MAC_SEG_FLAG_RX_STICKY = 0x0004 A MAC RX dedicated/sticky segment; otherwise a non-dedicated/float segment TCPIP_MAC_SEG_FLAG_USER_PAYLOAD = 0x0008 Segment carrying user payload Higher level protocols (TCP UDP etc ) may use it TCPIP_MAC_SEG_FLAG_ACK_REQUIRED = 0x0010 Ack is required and has not been performed TCPIP_MAC_SEG_FLAG_USER = 0x0100 User available segment flags ",
							" Remarks 16 bits only segment flags are supported ",
							" TCPIP_MAC_STATISTICS_REG_ENTRY Structure ",
							" C typedef struct { char registerName[36]; uint32_t registerValue; } TCPIP_MAC_STATISTICS_REG_ENTRY; ",
							" Description MAC Hardware Statistics Register Entry This structure defines an interface for gathering the MAC hardware statistics registers data ",
							" Members Members Description registerName[36] Name of the hardware register registerValue Value of the hardware register ",
							" Remarks None ",
							" TCPIP_MAC_StatisticsGet Function ",
							" C TCPIP_MAC_RES TCPIP_MAC_StatisticsGet( DRV_HANDLE hMac TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics ); ",
							" Description This function will get the current value of the statistic counters maintained by the MAC driver ",
							" Precondtions TCPIP_MAC_Initialize() should have been called TCPIP_MAC_Open() should have been called to obtain a valid handle ",
							" Parameters Parameters Description hMac Handle identifying the MAC driver client pRxStatistics Pointer to a TCPIP_MAC_RX_STATISTICS that will receive the current RX statistics counters Can be NULL if not needed pTxStatistics Pointer to a TCPIP_MAC_TX_STATISTICS that will receive the current TX statistics counters Can be NULL if not needed ",
							" Returns TCPIP_MAC_RES_OK - If all processing went on OK TCPIP_MAC_RES_OP_ERR error code - If function not supported by the driver ",
							" Remarks The reported values are info only and change dynamically ",
							" TCPIP_MAC_Status Function ",
							" C SYS_STATUS TCPIP_MAC_Status( SYS_MODULE_OBJ object ); ",
							" Description This function provides the current status of the MAC driver module ",
							" Precondtions The TCPIP_MAC_Initialize() function must have been called before calling this function ",
							" Parameters Parameters Description object Driver object handle returned from TCPIP_MAC_Initialize() ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Remarks Any value greater than SYS_STATUS_READY is also a normal running state in which the driver is ready to accept new operations SYS_STATUS_BUSY - Indicates that the driver is busy with a previous system level operation and cannot start another SYS_STATUS_ERROR - Indicates that the driver is in an error state Any value less than SYS_STATUS_ERROR is also an error state SYS_MODULE_DEINITIALIZED - Indicates that the driver has been deinitialized This operation can be used to determine when any of the driver's module level operations has completed If the status operation returns SYS_STATUS_BUSY then a previous operation has not yet completed Once the status operation returns SYS_STATUS_READY any previous operations have completed The value of SYS_STATUS_ERROR is negative (-1) Any value less than that is also an error state This function will NEVER block waiting for hardware If the Status operation returns an error value the error may be cleared by calling the reinitialize operation If that fails the deinitialize operation will need to be called followed by the initialize operation to return to normal operations ",
							" Example SYS_MODULE_OBJ object; // Returned from TCPIP_MAC_Initialize SYS_STATUS status; status = TCPIP_MAC_Status(object); if (SYS_STATUS_ERROR = status) { // Handle error } ",
							" TCPIP_MAC_SYNCH_REQUEST Enumeration ",
							" C typedef enum { TCPIP_MAC_SYNCH_REQUEST_NONE = 0 TCPIP_MAC_SYNCH_REQUEST_OBJ_CREATE TCPIP_MAC_SYNCH_REQUEST_OBJ_DELETE TCPIP_MAC_SYNCH_REQUEST_OBJ_LOCK TCPIP_MAC_SYNCH_REQUEST_OBJ_UNLOCK TCPIP_MAC_SYNCH_REQUEST_CRIT_ENTER TCPIP_MAC_SYNCH_REQUEST_CRIT_LEAVE } TCPIP_MAC_SYNCH_REQUEST; ",
							" Description TCP/IP MAC Synchronization object request TCP/IP MAC synchronization request codes This enumeration defines all the possible synchronization actions that can be requested by the MAC to the stack at run time ",
							" Members Members Description TCPIP_MAC_SYNCH_REQUEST_NONE = 0 No request TCPIP_MAC_SYNCH_REQUEST_OBJ_CREATE Request to create a synchronization object TCPIP_MAC_SYNCH_REQUEST_OBJ_DELETE Request to delete a previously created synchronization object TCPIP_MAC_SYNCH_REQUEST_OBJ_LOCK request to lock access using a previously created synchronization object TCPIP_MAC_SYNCH_REQUEST_OBJ_UNLOCK Request to unlock/release access using a previously created synchronization object TCPIP_MAC_SYNCH_REQUEST_CRIT_ENTER Request to enter from a critical section TCPIP_MAC_SYNCH_REQUEST_CRIT_LEAVE Request to exit from a critical section ",
							" Remarks None ",
							" TCPIP_MAC_SynchReqF Type ",
							" C typedef bool (* TCPIP_MAC_SynchReqF)(void* synchHandle TCPIP_MAC_SYNCH_REQUEST request); ",
							" Description Synchronization request Function: typedef bool (*TCPIP_MAC_SynchReqF)(void* synchHandle TCPIP_MAC_SYNCH_REQUEST request); This function describes the MAC synchronization request function The MAC driver will call this function whenever it needs to create delete lock or unlock a synchronization object ",
							" Members Members Description synchHandle - Pointer to a valid storage area - For TCPIP_MAC_SYNCH_REQUEST_OBJ_CREATE it is an address that will store a handle to identify the synchronization object to the OS (OSAL) - For other synchronization object request types the handle has to be valid and identify the synchronization object to the OS (OSAL) - For critical sections it maintains OS passed info request A TCPIP_MAC_SYNCH_REQUEST type ",
							" Returns True - If the call is successful False - If the call failed ",
							" Remarks None ",
							" TCPIP_MAC_Tasks Function ",
							" C void TCPIP_MAC_Tasks( SYS_MODULE_OBJ object ); ",
							" Description This function is used to maintain the driver's internal state machine ",
							" Precondtions The TCPIP_MAC_Initialize() routine must have been called for the specified MAC driver instance ",
							" Parameters Parameters Description object Object handle for the specified driver instance (returned from TCPIP_MAC_Initialize()) ",
							" Returns None ",
							" Remarks This function is normally not called directly by an application It is called by the system's Tasks routine (SYS_Tasks) This function will never block or access any resources that may cause it to block ",
							" TCPIP_MAC_TX_STATISTICS Structure ",
							" C typedef struct { int nTxOkPackets; int nTxPendBuffers; int nTxErrorPackets; int nTxQueueFull; } TCPIP_MAC_TX_STATISTICS; ",
							" Description MAC TX Statistics Data This structure defines the TX statistics data for the MAC driver ",
							" Parameters Parameters Description nTxOkPackets Number of OK transmitted packets nTxPendBuffers number of unacknowledged pending TX buffers in the driver queues This is equal with pending TX packets when each packet is contained within a TX buffer nTxErrorPackets Number of packets that could not be transmitted nTxQueueFull Number of times the TX queue was full this may signal that the number of TX descriptors is too small ",
							" Remarks This statistics are recorded by the driver not by the hardware ",
							" TCPIP_MAC_TYPE Enumeration ",
							" C typedef enum { TCPIP_MAC_TYPE_NONE = 0 TCPIP_MAC_TYPE_ETH TCPIP_MAC_TYPE_WLAN TCPIP_MAC_TYPES } TCPIP_MAC_TYPE; ",
							" Description MAC Types List of specific MAC types that indicate to the user of the MAC (TCP/IP stack) the actual type of the MAC driver ",
							" Members Members Description TCPIP_MAC_TYPE_NONE = 0 Invalid/unknown MAC type TCPIP_MAC_TYPE_ETH Wired ethernet MAC type TCPIP_MAC_TYPE_WLAN Wireless Wi-Fi type MAC TCPIP_MAC_TYPES Supported types ",
							" Remarks Other types will be eventually added ",
							" TCPIP_MODULE_GMAC_QUEUE_CONFIG Structure ",
							" C typedef struct { uint16_t nRxDescCnt; uint16_t nRxBuffCount; uint16_t nRxBuffCntThres; uint16_t nRxBuffAllocCnt; uint16_t nTxDescCnt; uint16_t txBufferSize; uint16_t txMaxPktSize; uint16_t rxBufferSize; uint8_t queueTxEnable; uint8_t queueRxEnable; } TCPIP_MODULE_GMAC_QUEUE_CONFIG; ",
							" Description Configuration Structure for Queues in GMAC ",
							" Members Members Description nRxDescCnt RX Descriptor count nRxBuffCount RX buffer count nRxBuffCntThres RX buffer count threshold nRxBuffAllocCnt RX buffer allocate count nTxDescCnt TX Descriptor count txBufferSize TX buffer size txMaxPktSize Max TX packet size rxBufferSize RX buffer size queueTxEnable Queue Tx enable status queueRxEnable Queue Rx enable status ",
							" TCPIP_MODULE_MAC_ID Enumeration ",
							" C typedef enum { TCPIP_MODULE_MAC_NONE = 0x1000 TCPIP_MODULE_MAC_ENCJ60 = 0x1010 TCPIP_MODULE_MAC_ENCJ60_0 = 0x1010 TCPIP_MODULE_MAC_ENCJ600 = 0x1020 TCPIP_MODULE_MAC_ENCJ600_0 = 0x1020 TCPIP_MODULE_MAC_97J60 = 0x1030 TCPIP_MODULE_MAC_97J60_0 = 0x1030 TCPIP_MODULE_MAC_PIC32INT = 0x1040 TCPIP_MODULE_MAC_PIC32INT_0 = 0x1040 TCPIP_MODULE_MAC_PIC32C = 0x1050 TCPIP_MODULE_MAC_PIC32C_0 = 0x1050 TCPIP_MODULE_MAC_MRF24WN = 0x1060 TCPIP_MODULE_MAC_MRF24WN_0 = 0x1060 TCPIP_MODULE_MAC_WINC = 0x1070 TCPIP_MODULE_MAC_WINC_0 = 0x1070 TCPIP_MODULE_MAC_WILC1000 = 0x1080 TCPIP_MODULE_MAC_WILC1000_0 = 0x1080 TCPIP_MODULE_MAC_PIC32WK = 0x1090 TCPIP_MODULE_MAC_PIC32WK_0 = 0x1090 TCPIP_MODULE_MAC_PIC32MZW1 = 0x10A0 TCPIP_MODULE_MAC_PIC32MZW1_0 = 0x10A0 TCPIP_MODULE_MAC_SAM9X60 = 0x1100 TCPIP_MODULE_MAC_SAM9X60_0 = 0x1100 TCPIP_MODULE_MAC_SAM9X60_1 = 0x1101 TCPIP_MODULE_MAC_EXTERNAL = 0x4000 } TCPIP_MODULE_MAC_ID; ",
							" Description MAC Modules ID This type defines the supported MAC types ",
							" Members Members Description TCPIP_MODULE_MAC_NONE = 0x1000 Unspecified/unknown MAC TCPIP_MODULE_MAC_ENCJ60 = 0x1010 External ENC28J60 device: room for 16 ENCJ60 devices TCPIP_MODULE_MAC_ENCJ60_0 = 0x1010 Alternate numbered name TCPIP_MODULE_MAC_ENCJ600 = 0x1020 External ENCX24J600 device: room for 16 ENCJ600 devices TCPIP_MODULE_MAC_ENCJ600_0 = 0x1020 Alternate numbered name TCPIP_MODULE_MAC_97J60 = 0x1030 External ETH97J60 device: room for 16 97J60 devices TCPIP_MODULE_MAC_97J60_0 = 0x1030 Alternate numbered name TCPIP_MODULE_MAC_PIC32INT = 0x1040 Internal/Embedded PIC32 MAC: room for 16 PIC32 devices TCPIP_MODULE_MAC_PIC32INT_0 = 0x1040 Alternate numbered name TCPIP_MODULE_MAC_PIC32C = 0x1050 Internal/Embedded GMAC of PIC32C TCPIP_MODULE_MAC_PIC32C_0 = 0x1050 Alternate numbered name TCPIP_MODULE_MAC_MRF24WN = 0x1060 External MRF24WN Wi-Fi MAC: room for 16 MRF24WN devices TCPIP_MODULE_MAC_MRF24WN_0 = 0x1060 Alternate numbered name TCPIP_MODULE_MAC_WINC = 0x1070 External WINC Wi-Fi MAC: room for 16 WINC devices TCPIP_MODULE_MAC_WINC_0 = 0x1070 Alternate numbered name TCPIP_MODULE_MAC_WILC1000 = 0x1080 External WILC1000 Wi-Fi MAC: room for 16 WILC1000 devices TCPIP_MODULE_MAC_WILC1000_0 = 0x1080 Alternate numbered name TCPIP_MODULE_MAC_PIC32WK = 0x1090 Internal/Embedded PIC32WK Wi-Fi MAC: room for 16 PIC32WK devices TCPIP_MODULE_MAC_PIC32WK_0 = 0x1090 Alternate numbered name TCPIP_MODULE_MAC_PIC32MZW1 = 0x10A0 Internal/Embedded PIC32MZW1 Wi-Fi MAC: room for 16 PIC32MZW1 devices TCPIP_MODULE_MAC_PIC32MZW1_0 = 0x10A0 Alternate numbered name TCPIP_MODULE_MAC_SAM9X60 = 0x1100 Instance base TCPIP_MODULE_MAC_SAM9X60_0 = 0x1100 First MAC instance TCPIP_MODULE_MAC_SAM9X60_1 = 0x1101 Second MAC instance TCPIP_MODULE_MAC_EXTERNAL = 0x4000 External non MCHP MAC modules ",
							" Remarks Not all types listed in this enumeration are supported New MAC types will be added as needed ",
							" TCPIP_MODULE_MAC_PIC32C_CONFIG Structure ",
							" C typedef struct { TCPIP_MAC_ADDR macAddress; TCPIP_MODULE_GMAC_QUEUE_CONFIG gmac_queue_config[DRV_GMAC_NUMBER_OF_QUEUES]; uint16_t linkInitDelay; TCPIP_ETH_OPEN_FLAGS ethFlags; uintptr_t ethModuleId; const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pPhyBase; const struct DRV_ETHPHY_INIT* pPhyInit; TCPIP_MAC_CHECKSUM_OFFLOAD_FLAGS checksumOffloadRx; TCPIP_MAC_CHECKSUM_OFFLOAD_FLAGS checksumOffloadTx; uint8_t macTxPrioNum; uint8_t txPrioNumToQueIndx[DRV_GMAC_NUMBER_OF_QUEUES]; uint8_t macRxPrioNum; uint8_t rxPrioNumToQueIndx[DRV_GMAC_NUMBER_OF_QUEUES]; const struct DRV_GMAC_RXQUE_FILTER_INIT* pRxQueFiltInit; } TCPIP_MODULE_MAC_PIC32C_CONFIG; ",
							" Description GMAC Initialization Data This structure defines the MAC initialization data for the PIC32 MAC/Ethernet controller ",
							" Members Members Description gmac_queue_config[DRV_GMAC_NUMBER_OF_QUEUES] Configuration for each GMAC queues linkInitDelay Delay to wait after the lomk is coming up (milliseconds) for insuring that the PHY is ready to transmit data ethFlags Flags to use for the ETH connection ethModuleId Ethernet module ID for this driver instance: a plib ETH Id value pPhyBase Non-volatile pointer to the PHY basic object associated with this MAC pPhyInit Non-volatile pointer to the PHY initialization data checksumOffloadRx Rx Checksum offload Enable checksumOffloadTx Tx Checksum offload Enable macTxPrioNum Number of Tx priorities supported by MAC txPrioNumToQueIndx[DRV_GMAC_NUMBER_OF_QUEUES] Array to translate receive priority to queue index macRxPrioNum Number of Rx priorities supported by MAC rxPrioNumToQueIndx[DRV_GMAC_NUMBER_OF_QUEUES] Array to translate receive priority to queue index pRxQueFiltInit Configuration for GMAC RX Filters ",
							" TCPIP_MODULE_MAC_PIC32INT_CONFIG Structure ",
							" C typedef struct { uint16_t nTxDescriptors; uint16_t rxBuffSize; uint16_t nRxDescriptors; uint16_t nRxDedicatedBuffers; uint16_t nRxInitBuffers; uint16_t rxLowThreshold; uint16_t rxLowFill; uint16_t linkInitDelay; TCPIP_ETH_OPEN_FLAGS ethFlags; uintptr_t ethModuleId; const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pPhyBase; const struct DRV_ETHPHY_INIT* pPhyInit; } TCPIP_MODULE_MAC_PIC32INT_CONFIG; ",
							" Description Ethernet MAC Initialization Data This structure defines the MAC initialization data for the PIC32 MAC/Ethernet controller ",
							" Members Members Description nTxDescriptors Number of TX descriptors rxBuffSize Size of the corresponding RX buffer nRxDescriptors Number of RX descriptors Has to be high enough to accommodate both dedicated and non-dedicated RX buffers nRxDedicatedBuffers Number of MAC dedicated RX buffers These buffers/packets are owned by the MAC and are not returned to the packet pool They are allocated at MAC initialization time using pktAllocF and freed at MAC deinitialize time using pktFreeF Could be 0 if only not dedicated buffers are needed For best performance usually it's best to have some dedicated buffers so as to minimize the run time allocations nRxInitBuffers Number of MAC non dedicated RX buffers allocated at the MAC initialization pktAllocF Note that these buffers are allocated in addition of the nRxDedicatedBuffers Freed at run time using pktFreeF rxLowThreshold Minimum threshold for the buffer replenish process Whenever the number of RX scheduled buffers is = than this threshold the MAC driver will allocate new non-dedicated buffers that will be freed at run time using pktFreeF Setting this value to 0 disables the buffer replenishing process rxLowFill Number of RX buffers to allocate when below threshold condition is detected If 0 the MAC driver will allocate (scheduled buffers - rxThres) If 0 the MAC driver will allocate exactly rxLowFill buffers linkInitDelay Delay to wait after the lomk is coming up (milliseconds) for insuring that the PHY is ready to transmit data ethFlags Flags to use for the ETH connection ethModuleId Ethernet module ID for this driver instance: a plib ETH Id value pPhyBase Non-volatile pointer to the PHY basic object associated with this MAC pPhyInit Non-volatile pointer to the PHY initialization data ",
							" Manager Module The TCP/IP manager provides access to the stack initialization configuration and status functions It also process the packets received from different network interfaces (MAC drivers) and dispatches them based on their type to the proper higher_layers of the stack TCPIP MANAGER abstract How the Library Works The Manager module of the TCP/IP stack is the central module in the stack It is this module that allows the client to configure and initialize the stack and also to get current status and parameters of the network interfaces that the stack supports The stack manager controls the communication to the underlying virtual MAC driver that implements the interface to a specific network channel The various network interfaces that the TCP/IP stack supports are brought up or torn down by the stack manager in response to the stack client commands The manager is also responsible for providing the TCP/IP client with notifications of the events that occur in the stack at the network interface level A dynamic registration mechanism is provided for this Another important functionality of the stack manager is the dispatch of the incoming network packets The manager is notified by the underlying interface drivers of the traffic related event (transmit receive errors etc ) As a response to those events the manager gets the pending receive packets from the virtual MAC driver and based on their type dispatches them to the appropriate higher level protocol for further processing (IPv4 ARP IPv6) As part of the event notification provided by the MAC driver the TCP/IP stack manager calls back into the MAC driver when this one needs processing time and can maintain statistics counters link status etc The MPLAB Harmony framework on the system running the TCP/IP stack interfaces to the stack manager mainly by using three functions TCPIP_STACK_Initialize and TCPIP_STACK_Deinitialize for TCP/IP stack initialization and TCPIP_STACK_Task for periodic processing and the advance of the stack state machine The stack is capable of running either under an Operating System (RTOS) or in a bare-metal environment When running in a bare-metal environment a \"cooperative multi-tasking\" approach is needed by the TCP/IP stack meaning that control has to reach the TCPIP_STACK_Task function That is the system will need to make periodic calls to this function which allows the TCP/IP stack to dequeue incoming packets and the corresponding state machines in the stack to advance The application has to be aware that it cannot monopolize the processor for long periods of time and needs to relinquish control so that the system loops perform their tasks In an RTOS environment it is preferred to have the stack manager run in its own thread This thread will be blocked waiting for network interface events and when such an event occurs it will wake up and process the data This is a more efficient way of using the CPU resources Refer to MPLAB Harmony Framework Reference for information on configuring the MPLAB Harmony framework to run in a RTOS or bare-metal environment Core Functionality The following diagram provides an overview for the operation and use of the Manager module in a typical MPLAB Harmony framework (bare-metal non-OS environment) TCPIP MANAGER Flow The TCP/IP stack is initialized as a part of the system initialization by a call to TCPIP_STACK_Initialize By configuring the stack the application can pass run-time initialization data to the stack to select both the network parameters of the interfaces (network addresses masks physical addresses NetBIOS names DHCP operation etc ) and the parameters for the modules contained in the stack (TCP UDP ARP IPv4 IPv6 etc ) Once the stack is initialized the application can use the stack manager calls to inquire about the stack current settings (current addresses obtained by DHCP or IPv6 advertisements messages etc ) to check the physical link status or to set new parameters to the stack It should be noted that different interfaces can be stopped and restarted dynamically (TCPIP_STACK_NetDown TCPIP_STACK_NetUp) without the stack being killed When a particular interface is brought up only the network parameters for that interface need to be supplied (no parameters for the TCP/IP stack modules are needed) The entire stack can be stopped and restarted (TCPIP_STACK_Deinitialize TCPIP_STACK_Initialize) Reinitializing the stack allows the stack initialization with a complete new set of network and/or module parameters The stack processing is done in the TCPIP_STACK_Task function As explained in the previous paragraph processing time is required by the stack meaning that periodic calls have to be made by the system/framework to the TCPIP_STACK_Task function When execution reaches this function the stack maintains and advances its internal state machine The most important part of this is the processing of the events that are reported by the underlying MAC drivers (through the use of the virtual MAC driver which provides an interrupt signaling/event notification mechanism) As a response to the MAC events the stack manager will retrieve packets from the internal MAC receive queues and dispatch them for processing It will also call into MAC processing functions if required and provide processing for the stack modules that are the recipients of the dispatched network packets The stack manager will also notify the application of the network events if the application dynamically registered an event notification handler with the stack It should be noted that the stack manager also requires a periodic tick signal for which it uses the MPLAB Harmony system timer services (see Timer System Service Library) If the application no longer uses the TCP/IP stack it is important that it calls the TCPIP_STACK_Deinitialize function This function closes any open network connections (sockets etc ) closes the underlying MAC and PHY drivers and all of the modules in the stack and frees all of the resources that were internally allocated by the stack as part of the initialization and run-time processing Library Interface Name Description Macros  TCPIP_PACKET_LOG_ENABLE Enable the packet logger Simple module that logs the packets as they fly through the stack from creation until acknowledged Default is disabled TCPIP_PKT_LOG_SIZE Number of log entries if the packet logger is enabled Each entry takes approx 24 bytes TCPIP_STACK_ALIAS_INTERFACE_SUPPORT Enable support for alias interfaces An alias interface uses the physical interface of another network interface It allows multiple IP addresses for a host on the same interface for example Default is disabled TCPIP_STACK_CALLOC_FUNC Stack allocation function calloc style This is the function the stack will call to allocate memory needed for its own heap: TCPIP_STACK_DRAM_SIZE Use standard C library 'calloc' as a default TCPIP_STACK_COMMAND_ENABLE TCP/IP commands support - requires the system console and the command processor TCPIP_STACK_CONFIGURATION_SAVE_RESTORE This setting enables the configuration get/set operations: TCPIP_STACK_ModuleConfigGet TCPIP_STACK_NetConfigGet TCPIP_STACK_NetConfigSet If true the functionality is built in and could be used by the application If false these functions do not exist and the generated code is smaller TCPIP_STACK_DOWN_OPERATION This setting enables the TCPIP_STACK_Deinitialize() operation If this symbol is false then the TCPIP_STACK_Deinitialize is not built in Useful when stack stop and restart is not needed at run time - smaller code footprint for the TCP/IP stack TCPIP_STACK_DRAM_DEBUG_ENABLE Enable debugging of an allocation call that failed If the system debug is enabled (SYS_DEBUG_ENABLE) the stack will issue a warning message at the system debug channel TCPIP_STACK_DRAM_RUN_LIMIT The minimum amount of dynamic memory left for run time allocation by the stack (IP UDP etc) This is just a warning threshold If after all the modules are initialized the amount of memory available in the TCPIP heap is less then TCPIP_STACK_DRAM_RUN_LIMIT then a warning will be displayed (if the debug channel is enabled) For proper operation there should be always a heap reserve of at least few KB TCPIP_STACK_DRAM_SIZE The total amount of internal dynamic memory heap that the TCPIP stack will create at start up This is the size of the internal heap relevant only for the TCPIP_STACK_USE_INTERNAL_HEAP TCPIP_STACK_DRAM_TRACE_SLOTS Enable tracing of the allocated memory by each module The stack will trace all the memory allocated by a module and various statistics #define TCPIP_STACK_DRAM_TRACE_ENABLE Number of trace slots to be used There is on slot needed per module that allocates memory from the heap TCPIP_STACK_FREE_FUNC Stack deallocation function free style This is the function the stack will call for freeing the allocated memory when the stack is deinitialized Use standard C library 'free' as a default TCPIP_STACK_IF_UP_DOWN_OPERATION This setting enables the TCPIP_STACK_NetUp/TCPIP_STACK_NetDown operations When enabled these functions are built in and can be used by an app Useful when interfaces do not need restarting at run time - results in smaller code footprint TCPIP_STACK_INTERFACE_CHANGE_SIGNALING This setting enables/disables the stack signaling when an interface address changes This could be triggered by the DHCP kicking into action by ZCLL or other address service or simply by the user changing the IP address of an interface If it is enabled the socket modules (UDP TCP) will be notified and they will disconnect their sockets that are currently connected on that interface that has changed User can be notified by registering an event handler either with socket events or with the general stack signaling mechanism Default setting is true TCPIP_STACK_INTERNAL_HEAP_POOL_EXPANSION_SIZE The size of the expansion heap for a TCPIP_STACK_USE_INTERNAL_HEAP_POOL This is the amount of heap allocated besides the size resulting from the pool entries and allows expanding at run time How a specific entry expands is controlled per entry If set to 0 then there is no expansion at run time TCPIP_STACK_MAC_DOWN_OPERATION This setting specifies the behavior of stack regarding the MAC and PHY drivers when the TCPIP_STACK_DOWN_OPERATION == false in the situation where the stack initialization failed and the stack cannot be started If true the MAC (and the corresponding PHY) TCPIP_MAC_Deinitialize will be called This operation is supposed to exist and this setting will conserve power If false the TCPIP_MAC_Deinitialize waon't be called and the code footprint could be smaller The TCPIP_MAC_Deinitialize operation which is expensive could be unimplemented TCPIP_STACK_MALLOC_FUNC Stack allocation function malloc style This is the function the stack will call to allocate memory needed for its own heap: TCPIP_STACK_DRAM_SIZE Use standard C library 'malloc' as a default TCPIP_STACK_SECURE_PORT_ENTRIES The number of entries in the internally maintained secure port table This table is populated at stack initialization with default well-known port values Currently this number should be = 10 TCPIP_STACK_SUPPORTED_HEAPS Number of heap types at run time to enable debugging statistics trace on etc Currently only 1 heap type is supported at run time one of: internal heap internal pool and external TCPIP_STACK_TICK_RATE TCPIP task processing rate in milliseconds The TCP/IP task will require a timer event with this rate for maintaining its own state machine processing timeouts for all modules or dispatching the RX traffic if the interrupt operation is not enabled etc The lower this value (higher the frequency) the higher the priority of the TCP/IP stack and a higher performance can be obtained TCPIP_STACK_USE_ANNOUNCE Microchip Embedded Ethernet Device Discoverer server/client TCPIP_STACK_USE_BERKELEY_API Berkeley Sockets APIs are available TCPIP_STACK_USE_DHCP_CLIENT Dynamic Host Configuration Protocol client for obtaining IP address and other parameters TCPIP_STACK_USE_DHCP_SERVER DHCP server TCPIP_STACK_USE_DNS Domain Name Service Client for resolving hostname strings to IP addresses TCPIP_STACK_USE_DNS_SERVER Domain Name Service Server for redirection to the local device TCPIP_STACK_USE_EVENT_NOTIFICATION Event Notifications Options ======================================================================= This setting enables the stack event notification It allows the MAC drivers to report their TX/RX related events to the stack manager but also allows users of the stack to register notification handler so that they are notified of specific events The operation of the stack is more efficient when event notification is turned on and this is how the stack is designed to run Always leave this setting defined The choice for selecting this parameter will eventually be removed Maintained for backward compatibility TCPIP_STACK_USE_FTP_SERVER File Transfer Protocol TCPIP_STACK_USE_HTTP_NET_SERVER HTTP NET server with POST Cookies Authentication etc and encryption support TCPIP_STACK_USE_ICMP_CLIENT Ping query capability TCPIP_STACK_USE_ICMP_SERVER Ping response capability TCPIP_STACK_USE_ICMPV6_SERVER enable IPv6 ICMP functionality TCPIP_STACK_USE_INTERNAL_HEAP define TCPIP_STACK_USE_EXTERNAL_HEAP define TCPIP_STACK_USE_INTERNAL_HEAP_POOL TCPIP_STACK_USE_IPERF Enable the Iperf module for standard network benchmarking TCPIP_STACK_USE_IPV4 enable IPv4 functionality TCPIP_STACK_USE_IPV6 enable IPv6 functionality TCPIP_STACK_USE_LLDP LLDP limited beta functionality - not supported through MHC configuration TCPIP_STACK_USE_NBNS NetBIOS Name Service Server for responding to NBNS hostname broadcast queries TCPIP_STACK_USE_REBOOT_SERVER Module for resetting this PIC remotely Primarily useful for a Bootloader TCPIP_STACK_USE_SMTPC Simple Mail Transfer Protocol for sending email with encryption support TCPIP_STACK_USE_SNMP_SERVER Simple Network Management Protocol v2C Community Agent TCPIP_STACK_USE_SNMPV3_SERVER SNMP v3 agent TCPIP_STACK_USE_SNTP_CLIENT Simple Network Time Protocol for obtaining current date/time from Internet TCPIP_STACK_USE_TCP Enable the TCP module TCPIP_STACK_USE_TELNET_SERVER Telnet server TCPIP_STACK_USE_TFTP_CLIENT TFTP client functionality TCPIP_STACK_USE_UDP Enable the UDP module TCPIP_STACK_USE_ZEROCONF_LINK_LOCAL Zeroconf IPv4 Link-Local Addressing; TCPIP_STACK_USE_ZEROCONF_MDNS_SD Zeroconf mDNS and mDNS service discovery TCPIP_STACK_USER_NOTIFICATION This setting enables the reporting of the events by the stack to the user using the notification system If enabled then TCPIP_STACK_HandlerRegister and TCPIP_STACK_HandlerDeregister functions are compiled in and can be used If disabled these functions do not exist and cannot be used/called Relevant only when TCPIP_STACK_USE_EVENT_NOTIFICATION is enabled TCPIP_STACK_EXTERN_PACKET_PROCESS This setting enables/disables the processing of the RX packets by an external handler The user of the stack can register an external function to process the incoming packets If true the functionality is built in and could be used by the application If false the functionality does not exist and the generated code is slightly smaller Helper Functions  TCPIP_Helper_FormatNetBIOSName Formats a string to a valid NetBIOS name TCPIP_Helper_htonl This is function TCPIP_Helper_htonl TCPIP_Helper_htonll This is function TCPIP_Helper_htonll TCPIP_Helper_htons This is function TCPIP_Helper_htons TCPIP_Helper_IPAddressToString Converts an IPV4 address to an ASCII string TCPIP_Helper_IPv6AddressToString Converts an IPv6 address to a string representation TCPIP_Helper_IsBcastAddress This is function TCPIP_Helper_IsBcastAddress TCPIP_Helper_IsMcastAddress This is function TCPIP_Helper_IsMcastAddress TCPIP_Helper_IsPrivateAddress Detects a private (non-routable) address TCPIP_Helper_MACAddressToString Converts a MAC address to a string TCPIP_Helper_ntohl defined(_ mips_ ) TCPIP_Helper_ntohll This is function TCPIP_Helper_ntohll TCPIP_Helper_ntohs This is function TCPIP_Helper_ntohs TCPIP_Helper_SecurePortGetByIndex Returns the secure port belonging to a specified index TCPIP_Helper_SecurePortSet Sets the required port secure connection status TCPIP_Helper_StringToIPAddress Converts an ASCII string to an IPV4 address TCPIP_Helper_StringToIPv6Address Converts a string to an IPv6 address TCPIP_Helper_StringToMACAddress Converts a string to an MAC address TCPIP_Helper_TCPSecurePortGet Checks if the required TCP port is a secure port TCPIP_Helper_UDPSecurePortGet Checks if the required UDP port is a secure port TCPIP_Helper_Base64Decode Helper function to decode a Base-64 encoded array TCPIP_Helper_Base64Encode Helper function to encode to Base-64 Task and Initialize Functions  TCPIP_STACK_HandlerDeregister Deregisters an event notification handler TCPIP_STACK_HandlerRegister Sets a new event notification handler TCPIP_MODULE_SignalFunctionDeregister Deregisters a signal function for a stack module TCPIP_MODULE_SignalFunctionRegister Registers a new signal function for a stack module TCPIP_MODULE_SignalGet Returns the current signals for a TCP/IP module TCPIP_STACK_VersionGet Gets the TCP/IP stack version in numerical format TCPIP_STACK_VersionStrGet Gets the TCP/IP stack version in string format TCPIP_STACK_Task TCP/IP Stack task function TCPIP_STACK_Deinitialize Stack deinitialization function TCPIP_STACK_Initialize Stack initialization function TCPIP_STACK_MACObjectGet Returns the network MAC driver object of this interface TCPIP_STACK_PacketHandlerDeregister Deregisters a previously registered packet handler TCPIP_STACK_PacketHandlerRegister Sets a new packet processing handler Network Status and Control Functions  TCPIP_STACK_IndexToNet Network interface handle from interface number TCPIP_STACK_NetBIOSName Network interface NetBIOS name TCPIP_STACK_NetBiosNameSet Sets network interface NetBIOS name TCPIP_STACK_NetDefaultGet Default network interface handle TCPIP_STACK_NetDefaultSet Sets the default network interface handle TCPIP_STACK_NetHandleGet Network interface handle from a name TCPIP_STACK_NetIndexGet Network interface number from interface handle TCPIP_STACK_NetMask Network interface IPv4 address mask TCPIP_STACK_NetNameGet Network interface name from a handle TCPIP_STACK_NumberOfNetworksGet Number of network interfaces in the stack TCPIP_STACK_EventsPendingGet Returns the currently pending events TCPIP_STACK_ModuleConfigGet Get stack module configuration data TCPIP_STACK_NetMACIdGet Get the MAC ID of the network interface TCPIP_STACK_NetMACStatisticsGet Get the MAC statistics data TCPIP_STACK_InitializeDataGet Get the TCP/IP stack initialization data TCPIP_STACK_NetMulticastGet Default multicast network interface handle TCPIP_STACK_NetMulticastSet Sets the default multicast network interface TCPIP_STACK_NetGetType Gets the network interface type: primary alias etc Network Up/Down/Linked Functions  TCPIP_STACK_NetDown Turns down a network interface TCPIP_STACK_NetIsLinked Gets the network interface link status TCPIP_STACK_NetIsUp Gets the network interface up or down status TCPIP_STACK_NetUp Turns up a network interface As part of this process the corresponding MAC driver is initialized TCPIP_STACK_NetAliasNameGet Network interface alias name from a handle TCPIP_STACK_NetIsReady Gets the network interface configuration status TCPIP_STACK_NetMACRegisterStatisticsGet Get the MAC statistics register data Network Address Status and Control Functions  TCPIP_STACK_NetAddress Network interface IPv4 address TCPIP_STACK_NetAddressBcast Network interface broadcast address TCPIP_STACK_NetAddressDnsPrimary Network interface DNS address TCPIP_STACK_NetAddressDnsPrimarySet Sets network interface IPv4 DNS address TCPIP_STACK_NetAddressDnsSecond Network interface secondary DNS address TCPIP_STACK_NetAddressDnsSecondSet Sets network interface IPv4 secondary DNS address TCPIP_STACK_NetAddressGateway Network interface IPv4 gateway address TCPIP_STACK_NetAddressGatewaySet Sets network interface IPv4 gateway address TCPIP_STACK_NetAddressMac Network interface MAC address TCPIP_STACK_NetAddressSet Sets network interface IPv4 address TCPIP_STACK_NetIPv6AddressGet Gets network interface IPv6 address TCPIP_STACK_NetAddressMacSet Sets network interface MAC address TCPIP_STACK_Status Provides the current status of the TCPIP stack module Network Structure Storage Functions  TCPIP_STACK_NetConfigGet Get stack network interface configuration data TCPIP_STACK_NetConfigSet Restores stack network interface configuration data Heap Functions  TCPIP_STACK_HEAP_FreeSize Returns the size of the space currently available in the heap TCPIP_STACK_HEAP_LastError Returns the last error encountered in a heap operation and clears the value of the last error variable TCPIP_STACK_HEAP_MaxSize Returns the maximum size of a block that can be currently allocated from this heap TCPIP_STACK_HEAP_Size Returns the size of the heap TCPIP_STACK_HeapHandleGet Returns the current TCP/IP stack heap handle TCPIP_STACK_HEAP_HighWatermark Returns the current heap watermark Data Types and Constants  TCPIP_NET_HANDLE Defines a network interface handle TCPIP_EVENT Defines the possible TCPIP event types TCPIP_EVENT_HANDLE Defines a TCPIP stack event handle TCPIP_STACK_EVENT_HANDLER Pointer to a function(handler) that will get called to process an event TCPIP_MODULE_SIGNAL Lists the signals that are generated by the TCP/IP stack manager and processed by the stack modules TCPIP_MODULE_SIGNAL_FUNC Pointer to a function(handler) that will get called when a stack internal signal occurred TCPIP_MODULE_SIGNAL_HANDLE Defines a TCPIP stack signal function handle TCPIP_Helper_ntohl This is macro TCPIP_Helper_ntohl TCPIP_Helper_ntohll This is macro TCPIP_Helper_ntohll TCPIP_Helper_ntohs This is macro TCPIP_Helper_ntohs _ TCPIP_HELPERS_H This is macro _ TCPIP_HELPERS_H  _ TCPIP_MANAGER_H This is macro _ TCPIP_MANAGER_H  TCPIP_NETWORK_TYPE Returns the type of a network interface TCPIP_STACK_HEAP_CONFIG Defines the data required to initialize the TCP/IP stack heap TCPIP_STACK_HEAP_EXTERNAL_CONFIG Defines the data required to initialize the TCP/IP stack external heap TCPIP_STACK_HEAP_FLAGS Defines the flags supported by a TCP/IP heap TCPIP_STACK_HEAP_HANDLE Defines a TCP/IP stack heap handle type TCPIP_STACK_HEAP_INTERNAL_CONFIG Defines the data required to initialize the TCP/IP stack internal heap TCPIP_STACK_HEAP_POOL_CONFIG This is type TCPIP_STACK_HEAP_POOL_CONFIG TCPIP_STACK_HEAP_POOL_ENTRY Defines the data required to initialize the TCP/IP stack internal memory pool TCPIP_STACK_HEAP_RES Defines the results of a TCP/IP heap error function TCPIP_STACK_HEAP_TYPE Defines a TCP/IP stack heap type TCPIP_STACK_HEAP_USAGE Defines a TCP/IP stack heap purpose TCPIP_STACK_PACKET_HANDLER Pointer to a function(handler) that will get called to process an incoming packet TCPIP_STACK_PROCESS_HANDLE Defines a TCPIP stack packet processing handle ",
							" _ TCPIP_HELPERS_H Macro ",
							" C #define __TCPIP_HELPERS_H_ ",
							" Description This is macro __TCPIP_HELPERS_H_ ",
							" _ TCPIP_MANAGER_H Macro ",
							" C #define __TCPIP_MANAGER_H_ ",
							" Description This is macro __TCPIP_MANAGER_H_ ",
							" TCPIP_NET_HANDLE Type ",
							" C typedef const void* TCPIP_NET_HANDLE; ",
							" Description Type: TCPIP_NET_HANDLE Definition of the network handle which clients use to get access to control the interfaces ",
							" TCPIP_EVENT Enumeration ",
							" C typedef enum { TCPIP_EV_NONE = 0x0000 TCPIP_EV_RX_PKTPEND = 0x0001 TCPIP_EV_RX_OVFLOW = 0x0002 TCPIP_EV_RX_BUFNA = 0x0004 TCPIP_EV_RX_ACT = 0x0008 TCPIP_EV_RX_DONE = 0x0010 TCPIP_EV_RX_FWMARK = 0x0020 TCPIP_EV_RX_EWMARK = 0x0040 TCPIP_EV_RX_BUSERR = 0x0080 TCPIP_EV_TX_DONE = 0x0100 TCPIP_EV_TX_ABORT = 0x0200 TCPIP_EV_TX_BUSERR = 0x0400 TCPIP_EV_CONN_ESTABLISHED = 0x0800 TCPIP_EV_CONN_LOST = 0x1000 TCPIP_EV_RX_ALL = (TCPIP_EV_RX_PKTPEND|TCPIP_EV_RX_OVFLOW|TCPIP_EV_RX_BUFNA|TCPIP_EV_RX_ACT| TCPIP_EV_RX_DONE|TCPIP_EV_RX_FWMARK|TCPIP_EV_RX_EWMARK|TCPIP_EV_RX_BUSERR) TCPIP_EV_TX_ALL = (TCPIP_EV_TX_DONE|TCPIP_EV_TX_ABORT|TCPIP_EV_TX_BUSERR) TCPIP_EV_RXTX_ERRORS = (TCPIP_EV_RX_OVFLOW|TCPIP_EV_RX_BUFNA|TCPIP_EV_RX_BUSERR| TCPIP_EV_TX_ABORT|TCPIP_EV_TX_BUSERR) TCPIP_EV_CONN_ALL = (TCPIP_EV_CONN_ESTABLISHED|TCPIP_EV_CONN_LOST) } TCPIP_EVENT; ",
							" Description TCPIP stack events codes This enumeration defines all the possible events that can be reported by the TCPIP stack These are events received by the stack from the network interfaces They are reported by the MAC driver of the network interface ",
							" Members Members Description TCPIP_EV_NONE = 0x0000 No event TCPIP_EV_RX_PKTPEND = 0x0001 A receive packet is pending TCPIP_EV_RX_OVFLOW = 0x0002 RX FIFO overflow (system level latency no descriptors etc ) TCPIP_EV_RX_BUFNA = 0x0004 No RX descriptor available to receive a new packet TCPIP_EV_RX_ACT = 0x0008 There's RX data available TCPIP_EV_RX_DONE = 0x0010 A packet was successfully received TCPIP_EV_RX_FWMARK = 0x0020 The number of received packets is = than the RX full watermark TCPIP_EV_RX_EWMARK = 0x0040 The number of received packets is = than the RX empty watermark TCPIP_EV_RX_BUSERR = 0x0080 A buss error encountered during an RX transfer TCPIP_EV_TX_DONE = 0x0100 A packet was transmitted and its status is available TCPIP_EV_TX_ABORT = 0x0200 A TX packet was aborted by the MAC (jumbo/system under-run/excessive defer/late collision/excessive collisions) TCPIP_EV_TX_BUSERR = 0x0400 A bus error encountered during a TX transfer TCPIP_EV_CONN_ESTABLISHED = 0x0800 Connection established TCPIP_EV_CONN_LOST = 0x1000 Connection lost TCPIP_EV_RX_ALL = (TCPIP_EV_RX_PKTPEND TCPIP_EV_RX_OVFLOW TCPIP_EV_TX_ALL = (TCPIP_EV_TX_DONE TCPIP_EV_TX_ABORT TCPIP_EV_RXTX_ERRORS = (TCPIP_EV_RX_OVFLOW TCPIP_EV_RX_BUFNA TCPIP_EV_CONN_ALL = (TCPIP_EV_CONN_ESTABLISHED TCPIP_EV_CONN_LOST) ",
							" Remarks Depending on the type of the hardware interface no all events are possible Not that specific interfaces can offer specific events and ufnctions to retrieve those events ",
							" TCPIP_Helper_Base64Decode Function ",
							" C uint16_t TCPIP_Helper_Base64Decode( const uint8_t* sourceData uint16_t sourceLen uint8_t* destData uint16_t destLen ); ",
							" Description Decodes a base-64 array to its literal representation ",
							" Preconditions sourceData destData - valid pointers ",
							" Parameters Parameters Description sourceData Pointer to a string of base-64 encoded data sourceLen Length of the base-64 source data Maximum length that can be written to destData  destData Pointer to write the decoded data ",
							" Returns Number of decoded bytes written to destData  ",
							" Remarks This function will ignore invalid base-64 characters (CR LF etc) If sourceData is equal to destData the data will be converted in-place If sourceData is not equal to destData but the regions overlap the behavior is undefined Decoded data size is 3/4 the size of the encoded source data ",
							" TCPIP_Helper_Base64Encode Function ",
							" C uint16_t TCPIP_Helper_Base64Encode( const uint8_t* sourceData uint16_t sourceLen uint8_t* destData uint16_t destLen ); ",
							" Description This function encodes a binary array to base-64 ",
							" Preconditions sourceData destData - valid pointers ",
							" Parameters Parameters Description sourceData Pointer to a string of binary data sourceLen Length of the binary source data destData Pointer to write the base-64 encoded data destLen Maximum length that can be written to destData  ",
							" Returns Number of encoded bytes written to destData This will always be a multiple of 4 ",
							" Remarks Encoding cannot be performed in-place If sourceData overlaps with destData the behavior is undefined The source data is padded with 1 or 2 bytes if needed to make the source size a multiple of 3 bytes Then for each 3 bytes tuple in the source 4 output bytes are generated The output size needed is pad(sourceLen) * 4 / 3 bytes ",
							" TCPIP_Helper_FormatNetBIOSName Function ",
							" C void TCPIP_Helper_FormatNetBIOSName( uint8_t Name[] ); ",
							" Description This function formats a string to a valid NetBIOS name Names will be exactly 16 characters as defined by the NetBIOS spec The 16th character will be a 0x00 byte while the other 15 will be the provided string padded with spaces as necessary ",
							" Preconditions Name - valid pointer to a 16 byte area to be populated ",
							" Parameters Parameters Description Name The string to format as a NetBIOS name This parameters must have at least 16 bytes allocated ",
							" Returns None ",
							" TCPIP_Helper_htonl Function ",
							" C TCPIP_Helper_htonl( uint32_t hLong ); ",
							" Description This is function TCPIP_Helper_htonl ",
							" TCPIP_Helper_htonll Function ",
							" C TCPIP_Helper_htonll( uint64_t hLLong ); ",
							" Description This is function TCPIP_Helper_htonll ",
							" TCPIP_Helper_htons Function ",
							" C TCPIP_Helper_htons( uint16_t hShort ); ",
							" Description This is function TCPIP_Helper_htons ",
							" TCPIP_Helper_IPAddressToString Function ",
							" C bool TCPIP_Helper_IPAddressToString( const IPV4_ADDR* IPAddress char* buff size_t buffSize ); ",
							" Description This function converts IPV4_ADDR to a dotted-quad decimal IP address string ",
							" Preconditions None ",
							" Parameters Parameters Description IPAddress Pointer to IPV4_ADDR to convert buff Buffer to store the converted dotted-quad IP address string buffSize Buffer size ",
							" Returns True - An IP address was successfully converted False - IP Address == 0 or buff == 0 or supplied buffer was not large enough | ",
							" Remarks None ",
							" TCPIP_Helper_IPv6AddressToString Function ",
							" C bool TCPIP_Helper_IPv6AddressToString( const IPV6_ADDR * addr char* buff size_t buffSize ); ",
							" Description This function converts an IPV6_ADDR to a text representation of an IPv6 address ",
							" Preconditions None ",
							" Parameters Parameters Description addr Pointer to IPV6_ADDR to convert buff Pointer to a buffer to store the text representation buffSize Buffer size ",
							" Returns True - An IPv6 address was successfully converted False - addr == 0 or buffer == 0 or supplied buffer was not large enough ",
							" Remarks None ",
							" TCPIP_Helper_IsBcastAddress Function ",
							" C TCPIP_Helper_IsBcastAddress( const IPV4_ADDR* IPAddress ); ",
							" Description This is function TCPIP_Helper_IsBcastAddress ",
							" TCPIP_Helper_IsMcastAddress Function ",
							" C TCPIP_Helper_IsMcastAddress( const IPV4_ADDR* IPAddress ); ",
							" Description This is function TCPIP_Helper_IsMcastAddress ",
							" TCPIP_Helper_IsPrivateAddress Function ",
							" C bool TCPIP_Helper_IsPrivateAddress( uint32_t ipv4Address ); ",
							" Description This function checks if the passed in IPv4 address is a private or a routable address ",
							" Preconditions None ",
							" Parameters Parameters Description ipv4Address IPv4 address to check network order ",
							" Returns True - The IPv4 address is a private address False - The IPv4 address is a routable address ",
							" Remarks None ",
							" TCPIP_Helper_MACAddressToString Function ",
							" C bool TCPIP_Helper_MACAddressToString( const TCPIP_MAC_ADDR* macAddr char* buff size_t buffSize ); ",
							" Description This function will convert a MAC address to a string representation ",
							" Preconditions None ",
							" Parameters Parameters Description macAddr Pointer to address to convert buff Buffer to store the string representation buffSize Size of the buffer ",
							" Returns True - A MAC address was successfully decoded False - macAddr == 0 or buff == 0 or supplied buffer was not large enough or the format was incorrect ",
							" Remarks None ",
							" TCPIP_Helper_ntohl Macro ",
							" C #define TCPIP_Helper_ntohl(n) TCPIP_Helper_htonl(n) ",
							" Description This is macro TCPIP_Helper_ntohl ",
							" TCPIP_Helper_ntohl Function ",
							" C uint32_t TCPIP_Helper_ntohl( uint32_t nLong ); ",
							" Description defined(__mips__) ",
							" TCPIP_Helper_ntohll Function ",
							" C TCPIP_Helper_ntohll( uint64_t nLLong ); ",
							" Description This is a function TCPIP_Helper_ntohll ",
							" TCPIP_Helper_ntohll Macro ",
							" C #define TCPIP_Helper_ntohll(ll) TCPIP_Helper_htonll(ll) ",
							" Description This is macro TCPIP_Helper_ntohll ",
							" TCPIP_Helper_ntohs Function ",
							" C uint16_t TCPIP_Helper_ntohs( uint16_t nShort ); ",
							" Description This is a function TCPIP_Helper_ntohs ",
							" TCPIP_Helper_htohs Macro ",
							" C #define TCPIP_Helper_ntohs(n) TCPIP_Helper_htons(n) ",
							" Description This is macro TCPIP_Helper_ntohs ",
							" TCPIP_Helper_SecurePortGetByIndex Function ",
							" C uint16_t TCPIP_Helper_SecurePortGetByIndex( int index bool streamSocket int* pnIndexes ); ",
							" Description This function returns the secure TCP/UDP port situated at the internal port table requested index It also returns the number of indexes currently in the table ",
							" Preconditions TCP/IP stack properly initialized ",
							" Parameters Parameters Description index The port index to query 0 should always be a valid index streamSocket If true a stream/TCP port is queried Else a datagram/UDP port is queried pnIndexes Pointer to store the number of indexes that the table currently has Could be NULL if not needed ",
							" Returns A port number corresponding to the required index 0 if the corresponding slot is free or the port is not associated with the requested stream/datagram flag ",
							" Remarks None ",
							" TCPIP_Helper_SecurePortSet Function ",
							" C bool TCPIP_Helper_SecurePortSet( uint16_t port bool streamSocket bool isSecure ); ",
							" Description This function sets the internal data for deciding if the required port is a secure port or not A secure port is one that requires secure connections The TCP/IP internally maintained table with the ports that require secure connections is manipulated with this function This table can be queried using the TCPIP_Helper_TCPSecurePortGet() function ",
							" Preconditions TCP/IP stack properly initialized ",
							" Parameters Parameters Description port The TCP/UDP port to set streamSocket If true a stream/TCP port is queried Else a datagram/UDP port is queried isSecure If true the port is set as requiring secure connection If false the port is set as not requiring a secure connection and it will be removed from the secure ports table ",
							" Returns True - The port status successfully changed False - The port status could not be changed (no more slots in the table port not found etc ) ",
							" Remarks Currently there is no protection for multiple threads accessing and modifying the entries in the secure port table It is thus recommended that the updates to the table occur justs once at initialization time and after that all threads perform read-only accesses ",
							" TCPIP_Helper_StringToIPAddress Function ",
							" C bool TCPIP_Helper_StringToIPAddress( const char* str IPV4_ADDR* IPAddress ); ",
							" Description This function parses a dotted-quad decimal IP address string into an IPV4_ADDR struct The output result is big-endian ",
							" Preconditions IP Address - a valid pointer to an IPV4_ADDR ",
							" Parameters Parameters Description str Pointer to a dotted-quad IP address string IPAddress Pointer to IPV4_ADDR in which to store the result ",
							" Returns True - An IP address was successfully decoded False - Pointer to IPV4_ADDR in which to store the result ",
							" Remarks If str == NULL or strlen(str) == 0 the result will be address 0 ",
							" TCPIP_Helper_StringToIPv6Address Function ",
							" C bool TCPIP_Helper_StringToIPv6Address( const char * str IPV6_ADDR * addr ); ",
							" Description This function parses the text representation of an IPv6 address to an IPV6_ADDR struct The output result is big-endian ",
							" Preconditions addr - valid pointer to an IPV6 address ",
							" Parameters Parameters Description str Pointer to an RFC3513 Section 2 2 text representation of an IPv6 address ",
							" Returns If str == NULL or strlen(str) == 0 the result will be address 0 ",
							" Remarks 1111:2222:3333:4444:5555:6666:AAAA:FFFF 1111:2222::FFFF 1111:2222:3333:4444:5555:6666:192 168 1 20 addr - Pointer to IPV6_ADDR in which to store the result ",
							" TCPIP_Helper_StringToMACAddress Function ",
							" C bool TCPIP_Helper_StringToMACAddress( const char* str uint8_t macAddr[6] ); ",
							" Description This function parses a MAC address string \"aa:bb:cc:dd:ee:ff\" or \"aa-bb-cc-dd-ee-ff\" into an hex MAC address ",
							" Preconditions macAddr - valid pointer to a 6 byte MAC address field ",
							" Parameters Parameters Description str Pointer to a colon separated MAC address string macAddr Pointer to buffer to store the result ",
							" Returns True - A MAC address was successfully decoded False - No MAC address could be found of the format was incorrect ",
							" Remarks If str == NULL or strlen(str) == 0 the result will be address 0 ",
							" TCPIP_Helper_TCPSecurePortGet Function ",
							" C bool TCPIP_Helper_TCPSecurePortGet( uint16_t tcpPort ); ",
							" Description This function checks the internal data for detecting if the required TCP port is a secure port or not A secure port is one that requires secure connections The TCP/IP stack maintains an internal table with the ports that require secure connections This table can be maintained using the TCPIP_Helper_SecurePortSe() function ",
							" Preconditions TCP/IP stack properly initialized ",
							" Parameters Parameters Description tcpPort The TCP port to query ",
							" Returns True - If the port is a secure connection port False - If port is not secure (the port is not found in the internal secure ports table) ",
							" Remarks The TCP/IP stack populates the internal secure port table with default values as part of the stack power up procedure The table is not re-initialized when the stack is brought down and then restarted ",
							" TCPIP_Helper_UDPSecurePortGet Function ",
							" C bool TCPIP_Helper_UDPSecurePortGet( uint16_t udpPort ); ",
							" Description This function checks the internal data for detecting if the required UDP port is a secure port or not A secure port is one that requires secure connections The TCP/IP stack maintains an internal table with the ports that require secure connections This table can be maintained using the TCPIP_Helper_SecurePortSe() function ",
							" Preconditions TCP/IP stack properly initialized ",
							" Parameters Parameters Description udpPort The UDP port to query ",
							" Returns True - If the port is a secure connection port False - If port is not secure (the port is not found in the internal secure ports table) ",
							" Remarks The TCP/IP stack populates the internal secure port table with default values as part of the stack power up procedure The table is not re-initialized when the stack is brought down and then restarted ",
							" TCPIP_MODULE_SIGNAL Enumeration ",
							" C typedef enum { TCPIP_MODULE_SIGNAL_NONE = 0x0000 TCPIP_MODULE_SIGNAL_RX_PENDING = 0x0001 TCPIP_MODULE_SIGNAL_TMO = 0x0002 TCPIP_MODULE_SIGNAL_INTERFACE_CONFIG = 0x0004 TCPIP_MODULE_SIGNAL_INTERFACE_CHANGE = 0x0008 TCPIP_MODULE_SIGNAL_ASYNC = 0x0100 TCPIP_MODULE_SIGNAL_MASK_ALL = (TCPIP_MODULE_SIGNAL_RX_PENDING | TCPIP_MODULE_SIGNAL_TMO | TCPIP_MODULE_SIGNAL_INTERFACE_CONFIG | TCPIP_MODULE_SIGNAL_INTERFACE_CHANGE) } TCPIP_MODULE_SIGNAL; ",
							" Description Enumeration: TCPIP_MODULE_SIGNAL These signals are generated by the stack manager towards the internal stack modules; A stack app could use them to provide wake up conditions for a thread waiting for a signal to occur This is mainly useful when the stack module's tasks functions are executed at the app level and the app needs a way to identify that a module needs attention ",
							" Preconditions None ",
							" Parameters Parameters Description TCPIP_MODULE_SIGNAL_NONE = 0x0000 No pending signal TCPIP_MODULE_SIGNAL_RX_PENDING = 0x0001 RX packet pending for processing TCPIP_MODULE_SIGNAL_TMO = 0x0002 Module timeout has occurred for modules that implement a state machine advancing on timer signals TCPIP_MODULE_SIGNAL_INTERFACE_CONFIG = 0x0004 Interface entered the configuration mode interface is not ready to use Address could change as a result of this configuration The signal parameter carries the interface mask: 1 if index occurs for modules that maintain connected sockets depending on the interface address: UDP and TCP TCPIP_MODULE_SIGNAL_INTERFACE_CHANGE = 0x0008 Interface address change Interface is out of configuration mode and ready Address could have changed Occurs for modules that maintain connected sockets depending on the interface address: UDP and TCP ARP module Also processes the signal The signal parameter carries the interface mask: 1 if index TCPIP_MODULE_SIGNAL_ASYNC = 0x0100 Special signals module Asynchronous attention required This is a signal that's requested by modules that need special attention Module is required to clear this flag when out of the critical processing TCPIP_MODULE_SIGNAL_MASK_ALL = (TCPIP_MODULE_SIGNAL_RX_PENDING TCPIP_MODULE_SIGNAL_TMO ",
							" Returns None ",
							" Remarks Multiple signals could be ORed Only 16-bit values are maintained for this type of signal ",
							" TCPIP_MODULE_SIGNAL_FUNC Type ",
							" C typedef void (* TCPIP_MODULE_SIGNAL_FUNC)(TCPIP_MODULE_SIGNAL_HANDLE sigHandle TCPIP_STACK_MODULE moduleId TCPIP_MODULE_SIGNAL signal uintptr_t signalParam); ",
							" Description TCPIP module signal function Pointer to a function that will be called from within the TCP/IP stack when a signal is delivered to a stack module ",
							" Preconditions None ",
							" Parameters Parameters Description sigHandle Signal handle obtained from a registration call moduleId Module that receives the signal signal The occurring signal ",
							" Returns None ",
							" Remarks This function should be kept as short as possible and it should not include blocking or polling code It is for setting flags/signaling purposes only ",
							" TCPIP_MODULE_SIGNAL_HANDLE Type ",
							" C typedef const void* TCPIP_MODULE_SIGNAL_HANDLE; ",
							" Description Type: TCPIP_MODULE_SIGNAL_HANDLE Definition of a signal function handle used for signal registration by the stack clients ",
							" TCPIP_MODULE_SignalFunctionDeregister Function ",
							" C bool TCPIP_MODULE_SignalFunctionDeregister( TCPIP_MODULE_SIGNAL_HANDLE signalHandle ); ",
							" Description This function deregisters a previous signal function The caller will no longer be notified of stack internal signals ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_Ready signalHandle - a valid signal handle ",
							" Parameters Parameters Description signalHandle Signal handle obtained from a registration call ",
							" Returns True - If the operation succeeded False - If the operation failed (i e no such module invalid handle etc ) ",
							" Remarks See the remarks for TCPIP_MODULE_SignalFunctionRegister() ",
							" Example void appSignalFunc(TCPIP_STACK_MODULE moduleId TCPIP_MODULE_SIGNAL signal) { // process incoming signal for the incoming module } TCPIP_MODULE_SIGNAL_HANDLE signalH = TCPIP_MODULE_SignalFunctionRegister( TCPIP_MODULE_HTTP_SERVER appSignalFunc); // when done with this signal notification TCPIP_MODULE_SignalFunctionDeregister(signalH); ",
							" TCPIP_MODULE_SignalFunctionRegister Function ",
							" C TCPIP_MODULE_SIGNAL_HANDLE TCPIP_MODULE_SignalFunctionRegister( TCPIP_STACK_MODULE moduleId TCPIP_MODULE_SIGNAL_FUNC signalF ); ",
							" Description This function registers a new signal function This function will be called and the user notified when a stack internal signal occurs ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_Ready ",
							" Parameters Parameters Description moduleId Module ID signalF Signal function to be called when an internal signal occurs ",
							" Returns valid handle - If the operation succeeded 0/invalid handle - If the operation failed (i e no such module invalid handle etc ) ",
							" Remarks There is currently no support for multiple signal functions Each module supports just one signal function A call to register a new module signal function will fail if a function is already registered TCPIP_MODULE_SignalFunctionDeregister() needs to be called first By default all stack modules including the stack manager (TCPIP_MODULE_MANAGER()) are initialized with a null signal function Explicit call is needed for setting a module signal function A signal handler can be registered for the stack manager itself (TCPIP_MODULE_MANAGER()) This will report RX and TMO signals The stack internal signaling mechanism is always active and cannot be disabled This function is called on top of the normal stack signaling mechanism for a module that has a registered signal function ",
							" Example void appSignalFunc(TCPIP_STACK_MODULE moduleId TCPIP_MODULE_SIGNAL signal uintptr_t signalParam) { // process incoming signal for the incoming module } TCPIP_MODULE_SIGNAL_HANDLE signalH = TCPIP_MODULE_SignalFunctionRegister( TCPIP_MODULE_HTTP_SERVER appSignalFunc); ",
							" TCPIP_MODULE_SignalGet Function ",
							" C TCPIP_MODULE_SIGNAL TCPIP_MODULE_SignalGet( TCPIP_STACK_MODULE moduleId ); ",
							" Description This function provides a read only value of the current signals for a stack module ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_Ready ",
							" Parameters Parameters Description moduleId Module ID ",
							" Returns The current value of the module's signals ",
							" Remarks The signals are processed and cleared inside the stack It is not possible to clear a signal that's pending using this API ",
							" Example TCPIP_MODULE_SIGNAL currSIgnal = TCPIP_MODULE_SignalGet(TCPIP_MODULE_HTTP_SERVER); ",
							" TCPIP_NET_HANDLE Type ",
							" C typedef const void* TCPIP_NET_HANDLE; ",
							" Description Type: TCPIP_NET_HANDLE Definition of the network handle which clients use to get access to control the interfaces ",
							" TCPIP_NETWORK_TYPE Enumeration ",
							" C typedef enum { TCPIP_NETWORK_TYPE_UNKNOWN TCPIP_NETWORK_TYPE_PRIMARY TCPIP_NETWORK_TYPE_ALIAS } TCPIP_NETWORK_TYPE; ",
							" Description Enumeration: TCPIP_NETWORK_TYPE Currently the network interfaces can be primary and aliases A primary interface is a regular network interface that uses its own physical interface having its own MAC driver ",
							" Members Members Description TCPIP_NETWORK_TYPE_UNKNOWN Unknown/invalid type TCPIP_NETWORK_TYPE_PRIMARY Primary interface TCPIP_NETWORK_TYPE_ALIAS Alias interface ",
							" Example PIC32INT ENC24J600 MRF24WN WINC1500 WILC1000 etc An alias interface is an interface that shares the same physical network interface with a primary (regular) interface including the MAC driver Alias interfaces may have different parameters though for example different IP addresses Support for alias interfaces must be enabled when the stack is built ",
							" TCPIP_STACK_Deinitialize Function ",
							" C void TCPIP_STACK_Deinitialize( SYS_MODULE_OBJ object ); ",
							" Description This function performs the deinitialization of the TCP/IP stack All allocated resources are released ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() ",
							" Parameters Parameters Description object Object handle returned by TCPIP_STACK_Initialize() ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_STACK_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_STACK_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_EVENT const void* fParam); ",
							" Description TCPIP event notification handler pointer Pointer to a function that may be called from within an ISR when a TCP/IP event is available ",
							" Preconditions None ",
							" Parameters Parameters Description hNet Network handle tcpEvent ORed mask of events that occurred fParam User passed parameter ",
							" Returns None ",
							" Remarks This function may be invoked from within an ISR It should be kepy as short as possible and it should not include blocking or polling code ",
							" TCPIP_STACK_EventsPendingGet Function ",
							" C TCPIP_EVENT TCPIP_STACK_EventsPendingGet( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the currently pending events Multiple events can be ORed together as they accumulate ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description hNet Network handle ",
							" Returns The currently TCP/IP pending events ",
							" Remarks This is the preferred method to get the current pending stack events Even with a notification handler in place it's better to use this function to get the current pending events The returned value is just a momentary value The pending events can change any time If the hNet refers to an alias interface the events of the primary interface are returned ",
							" Example TCPIP_EVENT currEvents = TCPIP_STACK_EventsPendingGet( hNet); ",
							" TCPIP_STACK_HandlerDeregister Function ",
							" C bool TCPIP_STACK_HandlerDeregister( TCPIP_EVENT_HANDLE hEvent ); ",
							" Description This function removes an event notification handler ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_Ready ",
							" Parameters Parameters Description hEvent TCPIP event handle obtained by a call to TCPIP_STACK_HandlerRegister ",
							" Returns True - If the operation succeeded False - If the operation failed ",
							" Remarks None ",
							" Example TCPIP_EVENT_HANDLE myHandle = TCPIP_STACK_HandlerRegister( hNet TCPIP_EV_CONN_ALL myEventHandler myParam ); // do something else // now we're done with it TCPIP_STACK_HandlerDeregister(myHandle); ",
							" TCPIP_STACK_HandlerRegister Function ",
							" C TCPIP_EVENT_HANDLE TCPIP_STACK_HandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_EVENT evMask TCPIP_STACK_EVENT_HANDLER notifyHandler const void* notifyfParam ); ",
							" Description This function sets a new event notification handler The caller can use the handler to be notified of stack events ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_Ready The network interface should be up and running ",
							" Parameters Parameters Description hNet Network handle evMask Mask of events to be notified of notifyHandler The event notification handler notifyfParam Notification handler parameter ",
							" Returns A valid TCPIP_EVENT_HANDLE - If the operation succeeded NULL - If the operation failed ",
							" Remarks The notification handler may be called from the ISR which detects the corresponding event The event notification handler has to be kept as short as possible and non-blocking Without a notification handler the stack user can still call TCPIP_STACK_GetPending() to see if processing by the stack needed Currently only a primary interface can report events The call will fail if the specified network is an alias ",
							" Example TCPIP_EVENT_HANDLE myHandle = TCPIP_STACK_HandlerRegister( hNet TCPIP_EV_CONN_ALL myEventHandler myParam ); ",
							" TCPIP_STACK_HEAP_CONFIG Structure ",
							" C typedef struct { TCPIP_STACK_HEAP_TYPE heapType; TCPIP_STACK_HEAP_FLAGS heapFlags; TCPIP_STACK_HEAP_USAGE heapUsage; void* (* malloc_fnc)(size_t bytes); void* (* calloc_fnc)(size_t nElems size_t elemSize); void (* free_fnc)(void* ptr); } TCPIP_STACK_HEAP_CONFIG; ",
							" Description TCP/IP heap configuration data This data type defines the data required to intialize the TCP/IP stack heap ",
							" Members Members Description heapType Type of this heap: TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP TCPIP_STACK_HEAP_TYPE_EXTERNAL_HEAP etc heapFlags Heap creation flags heapUsage The usage intended for (* malloc_fnc)(size_t bytes) Malloc style allocation function (* calloc_fnc)(size_t nElems size_t elemSize) Calloc style allocation function (* free_fnc)(void* ptr) Free style allocation function ",
							" Remarks The TCPIP_STACK_HEAP_FLAG_ALLOC_UNCACHED heap flag will be internally set as needed The heapUsage field is currently not used but it's reserved for further development The malloc_fnc/calloc_fnc/free_fnc are used to allocate the heap objects themselves plus the actual heap space (for internal and pool heap types) For the external heap type these functions are directly used to perform the memory allocation operations ",
							" TCPIP_STACK_HEAP_EXTERNAL_CONFIG Structure ",
							" C typedef struct { TCPIP_STACK_HEAP_TYPE heapType; TCPIP_STACK_HEAP_FLAGS heapFlags; TCPIP_STACK_HEAP_USAGE heapUsage; void* (* malloc_fnc)(size_t bytes); void* (* calloc_fnc)(size_t nElems size_t elemSize); void (* free_fnc)(void* ptr); } TCPIP_STACK_HEAP_EXTERNAL_CONFIG; ",
							" Description External heap configuration data This data type defines the data required to intialize the TCP/IP stack external heap ",
							" Members Members Description heapType Type of this heap: TCPIP_STACK_HEAP_TYPE_EXTERNAL_HEAP heapFlags Heap creation flags TCPIP_STACK_HEAP_FLAG_ALLOC_UNCACHED will be always internally set TCPIP_STACK_HEAP_FLAG_NO_MTHREAD_SYNC should be cleared if the external heap functions provide multi-threaded synchronization Should be set if the synchronization needs to be provided by the TCP/IP heap implementation TCPIP_STACK_HEAP_FLAG_ALLOC_UNALIGN should be set if the external heap functions provide cache line aligned buffers heapUsage Currently not used (* malloc_fnc)(size_t bytes) Malloc style function to be called when allocation is needed (* calloc_fnc)(size_t nElems size_t elemSize) Calloc style function to be called when allocation is needed (* free_fnc)(void* ptr) Free style function for releasing the allocated memory ",
							" Remarks Due to the internal alignment restrictions the externally supplied calloc function is not currently used Instead a less efficient approach is taken: the malloc function is used and the resulted buffer is zeroed out ",
							" TCPIP_STACK_HEAP_FLAGS Enumeration ",
							" C typedef enum { TCPIP_STACK_HEAP_FLAG_NONE = 0x00 TCPIP_STACK_HEAP_FLAG_ALLOC_UNCACHED = 0x01 TCPIP_STACK_HEAP_FLAG_NO_MTHREAD_SYNC = 0x02 TCPIP_STACK_HEAP_FLAG_ALLOC_UNALIGN = 0x04 TCPIP_STACK_HEAP_FLAG_POOL_STRICT = 0x08 TCPIP_STACK_HEAP_FLAG_NO_WARN_MESSAGE = 0x10 } TCPIP_STACK_HEAP_FLAGS; ",
							" Description Enumeration: TCPIP_STACK_HEAP_FLAGS Defines the flags supported by a TCP/IP heap creation function ",
							" Members Members Description TCPIP_STACK_HEAP_FLAG_ALLOC_UNCACHED = 0x01 The heap needs to provide non-cached buffers Default is enabled TCPIP_STACK_HEAP_FLAG_NO_MTHREAD_SYNC = 0x02 TCPIP_STACK_HEAP_TYPE_EXTERNAL_HEAP type specific flag: when external heap functions are used this flag suppresses the multi-threaded synchronization directives and assumes that the protection is done by the external heap manager Default is disabled TCPIP_STACK_HEAP_FLAG_ALLOC_UNALIGN = 0x04 TCPIP_STACK_HEAP_TYPE_EXTERNAL_HEAP type specific flag: when external heap functions are used this flag suppresses the internal implementation of buffer alignment required by the TCP/IP stack Therefore the external allocation functions need to provide aligned buffers (usually on the cache line on cached platforms) The allocation function will return failure if the flag is turned on and the returned buffer is not properly aligned Default is disabled TCPIP_STACK_HEAP_FLAG_POOL_STRICT = 0x08 TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP_POOL type specific flag: If the strict flag is enabled the allocation will be tried strictly from the pool entry that matches the requested size Otherwise all the pool entries that have blocks larger than the requested size will be tried TCPIP_STACK_HEAP_FLAG_NO_WARN_MESSAGE = 0x10 When debugging is enabled do not issue a warning when a memory allocation operation fails Default is disabled ",
							" Remarks New flags could be added in the future 16-bit only flags supported ",
							" TCPIP_STACK_HEAP_FreeSize Function ",
							" C size_t TCPIP_STACK_HEAP_FreeSize( TCPIP_STACK_HEAP_HANDLE heapH ); ",
							" Description This function returns the size of the space currently available in the heap ",
							" Preconditions heapH - valid heap handle ",
							" Parameters Parameters Description heapH Handle to a heap ",
							" Returns The size of the available space in the heap ",
							" Remarks None ",
							" TCPIP_STACK_HEAP_HANDLE Type ",
							" C typedef const void* TCPIP_STACK_HEAP_HANDLE; ",
							" Description Type: TCPIP_STACK_HEAP_HANDLE Definition of the heap handle which clients use to get access to heap statistics functions ",
							" Remarks None ",
							" TCPIP_STACK_HEAP_HighWatermark Function ",
							" C size_t TCPIP_STACK_HEAP_HighWatermark( TCPIP_STACK_HEAP_HANDLE heapH ); ",
							" Description The function returns the maximum amount of memory that's been allocated from the head since the heap was created ",
							" Preconditions heapH - valid heap handle ",
							" Parameters Parameters Description heapH Handle to a heap ",
							" Returns The maximum allocated memory from the heap ",
							" Remarks None ",
							" TCPIP_STACK_HEAP_INTERNAL_CONFIG Structure ",
							" C typedef struct { TCPIP_STACK_HEAP_TYPE heapType; TCPIP_STACK_HEAP_FLAGS heapFlags; TCPIP_STACK_HEAP_USAGE heapUsage; void* (* malloc_fnc)(size_t bytes); void* (* calloc_fnc)(size_t nElems size_t elemSize); void (* free_fnc)(void* ptr); size_t heapSize; } TCPIP_STACK_HEAP_INTERNAL_CONFIG; ",
							" Description Internal heap configuration data This data type defines the data required to initialize the TCP/IP stack internal heap ",
							" Preconditions None ",
							" Members Members Description heapType Type of this heap: TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP heapFlags Heap creation flags TCPIP_STACK_HEAP_FLAG_ALLOC_UNCACHED will be always internally set heapUsage Currently not used (* malloc_fnc)(size_t bytes) Malloc style function for allocating the internal heap itself (* calloc_fnc)(size_t nElems size_t elemSize) Calloc style function for allocating the internal heap itself (* free_fnc)(void* ptr) Free style function for releasing the allocated internal heap heapSize Size of the internal heap to be created and maintained ",
							" Remarks None ",
							" TCPIP_STACK_HEAP_LastError Function ",
							" C TCPIP_STACK_HEAP_RES TCPIP_STACK_HEAP_LastError( TCPIP_STACK_HEAP_HANDLE heapH ); ",
							" Description This function returns the last error encountered in a heap operation It clears the value of the last error variable ",
							" Preconditions heapH - valid heap handle ",
							" Parameters Parameters Description heapH Handle to a heap ",
							" Returns The last error encountered in an operation TCPIP_STACK_HEAP_RES_OK if no error occurred ",
							" Remarks The heap holds an error variable storing the last error encountered in an operation This should be consulted by the caller after each operation that returns an invalid result for checking what the error condition was ",
							" TCPIP_STACK_HEAP_MaxSize Function ",
							" C size_t TCPIP_STACK_HEAP_MaxSize( TCPIP_STACK_HEAP_HANDLE heapH ); ",
							" Description This function returns the maximum size of a block that can be currently allocated from this heap ",
							" Preconditions heapH - valid heap handle ",
							" Parameters Parameters Description heapH Handle to a heap ",
							" Returns The maximum size of a block that can be allocated from the heap ",
							" Remarks This is info only It can change if the heap has multiple clients The call could be expensive The entire heap has to be traversed to find the maximum If the heap is really fragmented this might take some time ",
							" TCPIP_STACK_HEAP_POOL_CONFIG Structure ",
							" C typedef struct { TCPIP_STACK_HEAP_TYPE heapType; TCPIP_STACK_HEAP_FLAGS heapFlags; TCPIP_STACK_HEAP_USAGE heapUsage; void* (* malloc_fnc)(size_t bytes); void* (* calloc_fnc)(size_t nElems size_t elemSize); void (* free_fnc)(void* ptr); uint16_t nPoolEntries; TCPIP_STACK_HEAP_POOL_ENTRY * pEntries; uint16_t expansionHeapSize; } TCPIP_STACK_HEAP_POOL_CONFIG; ",
							" Description This is structure TCPIP_STACK_HEAP_POOL_CONFIG ",
							" Preconditions None ",
							" Members Members Description heapType Type of this heap: TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP_POOL heapFlags Heap creation flags TCPIP_STACK_HEAP_FLAG_ALLOC_UNCACHED will be always internally set heapUsage No used (* malloc_fnc)(size_t bytes) Malloc style function for allocating the pool heap itself (* calloc_fnc)(size_t nElems size_t elemSize) Calloc style function for allocating the pool heap itself (* free_fnc)(void* ptr) Free style function for releasing the allocated pool heap nPoolEntries Number of pool entries that the pool will contain (this cannot be changed after the creation) pEntries Pointer to array of TCPIP_STACK_HEAP_POOL_ENTRY specifying each entry size and blocks expansionHeapSize Size of the heap to be allocated separately and used at run time for allocation of new blocks - in bytes This is heap space besides the size resulting from the pEntries array This expansionHeapSize block will be used for allocations on new blocks when an entry runs out of blocks and_nExpBlks_ = 0 ",
							" TCPIP_STACK_HEAP_POOL_ENTRY Structure ",
							" C typedef struct { uint16_t entrySize; uint16_t nBlocks; uint8_t nExpBlks; } TCPIP_STACK_HEAP_POOL_ENTRY; ",
							" Description Internal pool configuration data This data type defines the data required to initialize the TCP/IP stack internal memory pool ",
							" Preconditions None ",
							" Members Members Description entrySize Size of the blocks in this pool entry nBlocks Number of blocks to create for this entry nExpBlks Number of blocks to expand/allocate when an allocation in this entry failed ",
							" Remarks Pool entries should follow these 2 rules: They should have distincy block sizes: entrySize Multiple entries having the same entrySize is not supported Pool entries should have a non-zero block size Entries with 0 block size are not supported If these conditions are not observed the heap creation will fail To expand/dynamically allocate at run time the expansionHeapSize needs to be = 0; If nExpBlks == 0 then no allocation will be tried for this particular entry ",
							" TCPIP_STACK_HEAP_RES Enumeration ",
							" C typedef enum { TCPIP_STACK_HEAP_RES_OK = 0 TCPIP_STACK_HEAP_RES_INIT_ERR = -1 TCPIP_STACK_HEAP_RES_CREATE_ERR = -2 TCPIP_STACK_HEAP_RES_SYNCH_ERR = -3 TCPIP_STACK_HEAP_RES_BUFF_SIZE_ERR = -4 TCPIP_STACK_HEAP_RES_BUFF_ALIGN_ERR = -5 TCPIP_STACK_HEAP_RES_NO_MEM = -6 TCPIP_STACK_HEAP_RES_IN_USE = -7 TCPIP_STACK_HEAP_RES_PTR_ERR = -8 TCPIP_STACK_HEAP_RES_NO_HEAP = -9 TCPIP_STACK_HEAP_RES_SIZE_ERR = -10 } TCPIP_STACK_HEAP_RES; ",
							" Description Enumeration: TCPIP_STACK_HEAP_RES Defines the results that could be returned by the TCP/IP stack heap error function ",
							" Preconditions None ",
							" Members Members Description TCPIP_STACK_HEAP_RES_OK = 0 Everything OK TCPIP_STACK_HEAP_RES_INIT_ERR = -1 Invalid initialization data TCPIP_STACK_HEAP_RES_CREATE_ERR = -2 Could not create a heap TCPIP_STACK_HEAP_RES_SYNCH_ERR = -3 Could not create a synchronization object or synchronization error TCPIP_STACK_HEAP_RES_BUFF_SIZE_ERR = -4 Supplied heap buffer too small TCPIP_STACK_HEAP_RES_BUFF_ALIGN_ERR = -5 Supplied heap buffer not properly aligned TCPIP_STACK_HEAP_RES_NO_MEM = -6 Heap is out of memory TCPIP_STACK_HEAP_RES_IN_USE = -7 Heap in use cannot be deallocated TCPIP_STACK_HEAP_RES_PTR_ERR = -8 Corrupt pointer TCPIP_STACK_HEAP_RES_NO_HEAP = -9 No such heap exists TCPIP_STACK_HEAP_RES_SIZE_ERR = -10 This size cannot be allocated for a pool heap ",
							" Remarks New types could be added in the future Some results are relevant for specific heap types only ",
							" TCPIP_STACK_HEAP_Size Function ",
							" C size_t TCPIP_STACK_HEAP_Size( TCPIP_STACK_HEAP_HANDLE heapH ); ",
							" Description This function returns the size of the heap This is the size that was specified when the heap was created ",
							" Preconditions heapH - valid heap handle ",
							" Parameters Parameters Description heapH Handle to a heap ",
							" Returns The size of heap that was specified when it was created ",
							" Remarks None ",
							" TCPIP_STACK_HEAP_TYPE Enumeration ",
							" C typedef enum { TCPIP_STACK_HEAP_TYPE_NONE = 0 TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP_POOL TCPIP_STACK_HEAP_TYPE_EXTERNAL_HEAP TCPIP_STACK_HEAP_TYPES } TCPIP_STACK_HEAP_TYPE; ",
							" Description Enumeration: TCPIP_STACK_HEAP_TYPE Definition of the heap type which the TCP/IP stack uses for internal allocation Stack clients could use the type to get access to heap statistics functions ",
							" Preconditions None ",
							" Members Members Description TCPIP_STACK_HEAP_TYPE_NONE = 0 Invalid unknown heap type TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP Internally implemented heap Currently the default heap type The default internal memory heap consists of blocks of data that are allocated in chunks using a first fit algorithm Allocation and deallocation operations are reasonably fast However the allocation granularity is pretty good This type of heap can become fragmented over time There is no data maintained in this heap on a per client basis What this means is that it is OK to pass the heap handle to other clients (software modules) to use it TCPIP_STACK_HEAP_TYPE_INTERNAL_HEAP_POOL Internally implemented pool heap Very fast allocation and deallocation without fragmentation However the allocated chunks are fixed size so it can result in a not very efficient memory usage TCPIP_STACK_HEAP_TYPE_EXTERNAL_HEAP Externally maintained heap The heap is maintained externally and allocation is done using the supplied functions The TCP/IP stack heap can provide OSAL synchronization protection if needed TCPIP_STACK_HEAP_TYPES Number of supported heap types ",
							" Remarks New types could be added in the future ",
							" TCPIP_STACK_HEAP_USAGE Enumeration ",
							" C typedef enum { TCPIP_STACK_HEAP_USE_DEFAULT = 0x00 TCPIP_STACK_HEAP_USE_GENERIC = 0x01 TCPIP_STACK_HEAP_USE_PACKET = 0x02 TCPIP_STACK_HEAP_USE_SOCKET_TCP = 0x04 TCPIP_STACK_HEAP_USE_SOCKET_UDP = 0x08 TCPIP_STACK_HEAP_USE_POOL_UDP = 0x10 } TCPIP_STACK_HEAP_USAGE; ",
							" Description Enumeration: TCPIP_STACK_HEAP_USAGE Definition of the heap usage/purpose It defines what modules in the TCP/IP stack will use this heap ",
							" Preconditions None ",
							" Members Members Description TCPIP_STACK_HEAP_USE_DEFAULT = 0x00 Default heap usage TCPIP_STACK_HEAP_USE_GENERIC = 0x01 Generic heap usage TCPIP_STACK_HEAP_USE_PACKET = 0x02 Heap for packet allocations TCPIP_STACK_HEAP_USE_SOCKET_TCP = 0x04 Heap for TCP sockets TCPIP_STACK_HEAP_USE_SOCKET_UDP = 0x08 Heap for UDP sockets TCPIP_STACK_HEAP_USE_POOL_UDP = 0x10 Heap for UDP TX pool buffers ",
							" Remarks This is an advanced definition that is currently not used Multiple heaps usage will be added in the future For now only one heap type is supported and it is used for all allocation operations New usages could be eventually added Multiple usage flags can be simultaneously set ",
							" TCPIP_STACK_HeapHandleGet Function ",
							" C TCPIP_STACK_HEAP_HANDLE TCPIP_STACK_HeapHandleGet( TCPIP_STACK_HEAP_TYPE heapType int heapIndex ); ",
							" Description This function returns the current stack heap handle It provides access to the heap statistics and monitoring functions ",
							" Preconditions None ",
							" Parameters Parameters Description heapType Type of heap to request a handle for Currently only one type of heap is supported at run time heapIndex Index of the heap Used when multiple heaps of the same type are created Currently not used and it should be 0 ",
							" Returns A handle to the current TCP/IP stack heap of the requested type 0 if an error occurred ",
							" Remarks None ",
							" TCPIP_STACK_IndexToNet Function ",
							" C TCPIP_NET_HANDLE TCPIP_STACK_IndexToNet( int netIx ); ",
							" Description This function converts an interface number to a network interface handle ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netIx Interface index ",
							" Returns Network interface handle ",
							" Remarks None ",
							" TCPIP_STACK_Initialize Function ",
							" C SYS_MODULE_OBJ TCPIP_STACK_Initialize( const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init ); ",
							" Description This function initializes the stack If an error occurs the SYS_ERROR() is called and the function deinitializes itself ",
							" Preconditions None ",
							" Parameters Parameters Description index Index of the TCP/IP stack to be initialized init Pointer to initialization data It should be a TCPIP_STACK_INIT structure carrying the following data: - pNetConf - Pointer to an array of TCPIP_NETWORK_CONFIG to support - nNets - Number of network configurations in the array - pModConfig - Pointer to an array of TCPIP_STACK_MODULE_CONFIG - nModules - Number of modules to initialize ",
							" Returns Valid handle to a driver object if successful SYS_MODULE_OBJ_INVALID if initialization failed ",
							" Remarks This function must be called before any of the stack or its component routines are used New TCPIP_NETWORK_CONFIG types could be added/removed at run time for implementations that support dynamic network interface creation Only one instance of the TCP/IP stack can run in the system and the index parameter is irrelevant If this call is made after the stack is successfully initialized the current TCP/IP stack object handle will be returned ",
							" TCPIP_STACK_InitializeDataGet Function ",
							" C bool TCPIP_STACK_InitializeDataGet( SYS_MODULE_OBJ object TCPIP_STACK_INIT* pStackInit ); ",
							" Description This function returns the data that was used for the last call to the TCPIP_STACK_Initialize() ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Returns True - If the stack is up and running and the stack init data has been copied False - If the stack is down or an error has occurred ",
							" Remarks The stack does not make a persistent copy of the TCPIP_NETWORK_CONFIG and TCPIP_STACK_MODULE_CONFIG data that are passed in the TCPIP_STACK_INIT at the moment of the stack initialization It is up to the application to insure that the initialization data is still available after the TCPIP_STACK_Initialize() has been called if this API is used ",
							" Example TCPIP_STACK_INIT initData; TCPIP_STACK_InitializeDataGet(tcpipObject initData); ",
							" TCPIP_STACK_MACObjectGet Function ",
							" C const TCPIP_MAC_OBJECT* TCPIP_STACK_MACObjectGet( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the MAC driver object that's associated with the interface handle ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netH Interface handle to get the name of ",
							" Returns A valid MAC driver object pointer if success 0 if no such interface or there is no MAC object ",
							" Remarks The MAC driver object is the one that's passed at the stack/interface initialization The MAC driver is not a true multi-client driver Under normal circumstances the MAC driver has only one client the TCP/IP stack To have the TCPIP_MAC_Open() succeed after the MAC driver has been initialized by the TCP/IP stack the configuration symbol DRV_ETHMAC_CLIENTS_NUMBER has to be 1 But the returned handle is the same one that the TCP/IP stack uses Access to the MAC driver in this way is allowed mainly for debugging diagnostic and statistics purposes However it is possible to transmit packets this way But it's not possible to be signalled about incoming RX packets while the stack is running because only the TCP/IP dispatcher will be notified by the RX events ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"eth0\"); const TCPIP_MAC_OBJECT* pEthMacObject = TCPIP_STACK_MACObjectGet(netH); if(pEthMacObject = 0) { // valid MAC object pointer DRV_HANDLE hMac = (*pEthMacObject- TCPIP_MAC_Open)(pEthMacObject- macId DRV_IO_INTENT_READWRITE); if(hMac = DRV_HANDLE_INVALID) { // can use the MAC handle to access a MAC function TCPIP_MAC_RX_STATISTICS rxStatistics; TCPIP_MAC_TX_STATISTICS txStatistics; TCPIP_MAC_RES macRes = (*pEthMacObject- TCPIP_MAC_StatisticsGet)(hMac rxStatistics txStatistics); } } ",
							" TCPIP_STACK_ModuleConfigGet Function ",
							" C size_t TCPIP_STACK_ModuleConfigGet( TCPIP_STACK_MODULE modId void* configBuff size_t buffSize size_t* pNeededSize ); ",
							" Description This function returns the current configuration data of the stack module specified by the corresponding module ID ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description modId The ID that identifies the requested module configBuff Pointer to a buffer that will receive the configuration data If this pointer is 0 just the pNeededSize will be updated buffSize Size of the provided buffer pNeededSize Pointer to an address to store the number of bytes needed to store this module configuration data Can be NULL if not needed ",
							" Returns The number of bytes copied to the user buffer: -1 - If the module ID is invalid 0 - If the configBuff is NULL or buffSize is less than required 0 - If the call succeeded and the configuration was copied ",
							" Remarks Currently only the MAC modules implement this function ",
							" Example uint8_t configBuffer[200]; size_t configSize; size_t copiedSize; copiedSize = TCPIP_STACK_ModuleConfigGet(TCPIP_MODULE_MAC_MRF24WN configBuffer sizeof(configBuffer) configSize); ",
							" TCPIP_STACK_NetAddress Function ",
							" C uint32_t TCPIP_STACK_NetAddress( TCPIP_NET_HANDLE netH ); ",
							" Description If interface is enabled then the function will return the IPv4 address of the network interface ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get address of ",
							" Returns The IP address of the interface if enabled 0 if no such interface exists or is not enabled ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"eth0\"); uint32_t ipAdd = TCPIP_STACK_NetAddress(netH); ",
							" TCPIP_STACK_NetAddressBcast Function ",
							" C uint32_t TCPIP_STACK_NetAddressBcast( TCPIP_NET_HANDLE netH ); ",
							" Description The function returns the network interface broadcast address The interface should be enabled for this function to work ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get address of ",
							" Returns Broadcast IP address of that interface 0 if no such interface ",
							" Remarks None ",
							" TCPIP_STACK_NetAddressDnsPrimary Function ",
							" C uint32_t TCPIP_STACK_NetAddressDnsPrimary( TCPIP_NET_HANDLE netH ); ",
							" Description If interface is enabled then the function will return the IPv4 address of the primary DNS of the network interface ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get the DNS address of ",
							" Returns IPv4 address of the primary DNS server 0 if no such interface or interface is down ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); myIPAddress = TCPIP_STACK_NetAddressDnsPrimary(netH); ",
							" TCPIP_STACK_NetAddressDnsPrimarySet Function ",
							" C bool TCPIP_STACK_NetAddressDnsPrimarySet( TCPIP_NET_HANDLE netH IPV4_ADDR* ipAddress ); ",
							" Description This function sets the network interface primary IPv4 DNS address ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set the DNS address of ipAddress IP address to set ",
							" Returns True - If success False - If no such interface or interface is not enabled ",
							" Remarks Exercise extreme caution when using these functions to change the settings of a running network interface Chaning these parameters at runtime can lead to unexpected behavior or loss of network connectivity The preferred way to change the parameters for a running interface is to do so as part of the network configuration passed at the stack initialization ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_NetAddressDnsPrimarySet(netH myIPAddress); ",
							" TCPIP_STACK_NetAddressDnsSecond Function ",
							" C uint32_t TCPIP_STACK_NetAddressDnsSecond( TCPIP_NET_HANDLE netH ); ",
							" Description If interface is enabled then the function will return the IPv4 address of the secondary DNS of the network interface ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get the secondary DNS address of ",
							" Returns The secondary DNS address if success 0 if no such interface or interface is down ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); myIPAddress = TCPIP_STACK_NetAddressDnsSecond(netH); ",
							" TCPIP_STACK_NetAddressDnsSecondSet Function ",
							" C bool TCPIP_STACK_NetAddressDnsSecondSet( TCPIP_NET_HANDLE netH IPV4_ADDR* ipAddress ); ",
							" Description If interface sets the network interface secondary IPv4 DNS address ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set the secondary DNS address of ipAddress IP address to set ",
							" Returns True - If success False - If no such interface or interface is not enabled ",
							" Remarks Exercise extreme caution when using these functions to change the settings of a running network interface Chaning these parameters at runtime can lead to unexpected behavior or loss of network connectivity The preferred way to change the parameters for a running interface is to do so as part of the network configuration passed at the stack initialization ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_NetAddressDnsSecondSet(netH myIPAddress); ",
							" TCPIP_STACK_NetAddressGateway Function ",
							" C uint32_t TCPIP_STACK_NetAddressGateway( TCPIP_NET_HANDLE netH ); ",
							" Description If interface is enabled then the function will return the IPv4 gateway address of the network interface ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get address of ",
							" Returns The gateway address of the interface 0 if the interface is not enabled ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"eth0\"); uint32_t ipAdd = TCPIP_STACK_NetAddressGateway(netH); ",
							" TCPIP_STACK_NetAddressGatewaySet Function ",
							" C bool TCPIP_STACK_NetAddressGatewaySet( TCPIP_NET_HANDLE netH IPV4_ADDR* ipAddress ); ",
							" Description This function sets the network interface IPv4 gateway address ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set the gateway address of ipAddress IP address to set ",
							" Returns True - If success False - If no such interface or interface is not enabled ",
							" Remarks Exercise extreme caution when using these functions to change the settings of a running network interface Chaning these parameters at runtime can lead to unexpected behavior or loss of network connectivity The preferred way to change the parameters for a running interface is to do so as part of the network configuration passed at the stack initialization ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_NetAddressGatewaySet(netH myIPAddress); ",
							" TCPIP_STACK_NetAddressMac Function ",
							" C const uint8_t* TCPIP_STACK_NetAddressMac( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the network interface physical (MAC) address The interface should be enabled for this function to work ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get the address of ",
							" Returns Constant pointer to the MAC address 0 if no such interface exists ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); const TCPIP_MAC_ADDR* pAdd = TCPIP_STACK_NetAddressMac(netH); ",
							" TCPIP_STACK_NetAddressMacSet Function ",
							" C bool TCPIP_STACK_NetAddressMacSet( TCPIP_NET_HANDLE netH const TCPIP_MAC_ADDR* pAddr ); ",
							" Description This function sets the network interface physical MAC address ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set the address of pAddr Pointer to a valid physical (MAC) address ",
							" Returns True - If the MAC address of the interface is set False - If no such interface or interface is not enabled ",
							" Remarks One should use extreme caution when using these functions to change the settings of a running network interface Chaning these parameters at runtime can lead to unexpected behavior or loss of network connectivity The preferred way to change the parameters for a running interface is to do so as part of the neetwork configuration passed at the stack initialization This function updates the MAC address in the stack data structures It does not re-program the MAC with the new address The MAC programming is done only at MAC intialization ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_NetAddressMacSet(netH myMacAddress); ",
							" TCPIP_STACK_NetAddressSet Function ",
							" C bool TCPIP_STACK_NetAddressSet( TCPIP_NET_HANDLE netH IPV4_ADDR* ipAddress IPV4_ADDR* mask bool setDefault ); ",
							" Description This function sets the associated network IP address and/or mask If you're chaning the network then it is preferred that you set both of these values simultaneously to avoid having the stack running with a mismatch between its IP address and mask ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set the address of ipAddress IP address to set (could be NULL to set only the mask) mask Corresponding network mask to set (could be NULL to set only the IP address) setDefault If true the interface default address/mask is also set ",
							" Returns True - If success False - If no such interface or interface is not enabled ",
							" Remarks Exercise extreme caution when using these functions to change the settings of a running network interface Chaning these parameters at runtime can lead to unexpected behavior or loss of network connectivity The preferred way to change the parameters for a running interface is to do so as part of the network configuration passed at the stack initialization ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_NetAddressSet(netH myIPAddress myIPMask false); ",
							" TCPIP_STACK_NetAliasNameGet Function ",
							" C int TCPIP_STACK_NetAliasNameGet( TCPIP_NET_HANDLE netH char* nameBuffer int buffSize ); ",
							" Description This function returns the alias name associated with the interface handle ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netH Interface handle name to obtain nameBuffer Buffer to receive the name Could be 0 if only name size is needed buffSize Size of the provided buffer ",
							" Returns The number of characters of the interface alias name 0 if no such interface exists ",
							" Remarks The aliases names are: \"eth0\" \"eth1\" etc for Ethernet interfaces \"wlan0\" \"wlan1\" etc for Wi-Fi interfaces For alias interfaces names will have an appended ':n' i e : \"eth0:0\" \"eth0:1\" wlan0:0\" etc See the TCPIP_STACK_IF_NAME_ALIAS_ETH TCPIP_STACK_IF_NAME_ALIAS_WLAN in tcpip h for the aliases names Alias interface names are at most 8 characters long ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_IndexToNet(0); char ifName[8]; TCPIP_STACK_NetAliasNameGet(netH ifName sizeof(ifName)); ",
							" TCPIP_STACK_NetBIOSName Function ",
							" C const char* TCPIP_STACK_NetBIOSName( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the network interface NetBIOS name ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netH Interface handle to get name of ",
							" Returns Pointer to the NetBIOS name of that interface ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); const char* biosName = TCPIP_STACK_NetBIOSName(netH); ",
							" TCPIP_STACK_NetBiosNameSet Function ",
							" C bool TCPIP_STACK_NetBiosNameSet( TCPIP_NET_HANDLE netH const char* biosName ); ",
							" Description This function sets the network interface NetBIOS name ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set name of ",
							" Returns True - If the NetBIOS name of the interface is set False - If no such interface or interface is not enabled ",
							" Remarks Exercise extreme caution when using these functions to change the settings of a running network interface Changing these parameters at runtime can lead to unexpected behavior or loss of network connectivity The preferred way to change the parameters for a running interface is to do so as part of the network configuration passed at the stack initialization ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_NetBiosNameSet(netH myBiosName); ",
							" TCPIP_STACK_NetConfigGet Function ",
							" C size_t TCPIP_STACK_NetConfigGet( TCPIP_NET_HANDLE netH void* configStoreBuff size_t configStoreSize size_t* pNeededSize ); ",
							" Description This function dumps the current configuration data of the network interface specified by the corresponding network handle into the supplied buffer ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netH The handle that identifies the requested interface configStoreBuff Pointer to a buffer that will receive the current configuration data All the data that's needed to restore a TCPIP_NETWORK_CONFIG structure is stored in this buffer Can be NULL if only the storage size is needed configStoreSize Size of the supplied buffer pNeededSize Pointer to store the size needed for storage Can be NULL if not needed ",
							" Returns -1 - If the interface is invalid or the stack is not initialized 0 - If no data is copied (no supplied buffer or buffer too small) 0 - For success indicating the amount of data copied ",
							" Remarks The function is a helper for retrieving the network configuration data Its companion function TCPIP_STACK_NetConfigSet() restores the TCPIP_NETWORK_CONFIG from the dump buffer Currently the data is saved in plain binary format into the supplied buffer However the application must not make use of this assumption as it may change in a future release (some compression scheme may be implemented) ",
							" Example uint8_t currConfig[200]; size_t neededSize result; TCPIP_NET_HANDLE hNet = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); result = TCPIP_STACK_NetConfigGet(hNet currConfig sizeof(currConfig) neededSize); if(result 0) { // store the currConfig to some external storage } ",
							" TCPIP_STACK_NetConfigSet Function ",
							" C TCPIP_NETWORK_CONFIG* TCPIP_STACK_NetConfigSet( void* configStoreBuff void* netConfigBuff size_t buffSize size_t* pNeededSize ); ",
							" Description This function restores data from a previous dump buffer and updates the supplied interface configuration All the data is recovered and constructed into the netConfigBuff (supposing this buffer is large enough) If this operation succeeded the netConfigBuff can be safely cast to a (TCPIP_NETWORK_CONFIG*) The structure of the netConfigBuff is as follows: A TCPIP_NETWORK_CONFIG structure is created at the very beginning of the buffer All of the necessary fields that are part of the TCPIP_NETWORK_CONFIG will be placed in the buffer itself ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description configStoreBuff Pointer to a buffer that received configuration data from a TCPIP_STACK_NetConfigGet() call netConfigBuff Pointer to a buffer that will receive the TCPIP_NETWORK_CONFIG data buffSize Size of the supplied netConfigBugg buffer pNeededSize Pointer to store the size needed for storage Can be NULL if not needed If supplied the pNeededSize will be updated with the actual size that's needed for the netConfigBuff  ",
							" Returns TValid TCPIP_NETWORK_CONFIG pointer ( netConfigBuff ) if netConfigBuff was successfully updated 0 if the netConfigBuff is not supplied or is not large enough ",
							" Remarks The function is a helper for being able to restore the configuration data Its companion function TCPIP_STACK_NetConfigGet() saves the TCPIP_NETWORK_CNFIG to a dump buffer ",
							" Example uint8_t currConfig[200]; uint8_t restoreBuff[200]; size_t neededSize result; TCPIP_NET_HANDLE hNet = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); result = TCPIP_STACK_NetConfigGet(hNet currConfig sizeof(currConfig) neededSize); if(result 0) { // store the currConfig buffer to some external storage (neededSize bytes needed) // later on restore the configuration TCPIP_NETWORK_CONFIG* netConfig; // extract the network configuration from the previously saved buffer netConfig = TCPIP_STACK_NetConfigSet(currConfig restoreBuff sizeof(restoreBuff) neededSize); if(netConfig) { // use this netConfig to initialize a network interface TCPIP_STACK_NetUp(hNet netConfig); } } ",
							" TCPIP_STACK_NetDefaultGet Function ",
							" C TCPIP_NET_HANDLE TCPIP_STACK_NetDefaultGet(); ",
							" Description This function returns the current default network interface in the TCP/IP stack This is the interface on which packets will be transmitted when the internal routing algorithm cannot detect a match for an outgoing packet ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Returns The default network interface ",
							" Remarks This function is intended for multi-hoed hosts with the TCP/IP stack running multiple interfaces ",
							" TCPIP_STACK_NetDefaultSet Function ",
							" C bool TCPIP_STACK_NetDefaultSet( TCPIP_NET_HANDLE netH ); ",
							" Description This function sets the current default network interface in the TCP/IP stack ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle ",
							" Returns True - If success False - If failed (the old interface does not change) ",
							" Remarks None ",
							" TCPIP_STACK_NetDown Function ",
							" C bool TCPIP_STACK_NetDown( TCPIP_NET_HANDLE netH ); ",
							" Description This function performs the deinitialization of a net interface As part of this process the corresponding MAC driver is deinitialized ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle ",
							" Returns True - If success False - If no such network interface or the interface is already down ",
							" Remarks If the interface to be brought down is a primary interface then all its aliases will be brought down as well If the interface to be brought down as an alias interface then other interfaces won't be affected ",
							" TCPIP_STACK_NetGetType Function ",
							" C TCPIP_NETWORK_TYPE TCPIP_STACK_NetGetType( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the network interface type: primary or alias ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and support for alias interfaces enabled Otherwise all interfaces are primary ",
							" Parameters Parameters Description hNet Interface handle ",
							" Returns TCPIP_NETWORK_TYPE_PRIMARY - If interface exists and the interface is a primary interface TCPIP_NETWORK_TYPE_ALIAS - If the interface exists and is an alias TCPIP_NETWORK_TYPE_UNKNOWN - No such interface exists ",
							" Remarks None ",
							" TCPIP_STACK_NetHandleGet Function ",
							" C TCPIP_NET_HANDLE TCPIP_STACK_NetHandleGet( const char* interface ); ",
							" Description This function resolves a network interface name to a handle ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description interface The names specified in TCPIP_NETWORK_CONFIG ",
							" Returns Network handle ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE hNet = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); or TCPIP_NET_HANDLE hNet = TCPIP_STACK_NetHandleGet(\"eth0\"); ",
							" TCPIP_STACK_NetIndexGet Function ",
							" C int TCPIP_STACK_NetIndexGet( TCPIP_NET_HANDLE hNet ); ",
							" Description This function converts a network interface handle to an interface number ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description hNet Interface handle ",
							" Returns Index of this network handle in the stack -1 if invalid ",
							" Remarks None ",
							" TCPIP_STACK_NetIPv6AddressGet Function ",
							" C IPV6_ADDR_HANDLE TCPIP_STACK_NetIPv6AddressGet( TCPIP_NET_HANDLE netH IPV6_ADDR_TYPE addType IPV6_ADDR_STRUCT* pAddStruct IPV6_ADDR_HANDLE addHandle ); ",
							" Description This function allows the listing of the IPv6 addresses associated with an interface ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to set the address of addType Type of address to request IPV6_ADDR_TYPE_UNICAST and IPV6_ADDR_TYPE_MULTICAST supported for now pAddStruct Structure provided by the user that will be filled with corresponding IPV6_ADDR_STRUCT data addHandle An address handle that allows iteration across multiple IPv6 addresses On the first call it has to be 0; It will begin the listing of the IPv6 addresses On subsequent calls it has to be a handle previously returned by a call to this function ",
							" Returns Non-NULL IPV6_ADDR_HANDLE - If a valid IPv6 address was found and the pAddStruct structure was filled with data 0 - If no such interface or interface is not enabled ",
							" Remarks None ",
							" Example IPV6_ADDR_STRUCT currAddr; IPV6_ADDR_HANDLE currHandle; TCPIP_NET_HANDLE hNet = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); char ipv6AddBuff[44]; currHandle = 0; do { currHandle = TCPIP_STACK_NetIPv6AddressGet(netH IPV6_ADDR_TYPE_UNICAST currAddr currHandle); if(currHandle) { // have a valid address; display it TCPIP_HELPER_IPv6AddressToString( currAddr address ipv6AddBuff sizeof(ipv6AddBuff)); } }while(currHandle = 0); ",
							" TCPIP_STACK_NetIsLinked Function ",
							" C bool TCPIP_STACK_NetIsLinked( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the network interface link status ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description hNet Interface handle ",
							" Returns True - If interface exists and the corresponding MAC is linked False - If the interface does not exist or the link is down ",
							" Remarks None ",
							" TCPIP_STACK_NetIsReady Function ",
							" C bool TCPIP_STACK_NetIsReady( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the network interface configuration status ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description hNet Interface handle ",
							" Returns True - If interface exists the corresponding MAC is linked and the interface is properly configured and ready for transfers False - If the interface does not exists or interface not ready ",
							" Remarks This function should be checked by all users to return true before starting uperations on that interface ",
							" TCPIP_STACK_NetIsUp Function ",
							" C bool TCPIP_STACK_NetIsUp( TCPIP_NET_HANDLE hNet ); ",
							" Description This function returns the network interface up or down (enabled) status ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description hNet Interface handle ",
							" Returns True - If interface exists and is enabled False - If the interface does not exist or is disabled ",
							" Remarks None ",
							" TCPIP_STACK_NetMACIdGet Function ",
							" C TCPIP_STACK_MODULE TCPIP_STACK_NetMACIdGet( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the module ID of the MAC that's attached to the specified network interface ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Handle of the interface to use ",
							" Returns A TCPIP_STACK_MODULE ID that belongs to the MAC of that network interface ",
							" Remarks If the netH refers to an alias interface the MAC statistics of the primary interface are returned ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); TCPIP_STACK_MODULE modId = TCPIP_STACK_NetMACIdGet(netH); if(modId == TCPIP_MODULE_MAC_PIC32INT) { // an internal PIC32 MAC attached to this interface } ",
							" TCPIP_STACK_NetMACRegisterStatisticsGet Function ",
							" C bool TCPIP_STACK_NetMACRegisterStatisticsGet( TCPIP_NET_HANDLE netH TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries int nEntries int* pHwEntries ); ",
							" Description This function returns the hardware statistics register data of the MAC that is attached to the specified network interface ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Handle of the interface to use pRegStatistics Pointer to a pRegEntries that will receive the current hardware statistics registers values Can be 0 if only the number of supported hardware registers is requested nEntries Provides the number of TCPIP_MAC_STATISTICS_REG)ENTRY structures present in pRegEntries Can be 0 if only the number of supported hardware registers is requested The register entries structures will be filled by the driver up to the supported hardware registers pHwEntries Pointer to an address to store the number of the statistics registers that the hardware supports It is updated by the driver Can be 0 if not needed ",
							" Returns True - If the call succeeded False - If the call failed (the corresponding MAC does not implement hardware statistics counters) ",
							" Remarks If the netH refers to an alias interface the MAC register statistics of the primary interface are returned ",
							" Example TCPIP_MAC_REG_STATISTICS regStatistics; TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); if(TCPIP_STACK_NetMACRegisterStatisticsGet(netH regStatistics)) { // display the hardware statistics registers for the internal PIC32 MAC attached to this interface } ",
							" TCPIP_STACK_NetMACStatisticsGet Function ",
							" C bool TCPIP_STACK_NetMACStatisticsGet( TCPIP_NET_HANDLE netH TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics ); ",
							" Description This function returns the statistics data of the MAC that's attached to the specified network interface ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Handle of the interface to use pRxStatistics Pointer to a TCPIP_MAC_RX_STATISTICS that will receive the current RX statistics counters Can be NULL if not needed pTxStatistics Pointer to a TCPIP_MAC_TX_STATISTICS that will receive the current TX statistics counters Can be NULL if not needed ",
							" Returns True - If the call succeeded False - If the call failed (the corresponding MAC does not implement statistics counters) ",
							" Remarks If the netH refers to an alias interface the MAC statistics of the primary interface are returned ",
							" Example TCPIP_MAC_RX_STATISTICS rxStatistics; TCPIP_MAC_TX_STATISTICS txStatistics; TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); if(TCPIP_STACK_NetMACStatisticsGet(netH rxStatistics txStatistics)) { // display the statistics for the internal PIC32 MAC attached to this interface } ",
							" TCPIP_STACK_NetMask Function ",
							" C uint32_t TCPIP_STACK_NetMask( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the IPv4 address mask of the specified interface If the interface is enabled then it returns the IP address mask of that interface ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle to get mask of ",
							" Returns IPv4 address mask of that interface 0 if interface is disabled/non-existent ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_NetHandleGet(\"PIC32INT\"); uint32_t subMask = TCPIP_STACK_NetMask(netH); ",
							" TCPIP_STACK_NetMulticastGet Function ",
							" C TCPIP_NET_HANDLE TCPIP_STACK_NetMulticastGet(); ",
							" Description This function returns the current default multicast network interface in the TCP/IP stack This is the interface on which IGMP and multicast packets will be transmitted when a default interface is specified ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Returns The fault multicast network interface ",
							" Remarks This function is intended for a TCP/IP stack implementing IGMP ",
							" TCPIP_STACK_NetMulticastSet Function ",
							" C bool TCPIP_STACK_NetMulticastSet( TCPIP_NET_HANDLE netH ); ",
							" Description This function sets the current default multicast network interface in the TCP/IP stack ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The selected network interface should be up and running ",
							" Parameters Parameters Description netH Interface handle ",
							" Returns True - If successful False - If failed (the old interface does not change) ",
							" Remarks At stack start up the default multicast network is the same with the default network interface This function allows the user to change it ",
							" TCPIP_STACK_NetNameGet Function ",
							" C const char* TCPIP_STACK_NetNameGet( TCPIP_NET_HANDLE netH ); ",
							" Description This function returns the name associated with the interface handle ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netH Interface handle to get the name of ",
							" Returns The name associated to the interface handle 0 if no such name exists ",
							" Remarks None ",
							" Example TCPIP_NET_HANDLE netH = TCPIP_STACK_IndexToNet(0); const char* netName = TCPIP_STACK_NetNameGet(netH); ",
							" TCPIP_STACK_NetUp Function ",
							" C bool TCPIP_STACK_NetUp( TCPIP_NET_HANDLE netH const TCPIP_NETWORK_CONFIG* pUsrConfig ); ",
							" Description This function brings a network interface up and perform its initialization ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description netH Interface handle pUsrConfig Pointer to a TCPIP_NETWORK_CONFIG for the interface initialization ",
							" Returns True - If success False - If no such network or an error occurred ",
							" Remarks If the interface to be brought up is a primary interface then all its aliases remain turned down A separate call to TCPIP_STACK_NetUp() is needed for each of the aliases If the interface to be brought up is an alias interface the primary interface of this alias has to be up and running A separate call to TCPIP_STACK_NetUp() is needed for each of the aliases ",
							" TCPIP_STACK_NumberOfNetworksGet Function ",
							" C int TCPIP_STACK_NumberOfNetworksGet(); ",
							" Description This function returns the number of interfaces currently active in the TCP/IP stack ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Returns Number of network interfaces ",
							" Remarks None ",
							" TCPIP_STACK_PACKET_HANDLER Type ",
							" C typedef bool (* TCPIP_STACK_PACKET_HANDLER)(TCPIP_NET_HANDLE hNet struct _tag_TCPIP_MAC_PACKET* rxPkt uint16_t frameType const void* hParam); ",
							" Description TCPIP packet handler pointer Pointer to a function that will be called by the TCP/IP manager when a RX packet is available ",
							" Preconditions None ",
							" Parameters Parameters Description hNet Network handle on which packet has arrived rxPkt Pointer to incoming packet frameType Type of packet being processed ",
							" Returns True - If the packet is processed by the external handler In this case the TCP/IP manager will no longer process the packet False - The packet needs to be processed internally by the stack as usual ",
							" Remarks Value is converted to host endianess Standard Ethernet frame value: 0x0800 - IPV4 0x86DD - IPv6 0x0806 - ARP etc hParam - user passed parameter when handler was registered The packet handler is called in the TCP/IP stack manager context The handler should be kept as short as possible as it affects the processing of all the other RX traffic Before calling the external packet handler: The rxPkt- pktIf points to the interface receiving the packet No other processing/checks are done IMPORTANT: When the packet handler returns true once it's done processing the packet it needs to acknowledge it i e return to the owner which is the MAC driver serving the network interface This means that the packet acknowledge function needs to be called with a proper acknowledge parameter and the QUEUED flag needs to be cleared if needed: if((*rxPkt- ackFunc)(rxPkt rxPkt- ackParam)) { rxPkt- pktFlags = ~TCPIP_MAC_PKT_FLAG_QUEUED; } Failure to do that will result in memory leaks and starvation of the MAC driver See the tcpip_mac h for details ",
							" TCPIP_STACK_PacketHandlerDeregister Function ",
							" C bool TCPIP_STACK_PacketHandlerDeregister( TCPIP_NET_HANDLE hNet TCPIP_STACK_PROCESS_HANDLE pktHandle ); ",
							" Description This function removes a packet processing handler ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" Parameters Parameters Description hNet Network handle pktHandle TCP/IP packet handle obtained by a call to TCPIP_STACK_PacketHandlerRegister() ",
							" Returns True - If the operation succeeded False - If the operation failed ",
							" Remarks Exists only if TCPIP_STACK_EXTERN_PACKET_PROCESS() is true ",
							" Example TCPIP_STACK_PROCESS_HANDLE myHandle = TCPIP_STACK_PacketHandlerRegister( hNet myPacketHandler myParam ); // process incoming packets // now we're done with it TCPIP_STACK_PacketHandlerDeregister(hNet myHandle); ",
							" TCPIP_STACK_PacketHandlerRegister Function ",
							" C TCPIP_STACK_PROCESS_HANDLE TCPIP_STACK_PacketHandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_STACK_PACKET_HANDLER pktHandler const void* handlerParam ); ",
							" Description This function registers a new packet processing handler The caller can use the handler to be notified of incoming packets and given a chance to examine/process them ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() and the TCPIP_STACK_Status() returned SYS_STATUS_READY The network interface should be up and running ",
							" Parameters Parameters Description hNet Network handle pktHandle The packet handler which will be called for an incoming packet handlerParam Packet handler parameter ",
							" Returns A valid TCPIP_STACK_PROCESS_HANDLE - If the operation succeeded NULL - If the operation failed ",
							" Remarks Currently only one packet handler is supported per interface The call will fail if a handler is already registered Use TCPIP_STACK_PacketHandlerDeregister() first Exists only if TCPIP_STACK_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_STACK_PROCESS_HANDLE pktHandle = TCPIP_STACK_PacketHandlerRegister( hNet myPktHandler myParam ); ",
							" TCPIP_STACK_PROCESS_HANDLE Type ",
							" C typedef const void* TCPIP_STACK_PROCESS_HANDLE; ",
							" Description Type: TCPIP_STACK_PROCESS_HANDLE Definition of a packet processing handle used for packet processing registration by the stack clients ",
							" TCPIP_STACK_Status Function ",
							" C SYS_STATUS TCPIP_STACK_Status( SYS_MODULE_OBJ object ); ",
							" Description This function provides the current status of the TCPIP stack moodule ",
							" Preconditions The TCPIP_STACK_Initialize() function must have been called before calling this function ",
							" Parameters Parameters Description object Object handle returned from TCPIP_STACK_Initialize() ",
							" Returns SYS_STATUS_READY - Indicates that any previous initialization operation for the stack has completed SYS_STATUS_BUSY - Indicates that a previous initialization operation for the stack has not yet completed SYS_STATUS_ERROR - Indicates that the initialization operation has failed and the stack is in an error state ",
							" Remarks After calling TCPIP_STACK_Initialize() the stack will continue its initialization process in the TCPIP_STACK_Task() routine This may take some time The stack is ready to use only when the TCPIP_STACK_Status() returned SYS_STATUS_READY ",
							" TCPIP_STACK_Task Function ",
							" C void TCPIP_STACK_Task( SYS_MODULE_OBJ object ); ",
							" Description TCP/IP stack execution state machine Stack Finite-State Machine (FSM) is executed ",
							" Preconditions The TCP/IP stack should have been initialized by TCPIP_STACK_Initialize() ",
							" Parameters Parameters Description object Object handle returned by TCPIP_STACK_Initialize() ",
							" Returns None ",
							" Remarks This FSM checks for new incoming packets and routes it to appropriate stack components It also performs timed operations This function must be called periodically to ensure timely responses This function continues the stack initialization process after the TCPIP_STACK_Initialize() was called The TCPIP_STACK_Status() will report SYS_STATUS_BUSY while the initialization is in progress ",
							" TCPIP_STACK_VersionGet Function ",
							" C unsigned int TCPIP_STACK_VersionGet( const SYS_MODULE_INDEX index ); ",
							" Description This function gets the TCP/IP stack version The version is encoded as major * 10000 + minor * 100 + patch The stringed version can be obtained using TCPIP_STACK_VersionStrGet() ",
							" Preconditions None ",
							" Parameters Parameters Description index Identifier for the object instance to get the version for ",
							" Returns Current driver version in numerical format ",
							" Remarks None ",
							" Example unsigned int version; version = TCPIP_STACK_VersionGet( TCPIP_STACK_INDEX_1 ); if(version 110200) { // Do Something } ",
							" TCPIP_STACK_VersionStrGet Function ",
							" C const char * TCPIP_STACK_VersionStrGet( const SYS_MODULE_INDEX index ); ",
							" Description This function gets the TCP/IP stack version The version is returned as major minor path[type] where type is optional The numerical version can be obtained using TCPIP_STACK_VersionGet() ",
							" Preconditions None ",
							" Parameters Parameters Description index Identifier for the object instance to get the version for ",
							" Returns Current TCP/IP stack version in the string format ",
							" Remarks None ",
							" NBNS Module The NetBIOS Name Service protocol associates host names with IP addresses similarly to DNS but on the same IP subnet Practically this allows the assignment of human-name host names to access boards on the same subnet For example in the TCP/IP Demonstration applications projects the development boards are programmed with the human name like 'mchpboard_c' so it can be accessed directly instead of with its IP address Abstraction Model TCPIP NBNS Abstraction Model Library Interface Name Description Macros  TCPIP_NBNS_TASK_TICK_RATE NBNS task processing rate The default value is 110 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE Functions  TCPIP_NBNS_Task Standard TCP/IP stack module task function Data Types and Constants  TCPIP_NBNS_MODULE_CONFIG Placeholder for NBNS configuration upgrades ",
							" TCPIP_NBNS_MODULE_CONFIG Structure ",
							" C typedef struct { void* reserved; } TCPIP_NBNS_MODULE_CONFIG; ",
							" Description TCPIP_NBNS_MODULE_CONFIG Structure Typedef This type definition provides a placeholder for NBNS configuration upgrades ",
							" Remarks None ",
							" TCPIP_NBNS_Task Function ",
							" C void TCPIP_NBNS_Task(); ",
							" Description This function performs NBNS module tasks in the TCP/IP stack ",
							" Preconditions The NBNS module shoul have been initialized ",
							" Returns None ",
							" Remarks None ",
							" NDP Module The NDP (Neighbor Discovery Protocol) for IP version 6 is used by IPv6 nodes on the same link to discover each other's presence RFC - 4861 NDP module is responsible for: Address Auto configuration of nodes Discovery of other nodes in the link (It can be a Router Discovery or Neighbor Discovery) Determining the link-layer_address of other nodes Duplicate address detection (DAD) Finding available routers and Domain Name System (DNS) servers Address Prefix discovery Parameter Discovery (Such as Link MTU or Hop limit) Comparing with IPv4: NDP is a substitute of ARP (Address Resolution protocol ) This new mechanism uses a mix of ICMPv6 and multicast addresses to discover the IPv6 node on same link NDP includes Neighbor Unreachability Detection (NUD) thus improving the robustness of packet delivery Unlike IPv4 broadcast addresses IPv6 address resolution multicasts are spread over 4 billion (2^32) multicast addresses greatly reducing address resolution-related interrupts on nodes other than the target Moreover non-IPv6 machines should not be interrupted at all Neighbor Discovery defines five different ICMPv6 packet types Five Different ICMPv6 Packet Types: Router Solicitation - Hosts inquire with Router Solicitation message to locate routers on the attached link Router Advertisement - Router advertise their presence periodically to all the nodes or in response to the Router Solicitation message Neighbor Solicitation - Neighbor solicitations are used by nodes to determine the Link Layer address of a neighbor or to verify that a neighbor is still reachable via a cached Link Layer address Neighbor Advertisement - Neighbor advertisements are used by nodes to respond to a Neighbor Solicitation message Redirect - Routers may inform hosts of a better first hop router for a destination Abstraction Model This module provides software abstraction of the IPv6 module existent in any TCP/IP Stack implementation It removes the overhead of address resolution from all other modules in the stack IPv6 Link Layer Neighbor Discovery Using the address FEC0::1:0:0:1 :A node A wants to deliver packets to destination node B using the IPv6 address FEC0::1 :0:0:1 :B on the same local link However node A does not know node B's link-layer address Node A sends an ICMPv6 Type 135 message (neighbor solicitation) on the local link using its site-local address FEC0::1:0:0:1:A as the IPv6 source address the solicited-node multicast address FF02::1 :FF01:B corresponding to the target address FEC0::1 :0:0:1 :B as the destination IPv6 address and the source link-layer address 00:04:a3:13:12:b4 of the sender node A as data of the ICMPv6 message The source link-layer address of this frame is the link-layer address 00:04:a3:13:12:b4 of node A The destination link-layer address 33:33:FF:01 :00:0B of this frame uses multicast mapping of the destination IPv6 address FF02::1 :FF01 :B Node B which is listening to the local link for multicast addresses intercepts the neighbor solicitation message because the destination IPv6 address FF02::1:FF01:B represents the solicited-node multicast address corresponding to its IPv6 address FEC0::1:0:0:1:B Node B replies by sending a neighbor advertisement message using its site-local address FEC0::1 :0:0:1 :B as the IPv6 source address and the site-local address FEC0::1 :0:0:1 :A as the destination IPv6 address It also includes its link-layer address 00:04:a3:13:12:b5 in the ICMPv6 message After receiving neighbor solicitation and neighbor advertisement messages node A and node B know each other's link-layer addresses Learned link-layer addresses are kept in a neighbor discovery table (neighbor cache) Therefore the nodes can communicate on the local link The neighbor solicitation message is also used by nodes to verify the reachability of neighbor nodes in the neighbor discovery table (neighbor cache) However the unicast addresses of the neighbor nodes are used as destination IPv6 addresses in ICMPv6 messages instead of solicited-node multicast addresses in this situation It is possible for a node that changes its link-layer address to inform all other neighbor nodes on the local link by sending a neighbor advertisement message using the all-nodes multicast address FF02::1 The neighbor discovery table of the nodes on the local link is updated with the new link-layer address ndp Library Interface Name Description Macros  TCPIP_IPV6_MTU_INCREASE_TIMEOUT 600 seconds TCPIP_IPV6_NDP_DELAY_FIRST_PROBE_TIME 5 s TCPIP_IPV6_NDP_MAX_ANYCAST_DELAY_TIME 1 s TCPIP_IPV6_NDP_MAX_MULTICAST_SOLICIT 3 transmissions TCPIP_IPV6_NDP_MAX_NEIGHBOR_ADVERTISEMENT 3 transmissions TCPIP_IPV6_NDP_MAX_RTR_SOLICITATION_DELAY 1 s TCPIP_IPV6_NDP_MAX_RTR_SOLICITATIONS 3 transmissions TCPIP_IPV6_NDP_MAX_UNICAST_SOLICIT 3 transmissions TCPIP_IPV6_NDP_REACHABLE_TIME 30 s TCPIP_IPV6_NDP_RETRANS_TIMER 1 s TCPIP_IPV6_NDP_RTR_SOLICITATION_INTERVAL 4 s TCPIP_IPV6_NDP_TASK_TIMER_RATE The NDP task rate milliseconds The default value is 32 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_IPV6_NDP_VALID_LIFETIME_TWO_HOURS Sets the lifetime to 2 hours Reachability Functions  TCPIP_NDP_NborReachConfirm Confirms that a neighbor is reachable ",
							" TCPIP_NDP_NborReachConfirm Function ",
							" C void TCPIP_NDP_NborReachConfirm( TCPIP_NET_HANDLE netH const IPV6_ADDR * address ); ",
							" Description This function is used by upper-layer protocols to indicate that round-trip communications were confirmed with a neighboring node ",
							" Preconditions None ",
							" Parameters Parameters Description pNetIf The interface on which the DNS event occurred address The DNS reported event ",
							" Returns None ",
							" Remarks None ",
							" Reboot Module The Reboot module will allow a user to remotely reboot the MCHP device that is running the TCP/IP stack This feature is primarily used for bootloader applications which must reset the device to enter the bootloader code section This module will execute a task that listens on a specified UDP port for a packet and then reboots if it receives one Abstraction Model reboot_block Library Interface Name Description Macros  TCPIP_REBOOT_MESSAGE the mesage needed to be sent accross the net to reboot the machine TCPIP_REBOOT_SAME_SUBNET_ONLY For improved security you might want to limit reboot capabilities to only users on the same IP subnet Define TCPIP_REBOOT_SAME_SUBNET_ONLY to enable this access restriction TCPIP_REBOOT_TASK_TICK_RATE the periodic rate of the Reboot task The default value is 1130 milliseconds This module listens for incoming reboot requests and a high operation frequency is not required The value cannot be lower than the TCPIP_STACK_TICK_RATE Functions  TCPIP_REBOOT_Task Standard TCP/IP stack module task function Structures  TCPIP_REBOOT_CONFIG TCPIP Reboot server configuration ",
							" TCPIP_REBOOT_CONFIG Structure ",
							" C typedef struct { void* reserved; } TCPIP_REBOOT_CONFIG; ",
							" Description Structure: TCPIP_REBOOT_CONFIG - TCPIP Reboot server configuration and initialization data ",
							" TCPIP_REBOOT_TASK Function ",
							" C void TCPIP_REBOOT_Task(); ",
							" Description This function performs Reboot server module tasks in the TCP/IP stack ",
							" Preconditions The Reboot server module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" SMTP Module The SMTP client module in the TCP/IP Stack lets applications send e-mails to any recipient worldwide These message could include status information or important alerts Using the e-mail to SMS gateways provided by most cell phone carriers these messages can also be delivered directly to cell phone handsets Abstraction Model TCPIP SMTP Abstraction Model SMTP Client Short Message Example The SMTP client API is simplified when messages can be buffered entirely in RAM This example sends a brief e-mail message indicating the current status of the board's buttons The following diagram provides an overview of the process: smtp_diagram First call TCPIP_SMTP_UsageBegin to verify that the SMTP client is available and to begin a new message If FALSE is returned the SMTP client is busy and the application must return to the main loop to allow StackTask to execute again Next set the local relay server to use as TCPIP_SMTP_CLIENT_MESSAGE Server If the local relay server requires a user name and password set TCPIP_SMTP_CLIENT_MESSAGE Username and TCPIP_SMTP_CLIENT_MESSAGE Password to the appropriate credentials If server parameters are not set the stack will attempt to deliver the message directly to its destination host This will likely fail due to SPAM prevention measures put in place by most ISPs and network administrators Continue on to set the header strings as necessary for the message This includes the subject line from address and any recipients you need to add Finally set TCPIP_SMTP_CLIENT_MESSAGE Body to the message to be sent At this point the message is ready to send Call TCPIP_SMTP_MailSend to instruct the SMTP client to begin transmission The application must now call TCPIP_SMTP_IsBusy until it returns FALSE Each time TRUE is returned return to the main loop and wait for the system tasks to be executed again This allows the SMTP server to continue its work in a cooperative multitasking manner Once FALSE is returned call TCPIP_SMTP_UsageEnd to release the SMTP client Check the return value of this function to determine if the message was successfully sent SMTP Client Long Message Example The SMTP client API is capable of sending messages that do not fit entirely in RAM To do so the application must manage its output state and only write as many bytes as are available in the buffer at a time This example will walk through sending a longer message Sending longer messages is divided into three stages The first stage configures the SMTP client to send the message The second stage sends the message in small chunks as buffer space is available The final stage finishes the transmission and determines whether or not the message was successful The following diagram illustrates the first stage: smtp_diagram2 The first stage is largely similar to the first few steps in sending a short message First call TCPIP_SMTP_UsageBegin to verify that the SMTP client is available and to begin a new message If FALSE is returned the SMTP client is busy and the application must return to the main loop and wait to execute again Next set the local relay server to use as TCPIP_SMTP_CLIENT_MESSAGE Server If the local relay server requires a user name and password set TCPIP_SMTP_CLIENT_MESSAGE Username and TCPIP_SMTP_CLIENT_MESSAGE Password to the appropriate credentials If server parameters are not set the stack will attempt to deliver the message directly to its destination host This will likely fail due to SPAM prevention measures put in place by most ISPs and network administrators Continue on to set the header strings as necessary for the message This includes the subject line from address and any recipients you need to add The next portion of the process differs Ensure that TCPIP_SMTP_CLIENT_MESSAGE Body remains set to its default (NULL) At this point call TCPIP_SMTP_MailSend to open a connection to the remote server and transmit the headers The application is now ready to proceed to the second stage and send the message body The following diagram provides an overview of stage two and three: smtp_diagram3 Upon entering stage two the application should call TCPIP_SMTP_IsBusy to verify that the connection to the remote server is active and has not been lost If the call succeeds call TCPIP_SMTP_IsPutReady to determine how many bytes are available in the TX buffer If no bytes are available return to the main loop so that StackTask can transmit the data to the remote node and free up the buffer If space is available any combination of the TCPIP_SMTP_Put TCPIP_SMTP_ArrayPut and TCPIP_SMTP_StringPut functions may be called to transmit the message These functions return the number of bytes successfully written Use this value along with the value originally returned from TCPIP_SMTP_IsPutReady to track how much free space remains in the TX buffer Once the buffer is depleted call TCPIP_SMTP_Flush to force the data written to be sent The SMTP client module can_accept_as much data as the TCP TX FIFO can hold This is determined by the socket TX buffer size If the TX buffer is exhausted before the message is complete return to the main loop so that stack may transmit the data to the remote node and free up the buffer Upon return go to the beginning of the second stage to transmit the next portion of the message Once the message is complete the application will move to the third stage Call TCPIP_SMTP_PutIsDone to inform the SMTP client that no more data remains Then call TCPIP_SMTP_IsBusy repeatedly Each time TRUE is returned return to the main loop and wait for stack to execute again Once FALSE is returned the message transmission has completed and the application must call TCPIP_SMTP_UsageEnd to release the SMTP client Check the return value of this function to determine if the message was successfully sent Library Interface Name Description Macros  TCPIP_SMTP_MAX_WRITE_SIZE the max size of data to be written in a discrete string/array email operation: TCPIP_SMTP_StringPut/TCPIP_SMTP_ArrayPut Excess characters will be discarded Note that the higher this value the greater the size of the underlying TCP socket TX buffer Adjust as needed Normally should not exceed 512 characters TCPIP_SMTP_SERVER_REPLY_TIMEOUT How long to wait before assuming the connection has been dropped (default 8 seconds) TCPIP_SMTP_TASK_TICK_RATE SMTP task rate milliseconds The default value is 55 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_SMTP_WRITE_READY_SPACE the minimum amount of data to ask from the transport/encryption layer when querying the write space SMTP_CONNECT_ERROR Connection to SMTP server failed SMTP_RESOLVE_ERROR DNS lookup for SMTP server failed SMTP_SUCCESS Message was successfully sent   Functions  TCPIP_SMTP_ArrayPut Writes a series of bytes to the SMTP client TCPIP_SMTP_Flush Flushes the SMTP socket and forces all data to be sent TCPIP_SMTP_IsBusy Determines if the SMTP client is busy TCPIP_SMTP_IsPutReady Determines how much data can be written to the SMTP client TCPIP_SMTP_Put Writes a single byte to the SMTP client TCPIP_SMTP_PutIsDone Indicates that the on-the-fly message is complete TCPIP_SMTP_StringPut Writes a string to the SMTP client TCPIP_SMTP_UsageBegin Requests control of the SMTP client module TCPIP_SMTP_UsageEnd Releases control of the SMTP client module TCPIP_SMTP_ClientTask Standard TCP/IP stack module task function TCPIP_SMTP_MailSend Initializes the message sending process Structures  TCPIP_SMTP_CLIENT_MESSAGE Configures the SMTP client to send a message TCPIP_SMTP_CLIENT_MODULE_CONFIG This is type TCPIP_SMTP_CLIENT_MODULE_CONFIG ",
							" TCPIP_SMTP_ArrayPut Function ",
							" C uint16_t TCPIP_SMTP_ArrayPut( uint8_t* Data uint16_t Len ); ",
							" Description This function writes a series of bytes to the SMTP client ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call ",
							" Parameters Parameters Description Data The data to be written Len How many bytes should be written ",
							" Returns The number of bytes written If less than Len then the TX FIFO became full before all bytes could be written ",
							" Remarks This function should only be called externally when the SMTP client is generating an on-the-fly message (i e TCPIP_SMTP_MailSend() was called with SMTPClient Body set to NULL) ",
							" TCPIP_SMTP_ClientTask Function ",
							" C void TCPIP_SMTP_ClientTask(); ",
							" Description This function performs SMTP module tasks in the TCP/IP stack ",
							" Preconditions SMTP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SMTP_Flush Function ",
							" C void TCPIP_SMTP_Flush(); ",
							" Description This function flushes the SMTP socket and forces all data to be sent ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call ",
							" Returns None ",
							" Remarks This function should only be called externally when the SMTP client is generating an on-the-fly message (i e TCPIP_SMTP_MailSend() was called with SMTPClient Body set to NULL) ",
							" TCPIP_SMTP_IsBusy Function ",
							" C bool TCPIP_SMTP_IsBusy(); ",
							" Description Call this function to determine if the SMTP client is busy performing background tasks This function should be called after any call to TCPIP_SMTP_MailSend() TCPIP_SMTP_PutIsDone() to determine if the stack has finished performing its internal tasks It should also be called prior to any call to TCPIP_SMTP_IsPutReady() to verify that the SMTP client has not prematurely disconnected When this function returns false the next call should be to TCPIP_SMTP_UsageEnd() to release the module and obtain the status code for the operation ",
							" TCPIP_SMTP_IsPutReady Function ",
							" C uint16_t TCPIP_SMTP_IsPutReady(); ",
							" Description Use this function to determine how much data can be written to the SMTP client when generating an on-the-fly message ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call and an on-the-fly message is being generated This requires that TCPIP_SMTP_MailSend() was called with SMTPClient Body set to NULL ",
							" Returns The number of free bytes the SMTP TX FIFO ",
							" Remarks This function should only be called externally when the SMTP client is generating an on-the-fly message (i e TCPIP_SMTP_MailSend was called with SMTPClient Body set to NULL) ",
							" TCPIP_SMTP_MailSend Function ",
							" C void TCPIP_SMTP_MailSend( TCPIP_SMTP_CLIENT_MESSAGE* smtpClientMessage ); ",
							" Description This function starts the state machine that performs the actual transmission of the message Call this function after all the fields in SMTPClient have been set ",
							" Preconditions TCPIP_SMTP_UsageBegin returned true on a previous call ",
							" Parameters Parameters Description smtpClientMessage Pointer to a TCPIP_SMTP_CLIENT_MESSAGE structure that configures the message to send ",
							" Returns None ",
							" Remarks The fields pointed by the smtpClientMessage have to be non-volatile until the SMTP send mail process is completed ",
							" TCPIP_SMTP_Put Function ",
							" C bool TCPIP_SMTP_Put( char c ); ",
							" Description This function writes a single byte to the SMTP client ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call ",
							" Parameters Parameters Description c The byte to be written ",
							" Returns None ",
							" Remarks This function is obsolete and will be eventually removed TCPIP_SMTP_ArrayPut() and TCPIP_SMTP_StringPut() should be used This function cannot be used on an encrypted connection It is difficult to estimate the amount of TX buffer space needed when transmitting byte by byte which could cause intermediary write operations to the underlying TCP socket This function should only be called externally when the SMTP client is generating an on-the-fly message (i e TCPIP_SMTP_MailSend() was called with SMTPClient Body set to NULL) ",
							" TCPIP_SMTP_PutIsDone Function ",
							" C void TCPIP_SMTP_PutIsDone(); ",
							" Description This function indicates that the on-the-fly message is complete ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call and the SMTP client is generated an on-the-fly message (i e TCPIP_SMTP_MailSend() was called with SMTPClient Body set to NULL) ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SMTP_StringPut Function ",
							" C uint16_t TCPIP_SMTP_StringPut( char* Data ); ",
							" Description This function writes a string to the SMTP client ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call ",
							" Parameters Parameters Description Data The data to be written ",
							" Returns The number of bytes written If less than the length of Data then the TX FIFO became full before all bytes could be written ",
							" Remarks This function should only be called externally when the SMTP client is generating an on-the-fly message (That is TCPIP_SMTP_MailSend() was called with SMTPClient Body set to NULL ) ",
							" TCPIP_SMTP_UsageBegin Function ",
							" C bool TCPIP_SMTP_UsageBegin(); ",
							" Description Call this function before calling any other SMTP Client APIs This function obtains a lock on the SMTP Client which can only be used by one stack application at a time Once the application is finished with the SMTP client it must call TCPIP_SMTP_UsageEnd() to release control of the module to any other waiting applications This function initializes all the SMTP state machines and variables back to their default state ",
							" Preconditions None ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SMTP_UsageEnd Function ",
							" C uint16_t TCPIP_SMTP_UsageEnd(); ",
							" Description Call this function to release control of the SMTP client module once an application is finished using it This function releases the lock obtained by TCPIP_SMTP_UsageBegin() and frees the SMTP client to be used by another application ",
							" Preconditions TCPIP_SMTP_UsageBegin() returned true on a previous call ",
							" Returns None ",
							" Remarks None ",
							" SMTPC Module The SMTPC module in the TCP/IP Stack lets applications send e-mails to any recipient worldwide These message could include status information or important alerts Using the e-mail to SMS gateways provided by most cell phone carriers these messages can also be delivered directly to cell phone handsets Note: The SMTPC client supports encrypted communication with the mail server by using the Networking Presentation layer to integrate an external encryption services provider (usually wolfSSL) for TLS support Abstraction Model TCPIP SMTPC Abstraction Model Library Interface Name Description Macros  SMTPC_CONFIG_H This is macro SMTPC_CONFIG_H  TCPIP_SMTPC_CLIENT_ADDR_BUFFER_SIZE size of a buffer that can hold an email address: user@domain smth TCPIP_SMTPC_CLIENT_AUTH_BUFFER_SIZE size of a buffer that can hold the 2* username and password TCPIP_SMTPC_CLIENT_MESSAGE_DATE default string that identifies the SMTPC client mail date Currently there is no date/time service available The mail server will update with the current date Keep the current data/time format that's accepted by the SMTP servers TCPIP_SMTPC_INTERNAL_RETRY_TIMEOUT The retry interval because of a SMTPC temporary error in seconds These include temporary errors related to: DNS socket connection TLS TCPIP_SMTPC_MAIL_CONNECTIONS number of mail connections (sockets) to be created each mail message requires a mail connection adjust based on the number of simultaneous mail messages in transit TCPIP_SMTPC_MAIL_RETRIES How many times to retry sending a mail message Retries occur only for server reported transient errors or for internal temporary errors (DNS socket errors etc ) TCPIP_SMTPC_PLAIN_LINE_BUFF_SIZE size of an email line when sending the email body as plain text SMTP lines are recommended to be 78 chars long and MUST not exceed 998 characters This implementation limits the line size to TCPIP_SMTPC_PLAIN_LINE_BUFF_SIZE (usually 256 or 512) So any mail line longer that this size will have inserted an artificial end of line sequence (CRLF) after this many characters TCPIP_SMTPC_SERVER_DATA_TIMEOUT server acknowledgment of the mail data: body attachments et all; seconds Should be adjusted according to the server responsivity RFC specifies it as 10 min Default is 1 minute which should normally be enough TCPIP_SMTPC_SERVER_REPLY_BUFFER_SIZE size of the RX buffer for processing the server replies Usually the server replies are not very long so a 512 bytes buffer will normally do TCPIP_SMTPC_SERVER_REPLY_TIMEOUT general server response timeout seconds Should be adjusted according to the server responsivity RFC specifies it as 5 min Default is 1 minute which should normally be enough TCPIP_SMTPC_SERVER_TRANSIENT_RETRY_TIMEOUT The retry interval because of a server transient error in seconds RFC specifies it should be at least 30 min TCPIP_SMTPC_SKT_RX_BUFF_SIZE Define the size of the RX buffer for the SMTPC socket Use 0 for default TCP socket value The SMTPC RX does not need high throughput so the default value is usually fine TCPIP_SMTPC_SKT_TX_BUFF_SIZE Define the size of the TX buffer for the SMTPC socket Use 0 for default TCP socket value The SMTPC TX does not need high throughput so the default value is usually fine For transferring large files increase this value as needed TCPIP_SMTPC_TASK_TICK_RATE SMTPC task rate milliseconds The default value is 55 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_SMTPC_TLS_HANDSHAKE_TIMEOUT the timeout for the TLS handshake to complete seconds when a secure connection is established to the mail server Adjust based on the processing speed key size etc TCPIP_SMTPC_USE_MAIL_COMMAND Use the sample tcpip console \"mail\" command for sending email from the console Functions  TCPIP_SMTPC_MailMessage SMTPC mail message function TCPIP_SMTPC_MessageQuery SMTPC mail message query function TCPIP_SMTPC_Task Standard TCP/IP stack module task function Data Types and Functions  TCPIP_SMTPC_ATTACH_BUFFER Buffer attachment to the mail TCPIP_SMTPC_ATTACH_FILE File attachment to the mail TCPIP_SMTPC_ATTACH_TYPE SMTPC attachment type TCPIP_SMTPC_ENCODE_TYPE SMTPC encoding type TCPIP_SMTPC_MAIL_FLAGS Mail message flags TCPIP_SMTPC_MAIL_MESSAGE Mail message descriptor TCPIP_SMTPC_MESSAGE_CALLBACK Defines a mail message callback TCPIP_SMTPC_MESSAGE_HANDLE Defines a handle to a mail message TCPIP_SMTPC_MESSAGE_QUERY Structure defining a run time query for a mail message TCPIP_SMTPC_MESSAGE_REPORT Structure defining a mail message report TCPIP_SMTPC_MESSAGE_RESULT SMTPC result code TCPIP_SMTPC_MESSAGE_STATUS SMTPC message status TCPIP_SMTPC_MESSAGE_WARNING SMTPC warning type TCPIP_SMTPC_MODULE_CONFIG SMTPC configuration data TCPIP_SMTPC_SERVER_REPLY_CALLBACK Defines a mail server reply callback __SMTPC_H This is macro __SMTPC_H ",
							" __SMTPC_H Macro ",
							" C #define __SMTPC_H ",
							" Description This is macro __SMTPC_H ",
							" TCPIP_SMTPC_ATTACH_BUFFER Structure ",
							" C typedef struct { TCPIP_SMTPC_ATTACH_TYPE attachType; TCPIP_SMTPC_ENCODE_TYPE attachEncode; const char* attachName; const uint8_t* attachBuffer; size_t attachSize; } TCPIP_SMTPC_ATTACH_BUFFER; ",
							" Description Structure: TCPIP_SMTPC_ATTACH_BUFFER This data structure describes a mail buffer attachment ",
							" Members Members Description attachType Type of the contained data attachEncode Preferred encoding attachName File name to be used for the attachment attachBuffer Buffer containing the data attachSize Buffer size ",
							" Remarks A buffer attachment is attached to the email just like a file But data is taken from the persistent user buffer rather than from a file If the attach type is application octet stream then the suggested encoding will be overwritten and BASE64 encoding will be used The user supplied buffer has to be persistent until the mail completion callback will be called ",
							" TCPIP_SMTPC_ATTACH_FILE Structure ",
							" C typedef struct { TCPIP_SMTPC_ATTACH_TYPE attachType; TCPIP_SMTPC_ENCODE_TYPE attachEncode; const char* fileName; } TCPIP_SMTPC_ATTACH_FILE; ",
							" Description Structure: TCPIP_SMTPC_ATTACH_FILE This data structure describes a mail file attachment ",
							" Members Members Description attachType Type of the contained data attachEncode Preferred encoding fileName Name of the file to be opened ",
							" Remarks The specified file will be opened for reading and attached to the email If the attach type is application octet stream then the suggested encoding will be overwritten and BASE64 encoding will be used The file has to be persistent until the mail completion callback will be called If file could not be opened when the mail is sent a warning will be issued and the file will be ignored ",
							" TCPIP_SMTPC_ATTACH_TYPE Enumeration ",
							" C typedef enum { TCPIP_SMTPC_ATTACH_TYPE_UNKNOWN = 0x0000 TCPIP_SMTPC_ATTACH_TYPE_APPLICATION = 0x0001 TCPIP_SMTPC_ATTACH_TYPE_TEXT = 0x0002 TCPIP_SMTPC_ATTACH_TYPE_INLINE = 0x8000 } TCPIP_SMTPC_ATTACH_TYPE; ",
							" Description Enumeration: TCPIP_SMTPC_ATTACH_TYPE Enumeration describing the possible attachment types supported by the SMTPC client ",
							" Members Members Description TCPIP_SMTPC_ATTACH_TYPE_UNKNOWN = 0x0000 Unknown attachment type; will default to binary TCPIP_SMTPC_ATTACH_TYPE_APPLICATION = 0x0001 Application octet stream binary Use this attachment type when sending binary data TCPIP_SMTPC_ATTACH_TYPE_TEXT = 0x0002 Plain text Use this attachment type when sending ASCII text Other supported types will be added here TCPIP_SMTPC_ATTACH_TYPE_INLINE = 0x8000 Flag for sending the data as inline instead of attachment ",
							" Remarks Only one attachment type should be set at a time ",
							" TCPIP_SMTPC_ENCODE_TYPE Enumeration ",
							" C typedef enum { TCPIP_SMTPC_ENCODE_TYPE_UNKNOWN TCPIP_SMTPC_ENCODE_TYPE_7BIT TCPIP_SMTPC_ENCODE_TYPE_BASE64 } TCPIP_SMTPC_ENCODE_TYPE; ",
							" Description Enumeration: TCPIP_SMTPC_ENCODE_TYPE Enumeration describing the possible encoding types supported by the SMTPC client ",
							" Members Members Description TCPIP_SMTPC_ENCODE_TYPE_UNKNOWN Unknown encoding type; defaults to base64 TCPIP_SMTPC_ENCODE_TYPE_7BIT 7bit encoding type: no encoding done 7 bit ASCII This doesn't do any encoding Use it for plain text TCPIP_SMTPC_ENCODE_TYPE_BASE64 Base64 encoding applied Mandatory for binary data; could be used for plain data as well Other supported types will be added here ",
							" Remarks Normally plain text should be sen using the 7bit encoding type i e plain ASCII However selecting base64 encoding has the advantage that the lines are not limited in length and any sequence of characters can be present in the email body without the need of the SMTPC to search and replace the SMTP forbidden characters ",
							" TCPIP_SMTPC_MAIL_FLAGS Enumeration ",
							" C typedef enum { TCPIP_SMTPC_MAIL_FLAG_USE_IPV6 = 0x0001 TCPIP_SMTPC_MAIL_FLAG_BODY_TYPE_BINARY = 0x0002 TCPIP_SMTPC_MAIL_FLAG_BODY_ENCODE_ASCII = 0x0004 TCPIP_SMTPC_MAIL_FLAG_CONNECT_TLS = 0x0010 TCPIP_SMTPC_MAIL_FLAG_SKIP_TLS = 0x0020 TCPIP_SMTPC_MAIL_FLAG_FORCE_TLS = 0x0040 TCPIP_SMTPC_MAIL_FLAG_AUTH_PLAIN = 0x0100 TCPIP_SMTPC_MAIL_FLAG_FORCE_AUTH = 0x0200 TCPIP_SMTPC_MAIL_FLAG_GREET_HELO = 0x0400 } TCPIP_SMTPC_MAIL_FLAGS; ",
							" Description Enumeration: TCPIP_SMTPC_MAIL_FLAGS Enumeration describing the possible mail message flags supported by the SMTPC client ",
							" Members Members Description TCPIP_SMTPC_MAIL_FLAG_USE_IPV6 = 0x0001 Use IPv6 connection to the server rather than default IPv4 TCPIP_SMTPC_MAIL_FLAG_BODY_TYPE_BINARY = 0x0002 Mail body is binary rather then standard plain text TCPIP_SMTPC_MAIL_FLAG_BODY_ENCODE_ASCII = 0x0004 Send mail body as plain ASCII encoding rather than default BASE64 TCPIP_SMTPC_MAIL_FLAG_CONNECT_TLS = 0x0010 Connect with TLS from the very beginning This flag is useful if the server accepts encrypted connections on port 465 for example Note that port 465 is not really a SMTP port although supported by many servers TCPIP_SMTPC_MAIL_FLAG_SKIP_TLS = 0x0020 Skip TLS even if the server supports it most servers won't accept mail if TLS is skipped though TCPIP_SMTPC_MAIL_FLAG_FORCE_TLS = 0x0040 Start TLS even if the server does not indicate support for it TCPIP_SMTPC_MAIL_FLAG_AUTH_PLAIN = 0x0100 Favor PLAIN authentication if supported by default the LOGIN authentication is selected TCPIP_SMTPC_MAIL_FLAG_FORCE_AUTH = 0x0200 Force authentication even if server doesn't specifically request one by default the authentication is skipped TCPIP_SMTPC_MAIL_FLAG_GREET_HELO = 0x0400 Use old 'HELO' greeting insted of extended 'EHLO' which is default ",
							" Remarks Multiple flags can be set Only 16 bit flags supported If no flags are set then the default settings are used for the mail message Normally the mail body is plain text Using these flags a binary mail body can be sent Normally the mail body is plain text so a standard ASCII encoding is used Using these flags a BASE64 encoding for the mail body can be selected Note that if the mail body is selected to be binary then the BASE64 encoding is automatically selected BASE64 encoding has the advantage that the mail body lines are not limited in length and any sequence of characters can be present in the email body without the need of the SMTPC to search and replace the SMTP forbidden characters Normally the connection to the server occurs on a standard SMTP port: 25 or (preferred) 587 as a plain/non-encrypted connection Once the server replies with TLS support the encryption is started Using the flags you can force the connection to be TLS from the very beginning Or you can avoid engaging in TLS even if the server supports it Or try to start TLS even if the server didn't advertise support for it ",
							" TCPIP_SMTPC_MAIL_MESSAGE Structure ",
							" C typedef struct { const char* from; const char* to; const char* sender; const char* cc; const char* bcc; const char* date; const char* subject; const uint8_t* body; size_t bodySize; int nBuffers; const TCPIP_SMTPC_ATTACH_BUFFER* attachBuffers; int nFiles; const TCPIP_SMTPC_ATTACH_FILE* attachFiles; const char* username; const char* password; const char* smtpServer; uint16_t serverPort; TCPIP_SMTPC_MAIL_FLAGS messageFlags; TCPIP_SMTPC_MESSAGE_CALLBACK messageCallback; TCPIP_SMTPC_SERVER_REPLY_CALLBACK replyCallback; } TCPIP_SMTPC_MAIL_MESSAGE; ",
							" Description Structure: TCPIP_SMTPC_MAIL_MESSAGE This data structure describes a mail message ",
							" Members Members Description from Mandatory Mail Fields recipient return address to Destination address sender Optional Mail Fields if sent on behalf of someone else cc Carbon copy destination address bcc Blind carbon copy destination address date Date for the mail message Should be formatted like: \"Wed 20 July 2016 14:55:06 -0600\" If NULL then the TCPIP_SMTPC_CLIENT_MESSAGE_DATE will be used subject Regular Mail Fields mail subject line nBuffers Mail Attachments number of attached buffers attachBuffers Array of buffer attachments nFiles Number of attached files attachFiles Array of file attachments username Mail Authentication: username to be presented when the mail server requires authentication password Associated password to be presented when the mail server requires authentication smtpServer Mail Server: address or name of a server to send the mail to (smtp gmail com 74 125 23 109 etc ) serverPort Port on which the SMTP server listens on Standard SMTP ports are 25 or 587 For servers supporting TLS (gmail yahoo etc ) the recommended port is 587 messageFlags Additional message flags messageCallback Mail Notifications: message completion notification could be NULL if not needed replyCallback Server reply notification could be NULL if not needed ",
							" Remarks SMTPC does NOT make private copies of the strings buffers etc presented in a TCPIP_SMTPC_MAIL_MESSAGE data structure All fields that are pointers to strings buffers files names etc MUST be persistent until the mail complete notification is received The TCPIP_SMTPC_MAIL_MESSAGE data structure itself does not need to be persistent The mail body is not a char* but uint8_t* to allow sending binary data as well as part of the mail body This requires though that the bodySize member is present If some file could not be opened when the mail is sent a warning will be issued and the file will be ignored Currently the fields: \"sender\" \"cc\" and \"bcc\" are not used They will be eventually added ",
							" TCPIP_SMTPC_MailMessage Function ",
							" C TCPIP_SMTPC_MESSAGE_HANDLE TCPIP_SMTPC_MailMessage( const TCPIP_SMTPC_MAIL_MESSAGE* pMailMessage TCPIP_SMTPC_MESSAGE_RESULT* pRes ); ",
							" Description This function sends a mail message to the specified server ",
							" Preconditions SMTPC module should have been initialized ",
							" Parameters Parameters Description pMailMessage Pointer to a TCPIP_SMTPC_MAIL_MESSAGE describing the mail message to be sent pRes Address to store the operation result If the call failed additional info will be reported with this result Can be NULL if not needed ",
							" Returns A valid handle ( = 0) - If mail message scheduled successfully 0 - If call failed Error code otherwise ",
							" Remarks The returned handle is valid until the final mail notification function is called (TCPIP_SMTPC_MESSAGE_CALLBACK()) if exists or until the mail transaction is completed After that the messageHandle is no longer valid and should not be used again ",
							" TCPIP_SMTPC_MESSAGE_CALLBACK Type ",
							" C typedef void (* TCPIP_SMTPC_MESSAGE_CALLBACK)(TCPIP_SMTPC_MESSAGE_HANDLE messageHandle const TCPIP_SMTPC_MESSAGE_REPORT* pMailReport); ",
							" Description Type: TCPIP_SMTPC_MESSAGE_CALLBACK Data type describing a function that will be called by the SMTPC module upon completion of the mail message ",
							" Parameters Parameters Description messageHandle Handle identifying the message This handle was obtained with a call to TCPIP_SMTPC_MailMessage() pMailReport Pointer to a TCPIP_SMTPC_MESSAGE_REPORT data structure containing the result of the message delivery messageRes The result of the message errorStat error status messageWarn Warnings leftRetries Number of times the delivery will be re-attemtped ",
							" Remarks A message handle is used rather than the user's TCPIP_SMTPC_MAIL_MESSAGE This allows sending multiple copies of the message without waiting for a previous copy to be done This notification can be called multiple times if the delivery attempt failed for a transient reson The number of left retries tells if another attempt will be retried Once this final notification function is called (left retries == 0) the SMTPC no longer uses the TCPIP_SMTPC_MAIL_MESSAGE data (unless there are other copies of this message in transit) This messageHandle is no longer valid and should not be used again The pMailReport points to a SMTPC owned read only data structure It should be used only to inspect the message delivery result ",
							" TCPIP_SMTPC_MESSAGE_HANDLE Type ",
							" C typedef const void* TCPIP_SMTPC_MESSAGE_HANDLE; ",
							" Description Type: TCPIP_SMTPC_MESSAGE_HANDLE Data type describing a handle that identifies a mail message that's scheduled for transmission This handle is to be used for retrieving the message status This handle will be part of the callback that the SMTP client will use to notify the user of the mail completion A valid handle is = 0 ",
							" Remarks None ",
							" TCPIP_SMTPC_MESSAGE_QUERY Structure ",
							" C typedef struct { TCPIP_SMTPC_MESSAGE_STATUS messageStat; TCPIP_SMTPC_MESSAGE_WARNING messageWarn; int messageRetries; NET_PRES_SKT_HANDLE_T messageSkt; } TCPIP_SMTPC_MESSAGE_QUERY; ",
							" Description Structure: TCPIP_SMTPC_MESSAGE_QUERY This data structure describes a mail message query at run time ",
							" Members Members Description messageStat The current status of the mail messag e messageWarn The current warnings encountered during the message transmission messageRetries The current number of retries left for this message messageSkt The socket associated with this message ",
							" Remarks The message status is for info purposes only The message status changes as is processed by the SMTPC module ",
							" TCPIP_SMTPC_MESSAGE_REPORT Structure ",
							" C typedef struct { TCPIP_SMTPC_MESSAGE_RESULT messageRes; TCPIP_SMTPC_MESSAGE_STATUS errorStat; TCPIP_SMTPC_MESSAGE_WARNING messageWarn; int leftRetries; } TCPIP_SMTPC_MESSAGE_REPORT; ",
							" Description Structure: TCPIP_SMTPC_MESSAGE_REPORT This data structure describes a mail message report It is used by the SMTPC to report an mail delivery result ",
							" Members Members Description messageRes The result of the message TCPIP_SMTPC_RES_OK if the message was successfully transmited else some error were encountered errorStat The mail message status in which the error occurred if any Else the TCPIP_SMTPC_MESSAGE_STAT_NONE will be used messageWarn Warnings encountered during the message transmission if any leftRetries The number of retries that will still be attempted if error was a transient not fatal ",
							" Remarks None ",
							" TCPIP_SMTPC_MESSAGE_RESULT Enumeration ",
							" C typedef enum { TCPIP_SMTPC_RES_OK = 0 TCPIP_SMTPC_RES_PENDING = 1 TCPIP_SMTPC_RES_MESSAGE_ERROR = -1 TCPIP_SMTPC_RES_MESSAGE_SERVER_ERROR = -2 TCPIP_SMTPC_RES_MESSAGE_RCPT_ERROR = -3 TCPIP_SMTPC_RES_MESSAGE_BUFFER_ERROR = -4 TCPIP_SMTPC_RES_MESSAGE_FILE_ERROR = -5 TCPIP_SMTPC_RES_MESSAGE_AUTH_REQUIRED = -6 TCPIP_SMTPC_RES_MESSAGE_AUTH_LEN_ERROR = -7 TCPIP_SMTPC_RES_MESSAGE_ADDR_LEN_ERROR = -8 TCPIP_SMTPC_RES_MAIL_BUSY = -9 TCPIP_SMTPC_RES_DNS_ERROR = -10 TCPIP_SMTPC_RES_SKT_OPEN_ERROR = -11 TCPIP_SMTPC_RES_SKT_BIND_ERROR = -12 TCPIP_SMTPC_RES_SKT_CONNECT_TMO = -13 TCPIP_SMTPC_RES_SKT_TLS_ERROR = -14 TCPIP_SMTPC_RES_SERVER_TMO = -15 TCPIP_SMTPC_RES_CONNECTION_REJECT = -16 TCPIP_SMTPC_RES_CONNECTION_CLOSE = -17 TCPIP_SMTPC_RES_HELLO_REJECT = -18 TCPIP_SMTPC_RES_AUTH_UNKNOWN = -19 TCPIP_SMTPC_RES_AUTH_LOGIN_REJECT = -20 TCPIP_SMTPC_RES_AUTH_LOGIN_SERVER_ERROR = -21 TCPIP_SMTPC_RES_AUTH_REJECT = -22 TCPIP_SMTPC_RES_TLS_REJECT = -23 TCPIP_SMTPC_RES_TLS_FAILED = -24 TCPIP_SMTPC_RES_TLS_TMO = -25 TCPIP_SMTPC_RES_MAIL_FROM_REJECT = -26 TCPIP_SMTPC_RES_MAIL_RCPT_REJECT = -27 TCPIP_SMTPC_RES_MAIL_DATA_REJECT = -28 TCPIP_SMTPC_RES_MAIL_BODY_REJECT = -29 TCPIP_SMTPC_RES_INITIALIZE_ERROR = -40 TCPIP_SMTPC_RES_INTERNAL_ERROR = -41 } TCPIP_SMTPC_MESSAGE_RESULT; ",
							" Description Enumeration: TCPIP_SMTPC_MESSAGE_RESULT Enumeration describing the possible result codes returned by the SMTPC client ",
							" Members Members Desciption TCPIP_SMTPC_RES_OK = 0 OK operation successful TCPIP_SMTPC_RES_PENDING = 1 Operation in progress TCPIP_SMTPC_RES_MESSAGE_ERROR = -1 Mail message error TCPIP_SMTPC_RES_MESSAGE_SERVER_ERROR = -2 Message indicated wrong mail server TCPIP_SMTPC_RES_MESSAGE_RCPT_ERROR = -3 Message mail recipient error: from to etc TCPIP_SMTPC_RES_MESSAGE_BUFFER_ERROR = -4 Attachment buffer error TCPIP_SMTPC_RES_MESSAGE_FILE_ERROR = -5 Attachment file error TCPIP_SMTPC_RES_MESSAGE_AUTH_REQUIRED = -6 Server requires authentication but username or password haven't been provided TCPIP_SMTPC_RES_MESSAGE_AUTH_LEN_ERROR = -7 Provided credentials are too long buffer overflow TCPIP_SMTPC_RES_MESSAGE_ADDR_LEN_ERROR = -8 Email address too long buffer overflow TCPIP_SMTPC_RES_MAIL_BUSY = -9 All mail connections are busy; try later TCPIP_SMTPC_RES_DNS_ERROR = -10 Failure to resolve server name TCPIP_SMTPC_RES_SKT_OPEN_ERROR = -11 Failure to open a communication socket TCPIP_SMTPC_RES_SKT_BIND_ERROR = -12 Failure to bind a socket to the mail server TCPIP_SMTPC_RES_SKT_CONNECT_TMO = -13 Connection to mail server timeout TCPIP_SMTPC_RES_SKT_TLS_ERROR = -14 TLS is required but failed to start TLS on the communication socket TCPIP_SMTPC_RES_SERVER_TMO = -15 Server timeout TCPIP_SMTPC_RES_CONNECTION_REJECT = -16 Server rejected the connection TCPIP_SMTPC_RES_CONNECTION_CLOSE = -17 Server closed the connection TCPIP_SMTPC_RES_HELLO_REJECT = -18 Server rejected the hello greeting TCPIP_SMTPC_RES_AUTH_UNKNOWN = -19 Server requires authentication mechanism unsupported by SMTPC Currently LOGIN and PLAIN authentications are supported TCPIP_SMTPC_RES_AUTH_LOGIN_REJECT = -20 Server rejected the login authentication request TCPIP_SMTPC_RES_AUTH_LOGIN_SERVER_ERROR = -21 uUnexpected server reply to login authentication request TCPIP_SMTPC_RES_AUTH_REJECT = -22 Server rejected the supplied authentication TCPIP_SMTPC_RES_TLS_REJECT = -23 Server rejected the TLS start TCPIP_SMTPC_RES_TLS_FAILED = -24 TLS session negotiation failed TCPIP_SMTPC_RES_TLS_TMO = -25 TLS session timeout TCPIP_SMTPC_RES_MAIL_FROM_REJECT = -26 Server rejected the \"from\" address TCPIP_SMTPC_RES_MAIL_RCPT_REJECT = -27 Server rejected the \"recipient\" address TCPIP_SMTPC_RES_MAIL_DATA_REJECT = -28 Server rejected the \"data\" field TCPIP_SMTPC_RES_MAIL_BODY_REJECT = -29 Server rejected the mail body TCPIP_SMTPC_RES_INITIALIZE_ERROR = -40 Module is not properly initialized API call is invalid TCPIP_SMTPC_RES_INTERNAL_ERROR = -41 ISnternal failure should not happen ",
							" Remarks None ",
							" TCPIP_SMTPC_MESSAGE_STATUS Enumeration ",
							" C typedef enum { TCPIP_SMTPC_MESSAGE_STAT_NONE TCPIP_SMTPC_MESSAGE_STAT_DNS TCPIP_SMTPC_MESSAGE_STAT_CONNECT TCPIP_SMTPC_MESSAGE_STAT_HELLO TCPIP_SMTPC_MESSAGE_STAT_TLS TCPIP_SMTPC_MESSAGE_STAT_AUTH TCPIP_SMTPC_MESSAGE_STAT_MAIL_ENVELOPE TCPIP_SMTPC_MESSAGE_STAT_MAIL_BODY TCPIP_SMTPC_MESSAGE_STAT_MAIL_BUFFERS TCPIP_SMTPC_MESSAGE_STAT_MAIL_FILES TCPIP_SMTPC_MESSAGE_STAT_MAIL_ACKNOWLEDGE TCPIP_SMTPC_MESSAGE_STAT_MAIL_REPORT TCPIP_SMTPC_MESSAGE_STAT_CLOSING TCPIP_SMTPC_MESSAGE_STAT_WAIT_RETRY } TCPIP_SMTPC_MESSAGE_STATUS; ",
							" Description Enumeration: TCPIP_SMTPC_MESSAGE_STATUS Enumeration describing the possible states of a mail message during a mail transmission The message progresses through various states until complete mail transfer or error ",
							" Parameters Parameters Description TCPIP_SMTPC_MESSAGE_STAT_NONE There is no transaction started TCPIP_SMTPC_MESSAGE_STAT_DNS Doing the DNS resolution TCPIP_SMTPC_MESSAGE_STAT_CONNECT Connecting to the server TCPIP_SMTPC_MESSAGE_STAT_HELLO Saying hello to the server TCPIP_SMTPC_MESSAGE_STAT_TLS Starting the TLS communication with the servers TCPIP_SMTPC_MESSAGE_STAT_AUTH Authenticating to the server TCPIP_SMTPC_MESSAGE_STAT_MAIL_ENVELOPE Sending mail envelope TCPIP_SMTPC_MESSAGE_STAT_MAIL_BODY Sending mail body TCPIP_SMTPC_MESSAGE_STAT_MAIL_BUFFERS Sending mail buffers TCPIP_SMTPC_MESSAGE_STAT_MAIL_FILES sending mail files TCPIP_SMTPC_MESSAGE_STAT_MAIL_ACKNOWLEDGE Waiting for the mail acknowledge TCPIP_SMTPC_MESSAGE_STAT_MAIL_REPORT Reporting the mail outcome TCPIP_SMTPC_MESSAGE_STAT_CLOSING Closing the mail transaction TCPIP_SMTPC_MESSAGE_STAT_WAIT_RETRY Waiting for a retry ",
							" Remarks TCPIP_SMTPC_MESSAGE_STAT_HELLO will occur twice if TLS is supported by the server Once the connection is secured another HELLO message will be sent to the server ",
							" TCPIP_SMTPC_MESSAGE_WARNING Enumeration ",
							" C typedef enum { TCPIP_SMTPC_WARN_REPLY_BUFFER_SMALL = 0x0001 TCPIP_SMTPC_WARN_WRONG_FORMAT = 0x0002 TCPIP_SMTPC_WARN_UNEXPECTED_REPLY = 0x0004 TCPIP_SMTPC_WARN_FILE_NOT_FOUND = 0x0008 TCPIP_SMTPC_WARN_AUTH_LOGIN_LEN = 0x0010 } TCPIP_SMTPC_MESSAGE_WARNING; ",
							" Description Enumeration: TCPIP_SMTPC_MESSAGE_WARNING Enumeration describing the possible warning types occurring during a mail transmission These events are not fatal and SMTPC client will try to complete the mail transfer ",
							" Parameters Parameters Description TCPIP_SMTPC_WARN_REPLY_BUFFER_SMALL = 0x0001 The reply buffer allocated for the server replies is too small server reply exceeded the size of the buffer it should be increased TCPIP_SMTPC_WARN_WRONG_FORMAT = 0x0002 Server reply was not properly formatted TCPIP_SMTPC_WARN_UNEXPECTED_REPLY = 0x0004 Unexpected server replied received TCPIP_SMTPC_WARN_FILE_NOT_FOUND = 0x0008 File attachment not found; ignored TCPIP_SMTPC_WARN_AUTH_LOGIN_LEN = 0x0010 Provided credentials for LOGIN authentication are too long and were truncated (buffer overflow) this most likely will result in a server authentication rejection ",
							" Remarks Multiple warnings could be set during a mail transmission ",
							" TCPIP_SMTPC_MessageQuery Function ",
							" C TCPIP_SMTPC_MESSAGE_RESULT TCPIP_SMTPC_MessageQuery( TCPIP_SMTPC_MESSAGE_HANDLE messageHandle TCPIP_SMTPC_MESSAGE_QUERY* pQuery ); ",
							" Description This function allows the query of a mail message at run time ",
							" Preconditions SMTPC module should have been initialized ",
							" Parameters Parameters Description messageHandle Handle identifying the message This handle was obtained with a call to TCPIP_SMTPC_MailMessage() pQuery Pointer to a TCPIP_SMTPC_MESSAGE_QUERY() structure that will be updated with the current status of the mail message ",
							" Returns TCPIP_SMTPC_RES_OK - If message query updated successfully TCPIP_SMTPC_RES_MESSAGE_ERROR - If no such message exists ",
							" Remarks The message status is for info purposes only The message status changes as is processed by the SMTPC module Once the mail transfer is complete and the corresponding notification function is called the messageHandle is no longer valid and should not be used again ",
							" TCPIP_SMTPC_MODULE_CONFIG Structure ",
							" C typedef struct { int nMailConnections; uint32_t serverReplyTmo; uint32_t serverDataTmo; uint32_t tlsHandshakeTmo; int nMailRetries; uint32_t serverRetryTmo; uint32_t smtpcRetryTmo; uint16_t sktTxBuffSize; uint16_t sktRxBuffSize; } TCPIP_SMTPC_MODULE_CONFIG; ",
							" Description Structure: TCPIP_SMTPC_MODULE_CONFIG This data structure describes the SMTPC configuration data It is presented to the module as part of the module initialization ",
							" Parameters Parameters Description nMailConnections Number of mail connections to be created each mail message to be sent requires a mail connection adjust based on the number of simultaneous mail messages in transit serverReplyTmo General server response timeout in seconds Should be adjusted according to the server responsivity RFC specifies it as 5 min serverDataTmo Server response timeout to acknowledge a received mail body/data in seconds Should be adjusted according to the server responsivity RFC specifies it as 10 min tlsHandshakeTmo Secure connection establishment timeout in seconds usually few seconds nMailRetries How many times to retry sending a failed mail message Retries occur only for server reported transient errors Could be 0 if only one mail send is to be attempted without retries serverRetryTmo The retry interval because of a server transient error in seconds RFC specifies it should be at least 30 min smtpcRetryTmo The retry interval because of a SMTPC temporary error in seconds These include temporary errors related to: DNS socket connection TLS sktTxBuffSize Size of TX buffer for the associated socket; leave 0 for default sktRxBuffSize Size of RX buffer for the associated socket; leave 0 for default ",
							" Remarks None ",
							" TCPIP_SMTPC_SERVER_REPLY_CALLBACK Type ",
							" C typedef void (* TCPIP_SMTPC_SERVER_REPLY_CALLBACK)(TCPIP_SMTPC_MESSAGE_HANDLE messageHandle TCPIP_SMTPC_MESSAGE_STATUS currStat const char* serverReply); ",
							" Description Type: TCPIP_SMTPC_SERVER_REPLY_CALLBACK Data type describing a function that will be called by the SMTPC module upon receiving a message from the mail server SMTPC will parse and process the server messages anyway but it can optionally pass the server replies to the user ",
							" Parameters Parameters Description messageHandle Handle identifying the message This handle was obtained with a call to TCPIP_SMTPC_MailMessage() currStat The current status for the mail message serverReply The reply sent by the server ",
							" Remarks None ",
							" TCPIP_SMTPC_Task Function ",
							" C void TCPIP_SMTPC_Task(); ",
							" Description This function performs SMTPC module tasks in the TCP/IP stack ",
							" Preconditions SMTPC module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" SNMP Module SNMP is one of the key components of a Network Management System (NMS) SNMP is an application layer protocol that facilitates the exchange of management information among network devices It is a part of the TCP/IP protocol suite SNMP is an Internet protocol that was originally designed to manage different network devices such as file servers hubs routers and so on It can also be used to manage and control an ever increasing number of small embedded systems connected to one another over any IP network Systems can communicate with each other using SNMP to transfer control and status information creating a truly distributed system SNMP is used in a variety of devices where remote monitoring and controlling of the network node is desired such as a network printer online Uninterrupted Power Supply (UPS) security cameras home and industrial appliances monitor and control automatic energy meter readings etc Unlike more familiar human-oriented protocols like HTTP SNMP is considered a machine-to-machine protocol Note: The related application note AN870 \"SNMP V2c Agent for Microchip TCP/IP Stack\" (DS8000870) is available for download from the Microchip web site at: http://ww1 microchip com/downloads/en/AppNotes/00870b pdf Abstraction Model TCPIP SNMP Abstraction Model SNMP Server (Agent) SNMP is an Internet protocol that was originally designed to manage different network devices such as file servers hubs routers and so on It can also be used to manage and control an ever increasing number of small embedded systems connected to one another over any IP network Systems can communicate with each other using SNMP to transfer control and status information creating a truly distributed system Location of the SNMP Stack in the TCP/IP Protocol Stack: tcpip_stack_diagram The Microchip SNMP Server is a multi-lingual implementation which supports SNMPv1 V2c and V3 server features simultaneously The SNMP Server is implemented to address the requirements of embedded applications and works with both IPv4 and IPv6 addresses SNMPv1 and V2c are enabled by TCPIP_STACK_USE_SNMP_SERVER SNMPv3 support is enabled by TCPIP_STACK_USE_SNMPV3_SERVER Since the SNMPv3 stack requires the support of SNMPv1 and SNMPv2c TCPIP_STACK_USE_SNMPV3_SERVER should be enabled with TCPIP_STACK_USE_SNMP_SERVER Note: Currently the SNMP agent will be able to communicate with one manager at a time and it will be connected to either an IPv4 address or an IPv6 address V2c V2c is implemented with support for the configuration of multiple community names and the community names can be configured through the HTTP web interface An access-restricted web page is provided with the demonstration application to allow dynamic configuration of SNMP communities SNMPv3 SNMPv3 RFC specifies different types of access mechanisms user security model (USM) authentication and privacy protocols The Microchip SNMPv3 Server is implemented with support for the AES 128 CFB 128 and DES-CBC privacy protocols and the MD5 and SHA1 message authentication protocols The demonstration implementation of the server is configured with three types of user names with respective authentication and privacy credentials and authentication types These credentials and other user information are stored in the global array The user of the SNMPv3 stack can decide on the number of user names in the User’s database to be stored with the SNMPv3 Server According to the SNMPv3 recommendation the SNMPv3 Server should not be configured with the authentication and privacy passwords Instead it could be configured with the respective localized keys of the password The Microchip SNMPv3 agent is provided with the password information in the database for \"Getting Started\" and for understanding purposes only It is recommended that the SNMPv3 stack be modified to restrict access to the password OIDs declared in the user database Note: Even though SNMPv3 also requires SNMPv1 and SNMPv2c a layer in the SNMP Stack will prevent access to the variables that should be secured by SNMPv3 SNMP variables are structures in a tree in the MIB Access to parts of this tree is determined by version For example SYSTEM-type variables can be accessed regardless of the SNMP version while SNMPv2c requests can access part of the tree and authenticated SNMPv3 requests can access the complete tree MIB Files SNMP describes the hierarchal storage of management objects (referred to with object IDs or OIDs) with MIB files The Microchip SNMP server demonstration includes two MIB files: mchip mib - This is an Abstract Syntax Notation One (ASN 1) formatted MIB file containing information about the variables used in the demonstration snmp mib - This is a custom-formatted file that can be parsed to create Web page and header resources that can be accessed with a MCHP device The TCP/IP Stack includes the mib2bib utility which will compile the custom Microchip MIB script (snmp mib) to generate two files named snmp bib and mib h The snmp bib file is a compressed record of management objects that will be stored with web pages and the mib h file contains C defines for each OID These files are included in the appropriate directories for the TCP/IP Demonstration Applications but for a custom application the snmp bib must be copied to the web page directory mib h copied to the application directory and included in the project Rebuild your project and then rebuild and re-upload the web page This will bundle the BIB file into the web page image which will allow the SNMP agent to search for the required variable information with the MPFS file system MIB Browsers Several SNMP MIB browsers are available Users can also install a customized MIB browser specific to their application This documentation describes how to use the iREASONING Networks MIB Browser to run the TCP/IP SNMP demonstration applications The MIB Browser can be obtained from: http://www ireasoning com/downloadmibbrowserlicense shtml The MIB script upload the MIB tree structure display and the SNMP query mechanism procedures vary from browser to browser Important The use of a MIB browser or other third-party products may require that users review and agree to the terms of a license Microchip's reference to the iREASONING Networks MIB Browser is for the users' convenience It is the user's responsibility to obtain information about and comply with the terms of any applicable licenses Refer to the Microchip application note AN870 \"SNMP V2c Agent for Microchip TCP/IP Stack\" (DS00000870) for more details on the MIB scripts community names and demonstration SNMP MIB variable tree structure The ASN 1 format mchip mib file is defined with a private variable tree structure for the MIB variables Also the mchip mib is added with the number of OIDs that could be accessed only with SNMPv3 request The browser can access every variable in the MIB database provided the community name matches The access to the MIB variables is restricted to the type of the request The RFC1213 MIB variables could be accessed with SNMPv2c/v3 request But the SNMP-FRAMEWORK-MIB mib variables could only be accessed with a SNMPv3 request if the credentials are matched and the message is authenticated To modify these MIB variables corresponding changes must be made to both MIB scripts (snmp mib and mchip mib) For SNMP V2c services The V2c agent is configured by default with three Read communities (\"public\" \"read\" \"\") and three Write communities (\"private\" \"write\" \"public\") At run-time the community names can be dynamically configured using the HTTP interface for SNMP community name configuration If the V2c agent receives an SNMP request with an unknown community name the agent will generate an Authentication trap The V2c agent's multiple community support feature enables the user application to provide limited access to the requesting browser based on the community name used by the browser to access the MIB database variables of the agent For SNMPv3 services: Type USER 1 USER 2 USER 3 USM User microchip SnmpAdmin root Security Level auth priv auth no priv no auth no priv Auth Algorithm MD5 SHA1 N/A Auth Password auth12345 ChandlerUS N/A Privacy Algorithm AES N/A N/A Privacy Password priv12345 N/A N/A If SNMPv3 services are required SNMPv3 browser is required to be configured with the user name authentication and privacy password message authentication hash type privacy protocol type The SNMP server would respond only if one of the user credentials and user security parameters in the following table is configured at the manager The previous table is stored in the global structure with the SNMPv3 server stack The SNMPv3 server would only respond if the request credentials of the MIB browser matches to that of the stored user data base of the SNMP server The Microchip SNMPv3 stack does support only one Context Engine ID with the server Leave the \"Context Name\" option in the \"Advanced\" tab empty It is ignored on the server According to the user and the auth and privacy protocols configured with the SNMP browser the UDP authenticated and encrypted message would be exchanged between server and the client If the USER 1 values as shown in the table are configured in the MIB browser the data exchange between the client and server is encrypted and authenticated The PDU could be captured in the Ethernet packet sniffer such as WireShark and examined As the data is encrypted and authenticated the data integrity and the privacy is achieved If USER 2 values as shown in the table are configured in the MIB browser the data exchange between client and server is authenticated The data integrity would be checked once the data is received at either end The message authentication mechanism protects from the possible data sniffing and modification threat and also guarantees that the data is received from the authenticated and guaranteed source If USER 3 values as shown in the table are configured in the MIB browser the data exchange between client and server is neither authenticated nor encrypted Considering the three USER configurations if the SNMP server is to be accessed over WAN in the Internet cloud the data should be encrypted and authenticated to have the highest level of data privacy and integrity SNMP Traps The MPLAB Harmony TCP/IP Stack supports Trap version1 and Trap version2 formatted traps Traps are notifications from the agent to the manager that are used when a predefined event occurs at the agent From mchip mib the ipv4TrapTable and ipv6TrapTable are the two tabular sections which are used to configure HOST IPv4 and IPv6 address and this will help the HOST trap receiver to receive the traps Several preprocessor macros in the snmp_config h variant header file can be used to enable or disable traps in the agent Commenting and uncommenting these macros in the file will have different results The SNMP_TRAP_DISABLED macro will disable traps entirely if it is not commented: #define SNMP_TRAP_DISABLED The user must configure the expected trap format at the SNMP Manager SNMPv2 entities acting as an agent should be able to generate and transmit SNMP V2 trap PDUs when the manager is configured to receive and process SNMP V2 trap PDUs To configure the trap format comment or uncomment the SNMP_STACK_USE_V2_TRAP macro in the snmp_config h header file: #define SNMP_STACK_USE_V2_TRAP If the macro has been commented out the SNMP agent will send V1 formatted trap PDUs; otherwise it will send V2 formatted trap PDUs By default the SNMP agent is configured to send V2 formatted traps Note that the SNMP V2c agent should only send V2 formatted traps To enable traps in SNMPv3 the #define SNMP_V1_V2_TRAP_WITH_SNMPv3 macro must be uncommented The following table illustrates how to enable/disable traps for different versions of SNMP Type SNMPv1 SNMPv2c SNMPv3 TRAPv2 (enabled by default) Comment out the #define SNMP_TRAP_DISABLED macro Comment out the #define SNMP_TRAP_DISABLED macro Comment out the #define SNMP_TRAP_DISABLED macro Uncomment the #define SNMP_V1_V2_TRAP_WITH_SNMPV3 macro TRAPv2 (disabled by default) Not supported Comment out the #define SNMP_TRAP_DISABLED macro Uncomment the #define SNMP_STACK_USE_V2_TRAP macro Comment out the #define SNMP_TRAP_DISABLED macro Uncomment the #define SNMP_V1_V2_TRAP_WITH_SNMPV3 macro Uncomment the #define SNMP_STACK_USE_V2_TRAP macro Demonstrations Two trap demonstrations APIs are included with the TCP/IP Stack The task functions for these demonstrations are called in the main application function: SNMPTrapDemo - This API demonstrates V1 or V2 trap formats (depending of the status of the SNMP_STACK_USE_V2_TRAP macro) The trap PDU will only have one demonstration variable binding on the varbind list SNMPV2TrapDemo - This API provides V2 format notifications with multiple (4) variable bindings The user should modify or use this routine as a reference for sending V2 trap format notifications with multiple bindings on the varbind list Note: The user should only enable one SNMP demonstration API at a time By default the SNMPV2TrapDemo API is enabled and SNMPTrapDemo is commented out (disabled) V1/V2 Formatted Traps with a Single Variable Binding In the snmp_config h header file: Uncomment #define SNMP_TRAP_DISABLED Comment //#define SNMP_STACK_USE_V2_TRAP For the Trap demonstration two events are defined within the V2c agent: If the Analog Potentiometer value is greater than 14 the agent will send a Trap every 5 seconds to the configured 'IPv4TrapReceiverIP address' If Button 3 on the demonstration board is pressed an organization-specific PUSH_BUTTON trap will be sent The current implementation of the V2c agent also generates a standard \"Authentication Failure Trap\": If a request is received to modify (Set) a private MIB variable or If the value of the variable is requested (Get) by a browser with the wrong community name HTTP Configuration If a HTTP server is used with the Harmony TCP/IP stack it is possible to dynamically configure the Read and Write community names through the SNMP Configuration web page Access the web page using http://mchpboard_c/mpfsupload or http:// (for IPv6 it should be http:// :80/index html) and then access the SNMP Configuration web page through the navigation bar Use \"admin\" for the username and \"microchip\" for the password SNMP HTTP Community Configuration Screen Library Interface Name Description Macros  TCPIP_SNMP_BIB_FILE_NAME The Microchip mib2bib jar compiler is used to convert the Microchip MIB script to binary format and it is compatible with the Microchip SNMP agent which is written in ASCII format Name of the bib file for SNMP is snmp bib TCPIP_SNMP_COMMUNITY_MAX_LEN This is the maximum length for community string Application must ensure that this length is observed SNMP module adds one byte extra after TCPIP_SNMP_COMMUNITY_MAX_LEN for adding '0' NULL character TCPIP_SNMP_MAX_COMMUNITY_SUPPORT Specifying more strings than TCPIP_SNMP_MAX_COMMUNITY_SUPPORT will result in the later strings being ignored (but still wasting program memory) Specifying fewer strings is legal as long as at least one is present TCPIP_SNMP_MAX_MSG_SIZE The maximum length in octets of an SNMP message which this SNMP agent able to process As per RFC 3411 snmpEngineMaxMessageSize and RFC 1157 ( section 4- protocol specification ) and implementation supports more than 480 whenever feasible It should be divisible by 16 TCPIP_SNMP_MAX_NON_REC_ID_OID Update the Non record id OID value which is part of CustomSnmpDemoApp c file This is the maximum size for gSnmpNonMibRecInfo which is the list of static variable Parent OIDs which are not part of mib h file This structure is used to restrict access to static variables of SNMPv3 OIDs from SNMPv2c and SNMPv1 version With SNMPv3 all the OIDs accessible but when we are using SNMPv2c version static variables of the SNMPv3 cannot be accessible with SNMP version v2c SNMP agent supports both SMIv1 and SMIv2 standard and snmp mib has been updated with respect to SMIV2 standard and it more TCPIP_SNMP_NOTIFY_COMMUNITY_LEN Maximum length for SNMP Trap community name TCPIP_SNMP_OID_MAX_LEN Maximum length for the OID String Change this to match your OID string length TCPIP_SNMP_TASK_PROCESS_RATE SNMP task processing rate in milli-seconds The SNMP module will process a timer event with this rate for processing its own state machine etc The default value is 200 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_SNMP_TRAP_COMMUNITY_MAX_LEN The maximum size of TRAP community string length TCPIP_SNMP_TRAP_COMMUNITY_MAX_LEN_MEM_USE Trap information This macro will be used to avoid SNMP OID memory buffer corruption TCPIP_SNMP_TRAP_TABLE_SIZE This table maintains list of interested receivers who should receive notifications when some interesting event occurs TCPIP_SNMPV3_AUTH_LOCALIZED_PASSWORD_KEY_LEN SNMPv3 Authentication Localized password key length size TCPIP_SNMPV3_AUTH_LOCALIZED_PASSWORD_KEY_LEN_MEM_USE SNMPv3 authentication localized Key length for memory validation TCPIP_SNMPV3_PRIV_LOCALIZED_PASSWORD_KEY_LEN SNMPv3 Privacy Password key length size TCPIP_SNMPV3_PRIV_LOCALIZED_PASSWORD_KEY_LEN_MEM_USE SNMPv3 privacy key length size for memory validation TCPIP_SNMPV3_USER_SECURITY_NAME_LEN Maximum size for SNMPv3 User Security Name length TCPIP_SNMPV3_USER_SECURITY_NAME_LEN_MEM_USE User security name length for memory validation TCPIP_SNMPV3_USM_MAX_USER Maximum number of SNMPv3 users User Security Model should have at least 1 user Default is 3 **SNMP Module Functions **  TCPIP_SNMP_NotifyIsReady Resolves given remoteHost IP address into MAC address TCPIP_SNMP_NotifyPrepare Collects trap notification info and send ARP to remote host TCPIP_SNMP_TrapTimeGet Gets SNMP Trap UDP client open socket time-out TCPIP_SNMP_ClientGetNet Get a network interface for SNMP TRAP TCPIP_SNMP_ExactIndexGet To search for exact index node in case of a Sequence variable TCPIP_SNMP_IsValidCommunity Validates community name for access control TCPIP_SNMP_IsValidLength Validates the set variable data length to data type TCPIP_SNMP_MibIDSet Sets the agent MIB ID for SNP notification TCPIP_SNMP_NextIndexGet To search for next index node in case of a Sequence variable TCPIP_SNMP_ReadCommunityGet Gets the readCommunity String with SNMP index TCPIP_SNMP_RecordIDValidation Used to restrict the access dynamic and non dynamic OID string for a particular SNMP Version TCPIP_SNMP_SendFailureTrap Prepares and validates the remote node that will receive a trap and send the trap PDU TCPIP_SNMP_TrapInterFaceSet Sets the TRAP interface for SNMP notification TCPIP_SNMP_TRAPMibIDGet Gets the agent MIB ID for SNP notification TCPIP_SNMP_TrapSendFlagGet Gets the status of trap send flag TCPIP_SNMP_TrapSendFlagSet Sets the status of trap send flag TCPIP_SNMP_TrapSpecificNotificationGet Gets the specific trap TCPIP_SNMP_TrapSpecificNotificationSet Sets the specific trap generic trap and trap ID TCPIP_SNMP_VarbindGet Used to get/collect OID variable information TCPIP_SNMP_VarbindSet Sets the MIB variable with the requested value TCPIP_SNMP_WriteCommunityGet Gets the writeCommunity String with SNMP index TCPIP_SNMP_AuthTrapFlagGet Gets the status of authentication trap flag TCPIP_SNMP_AuthTrapFlagSet Sets the status of authentication trap flag TCPIP_SNMP_IsTrapEnabled Gets the SNMP Trap status TCPIP_SNMP_ReadCommunitySet Sets the readCommunity String with SNMP index TCPIP_SNMP_SocketIDGet Gets the Socket ID for SNMP Server socket TCPIP_SNMP_SocketIDSet Sets the Socket ID for SNMP Server socket TCPIP_SNMP_Task Standard TCP/IP stack module task function TCPIP_SNMP_TRAPTypeGet Get SNMP Trap type for version v1 and v2c TCPIP_SNMP_TRAPv1Notify Creates and Sends TRAPv1 pdu TCPIP_SNMP_TRAPv2Notify Creates and sends TRAP PDU TCPIP_SNMP_ValidateTrapIntf Gets the status of trap interface TCPIP_SNMP_WriteCommunitySet Sets the writeCommunity String with SNMP index SNMPv3 Module Functions  TCPIP_SNMPV3_EngineUserDataBaseGet Get SNMPv3 engine data base details TCPIP_SNMPV3_EngineUserDataBaseSet Set SNMPv3 engine data base details TCPIP_SNMPv3_TrapConfigDataGet Gets the SNMPv3 Trap configuration details using the user name index TCPIP_SNMPv3_Notify Creates and Sends SNMPv3 TRAP PDU TCPIP_SNMPV3_TrapTypeGet Gets SNMP Trap type for version v3 SNMP Data Types and Constants  SNMP_COMMUNITY_TYPE Definition to represent different type of SNMP communities SNMP_END_OF_VAR This Macro is used for both SNMP SET and GET Variable processing to indicate the end of SNMP variable processing For multi byte data request the end byte will be always SNMP_END_OF_VAR SNMP_INDEX_INVALID This Macro is used for both SNMP SET and GET Sequence Variable processing SNMP starts processing the start of sequence variable with Invalid index TCPIP_SNMP_ExactIndexGet and TCPIP_SNMP_NextIndexGet returns a valid index as per SNMP_INDEX_INVALID SNMP_NON_MIB_RECD_INFO Restrict access for specific OIDs SNMP_START_OF_VAR This Macro is used for both SNMP SET and GET Variable processing to indicate the start of SNMP variable processing For multi byte data request the first byte will be always SNMP_START_OF_VAR SNMP_TRAP_IP_ADDRESS_TYPE Definition of the supported address types for SNMP trap SNMP_VAL Definition to represent SNMP OID object values SNMP_ID SNMP dynamic variable ID SNMP_INDEX SNMP sequence variable index SNMP_V1 This macro is used for SNMP version 1 SNMP_V2C This macro is used for SNMP version 2 with community SNMP_V3 This macro is used for SNMP version 3 with authentication and privacy SNMP_GENERIC_TRAP_NOTIFICATION_TYPE Definition to represent different SNMP generic trap types SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE Definition to represent different SNMP vendor trap types SNMPv3 Data Types and Constants  SNMPV3_HMAC_HASH_TYPE Different type of authentication for SNMPv3 SNMPV3_PRIV_PROT_TYPE Different type of encryption and decryption for SNMPv3 STD_BASED_SNMP_MESSAGE_PROCESSING_MODEL Different SNMP Message processing model STD_BASED_SNMP_SECURITY_MODEL Different Security services for SNMPv3 messages STD_BASED_SNMPV3_SECURITY_LEVEL Different Security Level for SNMPv3 messages TCPIP_SNMPV3_USERDATABASECONFIG_TYPE Different Configuration parameters of SNMPv3 operation TCPIP_SNMP_COMMUNITY_CONFIG SNMP community configuration TCPIP_SNMP_MODULE_CONFIG SNMP module configuration TCPIP_SNMPV3_TARGET_ENTRY_CONFIG SNMP module trap target address configuration TCPIP_SNMPV3_USM_USER_CONFIG SNMPv3 USM configuration ",
							" SNMP_COMMUNITY_TYPE Enumeration ",
							" C typedef enum { READ_COMMUNITY = 1 WRITE_COMMUNITY = 2 INVALID_COMMUNITY = 3 } SNMP_COMMUNITY_TYPE; ",
							" Description Enumeration: SNMP_COMMUNITY_TYPE List of different SNMP community types ",
							" Members Members Description READ_COMMUNITY = 1 Read only community WRITE_COMMUNITY = 2 Read write community INVALID_COMMUNITY = 3 Community invalid ",
							" Remarks SNMP agent use these community types for both TRAP and SNMP agent request ",
							" SNMP_END_OF_VAR Macro ",
							" C #define SNMP_END_OF_VAR (0xff) ",
							" Description This Macro is used for both SNMP SET and GET Variable processing to indicate the end of SNMP variable processing For multi byte data request the end byte will be always SNMP_END_OF_VAR ",
							" SNMP_GENERIC_TRAP_NOTIFICATION_TYPE Enumeration ",
							" C typedef enum { COLD_START = 0x0 WARM_START = 0x1 LINK_DOWN = 0x2 LINK_UP = 0x3 AUTH_FAILURE = 0x4 EGP_NEIGHBOR_LOSS = 0x5 ENTERPRISE_SPECIFIC = 0x6 } SNMP_GENERIC_TRAP_NOTIFICATION_TYPE; ",
							" Description Enumeration: SNMP_GENERIC_TRAP_NOTIFICATION_TYPE List of different SNMP specific Notification types ",
							" Members Members Description COLD_START = 0x0 Controls the sending of SNMP coldstart notifications A coldStart(0) trap signifies that the sending protocol entity is reinitializing itself such that the configuration of the agent or the protocol entity implementation might be altered WARM_START = 0x1 Controls the sending of SNMP warmstart notifications A warmStart(1) trap signifies that the sending protocol entity is reinitializing itself so that neither the agent configuration nor the protocol entity implementation can be altered LINK_DOWN = 0x2 Controls the how SNMP linkdown notifications are sent A linkDown(2) trap signifies that the sending protocol entity recognizes a failure in one of the communication links represented in the configuration of the agent LINK_UP = 0x3 Controls the sending of SNMP linkup notifications A linkUp(3) trap signifies that the sending protocol entity recognizes that one of the communication links represented in the configuration of the agent has come up AUTH_FAILURE = 0x4 Controls the distribution of SNMP authentication failure notifications An authenticationFailure(4) trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated Like Community Name authentication failure EGP_NEIGHBOR_LOSS = 0x5 Controls the distribution of SNMP egpNeighborLoss notifications An egpNeighborLoss(5) trap signifies that an EGP neighbor for whom the sending protocol entity was an EGP peer has been marked down and the peer relationship no longer exists ENTERPRISE_SPECIFIC = 0x6 Controls the distribution of SNMP enterprise/-specific notifications An enterpriseSpecific(6) trap signifies that the sending protocol entity recognizes that some enterprise/-specific event has occurred The specific-trap field identifies the particular trap that occurred ",
							" Remarks ENTERPRISE_SPECIFIC and AUTH_FAILURE are used while sending specific trap ",
							" SNMP_INDEX Type ",
							" C typedef uint32_t SNMP_ID; ",
							" Description Type: SNMP_ID Only dynamic and AgentID variables can contain a dyanmic ID MIB2BIB utility enforces this rule when BIB was generated All the dynamic IDs are are listed in mib h The maximum value of a dynamic ID is 1023 ",
							" Remarks mib2bib jar utility generates mib h and snmp bib from Microchip MIB script DynamicVar - This command declares defined OID variable as dynamic Syntax - $DynamicVar(oidName id) ",
							" SNMP_INDEX Type ",
							" C typedef uint8_t SNMP_INDEX; ",
							" Description Type: SNMP_INDEX The current version limits the size of the index to 7 bits wide meaning that such arrays can contain up to 127 entries ",
							" Remarks SequenceVar - This command is part of Microchip MIB script declares a previously defined OID variable as a sequence variable and assigns an index to it A sequence variable can contain an array of values and any instance of its values can be referenced by an index More than one sequence variable may share a single index creating multi dimensional arrays More than one index variable is not supported by mib2bib jar compiler ",
							" SNMP_INDEX_INVALID Macro ",
							" C #define SNMP_INDEX_INVALID (0xff) ",
							" Description This Macro is used for both SNMP SET and GET Sequence Variable processing SNMP starts processing the start of sequence variable with Invalid index TCPIP_SNMP_ExactIndexGet and TCPIP_SNMP_NextIndexGet returns a valid index as per SNMP_INDEX_INVALID ",
							" SNMP_NON_MIB_RECD_INFO Structure ",
							" C typedef struct { uint8_t oidstr[16]; uint8_t version; } SNMP_NON_MIB_RECD_INFO; ",
							" Description Structure: SNMP_NON_MIB_RECD_INFO This structure is used to restrict access to static variables of SNMPv3 OIDs from SNMPv2c and SNMPv1 version OID string length is restricted to 16 ",
							" Remarks None ",
							" SNMP_START_OF_VAR Macro ",
							" C #define SNMP_START_OF_VAR (0) ",
							" Description This Macro is used for both SNMP SET and GET Variable processing to indicate the start of SNMP variable processing For multi byte data request the first byte will be always SNMP_START_OF_VAR ",
							" SNMP_TRAP_IP_ADDRESS_TYPE Enumeration ",
							" C typedef enum { IPV4_SNMP_TRAP = 1 IPV6_SNMP_TRAP } SNMP_TRAP_IP_ADDRESS_TYPE; ",
							" Description Enumeration: SNMP_TRAP_IP_ADDRESS_TYPE SNMP agent supports both IPv4 and IPv6 trap address type and is able to transmit traps to both IPv4 and IPv6 Host receiver address ",
							" Remarks None ",
							" SNMP_V1 Macro ",
							" C #define SNMP_V1 (0) ",
							" Description This macro is used for SNMP version 1 ",
							" SNMP_V2C Macro ",
							" C #define SNMP_V2C (1) ",
							" Description This macro is used for SNMP version 2 with community ",
							" SNMP_V3 Macro ",
							" C #define SNMP_V3 (3) ",
							" Description This macro is used for SNMP version 3 with authentication and privacy ",
							" SNMP_VAL Union ",
							" C typedef union { uint32_t dword; uint16_t word; uint8_t byte; uint8_t v[sizeof(uint32_t)]; } SNMP_VAL; ",
							" Description Union: SNMP_VAL SNMP agent processes different variable types ",
							" Remarks None ",
							" SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE Enumeration ",
							" C typedef enum { VENDOR_TRAP_DEFAULT = 0x0 BUTTON_PUSH_EVENT = 0x1 POT_READING_MORE_512 = 0x2 } SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE; ",
							" Description Enumeration: SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE List of different SNMP Vendor Notification types ",
							" Members Members Description VENDOR_TRAP_DEFAULT = 0x0 Default trap Agent send use this trap when there is authentication failure BUTTON_PUSH_EVENT = 0x1 PUSH button event trap notification POT_READING_MORE_512 = 0x2 Analog POT meter event trap notification ",
							" Remarks None ",
							" SNMPV3_HMAC_HASH_TYPE Enumeration ",
							" C typedef enum { SNMPV3_HMAC_MD5 = 0u SNMPV3_HMAC_SHA1 SNMPV3_NO_HMAC_AUTH } SNMPV3_HMAC_HASH_TYPE; ",
							" Description Enumeration: SNMPV3_HMAC_HASH_TYPE The following authentication types are supported by the SNMPv3 USM model for data confidentiality SNMPv3 agent supports both MD5 and SHA1 protocol for authentication ",
							" Members Members Description SNMPV3_HMAC_MD5 = 0u MD5 is being calculated HMAC SHA1 authentication protocol SNMPV3_HMAC_SHA1 SHA-1 is being calculated No authentication is supported ",
							" Remarks None ",
							" SNMPV3_PRIV_PROT_TYPE Enumeration ",
							" C typedef enum { SNMPV3_DES_PRIV = 0x0 SNMPV3_AES_PRIV SNMPV3_NO_PRIV } SNMPV3_PRIV_PROT_TYPE; ",
							" Description Enumeration: SNMPV3_PRIV_PROT_TYPE These below privacy types are supported by the SNMPv3 USM model for data confidentiality SNMPv3 agent supports both AES-CFB and DES-CBC encryption and decryption algorithm For DES-CBC privacy protocol SNMPv3 agent will use Harmony Crypto Library For AES-CFB privacy protocol SNMPv3 agent will use Legacy TCP/IP Crypto Library (For AES include -aes_pic32mx a to the project ) ",
							" Members Members Description SNMPV3_DES_PRIV = 0x0 Data Encryption Standard (DES-CBC) encryption and decryption protocol SNMPV3_AES_PRIV Advanced Encryption Standard (AES-CFB) encryption and decryption protocol SNMPV3_NO_PRIV No encryption or decryption protocol is supported ",
							" Remarks 128-bit 192-bit and 256-bit AES are supported ",
							" STD_BASED_SNMP_MESSAGE_PROCESSING_MODEL Enumeration ",
							" C typedef enum { SNMPV1_MSG_PROCESSING_MODEL = 0X00 SNMPV2C_MSG_PROCESSING_MODEL = 0X01 SNMPV2U_V2_MSG_PROCESSING_MODEL = 0X02 SNMPV3_MSG_PROCESSING_MODEL = 0X03 } STD_BASED_SNMP_MESSAGE_PROCESSING_MODEL; ",
							" Description Enumeration: STD_BASED_SNMP_MESSAGE_PROCESSING_MODEL SNMP Message processing model is responsible for processing an SNMP version specific message and for coordinating the interaction with security sub system SNMP message processing subsystem is part of an SNMP engine which interacts with the Dispatcher to handle the version specific SNMP messages A Message Processing Model describes the version-specific procedures for extracting data from messages generating messages calling upon a securityModel to apply its security services to messages ",
							" Members Members Description SNMPV1_MSG_PROCESSING_MODEL = 0X00 SNMP version 1 Message processing model SNMPV2C_MSG_PROCESSING_MODEL = 0X01 SNMP version 2 Message processing model with community as security feature SNMPV2U_V2_MSG_PROCESSING_MODEL = 0X02 SNMP version 2 Message processing model SNMPV3_MSG_PROCESSING_MODEL = 0X03 SNMP version 3 Message processing model with authentication and encryption and decryption ",
							" Remarks None ",
							" STD_BASED_SNMP_SECURITY_MODEL Enumeration ",
							" C typedef enum { ANY_SECUTIRY_MODEL = 0x00 SNMPV1_SECURITY_MODEL = 0X01 SNMPV2C_SECURITY_MODEL = 0X02 SNMPV3_USM_SECURITY_MODEL = 0X03 } STD_BASED_SNMP_SECURITY_MODEL; ",
							" Description Enumeration: STD_BASED_SNMP_SECURITY_MODEL SNMP Security subsystem is applied to the transmission and reception of messages and to the processing of the contents of messages The zero value does not identify any particular security model Values between 1 and 255 inclusive are reserved for standards-track Security Models and are managed by the Internet Assigned Numbers Authority (IANA) Values greater than 255 are allocated to enterprise-specific Security Models An enterprise specific securityModel value is defined to be: enterpriseID * 256 + security model within enterprise ",
							" Members Members Description ANY_SECUTIRY_MODEL = 0x00 Security Model Reserved for ANY SNMPV1_SECURITY_MODEL = 0X01 Security Model reserved fro SNMP version 1 SNMPV2C_SECURITY_MODEL = 0X02 Community Security Model reserved for SNMP version 2 SNMPV3_USM_SECURITY_MODEL = 0X03 User based security model reserved for SNMP version 3 ",
							" Remarks None ",
							" STD_BASED_SNMPV3_SECURITY_LEVEL Enumeration ",
							" C typedef enum { NO_AUTH_NO_PRIV = 1 AUTH_NO_PRIV AUTH_PRIV } STD_BASED_SNMPV3_SECURITY_LEVEL; ",
							" Description Enumeration: STD_BASED_SNMPV3_SECURITY_LEVEL A Level of Security at which SNMPv3 messages can be sent or with which operations are being processed ",
							" Members Members Description NO_AUTH_NO_PRIV = 1 Without authentication and without privacy AUTH_NO_PRIV With authentication but without privacy AUTH_PRIV With authentication but with privacy ",
							" Remarks None ",
							" TCPIP_SNMP_AuthTrapFlagGet Function ",
							" C void TCPIP_SNMP_AuthTrapFlagGet( bool * authTrap ); ",
							" Description This function is used to Get the authentication trap send flag and this is used only when the user is trying to send authentication failure trap For example sending a trap if community does not match the global community table ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description sendTrap Trap flag value ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_AuthTrapFlagSet Function ",
							" C void TCPIP_SNMP_AuthTrapFlagSet( bool sendTrap ); ",
							" Description This function is used to set the authentication trap send flag and this is used only when user is trying to send authentication failure trap Ex- sending a trap if community do not match to the global community table ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_ClientGetNet Function ",
							" C TCPIP_NET_HANDLE TCPIP_SNMP_ClientGetNet( int * netIx TCPIP_NET_HANDLE hNet ); ",
							" Description This function is used to get a network interface to transmit SNMP trap ",
							" Preconditions The SNMP module should be initialized ",
							" Parameters Parameters Description netIx Network index hNet Network interface If hNet is NULL then a valid interface will be returned ",
							" Returns TCPIP_NET_HANDLE Success - Returns a valid interface Failure - No interface ",
							" Remarks None ",
							" TCPIP_SNMP_COMMUNITY_CONFIG Structure ",
							" C typedef struct { const char * communityName; } TCPIP_SNMP_COMMUNITY_CONFIG; ",
							" Description Structure: TCPIP_SNMP_COMMUNITY_CONFIG This structure is used to configure community details during run-time ",
							" Remarks None ",
							" TCPIP_SNMP_ExactIndexGet Function ",
							" C bool TCPIP_SNMP_ExactIndexGet( SNMP_ID var SNMP_INDEX * index ); ",
							" Description This is a callback function called by SNMP module This function contents are modified by the application developer with the new MIB Record ID This function can be called for individual MIB ID with index This function is used to get the first available index from global or dynamic allocated sequence variable table ",
							" Preconditions TCPIP_SNMP_ProcessVariables() is called ",
							" Parameters Parameters Description var Variable id as per mib h (input) index Index of variable (input) ",
							" Returns True - If the exact index value exists for a given variable at a given index False - If the exact index value does not exist for the given variable ",
							" Remarks Only sequence index needs to be handled in this function and this function is called after TCPIP_SNMP_RecordIDValidation() ",
							" TCPIP_SNMP_IsTrapEnabled Function ",
							" C bool TCPIP_SNMP_IsTrapEnabled(); ",
							" Description This function returns true if SNMP module is enabled to send the trap to to the SNMP manager device ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns True - SNMP module has trap enabled False - SNMP module has trap disabled ",
							" Remarks This function is used by the customer function ",
							" TCPIP_SNMP_IsValidCommunity Function ",
							" C uint8_t TCPIP_SNMP_IsValidCommunity( uint8_t* community ); ",
							" Description This function validates the community name for the MIB access to SNMP manager The SNMP community name received in the request PDU is validated for read and write community names The agent gives an access to the mib variables only if the community matches with the predefined values This routine also sets a global flag to send trap if authentication failure occurs ",
							" Preconditions TCPIP_SNMP_Initialize() is called ",
							" Parameters Parameters Description community Pointer to community string as sent by SNMP manager ",
							" Returns This function returns the community validation result as READ_COMMUNITY or WRITE_COMMUNITY or INVALID_COMMUNITY ",
							" Remarks This is a callback function called by module User application must implement this function and verify that community matches with predefined value This validation occurs for each SNMP manager request ",
							" TCPIP_SNMP_IsValidLength Function ",
							" C bool TCPIP_SNMP_IsValidLength( SNMP_ID var uint8_t len uint8_t index ); ",
							" Description This function is used to validate the dynamic variable data length to the variable data type It is called before the SET request is processed This is a callback function called by module User application must implement this function ",
							" Preconditions TCPIP_SNMP_ProcessSetVar() is called ",
							" Parameters Parameters Description var Variable id whose value is to be set len Length value that is to be validated ",
							" Returns True - If given var can be set to given len False - If the given var cannot be set to the given len ",
							" Remarks This function will be called for only dynamic variables that are defined as ASCII_STRING and OCTET_STRING ",
							" TCPIP_SNMP_MibIDSet Function ",
							" C void TCPIP_SNMP_MibIDSet( uint32_t mibID ); ",
							" Description This function is used to Set the MIB ID which is require while transmitting SNMP notification SNMP user can this function without adding this to the Microchip MIB script ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description mibID Trap client MIB ID ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_MODULE_CONFIG Structure ",
							" C typedef struct { bool trapEnable; bool snmp_trapv2_use; bool snmpv3_trapv1v2_use; const char* snmp_bib_file; TCPIP_SNMP_COMMUNITY_CONFIG * read_community_config; TCPIP_SNMP_COMMUNITY_CONFIG * write_community_config; TCPIP_SNMPV3_USM_USER_CONFIG * usm_config; TCPIP_SNMPV3_TARGET_ENTRY_CONFIG * trap_target_config; const char* mountPath; } TCPIP_SNMP_MODULE_CONFIG; ",
							" Description Structure: TCPIP_SNMP_MODULE_CONFIG This structure is used to configure SNMP details for runtime configuration ",
							" Members Members Description trapEnable True = agent can send the trap false = agent shouldn't send the trap snmp_trapv2_use True = agent uses Trap version v2 and false = uses Tarp version 1 snmpv3_trapv1v2_use SNMPv3 trap should be true only if SNMP version is 3 read_community_config Read-only Community configuration write_community_config Write-only Community configuration usm_config SNMPv3 USM configuration trap_target_config SNMPv3 trap configuration The SNMP server will access snmp bib file or other MIB files located under this top directory No access is possible above this directory As a good practice to follow use something like: \"/mnt_point/snmp/\" to limit an external user access to this only directory in the file system when accessing files ",
							" Remarks None ",
							" TCPIP_SNMP_NextIndexGet Function ",
							" C bool TCPIP_SNMP_NextIndexGet( SNMP_ID var SNMP_INDEX* index ); ",
							" Description This is a callback function called by SNMP module This function contents are modified by the application developer with the new MIB Record ID This function can be called for individual MIB ID with index or for a complete MIB table without any instance If the SNMP Sequence MIB variable processing is performed with index or instance value it is the responsibility of the agent to send the next available index for that requested variable This is a only one iteration process The Manager will not send any further requests for the received index value If SNMP request for a sequence variable starts with only OID without any instance that is a complete table is requested without any instance it is the responsibility of the agent to send the first available index of the table The Manager will continue the request with the transferred instance until it receives the reply from agent This function will only be called for OID variable of type sequence if the index value starts with SNMP_INDEX_INVALID then user need to send the response with first available index value ",
							" Preconditions TCPIP_SNMP_ProcessVariables() is called ",
							" Parameters Parameters Description var Variable id whose value is to be returned index Next Index of variable that should be transferred ",
							" Returns True - If a next index value exists for given variable at given index and index parameter contains next valid index False - If a next index value does not exist for a given variable ",
							" Remarks Only sequence index needs to be handled in this function and this function is called after TCPIP_SNMP_RecordIDValidation() ",
							" TCPIP_SNMP_NotifyIsReady Function ",
							" C bool TCPIP_SNMP_NotifyIsReady( IP_MULTI_ADDRESS* remoteHost SNMP_TRAP_IP_ADDRESS_TYPE eTrapMultiAddressType ); ",
							" Description This function resolves given remoteHost IP address into MAC address using ARP module If remoteHost is not available this function would never return true Application must implement time out logic to handle \"remoteHost not available\" situation ",
							" Preconditions TCPIP_SNMP_NotifyPrepare() is already called ",
							" Parameters Parameters Description remoteHost Pointer to remote Host IP address eTrapMultiAddressType IPv4 and IPv6 address type ",
							" Returns None ",
							" Remarks This would fail if there were not UDP socket to open ",
							" TCPIP_SNMP_NotifyPrepare Function ",
							" C void TCPIP_SNMP_NotifyPrepare( IP_MULTI_ADDRESS* remoteHost char* community uint8_t communityLen SNMP_ID agentIDVar uint8_t notificationCode uint32_t timestamp ); ",
							" Description This function prepares SNMP module to send SNMP trap notification to remote host It sends ARP request to remote host to learn remote host MAC address ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description remoteHost Pointer to remote Host IP address community Community string to use to notify communityLen Community string length agentIDVar System ID to use identify this agent notification Code Notification Code to use timestamp Notification timestamp in 100th of second ",
							" Returns None ",
							" Remarks This is first of series of functions to complete SNMP notification ",
							" TCPIP_SNMP_ReadCommunityGet Function ",
							" C bool TCPIP_SNMP_ReadCommunityGet( int index int len uint8_t * dest ); ",
							" Description This function is used to collect READ community string from the global community table with respect to the index value ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description index One of the index of community table and it should be less than TCPIP_SNMP_MAX_COMMUNITY_SUPPORT len Length of the community string expected It should not be more than TCPIP_SNMP_COMMUNITY_MAX_LEN dest Copy the community string to this address and it should have a valid address ",
							" Returns True - If the community string is collected False - If the community string is not collected ",
							" Remarks None ",
							" TCPIP_SNMP_ReadCommunitySet Function ",
							" C bool TCPIP_SNMP_ReadCommunitySet( int index int len uint8_t * src ); ",
							" Description This function is used to configure READ community string from the user and configure the SNMP community table ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description index One of the index of community table and it should be less than TCPIP_SNMP_MAX_COMMUNITY_SUPPORT len Length of the community string expected It should not be more than TCPIP_SNMP_COMMUNITY_MAX_LEN src Copy this community string to snmp community table ",
							" Returns True - If the community string is collected False - If the community string is not collected ",
							" Remarks None ",
							" TCPIP_SNMP_RecordIDValidation Function ",
							" C bool TCPIP_SNMP_RecordIDValidation( uint8_t snmpVersion bool idPresent uint16_t varId uint8_t * oidValuePtr uint8_t oidLen ); ",
							" Description This is a callback function called by SNMP module SNMP user must implement this function as per SNMP version One need to add the new SNMP MIB IDs here as per SNMP version (e g SYS_UP_TIME (250) is common for V1/V2/V3) ENGINE_ID - is the part of V3; therefore place all of the SNMPv3 var IDs within the macro TCPIP_STACK_USE_SNMPV3_SERVER ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description snmpVersion Different SNMP version idPresent True if SNMP record ID is present else false varId Dynamic record ID values as per mib h oidValuePtr OID value pointer oidLen Number of OIDs present to be processed ",
							" Returns True - A record ID exists False - A record ID does not exist ",
							" Remarks This function is specific for record ID validation and this can also be used to restrict OID string ",
							" TCPIP_SNMP_SendFailureTrap Function ",
							" C void TCPIP_SNMP_SendFailureTrap(); ",
							" Description This function is used to send trap notification to previously configured IP address if trap notification is enabled There are different trap notification code The current implementation sends trap for authentication failure (4) ",
							" Preconditions If the defined application event occurs to send the trap ",
							" Returns None ",
							" Remarks This is a callback function called by the application on certain predefined events This routine only implemented to send a authentication failure Notification-type macro with PUSH_BUTTON OID stored in MPFS If the ARP is not resolved (i e if TCPIP_SNMP_NotifyIsReady returns false this routine times out in 5 seconds) This function should be modified according to event occurred and should update the corresponding OID and notification type to the TRAP PDU ",
							" TCPIP_SNMP_SocketIDGet Function ",
							" C void TCPIP_SNMP_SocketIDGet( UDP_SOCKET * socket ); ",
							" Description This function is used to get trap client socket ID for both IPv4 and IPv6 receiver Address ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description socket Trap client socket ID ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_SocketIDSet Function ",
							" C void TCPIP_SNMP_SocketIDSet( UDP_SOCKET socket ); ",
							" Description This function is used to update socket value of SNMP trap global structure ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_Task Function ",
							" C void TCPIP_SNMP_Task(); ",
							" Description This function performs SNMP module tasks in the TCP/IP stack ",
							" Preconditions The SNMP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_TrapInterFaceSet Function ",
							" C void TCPIP_SNMP_TrapInterFaceSet( TCPIP_NET_HANDLE netIntf ); ",
							" Description This function is used to Set the network interface to which the TRAP socket is ready to transmit Notifications to the TRAP receiver address ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description netIntf Network interface Trap is connected to receiver ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_TRAPMibIDGet Function ",
							" C void TCPIP_SNMP_TRAPMibIDGet( uint32_t * mibID ); ",
							" Description This function is used to get the MIB ID which is require while transmitting SNMP notification This MIB ID is a Agent ID value of the Microchip style MIB script MIB ID macro value is present in mib h which is generated by mib2bib jar ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description mibID Trap client MIB ID ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_TrapSendFlagGet Function ",
							" C void TCPIP_SNMP_TrapSendFlagGet( bool * trapNotify ); ",
							" Description This function is used to get the trap send flag details and this is used only when user is trying to send more than one varbind in a single PDU That is more than one notification details are required to be part of a single PDU ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_TrapSendFlagSet Function ",
							" C void TCPIP_SNMP_TrapSendFlagSet( bool trapNotify ); ",
							" Description This function is used to set the trap send flag details and this is used only when user is trying to send more than one varbind in a single PDU That is more than one notification details are required to be part of a single PDU By default TRAP send flag is set to false If there is only varbind need to be part of Notification PDU then this function should be called with boolean false Please find the usage of this flag in this following example ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns None ",
							" Remarks None ",
							" Example void SNMPv2TrapDemo(void) { //set TRAP send flag to true it signifies that there are more than one // variable need to be the part of SNMP v2 TRAP TCPIP_SNMP_TrapSendFlagSet(true); // PUSH button varbind TCPIP_SNMP_Notify(PUSH_BUTTON analogPotVal 0); // Before adding the last varbind to the TRAP PDU TRAP send flag should // be set to false That it indicates it is the last varbind to the // Notification PDU TCPIP_SNMP_TrapSendFlagSet(false); // Last varbind LED0_IO TCPIP_SNMP_Notify(LED0_IO analogPotVal 0); } ",
							" TCPIP_SNMP_TrapSpecificNotificationGet Function ",
							" C void TCPIP_SNMP_TrapSpecificNotificationGet( uint8_t * specTrap ); ",
							" Description This function is used to get specific trap value Specific trap values are listed in SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description specTrap Vendor specific trap value ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMP_TrapSpecificNotificationSet Function ",
							" C void TCPIP_SNMP_TrapSpecificNotificationSet( uint8_t specTrap uint8_t genTrap SNMP_ID trapID ); ",
							" Description The SNMP user needs to call this function before transmitting any traps This function will set the vendor specific trap generic trap and default trap ID value The SNMPv2 trap will use this trap ID while sending a specific trap ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description specTrap Vendor specific trap value (enumeration value of SNMP_VENDOR_SPECIFIC_TRAP_NOTIFICATION_TYPE) genTrap Generic trap (enumeration value of SNMP_GENERIC_TRAP_NOTIFICATION_TYPE) trapID Trap ID ",
							" Returns None ",
							" Remarks The Trap ID is the NOTIFICATION-TYPE of the ASN 1 MIB format From the Trap ID the SNMP agent will be able to obtain the OID string which will be used while preparing TRAPv2 second varbind ",
							" TCPIP_SNMP_TrapTimeGet Function ",
							" C uint32_t TCPIP_SNMP_TrapTimeGet(); ",
							" Description This function returns a uint32_t time(snmpTrapTimer) which is used to time out a SNMP TRAP notification for a HOST snmpTrapTimer is initialized when there is UDP client socket open either for a HOST IPv4 or IPv6 address ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns uint32_t time ",
							" Remarks None ",
							" TCPIP_SNMP_TRAPTypeGet Function ",
							" C bool TCPIP_SNMP_TRAPTypeGet(); ",
							" Description This function returns true if the trap tye is v2 and the TRAP pdu packet will be a TRAP v2 format The return value is also used is validated when SNMP module is trying to send a trap for SNMP version v3 ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns True - Trap version is v2 False - Trap version is v1 ",
							" Remarks This function is used by the customer function ",
							" TCPIP_SNMP_TRAPv1Notify Function ",
							" C bool TCPIP_SNMP_TRAPv1Notify( SNMP_ID var SNMP_VAL val SNMP_INDEX index SNMP_TRAP_IP_ADDRESS_TYPE eTrapMultiAddressType ); ",
							" Description This function creates SNMP trap PDU and sends it to previously specified remoteHost snmpv1 trap pdu: | PDU-type | enterprise | agent-addr | generic-trap | specific-trap | | time-stamp | varbind-list | The v1 enterprise is mapped directly to SNMPv2TrapOID 0 ",
							" Preconditions TCPIP_SNMP_NotifyIsReady() is already called and returned true ",
							" Parameters Parameters Description var SNMP var ID that is to be used in notification val Value of var Only value of uint8_t uint16_t or uint32_t can be sent index Index of var If this var is a single index would be 0 or else if this var Is a sequence index could be any value from 0 to 127 eTrapMultiAddressType Trap address type ",
							" Remarks This would fail if there were not UDP socket to open ",
							" TCPIP_SNMP_TRAPv2Notify Function ",
							" C bool TCPIP_SNMP_TRAPv2Notify( SNMP_ID var SNMP_VAL val SNMP_INDEX index SNMP_TRAP_IP_ADDRESS_TYPE eTrapMultiAddressType ); ",
							" Description This function creates SNMP V2 Trap PDU and sends it to previously specified remoteHost SNMP V1 trap PDU: | PDU type | enterprise | agent addr | generic trap | specific trap | | time stamp | varbind list | The v1 enterprise is mapped directly to SNMPv2TrapOID 0 SNMP V2 trap PDU: version (0 or 1) | community | SNMP PDU |PDU type | request id | error status |err index |varbinds The first two variables (in varbind list) of snmpv2 are: sysUpTime 0 and SNMPv2TrapOID 0 Generic Trap OID is used as the varbind for authentication failure ",
							" Preconditions TCPIP_SNMP_NotifyIsReady() is already called and returned true ",
							" Parameters Parameters Description var SNMP var ID that is to be used in notification val Value of var Only value of uint8_t uint16_t or uint32_t can be sent index Index of var If this var is a single index would be 0 or else if this var Is a sequence index could be any value from 0 to 127 eTrapMultiAddressType Trap address type ",
							" Remarks This would fail if there were not UDP socket to open ",
							" TCPIP_SNMP_ValidateTrapIntf Function ",
							" C bool TCPIP_SNMP_ValidateTrapIntf( TCPIP_NET_HANDLE pIf ); ",
							" Description This function returns true if SNMP module trap interface is a valid interface ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description pif Network interface ",
							" Returns True - SNMP trap interface is valid False - SNMP trap interface is invalid ",
							" Remarks This function is used by the customer function ",
							" TCPIP_SNMP_VarbindGet Function ",
							" C bool TCPIP_SNMP_VarbindGet( SNMP_ID var SNMP_INDEX index uint8_t* ref SNMP_VAL* val ); ",
							" Description This is a callback function called by SNMP module This function is called only when SNMP GET GETNEXT and GETBULK request is made This function content is modified by the application developer This function contains the implementation of READ enable MIB OID macros mib2bib jar Microchip MIB compiler utility is used to generate mib h which lists all the MIB OID ID value ",
							" Preconditions TCPIP_SNMP_ProcessVariables() is called ",
							" Parameters Parameters Description var Variable id whose value is to be returned index For a scalar variable Index value is zero For sequence variable index value specifies which index value need to be set ref Variable reference used to transfer multi-byte data It is always SNMP_START_OF_VAR when very first byte is requested Otherwise use this as a reference to keep track of multi-byte transfers val Up to 4 byte data value: - If var data type is uint8_t variable value is in val- byte - If var data type is uint16_t variable value is in val- word - If var data type is uint32_t variable value is in val- dword - If var data type is IP_ADDRESS transfer data in val- v or val- dword - If var data type is COUNTER32 TIME_TICKS or GAUGE32 transfer data in val- dword - If var data type is ASCII_STRING or OCTET_STRING transfer data in val- byte using multi-byte transfer mechanism ",
							" Returns True - If a value exists for given variable False - If a value does not exist for a given variable ",
							" Remarks This function may get called more than once depending on number of bytes in a specific get request for given variable only dynamic read variables needs to be handled ",
							" Example // In the beginning *ref is equal to SNMP_START_OF_VAR myRef = *ref; switch(var) { // TRAP_COMMUNITY - generated from the Microchip style MIB script using mib2bib jar // is a Sequence variable case TRAP_COMMUNITY: if ( index trapInfo Size ) { // check if the myRef should not cross the maximum length if ( myRef == trapInfo table[index] communityLen ) { // End of SNMP GET process *ref = SNMP_END_OF_VAR; return true; } if ( trapInfo table[index] communityLen == 0u ) *ref = SNMP_END_OF_VAR; // End of SNMP GET process else { // Start of SNMP GET process byte by byte val- byte = trapInfo table[index] community[myRef]; myRef++; *ref = myRef; } return true; } break; // LED_D5 - generated from the Microchip style MIB script using mib2bib jar is a scalar variable case LED_D5: val- byte = LED2_IO; return true; } ",
							" TCPIP_SNMP_VarbindSet Function ",
							" C bool TCPIP_SNMP_VarbindSet( SNMP_ID var SNMP_INDEX index uint8_t ref SNMP_VAL val ); ",
							" Description This is a callback function called by module for SNMP SET request This function content is modified by the application developer This function contains the implementation of WRITE enable MIB OID macros mib2bib jar Microchip MIB compiler utility is used to generate mib h which lists all the MIB OID ID value ",
							" Preconditions TCPIP_SNMP_ProcessVariables() is called ",
							" Parameters Parameters Description var Write enable Variable id whose value is to be set index For a scalar variable Index value is zero For sequence variable index value specifies which index value need to be set ref Variable reference used to transfer multi-byte data 0 if first byte is set otherwise non zero value to indicate corresponding byte being set SNMP set will performed until ref is not equal to SNMP_END_OF_VAR and SNMP set starts with ref = SNMP_START_OF_VAR val Up to 4 byte data value: - If var data type is uint8_t variable value is in val- byte - If var data type is uint16_t variable value is in val- word - If var data type is uint32_t variable value is in val- dword - If var data type is IP_ADDRESS COUNTER32 or GAUGE32 value is in val- dword - If var data type is OCTET_STRING ASCII_STRING value is in val- byte; multi-byte transfer will be performed to transfer remaining bytes of data ",
							" Returns True - If it is okay to set more byte(s) False - If it is not okay to set more byte(s) ",
							" Remarks This function may get called more than once depending on number of bytes in a specific set request for given variable only dynamic read/-write variables needs to be handled ",
							" Example switch(var) { // LED_D5 - generated from the Microchip style MIB script using mib2bib jar is a scalar variable case LED_D5: LED2_IO = val byte; return true; // TRAP_COMMUNITY - generated from the Microchip style MIB script using mib2bib jar // is a Sequence variable case TRAP_COMMUNITY: // Since this is a ASCII_STRING data type SNMP will call with // SNMP_END_OF_VAR to indicate no more bytes or end of SNMP SET process // Use this information to determine if we just added new row // or updated an existing one if ( ref == SNMP_END_OF_VAR ) { // Index equal to table size means that we have new row if ( index == trapInfo Size ) trapInfo Size++; // Length of string is one more than index trapInfo table[index] communityLen++; return true; } // Make sure that index is within our range if ( index trapInfo Size ) { // Copy given value into local buffer trapInfo table[index] community[ref] = val byte; // Keep track of length too // This may not be NULL terminate string trapInfo table[index] communityLen = (uint8_t)ref; return true; } break; } ",
							" TCPIP_SNMP_WriteCommunityGet Function ",
							" C bool TCPIP_SNMP_WriteCommunityGet( int index int len uint8_t * dest ); ",
							" Description This function is used to collect WRITE community string from the global community table with respect to the index value ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description index One of the index of community table and it should be less than TCPIP_SNMP_MAX_COMMUNITY_SUPPORT len Length of the community string expected It should not be more than TCPIP_SNMP_COMMUNITY_MAX_LEN dest Copy the community string to this address and it should have a valid address ",
							" Returns True - If the community string is collected False - If the community string is not collected ",
							" Remarks None ",
							" TCPIP_SNMP_WriteCommunitySet Function ",
							" C bool TCPIP_SNMP_WriteCommunitySet( int index int len uint8_t * src ); ",
							" Description This function is used to collect WRITE community string from user and set the community table with respect to the index value ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description index One of the index of community table and it should be less than TCPIP_SNMP_MAX_COMMUNITY_SUPPORT len Length of the community string expected It should not be more than TCPIP_SNMP_COMMUNITY_MAX_LEN src Copy this community string to SNMP community table ",
							" Returns True - If the community string is collected False - If the community string is not collected ",
							" Remarks None ",
							" TCPIP_SNMPV3_EngineUserDataBaseGet Function ",
							" C bool TCPIP_SNMPV3_EngineUserDataBaseGet( TCPIP_SNMPV3_USERDATABASECONFIG_TYPE userDataBaseType uint8_t len uint8_t userIndex void * val ); ",
							" Description This function is used to set SNMPv3 Engine data base details using TCPIP_SNMPV3_USERDATABASECONFIG_TYPE enumeration ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description userDataBaseType SNMPv3 data base configuration type len Number of bytes need to be read from data base userIndex SNMPv3 user index val Void pointer to a any data type Length parameter value is changed according to data type ",
							" Returns None ",
							" Remarks None ",
							" Example bool TCPIP_SNMP_VarbindGet(SNMP_ID var SNMP_INDEX index uint8_t* ref SNMP_VAL* val) { switch(var) { case USER_SECURITY_NAME: if(index TCPIP_SNMPV3_USM_MAX_USER) { if(TCPIP_SNMPV3_EngineUserDataBaseGet(SNMPV3_USERNAME_CONFIG_TYPE myRef index val- byte) == false) { *ref = SNMP_END_OF_VAR; } else { myRef++; *ref = myRef; } return true; } break; } } ",
							" TCPIP_SNMPV3_EngineUserDataBaseSet Function ",
							" C bool TCPIP_SNMPV3_EngineUserDataBaseSet( TCPIP_SNMPV3_USERDATABASECONFIG_TYPE userDataBaseType uint8_t len uint8_t userIndex void * val ); ",
							" Description This function is used to set SNMPv3 Engine data base details using TCPIP_SNMPV3_USERDATABASECONFIG_TYPE enumeration ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description userDataBaseType SNMPv3 data base configuration type len Number of bytes need to be read from data base userIndex SNMPv3 user index val Void pointer to a any data type Length parameter value is changed according to data type ",
							" Returns None ",
							" Remarks None ",
							" Example bool TCPIP_SNMP_VarbindSet(SNMP_ID var SNMP_INDEX index uint8_t ref SNMP_VAL val) { switch(var) { case USER_SECURITY_NAME: if ( ref == SNMP_END_OF_VAR ) { if(TCPIP_SNMPV3_EngineUserDataBaseSet(SNMPV3_USERNAME_CONFIG_TYPE strlen((char*)gSnmpv3UserSecurityName) index gSnmpv3UserSecurityName) = true) return false; } // Make sure that index is within our range if ( index TCPIP_SNMPV3_USM_MAX_USER ) { // Copy given value into local buffer gSnmpv3UserSecurityName[ref]=val byte; return true; } break; } } ",
							" TCPIP_SNMPv3_Notify Function ",
							" C bool TCPIP_SNMPv3_Notify( SNMP_ID var SNMP_VAL val SNMP_INDEX index uint8_t targetIndex SNMP_TRAP_IP_ADDRESS_TYPE eTrapMultiAddressType ); ",
							" Description This function creates SNMPv3 trap PDU and sends it to previously specified remoteHost ",
							" Preconditions TRAP event is triggered ",
							" Parameters Parameters Description var SNMP var ID that is to be used in notification val Value of var Only value of uint8_t uint16_t or uint32_t can be sent index Index of var If this var is a single index would be 0 or else if this var Is a sequence index could be any value from 0 to 127 targetIndex -index of the 'Snmpv3TrapConfigData' table's security user name for which the TRAP PDU message header to constructed ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMPV3_TARGET_ENTRY_CONFIG Structure ",
							" C typedef struct { const char * secname; STD_BASED_SNMP_SECURITY_MODEL mp_model; STD_BASED_SNMP_SECURITY_MODEL sec_model; STD_BASED_SNMPV3_SECURITY_LEVEL sec_level; } TCPIP_SNMPV3_TARGET_ENTRY_CONFIG; ",
							" Description Structure: SNMPV3_TARGET_ENTRY_CONFIG This structure is used to configure SNMP target details during runtime ",
							" Remarks None ",
							" TCPIP_SNMPv3_TrapConfigDataGet Function ",
							" C void TCPIP_SNMPv3_TrapConfigDataGet( uint8_t userIndex uint8_t * msgModelType uint8_t * securityModelType ); ",
							" Description This function is used to get SNMPv3 message model type and security model type using user index ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Parameters Parameters Description userIndex User name index msgModelType Message processing type securityModelType Security model type ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNMPV3_TrapTypeGet Function ",
							" C bool TCPIP_SNMPV3_TrapTypeGet(); ",
							" Description This function returns true if SNMP module is trying to send trap version v2 with SNMP version v3 ",
							" Preconditions TCPIP_SNMP_Initialize() is already called ",
							" Returns True - SNMP3 will use trap version v2 False - SNMP3 will use trap version v1 ",
							" Remarks This function is used by the customer function ",
							" TCPIP_SNMPV3_USERDATABASECONFIG_TYPE Enumeration ",
							" C typedef enum { SNMPV3_USERNAME_CONFIG_TYPE = 0 SNMPV3_AUTHPASSWD_CONFIG_TYPE SNMPV3_PRIVPASSWD_CONFIG_TYPE SNMPV3_AUTHPASSWDLOCALIZEDKEY_CONFIG_TYPE SNMPV3_PRIVPASSWWDLOCALIZEDKEY_CONFIG_TYPE SNMPV3_HASHTYPE_CONFIG_TYPE SNMPV3_PRIVTYPE_CONFIG_TYPE SNMPV3_TARGET_SECURITY_NAME_TYPE SNMPV3_TARGET_SECURITY_LEVEL_TYPE SNMPV3_TARGET_SECURITY_MODEL_TYPE SNMPV3_TARGET_MP_MODEL_TYPE SNMPV3_ENGINE_ID_TYPE SNMPV3_ENGINE_BOOT_TYPE SNMPV3_ENGINE_TIME_TYPE SNMPV3_ENGINE_MAX_MSG_TYPE } TCPIP_SNMPV3_USERDATABASECONFIG_TYPE; ",
							" Description Enumeration: TCPIP_SNMPV3_USERDATABASECONFIG_TYPE These configuration types are used by the SNMP user while doing configuration SNMPv3 parameters It includes SNMpv3 user name authentication and encryption configuration parameters ",
							" Members Members Description SNMPV3_USERNAME_CONFIG_TYPE = 0 Snmpv3 user name configuration SNMPV3_AUTHPASSWD_CONFIG_TYPE Authentication configuration type SNMPV3_PRIVPASSWD_CONFIG_TYPE Encryption and Decryption password configuration SNMPV3_AUTHPASSWDLOCALIZEDKEY_CONFIG_TYPE Authorization localized key configuration type SNMPV3_PRIVPASSWWDLOCALIZEDKEY_CONFIG_TYPE Encryption and Decryption password localized key configuration type SNMPV3_HASHTYPE_CONFIG_TYPE SNMPv3 hash algorithm type SNMPV3_PRIVTYPE_CONFIG_TYPE SNMPv3 privacy configuration type SNMPV3_TARGET_SECURITY_NAME_TYPE SNMPv3 target address user name This is for Trap communication SNMPV3_TARGET_SECURITY_LEVEL_TYPE SNMPv3 target security type SNMPV3_TARGET_SECURITY_MODEL_TYPE SNMPv3 target security model type SNMPV3_TARGET_MP_MODEL_TYPE SNMPv3 target security message processing model type SNMPV3_ENGINE_ID_TYPE Identifier that uniquely and unambiguously identifies the local SNMPv3 engine SNMPV3_ENGINE_BOOT_TYPE Number of times the local SNMPv3 engine has rebooted or reinitialized since the engine ID was last changed SNMPV3_ENGINE_TIME_TYPE Number of seconds since the local SNMPv3 engine was last rebooted or reinitialized SNMPV3_ENGINE_MAX_MSG_TYPE SNMPv3 Engine Maximum message size the sender can accommodate ",
							" Remarks None ",
							" TCPIP_SNMPV3_USM_USER_CONFIG Structure ",
							" C typedef struct { const char * username; STD_BASED_SNMPV3_SECURITY_LEVEL security_level; SNMPV3_HMAC_HASH_TYPE usm_auth_proto; const char * usm_auth_password; SNMPV3_PRIV_PROT_TYPE usm_priv_proto; const char * usm_priv_password; } TCPIP_SNMPV3_USM_USER_CONFIG; ",
							" Description Structure: SNMPV3_USM_USER_CONFIG This structure is used to configure predefined SNMPv3 USM details for run-time configuration ",
							" Members Members Description username user name string security_level security level: auth priv combination usm_auth_proto auth type: md5 sha1 usm_auth_password passphrase string for authentication usm_priv_proto priv type: DES usm_priv_password passphrase string for privacy ",
							" Remarks None ",
							" SNTP Module The SNTP module implements the Simple Network Time Protocol The module updates its internal time periodically using a pool of public global time servers It then calculates reference times on any call to TCPIP_SNTP_TimeGet using the system timer module The SNTP module is good for providing absolute time stamps However it should not be relied upon for measuring time differences (especially small differences) The pool of public time servers is implemented using round-robin DNS so each update will come from a different server Differing network delays and the fact that these servers are not verified implies that this time could be non-linear While it is deemed reliable it is not guaranteed to be accurate The system timer module provides much better accuracy (since it is driven by a hardware clock) and resolution and should be used for measuring timeouts and other internal requirements The preferred time server can be changed The default is to use the global pool Abstraction Model TCPIP SNTP Abstraction Model Library Interface Name Description Macros  TCPIP_NTP_DEFAULT_CONNECTION_TYPE The default connection type to use: IPv4/IPv6 TCPIP_NTP_DEFAULT_IF for multi-homed hosts the default SNTP interface TCPIP_NTP_EPOCH Reference Epoch to use (default: 01-Jan-1970 00:00:00) TCPIP_NTP_FAST_QUERY_INTERVAL Defines how long to wait to retry an update after a failure seconds Updates may take up to 6 seconds to fail so this 14 second delay is actually only an 8-second retry TCPIP_NTP_MAX_STRATUM The maximum acceptable NTP stratum number Should be less than 16 (unsynchronized server) TCPIP_NTP_QUERY_INTERVAL Defines how frequently to resynchronize the date/time seconds (default: 10 minutes) TCPIP_NTP_REPLY_TIMEOUT Defines how long to wait before assuming the query has failed seconds TCPIP_NTP_RX_QUEUE_LIMIT The NTP RX queue limit defines the maximum number of packets that can wait in the NTP queue TCPIP_NTP_SERVER These are normally available network time servers The actual IP returned from the pool will vary every minute so as to spread the load around stratum 1 timeservers For best accuracy and network overhead you should locate the pool server closest to your geography but it will still work if you use the global pool ntp org address or choose the wrong one or ship your embedded device to another geography A direct IP address works too TCPIP_NTP_SERVER_MAX_LENGTH maximum number of characters allowed for the NTP server TCPIP_NTP_TASK_TICK_RATE THE NTP task rate in milliseconds The default value is 1100 milliseconds This module contacts an NTP server and a high operation frequency is not required The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_NTP_TIME_STAMP_TMO elapsed time that qualifies a time stamp as stale normally it should be correlated with TCPIP_NTP_QUERY_INTERVAL TCPIP_NTP_VERSION The default NTP version to use (3 or 4) Functions  TCPIP_SNTP_UTCSecondsGet Obtains the current time from the SNTP module TCPIP_SNTP_ConnectionInitiate Forces a connection to the NTP server TCPIP_SNTP_LastErrorGet Gets the last error code set in the NTP server TCPIP_SNTP_ConnectionParamSet Sets the current SNTP connection parameters TCPIP_SNTP_Task Standard TCP/IP stack module task function TCPIP_SNTP_HandlerDeRegister Deregisters a previously registered SNTP handler TCPIP_SNTP_HandlerRegister Registers a SNTP Handler TCPIP_SNTP_TimeGet Obtains the current time in UTC format from the SNTP module TCPIP_SNTP_TimeStampGet Gets the last valid timestamp obtained from an NTP server TCPIP_SNTP_TimeStampStatus Gets the current status of the timestamp; Data Types and Constants  TCPIP_SNTP_MODULE_CONFIG Placeholder for SNTP Module Configuration TCPIP_SNTP_RESULT Provides a list of possible results for the SNTP module TCPIP_SNTP_EVENT List of events for the SNTP module TCPIP_SNTP_EVENT_HANDLER SNTP event handler prototype TCPIP_SNTP_EVENT_TIME_DATA Data structure used by the SNTP module to report a timestamp event TCPIP_SNTP_HANDLE SNTP handle TCPIP_SNTP_TIME_STAMP Timestamp data structure used by the SNTP module ",
							" TCPIP_SNTP_ConnectionInitiate Function ",
							" C TCPIP_SNTP_RESULT TCPIP_SNTP_ConnectionInitiate(); ",
							" Description This function will start a connection to the NTP server ",
							" Preconditions The TCP/IP Stack should have been inititialized ",
							" Returns SNTP_RES_OK - If the call succeeded SNTP_RES_PROGRESS - If a connection already in progress then another one could not be started ",
							" Remarks None ",
							" TCPIP_SNTP_ConnectionParamSet Function ",
							" C TCPIP_SNTP_RESULT TCPIP_SNTP_ConnectionParamSet( TCPIP_NET_HANDLE netH IP_ADDRESS_TYPE ntpConnType const char* ntpServer ); ",
							" Description This function sets the parameters for the next SNTP connections ",
							" Preconditions The TCP/IP Stack should have been inititialized ",
							" Parameters Parameters Description netH New interface to use as default SNTP interface If 0 the current interface is not changed ntpConnType Type of connection to make: IPv4 or IPv6 If IP_ADDRESS_TYPE_ANY the current setting is not changed ntpServer The NTP server to be used; name or IP address can be used If NULL or empty SNTP won't attempt any connection ",
							" Returns SNTP_RES_OK - If the call succeeded TCPIP_SNTP_RESULT error code - If the call did not succeed ",
							" Remarks None ",
							" TCPIP_SNTP_EVENT Enumeration ",
							" C typedef enum { TCPIP_SNTP_EVENT_NONE = 0 TCPIP_SNTP_EVENT_TSTAMP_OK = 1 TCPIP_SNTP_EVENT_DNS_ERROR = -1 TCPIP_SNTP_EVENT_IF_ERROR = -2 TCPIP_SNTP_EVENT_SKT_ERROR = -3 TCPIP_SNTP_EVENT_SERVER_TMO = -4 TCPIP_SNTP_EVENT_VER_ERROR = -5 TCPIP_SNTP_EVENT_TSTAMP_ERROR = -6 TCPIP_SNTP_EVENT_KOD_ERROR = -7 TCPIP_SNTP_EVENT_SYNC_ERROR = -8 } TCPIP_SNTP_EVENT; ",
							" Description Provides a list of run time SNTP events ",
							" Members Members Description TCPIP_SNTP_EVENT_NONE = 0 Invalid event success TCPIP_SNTP_EVENT_TSTAMP_OK = 1 A new NTP timestamp has been acquired successfully TCPIP_SNTP_EVENT_DNS_ERROR = -1 NTP server name DNS failed TCPIP_SNTP_EVENT_IF_ERROR = -2 Could not select a valid NTP interface TCPIP_SNTP_EVENT_SKT_ERROR = -3 Could not bind the socket to the NTP interface or timeout on the socket TX TCPIP_SNTP_EVENT_SERVER_TMO = -4 No reply received from the NTP server TCPIP_SNTP_EVENT_VER_ERROR = -5 The server response has a wrong version TCPIP_SNTP_EVENT_TSTAMP_ERROR = -6 The server response had a wrong timestamp TCPIP_SNTP_EVENT_KOD_ERROR = -7 The server replied with a \"Kiss O' Death\" code TCPIP_SNTP_EVENT_SYNC_ERROR = -8 The server response has a synchronization error ",
							" TCPIP_SNTP_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_SNTP_EVENT_HANDLER)(TCPIP_SNTP_EVENT evType const void* evParam); ",
							" Description Prototype of a SNTP event handler Clients can register a handler with the SNTP service Once an SNTP event occurs the SNTP service will call the registered handler The handler has to be short and fast It is meant for setting an event flag not for lengthy processing If evType 0 (an error event - TCPIP_SNTP_EVENT_DNS_ERROR TCPIP_SNTP_EVENT_SYNC_ERROR): evParam represents the 32 bit system tick when the event occurred If evType == TCPIP_SNTP_EVENT_TSTAMP_OK: evParam represents a const pointer to a TCPIP_SNTP_EVENT_TIME_DATA describing the timestamp received ",
							" TCPIP_SNTP_EVENT_TIME_DATA Structure ",
							" C typedef struct { TCPIP_SNTP_TIME_STAMP tStamp; uint64_t tStampTick; uint32_t tUnixSeconds; uint32_t tMilliseconds; uint32_t nUpdates; } TCPIP_SNTP_EVENT_TIME_DATA; ",
							" Description Describes the structure of the data used by the SNTP module to report a successful acquisition of a timestamp from the NTP server ",
							" Members Members Description tStamp Prime epoch based timestamp as obtained from the NTP server tStampTick The 64-bit system tick when this timestamp has been obtained tUnixSeconds Number of seconds converted to UNIC epoch format i e since 1 Jan 1970 tMilliseconds Fractional part converted to milliseconds nUpdates Number of successful updates from the NTP server so far ",
							" Remarks This data is reported as part of a TCPIP_SNTP_EVENT_TSTAMP_OK event ",
							" TCPIP_SNTP_HANDLE Type ",
							" C typedef const void* TCPIP_SNTP_HANDLE; ",
							" Description A handle that a client can use after the even handler has been registered ",
							" TCPIP_SNTP_HandlerDeRegister Function ",
							" C bool TCPIP_SNTP_HandlerDeRegister( TCPIP_SNTP_HANDLE hSntp ); ",
							" Description This function deregisters the SNTP event handler ",
							" Preconditions The SNTP module must be initialized ",
							" Parameters Parameters Description hSntp A handle returned by a previous call to TCPIP_SNTP_HandlerRegister ",
							" Returns True - If the call succeeds False - If no such handler is registered ",
							" Remarks None ",
							" TCPIP_SNTP_HandlerRegister Function ",
							" C TCPIP_SNTP_HANDLE TCPIP_SNTP_HandlerRegister( TCPIP_SNTP_EVENT_HANDLER handler ); ",
							" Description This function registers a SNTP event handler The SNTP module will call the registered handler when a SNTP event (TCPIP_SNTP_EVENT) ovvurs ",
							" Preconditions The SNTP module must be initialized ",
							" Parameters Parameters Description handler Handler to be called when a SNTP event occurs ",
							" Returns Returns a valid handle if the call succeeds Returns a null handle if the call failed (an event handler already registered for example) ",
							" Remarks The handler has to short and fast It is meant for setting an event flag not for lengthy processing Currently only one event handler is supported To register a new one use TCPIP_SNTP_HandlerDeRegister first ",
							" TCPIP_SNTP_LastErrorGet Function ",
							" C TCPIP_SNTP_RESULT TCPIP_SNTP_LastErrorGet(); ",
							" Description This function returns the last NTP error code and clears the current error code ",
							" Preconditions The TCP/IP Stack should have been inititialized ",
							" Returns The last error code encountered by the NTP module ",
							" Remarks None ",
							" TCPIP_SNTP_MODULE_CONFIG Structure ",
							" C typedef struct { const char* ntp_server; const char* ntp_interface; IP_ADDRESS_TYPE ntp_connection_type; uint32_t ntp_reply_timeout; uint32_t ntp_stamp_timeout; uint32_t ntp_success_interval; uint32_t ntp_error_interval; } TCPIP_SNTP_MODULE_CONFIG; ",
							" Description Placeholder for SNTP Module Configuration ",
							" Members Members Description ntp_server The NTP server to contact; name or IP address If NULL or empty SNTP won't attempt any connection ntp_interface The default NTP interface to use ntp_connection_type The IPv4/IPv6 connection type ntp_reply_timeout Timeout for the server reply in seconds ntp_stamp_timeout Timeout for the timestamp in seconds ntp_success_interval Server query interval after a successful update in seconds ntp_error_interval Server query interval after an error in seconds ",
							" TCPIP_SNTP_RESULT Enumeration ",
							" C typedef enum { SNTP_RES_OK SNTP_RES_PROGRESS SNTP_RES_BUSY = -1 SNTP_RES_TSTAMP_ERROR = -2 SNTP_RES_TSTAMP_STALE = -3 SNTP_RES_SKT_ERR = -4 SNTP_RES_SKT_BIND_ERR = -5 SNTP_RES_NTP_SERVER_TMO = -6 SNTP_RES_NTP_VERSION_ERR = -7 SNTP_RES_NTP_TSTAMP_ERR = -8 SNTP_RES_NTP_SYNC_ERR = -9 SNTP_RES_NTP_KOD_ERR = -10 SNTP_RES_NTP_DNS_ERR = -11 SNTP_RES_NTP_IF_ERR = -12 SNTP_RES_NTP_CONN_ERR = -13 } TCPIP_SNTP_RESULT; ",
							" Description Provides a list of possible SNTP results ",
							" Members Members Description SNTP_RES_OK The operation was successful SNTP_RES_PROGRESS An NTP operation is in progress SNTP_RES_BUSY = -1 Module is busy SNTP_RES_TSTAMP_ERROR = -2 No timestamp is available server not contacted SNTP_RES_TSTAMP_STALE = -3 Timestamp is stale there's no recent timestamp SNTP_RES_SKT_ERR = -4 NTP socket operation error SNTP_RES_SKT_BIND_ERR = -5 NTP socket bind failed SNTP_RES_NTP_SERVER_TMO = -6 NTP server could not be accessed SNTP_RES_NTP_VERSION_ERR = -7 Wrong NTP cersion received SNTP_RES_NTP_TSTAMP_ERR = -8 Wrong NTP timestamp received SNTP_RES_NTP_SYNC_ERR = -9 NTP time synchronization error SNTP_RES_NTP_KOD_ERR = -10 An NTP KissOfDeath code has been received SNTP_RES_NTP_DNS_ERR = -11 An NTP DNS error SNTP_RES_NTP_IF_ERR = -12 An NTP interface error SNTP_RES_NTP_CONN_ERR = -13 An NTP connection type error ",
							" TCPIP_SNTP_Task Function ",
							" C void TCPIP_SNTP_Task(); ",
							" Description This function performs SNTP module tasks in the TCP/IP stack ",
							" Preconditions The SNTP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_SNTP_TIME_STAMP Union ",
							" C typedef union { struct { uint32_t tStampFraction; uint32_t tStampSeconds; } uint64_t llStamp; } TCPIP_SNTP_TIME_STAMP; ",
							" Description Describes the structure of the timestamp used by the SNTP module ",
							" Members Members Description tStampFraction 2^32 fractionary part tStampSeconds Seconds ",
							" Remarks Timestamp formats are based on the prime epoch i e the base date is the 0 h 1 January 1900 UTC for which the timestamp is 0 The tStampFraction is the least significant 32-bit number and represent 2^32 fractions of a second The tStampSeconds is the most significant 32-bit number and represents seconds The value of the timestamp is equal to: tStampSeconds + tStampFraction / 2^32 seconds The timestamp format is converted to host machine order ",
							" TCPIP_SNTP_TimeGet Function ",
							" C TCPIP_SNTP_RESULT TCPIP_SNTP_TimeGet( uint32_t* pUTCSeconds uint32_t* pMs ); ",
							" Description This function obtains the current time as reported by the SNTP module Use this value for absolute time stamping The value returned is (by default) in UTC format: the number of seconds since 01-Jan-1970 00:00:00 This function also returns the current millisecond obtained from a NTP server ",
							" Preconditions The TCP/IP Stack should have been initialized ",
							" Parameters Parameters Description pUTCSeconds Pointer to store the current UTC seconds Could be NULL if the UTC time is not needed pMs Pointer to store the current millisecond ",
							" Returns SNTP_RES_OK - If the call succeeded and the values are accurate SNTP_RES_TSTAMP_STALE error code - If there is no recent timestamp SNTP_RES_TSTAMP_ERROR error code - If there is no available timestamp ",
							" Remarks When SNTP_RES_TSTAMP_ERROR is returned the time values are meaningless and should not be used ",
							" TCPIP_SNTP_TimeStampGet Function ",
							" C TCPIP_SNTP_RESULT TCPIP_SNTP_TimeStampGet( TCPIP_SNTP_TIME_STAMP* pTStamp uint32_t* pLastUpdate ); ",
							" Description This function gets the last valid timestamp obtained from a NTP server ",
							" Preconditions The TCP/IP Stack should have been initialized ",
							" Parameters Parameters Description pTStamp Pointer to a 64-bit buffer to store the last NTP timestamp Could be NULL if the timestamp is not needed pLastUpdate Pointer to store the last timestamp Update tick could be NULL if the update time is not needed ",
							" Returns SNTP_RES_OK - If the call succeeded SNTP_RES_TSTAMP_STALE error code - If there is no recent timestamp SNTP_RES_TSTAMP_ERROR error code - If there is no available timestamp ",
							" Remarks The timestamp is returned in host order (Little Endian) with the most significant 32 bits representing seconds and the least significant 32 bits representing fraction of seconds (seconds/2^32) ",
							" TCPIP_SNTP_TimeStampStatus Function ",
							" C TCPIP_SNTP_RESULT TCPIP_SNTP_TimeStampStatus(); ",
							" Description This function gets the timestamp status as it was obtained from a NTP server ",
							" Preconditions The TCP/IP Stack should have been initialized ",
							" Returns SNTP_RES_OK - If there is a valid timestamp SNTP_RES_TSTAMP_STALE error code - There is a timestamp but it's old SNTP_RES_TSTAMP_ERROR error code - If there is no available timestamp ",
							" Remarks The result is info only and could change immediately ",
							" TCPIP_SNTP_UTCSecondsGet Function ",
							" C uint32_t TCPIP_SNTP_UTCSecondsGet(); ",
							" Description This function obtains the current time as reported by the SNTP module Use this value for absolute time stamping The value returned is (by default) the number of seconds since 01-Jan-1970 00:00:00 ",
							" Preconditions The TCP/IP Stack should have been inititialized ",
							" Returns The number of seconds since the Unix epoch (default 01-Jan-1970 00:00:00) ",
							" Remarks Do not use this function for time difference measurements The SYS_TMR/TMR_DRV modules are more appropriate for those requirements Do not use this function without first checking that a vliad timestamp has obtained from the NTP server This function is obsolete and it will be eventually removed Use the new version TCPIP_SNTP_TimeGet ",
							" TCP Module TCP is a standard transport layer_protocol described in RFC 793 It provides reliable stream-based connections over unreliable networks and forms the foundation for HTTP SMTP and many other protocol standards Abstraction Model This module provides software abstraction of the TCP module existent in any TCP/IP Stack implementation tcpip_stack_diagram How the Library Works Connections made over TCP guarantee data transfer at the expense of throughput Connections are made through a three-way handshake process ensuring a one-to-one connection Remote nodes advertise how much data they are ready to receive and all data transmitted must be acknowledged If a remote node fails to acknowledge the receipt of data it is automatically retransmitted This ensures that network errors such as lost corrupted or out-of-order packets are automatically corrected To accomplish this TCP must use buffers for both the transmit and receive operations Once the transmit buffer is full no more data can be sent until the remote node has acknowledged receipt When the Harmony TCP/IP Stack is used without a RTOS the application must return to the main system loop to allow the other services in the system including the TCP/IP stack to advance The remote node cannot transmit more data until the local device has acknowledged receipt and receiving space is available in the buffer When a local application needs to read more data it must return to the main system/application loop and wait for a new packet to arrive Core Functionality The following diagram provides an overview for the use of the TCP module TCP Connection Flow Server sockets are opened using TCPIP_TCP_ServerOpen This function will open a listening socket_waiting for client connections on the specified TCP port number A client socket_is opened using TCPIP_TCP_ClientOpen This function will open a socket_that connects to a remote host The remote host is specified using an IP address and a TCP port number Once connected applications can read and write data On each entry the application must verify that the socket_is still connected For most applications a call to TCPIP_TCP_IsConnected will be sufficient but TCPIP_TCP_WasReset may also be used for listening sockets that may turn over quickly To write data call TCPIP_TCP_PutIsReady to check how much space is available Then call the TCPIP_TCP_ArrayPut function to write data as space is available Once complete call TCPIP_TCP_Flush to transmit data immediately Alternately return to the main system/stack loop Data will be transmitted by the internal TCP state machine as the buffer becomes full or a programmable delay time has passed To read data call TCPIP_TCP_GetIsReady to determine how many bytes are ready to be retrieved Then use the TCPIP_TCP_ArrayGet function to read data from the_socket and/or the TCPIP_TCP_Find family of functions to locate data in the buffer When no more data remains return to the main system/stack loop to wait for more data to arrive If the application needs to close the connection call TCPIP_TCP_Disconnect and then return to the main system/stack loop and wait for the remote node to acknowledge the disconnection Client sockets will be closed and associated resources freed while listening sockets will wait for a new connection For more information refer to the examples provided with the MPLAB Harmony distribution examples or read the associated RFC Library Interface Name Description Macros  TCPIP_TCP_AUTO_TRANSMIT_TIMEOUT_VAL Timeout before automatically transmitting unflushed data ms Default value is 40 ms TCPIP_TCP_CLOSE_WAIT_TIMEOUT Timeout for the CLOSE_WAIT state ms If the remote socket closes the connection the TCP/IP stack will automatically close the socket after this timeout If the value is set to 0 then the socket will wait forever for the application to close the socket (default behavior) Default should be 0 TCPIP_TCP_DELAYED_ACK_TIMEOUT Timeout for delayed-acknowledgment algorithm ms TCPIP_TCP_DYNAMIC_OPTIONS Enable the TCP sockets dynamic options set/get functionality If enabled the functions: TCPIP_TCP_OptionsSet TCPIP_TCP_OptionsGet and TCPIP_TCP_FifoSizeAdjust exist and are compiled in If disabled these functions do not exist and cannot be used/called Note that this setting can affect modules that use TCP sockets TCPIP_TCP_FIN_WAIT_2_TIMEOUT Timeout for FIN WAIT 2 state ms TCPIP_TCP_KEEP_ALIVE_TIMEOUT Timeout for keep-alive messages when no traffic is sent ms TCPIP_TCP_MAX_RETRIES Maximum number of retransmission attempts TCPIP_TCP_MAX_SEG_SIZE_TX TCP Maximum Segment Size for TX The TX maximum segment size is actually governed by the remote node's MSS option advertised during connection establishment However if the remote node specifies an unmanageably large MSS (ex: Ethernet MTU) this define sets a hard limit so that TX buffers are not overflowed If the remote node does not advertise a MSS option all TX segments are fixed at 536 bytes maximum This symbol sets an upper bound on the TCP MSS on the transmit side which can ignore/override the remote node advertising TCPIP_TCP_MAX_SOCKETS The maximum number of sockets to create in the stack When defining TCPIP_TCP_MAX_SOCKETS take into account the number of interfaces the stack is supporting TCPIP_TCP_MAX_SYN_RETRIES Smaller than all other retries to reduce SYN flood DoS duration TCPIP_TCP_MAX_UNACKED_KEEP_ALIVES Maximum number of keep-alive messages that can be sent without receiving a response before automatically closing the connection TCPIP_TCP_SOCKET_DEFAULT_RX_SIZE Default socket RX buffer size Note that this setting affects all TCP sockets that are created and together with TCPIP_TCP_MAX_SOCKETS has a great impact on the heap size that's used by the stack (see TCPIP_STACK_DRAM_SIZE setting) When large RX bufferrs are needed probably a dynamic per socket approach is a better choice (see TCPIP_TCP_OptionsSet function) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput Note that some modules (like HTTP) use their own settings to more TCPIP_TCP_SOCKET_DEFAULT_TX_SIZE Default socket TX buffer size Note that this setting affects all TCP sockets that are created and together with TCPIP_TCP_MAX_SOCKETS has a great impact on the heap size that's used by the stack (see TCPIP_STACK_DRAM_SIZE setting) When large TX bufferrs are needed probably a dynamic per socket approach is a better choice (see TCPIP_TCP_OptionsSet function) The performance of a socket is highly dependent on the size of its buffers so it's a good idea to use as large as possible buffers for the sockets that need high throughput Note that some modules (like HTTP) use their own settings to more TCPIP_TCP_START_TIMEOUT_VAL Timeout to retransmit unacked data ms TCPIP_TCP_TASK_TICK_RATE The TCP task processing rate: number of milliseconds to generate an TCP tick This is the tick that advances the TCP state machine The default value is 5 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_TCP_WINDOW_UPDATE_TIMEOUT_VAL Timeout before automatically transmitting a window update due to a TCPIP_TCP_Get() or TCPIP_TCP_ArrayGet() function call ms TCPIP_TCP_COMMANDS TCPIP TCP info commands Enables/Disables the TCP command feature This setting will add a TCP \"info\" command to the TCP/IP command menu allowing a run time inspection of the TCP sockets Set the value to 1 to enable 0 to disable the feature TCPIP_TCP_MSL_TIMEOUT Maximum Segment Length (MSL) timeout seconds This value sets the time a socket will be in the TIME_WAIT/2MSL state after the socket performed an active close RFC recommended value is 120 sec Other common values are: 30/60 sec Note that if this symbol is defined to 0 then the TIME_WAIT/2MSL state is skipped This could lead to duplicate sequence numbers problems if sockets are frequently/rapidly closed and reopened and normally should be avoided TCPIP_TCP_QUIET_TIME This value specifies the TCP quiet time: TCP will not send any data for TCPIP_TCP_QUIET_TIME seconds after rebooting Usualy this value should match the MSL value Note that if this symbol is defined to 0 then the TCP quiet time state is skipped During the quiet time there will be no TCP traffic initiated by TCP So clients won't be able to connect to remote hosts and servers won't reply to client requests TCPIP_TCP_EXTERN_PACKET_PROCESS This setting enables/disables the processing of the RX packets by an external handler The user of the TCP can register an external function to process the incoming packets If true the functionality is built in and could be used by the application If false the functionality does not exist and the generated code is slightly smaller Socket Management Functions  TCPIP_TCP_ServerOpen Opens a TCP socket as a server TCPIP_TCP_ClientOpen Opens a TCP socket as a client TCPIP_TCP_Close Disconnects an open socket and destroys the socket handle releasing the associated resources TCPIP_TCP_Connect Connects a client socket TCPIP_TCP_Bind Binds a socket to a local address TCPIP_TCP_RemoteBind Binds a socket to a remote address TCPIP_TCP_IsConnected Determines if a socket has an established connection TCPIP_TCP_WasReset Self-clearing semaphore indicating socket reset TCPIP_TCP_Disconnect Disconnects an open socket TCPIP_TCP_Abort Aborts a connection TCPIP_TCP_OptionsGet Allows getting the options for a socket like: current RX/TX buffer size etc TCPIP_TCP_OptionsSet Allows setting options to a socket like adjust RX/TX buffer size etc TCPIP_TCP_SocketInfoGet Obtains information about a currently open socket TCPIP_TCP_SocketNetGet Gets the current network interface of an TCP socket TCPIP_TCP_SocketNetSet Sets the interface for an TCP socket TCPIP_TCP_Task Standard TCP/IP stack module task function TCPIP_TCP_SignalHandlerDeregister Deregisters a previously registered TCP socket signal handler TCPIP_TCP_SignalHandlerRegister Registers a TCP socket signal handler TCPIP_TCP_IsReady Returns the current status of the TCP module TCPIP_TCP_SocketsNumberGet Returns the number of existent TCP sockets TCPIP_TCP_SocketTraceSet Sets the current socket trace status TCPIP_TCP_PacketHandlerDeregister Deregisters a previously registered packet handler TCPIP_TCP_PacketHandlerRegister Sets a new packet processing handler Transmit Data Transfer Functions  TCPIP_TCP_PutIsReady Determines how much free space is available in the TCP TX buffer TCPIP_TCP_ArrayPut Writes an array from a buffer to a TCP socket TCPIP_TCP_StringPut Writes a null-terminated string to a TCP socket TCPIP_TCP_Put Writes a single byte to a TCP socket TCPIP_TCP_Flush Immediately transmits all pending TX data TCPIP_TCP_FifoTxFullGet Determines how many bytes are pending in the TCP TX FIFO TCPIP_TCP_FifoTxFreeGet Determines how many bytes are free and could be written in the TCP TX FIFO Receive Data Transfer Functions  TCPIP_TCP_GetIsReady Determines how many bytes can be read from the TCP RX buffer TCPIP_TCP_ArrayGet Reads an array of data bytes from a TCP socket's RX buffer/FIFO TCPIP_TCP_ArrayPeek Reads a specified number of data bytes from the TCP RX buffer/FIFO without removing them from the buffer TCPIP_TCP_ArrayFind Searches for a string in the TCP RX buffer TCPIP_TCP_Find Searches for a byte in the TCP RX buffer TCPIP_TCP_Get Retrieves a single byte to a TCP socket TCPIP_TCP_Peek Peaks at one byte in the TCP RX buffer/FIFO without removing it from the buffer TCPIP_TCP_Discard Discards any pending data in the RCP RX FIFO TCPIP_TCP_FifoRxFreeGet Determines how many bytes are free in the RX buffer/FIFO TCPIP_TCP_FifoSizeAdjust Adjusts the relative sizes of the RX and TX buffers TCPIP_TCP_FifoRxFullGet Determines how many bytes are pending in the RX buffer/FIFO Data Types and Constants  TCP_ADJUST_FLAGS TCP adjust RX and TX buffers flags TCP_OPTION_LINGER_DATA Socket linger options TCP_PORT Defines a TCP Port number TCP_SOCKET Defines a TCP Socket TCP_SOCKET_INFO TCP socket information TCP_SOCKET_OPTION TCP Socket run-time options INVALID_SOCKET Invalid socket indicator macro TCP_OPTION_THRES_FLUSH_TYPE List of the socket half threshold TX flush types TCP_OPTION_KEEP_ALIVE_DATA Socket keep alive options TCPIP_TCP_MODULE_CONFIG TCP module run-time configuration/initialization data TCPIP_TCP_SIGNAL_FUNCTION TCP signal handler TCPIP_TCP_SIGNAL_HANDLE TCP socket handle TCPIP_TCP_SIGNAL_TYPE TCP run time signal/event types TCPIP_TCP_STATE TCP socket state TCPIP_TCP_PACKET_HANDLER Pointer to a function(handler) that will get called to process an incoming TCP packet TCPIP_TCP_PROCESS_HANDLE Defines a TCP packet processing handle ",
							" INVALID_SOCKET Macro ",
							" C #define INVALID_SOCKET (-1) ",
							" Description Macro: INVALID_SOCKET Indicates that the socket is invalid or could not be opened ",
							" TCP_ADJUST_FLAGS Enumeration ",
							" C typedef enum { TCP_ADJUST_GIVE_REST_TO_RX = 0x01 TCP_ADJUST_GIVE_REST_TO_TX = 0x02 TCP_ADJUST_PRESERVE_RX = 0x04 TCP_ADJUST_PRESERVE_TX = 0x08 TCP_ADJUST_TX_ONLY = 0x10 TCP_ADJUST_RX_ONLY = 0x20 } TCP_ADJUST_FLAGS; ",
							" Description Enumeration: TCP_ADJUST_FLAGS Adjusts socket RX and TX buffer sizes ",
							" Members Members Description TCP_ADJUST_GIVE_REST_TO_RX = 0x01 Resize flag: extra bytes go to RX TCP_ADJUST_GIVE_REST_TO_TX = 0x02 Resize flag: extra bytes go to TX TCP_ADJUST_PRESERVE_RX = 0x04 Resize flag: attempt to preserve RX buffer TCP_ADJUST_PRESERVE_TX = 0x08 Resize flag: attempt to preserve TX buffer TCP_ADJUST_TX_ONLY = 0x10 Resize flag: adjust the TX buffer only TCP_ADJUST_RX_ONLY = 0x20 Resize flag: adjust the RX buffer only ",
							" TCP_OPTION_KEEP_ALIVE_DATA Structure ",
							" C typedef struct { bool keepAliveEnable; uint16_t keepAliveTmo; uint8_t keepAliveUnackLim; } TCP_OPTION_KEEP_ALIVE_DATA; ",
							" Description Structure: TCP_OPTION_KEEP_ALIVE_DATA This structure defines socket keep alive options ",
							" Parameters Parameters Description keepAliveEnable Enable/disable keep alive option; disabled by default for any socket keepAliveTmo Keep alive timeout in milliseconds ignored when keep alive is disabled if 0 the default build time value is used keepAliveUnackLim Limit of keep alives to be sent the socket will reset the communication channel if no reply received after so many retries ignored when keep alive is disabled if 0 the default build time value is used ",
							" TCP_OPTION_LINGER_DATA Structure ",
							" C typedef struct { bool lingerEnable; bool gracefulEnable; uint16_t lingerTmo; } TCP_OPTION_LINGER_DATA; ",
							" Description Structure: TCP_OPTION_LINGER_DATA This structure defines socket linger options ",
							" Members Members Description lingerEnable Enable/disable linger; enabled by default for any socket gracefulEnable Enable/disable graceful close; enabled by default for any socket lingerTmo Linger timeout in seconds (when enabled) This option is not supported yet ",
							" TCP_OPTION_THRES_FLUSH_TYPE Enumeration ",
							" C typedef enum { TCP_OPTION_THRES_FLUSH_AUTO TCP_OPTION_THRES_FLUSH_OFF TCP_OPTION_THRES_FLUSH_ON } TCP_OPTION_THRES_FLUSH_TYPE; ",
							" Description Enumeration: TCP_OPTION_THRES_FLUSH_TYPE Describes the possible types of the socket half threshold TX flush ",
							" Parameters Parameters Description TCP_OPTION_THRES_FLUSH_AUTO The socket will set the half buffer flush based on the TX buffer size This is the default setting For TX buffers = 1 5 MSS the half buffer flush will be disabled This results in higher performance/throughput for the socket TCP_OPTION_THRES_FLUSH_OFF Always disable the socket flush at half buffer threshold No socket flush is performed when the half TX buffer threshold is passed TCP_OPTION_THRES_FLUSH_ON Always enable the socket flush at half buffer threshold Socket flush is always performed when the half TX buffer threshold is passed This is useful for small TX buffers when the remote party implements the delayed ACK algorithm ",
							" TCP_SOCKET Type ",
							" C typedef uint16_t TCP_PORT; ",
							" Description Type: TCP_PORT TCP Port Number identifier ",
							" TCP_SOCKET Type ",
							" C typedef int16_t TCP_SOCKET; ",
							" Description Type: TCP_SOCKET A TCP_SOCKET is stored as a single int16_t number ",
							" TCP_SOCKET_INFO Structure ",
							" C typedef struct { IP_ADDRESS_TYPE addressType; IP_MULTI_ADDRESS remoteIPaddress; IP_MULTI_ADDRESS localIPaddress; TCP_PORT remotePort; TCP_PORT localPort; TCPIP_NET_HANDLE hNet; TCPIP_TCP_STATE state; uint16_t rxSize; uint16_t txSize; uint16_t rxPending; uint16_t txPending; TCP_SOCKET_FLAGS flags; } TCP_SOCKET_INFO; ",
							" Description Structure: TCP_SOCKET_INFO Gets information about a socket ",
							" Parameters Parameters Description addressType Address type of the socket IPv4 or IPv6 remoteIPaddress Remote address to which the socket is connected localIPaddress Local address socket is bound to remotePort Port number associated with remote node localPort Local port number hNet Associated interface state Current socket state rxSize Size of the RX buffer txSize Size of the TX buffer rxPending Bytes pending in RX buffer txPending Bytes pending in TX buffer flags Socket flags ",
							" TCP_SOCKET_OPTION Enumeration ",
							" C typedef enum { TCP_OPTION_LINGER TCP_OPTION_KEEP_ALIVE TCP_OPTION_RX_BUFF TCP_OPTION_TX_BUFF TCP_OPTION_RX_TMO TCP_OPTION_TX_TMO TCP_OPTION_NODELAY TCP_OPTION_EXCLUSIVE_ADDRESS TCP_OPTION_THRES_FLUSH TCP_OPTION_DELAY_SEND_ALL_ACK TCP_OPTION_TX_TTL TCP_OPTION_TOS } TCP_SOCKET_OPTION; ",
							" Description Enumeration: TCP_SOCKET_OPTION This enumeration defines TCP socket run-time options ",
							" Parameters Parameters Description TCP_OPTION_LINGER The LINGER option controls the action taken when unsent data is queued on a socket and the socket is closed The linger option can be turned on/off and the timeout can be specified TCP_OPTION_KEEP_ALIVE Enable the use of keep-alive packets on TCP connections The option can be turned on/off and the timeout can be specified TCP_OPTION_RX_BUFF Request different RX buffer size Has to call TCPIP_TCP_OptionsGet to see the exact space allocated TCP_OPTION_TX_BUFF Request different TX buffer size Has to call TCPIP_TCP_OptionsGet to see the exact space allocated TCP_OPTION_RX_TMO Specifies the RX timeout If no data arrives in the specified timeout the socket is closed TCP_OPTION_TX_TMO Specifies the TX timeout If no data can be sent in the specified timeout the socket is closed TCP_OPTION_NODELAY Enables the NO DELAY/Nagle algorithm functionality The default setting is disabled TCP_OPTION_EXCLUSIVE_ADDRESS Enables a socket to be bound for exclusive access The default setting is disabled - option not supported yet TCP_OPTION_THRES_FLUSH Sets the type of half buffer TX flush for the socket The default setting is TCP_OPTION_THRES_FLUSH_AUTO TCP_OPTION_DELAY_SEND_ALL_ACK Enables/disables the delay of sending the pending data when no unacknowledged data When this option is disabled the socket will immediately send any pending data chunk whenever all the previous data is acknowledged by the remote party (there is no unacknowledged data) This holds true for the 1st transmission too or after a pause of some length If the option is enabled the socket will delay sending the data waiting for more data to accumulate This could be useful when the application makes multiple calls with small data chunks The default setting is disabled TCP_OPTION_TX_TTL Specifies the Time To Live for packets sent by the socket If 0 the socket will use the default global IPv4 TTL setting This option allows the user to specify a different TTL value TCP_OPTION_TOS Sets the Type of Service (TOS) for IPv4 packets sent by the socket ",
							" TCPIP_TCP_Abort Function ",
							" C void TCPIP_TCP_Abort( TCP_SOCKET hTCP bool killSocket ); ",
							" Description This function aborts a connection to a remote node by sending a RST (if currently connected) Any pending TX/RX data is discarded A client socket will always be closed and the associated resources released The socket cannot be used again after this call A server socket will abort the current connection: if killSocket == false the socket will remain listening if killSocket == true the socket will be closed and all associated resources released The socket cannot be used again after this call ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Handle to the socket to disconnect killSocket If true it kills a server socket ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_TCP_ArrayFind Function ",
							" C uint16_t TCPIP_TCP_ArrayFind( TCP_SOCKET hTCP const uint8_t* cFindArray uint16_t wLen uint16_t wStart uint16_t wSearchLen bool bTextCompare ); ",
							" Description This function finds the first occurrence of an array of bytes in the TCP RX buffer It can be used by an application to abstract searches out of their own application code For increased efficiency the function is capable of limiting the scope of search to a specific range of bytes It can also perform a case-insensitive search if required For example if the buffer contains \"I love PIC MCUs \" and the search array is \"love\" with a length of 4 a value of 2 will be returned ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to search within cFindArray The array of bytes to find in the buffer wLen Length of cFindArray wStart Zero-indexed starting position within the buffer wSearchLen Length from wStart to search in the buffer bTextCompare True for case-insensitive text search false for binary search ",
							" Remarks For better performance of this function try to search for characters that are expected to exist or limit the scope of the search as much as possible The HTTP module for example uses this function to parse headers However it searches for newlines then the separating colon then reads the header name to an internal buffer for comparison This has proven to be significantly faster than searching for full header name strings outright ",
							" TCPIP_TCP_ArrayGet Function ",
							" C uint16_t TCPIP_TCP_ArrayGet( TCP_SOCKET hTCP uint8_t* buffer uint16_t count ); ",
							" Description This function reads an array of data bytes from a TCP socket's RX buffer/FIFO The data is removed from the FIFO in the process ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket from which data is to be read buffer Pointer to the array to store data that was read len Number of bytes to be read ",
							" Returns The number of bytes read from the socket If less than len the RX FIFO buffer became empty or the socket is not connected ",
							" Remarks If the supplied buffer is null the data is simply discarded ",
							" TCPIP_TCP_ArrayPeek Function ",
							" C uint16_t TCPIP_TCP_ArrayPeek( TCP_SOCKET hTCP uint8_t * vBuffer uint16_t wLen uint16_t wStart ); ",
							" Description This function reads a specified number of data bytes from the TCP RX FIFO without removing them from the buffer No TCP control actions are taken as a result of this function (ex: no window update is sent to the remote node) ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to peek from (read without removing from stream) vBuffer Destination to write the peeked data bytes wLen Length of bytes to peek from the RX FIFO and copy to vBuffer wStart Zero-indexed starting position within the FIFO from which to start peeking ",
							" Remarks None ",
							" TCPIP_TCP_ArrayPut Function ",
							" C uint16_t TCPIP_TCP_ArrayPut( TCP_SOCKET hTCP const uint8_t* Data uint16_t Len ); ",
							" Description Writes an array from a buffer to a TCP socket ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to which data is to be written data Pointer to the array to be written len Number of bytes to be written ",
							" Returns The number of bytes written to the socket If less than len the buffer became full or the socket is not connected ",
							" Remarks This operation can cause a TCP packet to be transmitted over the network (i e a TCPIP_TCP_Flush operation to be performed) when there is data in the TCP TX buffer that can be sent and any of the following occurs: There is no more space available in the TCP buffer The TCP_OPTION_THRES_FLUSH_ON is set and the TX buffer is at least half full The amount of data that can be sent is bigger than the remote host MSS or than half of the maximum advertised window size The Nagle algorithm is disabled and there is no unacknowledged data If none of these occur and the socket user does not add data to the TX socket buffer the TCP state machine will automatically flush the buffer when the TCP_AUTO_TRANSMIT_TIMEOUT_VAL time-out elapsed The default TCP_AUTO_TRANSMIT_TIMEOUT_VAL is 40 ms ",
							" TCPIP_TCP_Bind Function ",
							" C bool TCPIP_TCP_Bind( TCP_SOCKET hTCP IP_ADDRESS_TYPE addType TCP_PORT localPort IP_MULTI_ADDRESS* localAddress ); ",
							" Description This function is meant for unconnected server and client sockets It is similar to TCPIP_TCP_SocketNetSet that assigns a specific source interface for a socket If localPort is 0 the stack will assign a unique local port Sockets don't need specific binding it is done automatically by the stack However specific binding can be requested using these functions Works for both client and server sockets ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Socket to bind addType The type of address being used Example: IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 localPort local port to use If 0 the stack will assign a unitue local port localAddress The local address to bind to Could be NULL if the local address does not need to be changed ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks The call will fail if the socket is already connected (both server and client sockets) ",
							" TCPIP_TCP_ClientOpen Function ",
							" C TCP_SOCKET TCPIP_TCP_ClientOpen( IP_ADDRESS_TYPE addType TCP_PORT remotePort IP_MULTI_ADDRESS* remoteAddress ); ",
							" Description Provides a unified method for opening TCP client sockets Sockets are created at the TCP module initialization and can be claimed with this function and freed using TCPIP_TCP_Abort or TCPIP_TCP_Close ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description addType The type of address being used Example: IP_ADDRESS_TYPE_IPV4 remotePort TCP port to connect to The local port for client sockets will be automatically picked by the TCP module remoteAddress The remote address to be used If 0 then the address is unspecified ",
							" Returns INVALID_SOCKET - No sockets of the specified type were available to be opened TCP_SOCKET handle - Save this handle and use it when calling all other TCP APIs ",
							" Remarks IP_ADDRESS_TYPE_ANY is not supported (not a valid type for client open) If the remoteAddress = 0 (and the address pointed by remoteAddress = 0) then the socket will immediately initiate a connection to the remote host If the remoteAddress is unspecified no connection is initiated Client socket parameters can be set using TCPIP_TCP_Bind TCPIP_TCP_RemoteBind etc calls and then connection initiated by calling TCPIP_TCP_Connect Sockets and user threads protection For efficiency reasons there is NO PROTECTION for each individual API call except to Open and Close sockets What it means is that: the user application should close all its sockets before issuing a stack/if down command The stack manager takes care of the internally used sockets A socket can NOT be used concurrently from multiple threads It's ok to pass a socket from one thread to another as long as there's is no access from more than one thread at a time ",
							" TCPIP_TCP_Close Function ",
							" C bool TCPIP_TCP_Close( TCP_SOCKET hTCP ); ",
							" Description Graceful Option Set: If the graceful option is set for the socket (default) a TCPIP_TCP_Disconnect will be tried If the linger option is set (default) the TCPIP_TCP_Disconnect will try to send any queued TX data before issuing FIN If the FIN send operation fails or the socket is not connected the abort is generated Graceful Option Not Set: If the graceful option is not set or the previous step could not send the FIN a TCPIP_TCP_Abort is called sending a RST to the remote node Communication is closed the socket is no longer valid and the associated resources are freed ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Handle to thesocket to disconnect and close ",
							" Returns True - Indicates success False - Indicates failure (No such socket) ",
							" Remarks None ",
							" TCPIP_TCP_Connect Function ",
							" C bool TCPIP_TCP_Connect( TCP_SOCKET hTCP ); ",
							" Description This function will try to initiate a connection on a client socket that is not connected yet The client socket should have been created with a call to TCPIP_TCP_ClientOpen having the remoteAddress set to 0 ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Handle to the client socket to connect ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks The call will fail if the client socket has no remote host specified Use TCPIP_TCP_RemoteBind() to specify a remote host address for the client socket ",
							" TCPIP_TCP_Discard Function ",
							" C uint16_t TCPIP_TCP_Discard( TCP_SOCKET hTCP ); ",
							" Description This function discards any pending data in the TCP RX FIFO ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket whose RX buffer/FIFO is to be cleared ",
							" Returns The number of bytes that have been discarded from the RX buffer ",
							" TCPIP_TCP_Disconnect Function ",
							" C bool TCPIP_TCP_Disconnect( TCP_SOCKET hTCP ); ",
							" Description This function closes the TX side of a connection by sending a FIN (if currently connected) to the remote node of the connection If the socket has the linger option set (default) the queued TX data transmission will be attempted before sending the FIN If the linger option is off the queued TX data will be discarded Please note that this call may fail in which case it can be re-issued ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Handle to the socket to disconnect ",
							" Returns True - If the call succeeded False - Indicates that the notification could not be sent to the remote host The call can be reissued at a later time if desired ",
							" Remarks None ",
							" TCPIP_TCP_FifoRxFreeGet Function ",
							" C uint16_t TCPIP_TCP_FifoRxFreeGet( TCP_SOCKET hTCP ); ",
							" Description This function determines how many bytes are free in the RX buffer/FIFO ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns The number of bytes free in the TCP RX FIFO If zero no additional data can be received until the application removes some data using one of the TCPIP_TCP_Get family functions ",
							" TCPIP_TCP_FifoRxFullGet Macro ",
							" C #define TCPIP_TCP_FifoRxFullGet(a) TCPIP_TCP_GetIsReady(a) ",
							" Description Macro: TCPIP_TCP_FifoRxFullGet Alias to TCPIP_TCP_GetIsReady provided for API completeness ",
							" Remarks None ",
							" TCPIP_TCP_FifoSizeAdjust Function ",
							" C bool TCPIP_TCP_FifoSizeAdjust( TCP_SOCKET hTCP uint16_t wMinRXSize uint16_t wMinTXSize TCP_ADJUST_FLAGS vFlags ); ",
							" Description This function can be used to simultaneously adjust the sizes of the RX and TX FIFOs Adjusting the size of the TX/RX FIFO on the fly can allow for optimal transmission speed for one-sided application protocols For example HTTP typically begins by receiving large amounts of data from the client then switches to serving large amounts of data back Adjusting the FIFO at these points can increase performance in systems that have limited resources Once the FIFOs are adjusted a window update is sent Although the TX and RX socket buffers are completely independent for the purpose of this function they can be considered together if neither TCP_ADJUST_TX_ONLY nor TCP_ADJUST_RX_ONLY flags are set In these conditions the TCP_ADJUST_FLAGS control the distribution of the available space between the TX and RX FIFOs If neither or both of TCP_ADJUST_GIVE_REST_TO_TX and TCP_ADJUST_GIVE_REST_TO_RX are set the function distributes the remaining space (if any) equally If the new requested FIFOs space is greater that the old existing FIFOs space the TCP_ADJUST_GIVE_REST_TO_TX and TCP_ADJUST_GIVE_REST_TO_RX are ignored TCP_ADJUST_PRESERVE_RX and TCP_ADJUST_PRESERVE_TX request the preserving of the existing data Existing data can be preserved as long as the old data in the buffer does not exceed the capacity of the new buffer ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to be adjusted wMinRXSize Minimum number of bytes for the RX FIFO wMinTXSize Minimum number of bytes for the TX FIFO vFlags If TCP_ADJUST_TX_ONLY or TCP_ADJUST_RX_ONLY are not set the TX and RX buffers are evaluated together and any combination of the following flags is valid: - TCP_ADJUST_GIVE_REST_TO_RX TCP_ADJUST_GIVE_REST_TO_TX - TCP_ADJUST_PRESERVE_RX TCP_ADJUST_PRESERVE_TX- If TCP_ADJUST_TX_ONLY or TCP_ADJUST_RX_ONLY is set TX and RX buffers are treated individually and TCP_ADJUST_GIVE_REST_TO_TX TCP_ADJUST_GIVE_REST_TO_RX values are irrelevant - TCP_ADJUST_TX_ONLY and TCP_ADJUST_RX_ONLY both set is invalid ",
							" Remarks The function will automatically maintain minimal values for both TX and RX buffers To avoid having a socket with no associated buffers the function first allocates the new buffers and if succeeded it frees the old ones The TX and RX FIFOs (buffers) associated with a socket are completely separate and independent However when TCP_ADJUST_TX_ONLY or TCP_ADJUST_RX_ONLY are not set for the purpose of this function the TX and RX FIFOs are considered to be contiguous so that the total FIFO space is divided between the TX and RX FIFOs This provides backward compatibility with previous versions of this function The new flags TCP_ADJUST_TX_ONLY and TCP_ADJUST_RX_ONLY allow changing the size of TX and RX buffers independently This is the preferred option TX or RX associated buffer sizes can be changed too using the socket options See TCPIP_TCP_OptionsSet The size of the buffers should NOT be decreased when the socket has pending data to be sent to the remote party or to be received by the socket user Doing this may disrupt the communication make the TCP algorithm fail or have an unpredicted behavior ",
							" TCPIP_TCP_FifoTxFreeGet Function ",
							" C uint16_t TCPIP_TCP_FifoTxFreeGet( TCP_SOCKET hTCP ); ",
							" Description Macro: TCPIP_TCP_FifoTxFreeGet(TCP_SOCKET hTCP) This macro returns the number of bytes that are free in the socket TX buffer ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns The number of bytes available to be written in the TCP TX buffer ",
							" Remarks None ",
							" TCPIP_TCP_FifoTxFullGet Function ",
							" C uint16_t TCPIP_TCP_FifoTxFullGet( TCP_SOCKET hTCP ); ",
							" Description This function determines how many bytes are pending in the TCP TX FIFO ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns Number of bytes pending to be flushed in the TCP TX FIFO ",
							" Remarks None ",
							" TCPIP_TCP_Find Function ",
							" C uint16_t TCPIP_TCP_Find( TCP_SOCKET hTCP uint8_t cFind uint16_t wStart uint16_t wSearchLen bool bTextCompare ); ",
							" Description This function finds the first occurrence of a byte in the TCP RX buffer It can be used by an application to abstract searches out of their own application code For increased efficiency the function is capable of limiting the scope of search to a specific range of bytes It can also perform a case-insensitive search if required For example if the buffer contains \"I love PIC MCUs \" and the cFind byte is ' ' a value of 1 will be returned ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to search within cFind The byte to find in the buffer wStart Zero-indexed starting position within the buffer wSearchLen Length from wStart to search in the buffer bTextCompare True for case-insensitive text search false for binary search ",
							" Remarks For better performance of this function try to search for characters that are expected to exist or limit the scope of the search as much as possible The HTTP module for example uses this function to parse headers However it searches for newlines then the separating colon then reads the header name to an internal buffer for comparison This has proven to be significantly faster than searching for full header name strings outright ",
							" TCPIP_TCP_Flush Function ",
							" C bool TCPIP_TCP_Flush( TCP_SOCKET hTCP ); ",
							" Description This function immediately transmits all pending TX data with a PSH flag If this function is not called data will automatically be sent by the TCP state machine (see the TCPIP_TCP_ArrayPut() description/notes) ",
							" Preconditions TCP is initialized and the socket is connected ",
							" Parameters Parameters Description hTCP The socket whose data is to be transmitted ",
							" Returns True - If data is flushed from the socket False - Otherwise ",
							" Remarks The application should not call this function explicitly because doing this will interfere with the TCP algorithm and degrade performance of the socket data transfer One exception is when the application knows that it put all the data it needed into the TCP buffer and it makes sense to flush the socket instead of waiting TCP_AUTO_TRANSMIT_TIMEOUT_VAL timeout to elapse ",
							" TCPIP_TCP_Get Function ",
							" C uint16_t TCPIP_TCP_Get( TCP_SOCKET hTCP uint8_t* byte ); ",
							" Description This function retrieves a single byte to a TCP socket ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP The socket from which to read byte Pointer to location in which the read byte should be stored ",
							" Remarks Note that this function is inefficient A buffered approach (TCPIP_TCP_ArrayGet) is preferred ",
							" TCPIP_TCP_GetIsReady Function ",
							" C uint16_t TCPIP_TCP_GetIsReady( TCP_SOCKET hTCP ); ",
							" Description Call this function to determine how many bytes can be read from the TCP RX buffer If this function returns zero the application must return to the main stack loop before continuing in order to wait for more data to arrive ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns The number of bytes available to be read from the TCP RX buffer ",
							" Remarks None ",
							" TCPIP_TCP_IsConnected Function ",
							" C bool TCPIP_TCP_IsConnected( TCP_SOCKET hTCP ); ",
							" Description This function determines if a socket has an established connection to a remote node Call this function after calling TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() to determine when the connection is set up and ready for use ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns None ",
							" Remarks A socket is said to be connected only if it is in one of the states: TCPIP_TCP_STATE_ESTABLISHED TCPIP_TCP_STATE_FIN_WAIT_1 TCPIP_TCP_STATE_FIN_WAIT_2 or TCPIP_TCP_STATE_CLOSE_WAIT In all of these states the socket can exchange data with the other end of the connection (either full duplex or only TX/RX) Otherwise the call will return false ",
							" TCPIP_TCP_IsReady Function ",
							" C bool TCPIP_TCP_IsReady(); ",
							" Description This function returns the current status of the TCP module If the TCP quiet time has elapsed (or it was not enabled when TCP was built) then the TCP module is ready for operation and TCP sockets can send and receive data If the TCP quiet time is still in effect then the TCP module is quiet and it won't transmit any kind of data ",
							" Preconditions TCP properly initialized ",
							" Returns True - The quiet time has elapsed and the TCP module is ready to transmit data False - The quiet time is still in effect and TCP module is silent ",
							" Remarks The TCP quiet time occurs at the stack start up and can be enabled/disabled using the TCP module configuration parameters ",
							" TCPIP_TCP_MODULE_CONFIG Structure ",
							" C typedef struct { int nSockets; uint16_t sktTxBuffSize; uint16_t sktRxBuffSize; } TCPIP_TCP_MODULE_CONFIG; ",
							" Description Structure: TCPIP_TCP_MODULE_CONFIG This structure defines TCP module run-time configuration/initialization data ",
							" Parameters Parameters Description nSockets Number of sockets to be created sktTxBuffSize Size of the socket TX buffer sktRxBuffSize Size of the socket RX buffer ",
							" TCPIP_TCP_OptionsGet Function ",
							" C bool TCPIP_TCP_OptionsGet( TCP_SOCKET hTCP TCP_SOCKET_OPTION option void* optParam ); ",
							" Description Various options can be get at the socket level This function provides compatibility with BSD implementations ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Socket to set options for option Specific option to be set optParam pointer to an area that will receive the option value; this is option dependent the size of the area has to be large enough to accommodate the specific option - TCP_OPTION_LINGER - pointer to a TCP_OPTION_LINGER_DATA structure - TCP_OPTION_KEEP_ALIVE - pointer to a TCP_OPTION_KEEP_ALIVE_DATA structure - TCP_OPTION_RX_BUFF - size of the new RX buffer - TCP_OPTION_TX_BUFF - size of the new TX buffer - TCP_OPTION_RX_TMO - not supported yet - TCP_OPTION_TX_TMO - not supported yet - TCP_OPTION_NODELAY - pointer to boolean to return current NO DELAY status - TCP_OPTION_EXCLUSIVE_ADDRESS - not supported yet - TCP_OPTION_THRES_FLUSH - a TCP_OPTION_THRES_FLUSH_TYPE - TCP_OPTION_DELAY_SEND_ALL_ACK - pointer to boolean to return current DELAY Send All ACK status - TCP_OPTION_TX_TTL - pointer to an 8 bit value to receive the TTL value - TCP_OPTION_TOS - pointer to an 8 bit value to receive the TOS ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks None ",
							" TCPIP_TCP_OptionsSet Function ",
							" C bool TCPIP_TCP_OptionsSet( TCP_SOCKET hTCP TCP_SOCKET_OPTION option void* optParam ); ",
							" Description Various options can be set at the socket level This function provides compatibility with BSD implementations ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Socket to set options for option Specific option to be set optParam The option value; this is option dependent - TCP_OPTION_LINGER - pointer to a TCP_OPTION_LINGER_DATA structure - TCP_OPTION_KEEP_ALIVE - pointer to a TCP_OPTION_KEEP_ALIVE_DATA structure - TCP_OPTION_RX_BUFF - size of the new RX buffer - TCP_OPTION_TX_BUFF - size of the new TX buffer - TCP_OPTION_RX_TMO - not supported yet - TCP_OPTION_TX_TMO - not supported yet - TCP_OPTION_NODELAY - boolean to enable/disable the NO DELAY functionality - TCP_OPTION_EXCLUSIVE_ADDRESS - not supported yet - TCP_OPTION_THRES_FLUSH - a TCP_OPTION_THRES_FLUSH_TYPE - TCP_OPTION_DELAY_SEND_ALL_ACK - boolean to enable/disable the DELAY Send All ACK data functionality - TCP_OPTION_TX_TTL - 8-bit value of TTL - TCP_OPTION_TOS - 8-bit value of the TOS ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks None ",
							" TCPIP_TCP_PACKET_HANDLER Type ",
							" C typedef bool (* TCPIP_TCP_PACKET_HANDLER)(TCPIP_NET_HANDLE hNet struct _tag_TCPIP_MAC_PACKET* rxPkt const void* hParam); ",
							" Description TCP packet handler Pointer Pointer to a function that will be called by the TCP module when a RX packet is available ",
							" Preconditions None ",
							" Parameters Parameters Description hNet Network handle on which the packet has arrived rxPkt Pointer to incoming packet hParam User passed parameter when handler was registered ",
							" Returns True - If the packet is processed by the external handler In this case the TCP module will no longer process the packet False - If the packet needs to be processed internally by the TCP as usual ",
							" Remarks The packet handler is called in the TCP context The handler should be kept as short as possible as it affects the processing of all the other TCP RX traffic Before calling the external packet handler: the rxPkt- pktFlags has the bit 9 (value 0x0200) set for an IPv6 packet cleared for IPv4 the rxPkt- pTransportLayer points to an TCP_HEADER data structure the rxPkt- pNetLayer points to an IPV4_HEADER/IPV6_HEADER data structure the rxPkt- pktIf points to the interface receiving the packet the first data segment segLen is adjusted to store the size of the TCP data Important When the packet handler returns true once it's done processing the packet it needs to acknowledge it i e return to the owner which is the MAC driver serving the network interface This means that the packet acknowledge function needs to be called with a proper acknowledge parameter and the QUEUED flag needs to be cleared if needed: if((*rxPkt- ackFunc)(rxPkt rxPkt- ackParam)) { rxPkt- pktFlags = ~TCPIP_MAC_PKT_FLAG_QUEUED; } Failure to do that will result in memory leaks and starvation of the MAC driver See the tcpip_mac h for details ",
							" TCPIP_TCP_PacketHandlerDeregister Function ",
							" C bool TCPIP_TCP_PacketHandlerDeregister( TCPIP_TCP_PROCESS_HANDLE pktHandle ); ",
							" Description This function removes a packet processing handler ",
							" Preconditions TCP properly initialized ",
							" Parameters Parameters Description pktHandle TCPIP packet handle obtained by a call to TCPIP_TCP_PacketHandlerRegister ",
							" Returns True - If the operation succeeded False - If the operation failed ",
							" Remarks Exists only if TCPIP_TCP_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_TCP_PROCESS_HANDLE myHandle = TCPIP_TCP_PacketHandlerRegister(myPacketHandler myParam ); // process incoming packets // now we're done with it TCPIP_TCP_PacketHandlerDeregister(myHandle); ",
							" TCPIP_TCP_Peek Function ",
							" C uint8_t TCPIP_TCP_Peek( TCP_SOCKET hTCP uint16_t wStart ); ",
							" Description This function peaks at one byte in the TCP RX buffer/FIFO without removing it from the buffer ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to peek from (read without removing from stream) wStart Zero-indexed starting position within the FIFO to peek from ",
							" Remarks Note that this function is inefficient and its use is discouraged A buffered approach (TCPIP_TCP_ArrayPeek) is preferred ",
							" TCPIP_TCP_PROCESS_HANDLE Type ",
							" C typedef const void* TCPIP_TCP_PROCESS_HANDLE; ",
							" Description Type: TCPIP_TCP_PROCESS_HANDLE Definition of an packet processing handle used for packet processing registration by the TCP clients ",
							" TCPIP_TCP_PacketHandlerRegister Function ",
							" C TCPIP_TCP_PROCESS_HANDLE TCPIP_TCP_PacketHandlerRegister( TCPIP_TCP_PACKET_HANDLER pktHandler const void* handlerParam ); ",
							" Description This function registers a new packet processing handler The caller can use the handler to be notified of incoming packets and given a chance to examine/process them ",
							" Preconditions TCP properly initialized ",
							" Parameters Parameters Description pktHandler The packet handler which will be called for an incoming packet handlerParam Packet handler parameter ",
							" Returns A valid TCPIP_TCP_PROCESS_HANDLE - If the operation succeeded NULL - If the operation failed ",
							" Remarks Currently only one packet handler is supported for the TCP module The call will fail if a handler is already registered Use TCPIP_TCP_PacketHandlerDeregister first Exists only if TCPIP_TCP_EXTERN_PACKET_PROCESS is true ",
							" Example TCPIP_TCP_PROCESS_HANDLE pktHandle = TCPIP_TCP_PacketHandlerRegister( myPktHandler myParam ); ",
							" TCPIP_TCP_Put Function ",
							" C uint16_t TCPIP_TCP_Put( TCP_SOCKET hTCP uint8_t byte ); ",
							" Description Writes a single byte to a TCP socket ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP The socket to which data is to be written byte The byte to write ",
							" Returns None ",
							" Remarks Note that this function is inefficient and its use is discouraged A buffered approach (TCPIP_TCP_ArrayPut) is preferred ",
							" TCPIP_TCP_PutIsReady Function ",
							" C uint16_t TCPIP_TCP_PutIsReady( TCP_SOCKET hTCP ); ",
							" Description Call this function to determine how many bytes can be written to the TCP TX buffer If this function returns zero the application must return to the main stack loop before continuing in order to transmit more data ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns The number of bytes available to be written in the TCP TX buffer ",
							" Remarks None ",
							" TCPIP_TCP_RemoteBind Function ",
							" C bool TCPIP_TCP_RemoteBind( TCP_SOCKET hTCP IP_ADDRESS_TYPE addType TCP_PORT remotePort IP_MULTI_ADDRESS* remoteAddress ); ",
							" Description This function is meant for unconnected server and client sockets Sockets don't need specific remote binding they should accept connections on any incoming interface Thus the binding is done automatically by the stack However specific remote binding can be requested using these functions For a server socket it can be used to restrict accepting connections from a specific remote host For a client socket it will just change the default binding done when the socket was opened ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ServerOpen()/TCPIP_TCP_ClientOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP Socket to bind addType The type of address being used Example: IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 remotePort Remote port to use Could be 0 if the remote port does not need to be changed remoteAddress The remote address to bind to Could be NULL if the remote address does not need to be changed ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks The socket remote port is changed only if a non-zero remotePort value is passed The socket remote host address is changed only if a non-zero remoteAddress value is passed The call will fail if the socket is already connected (both server and client sockets) ",
							" TCPIP_TCP_ServerOpen Function ",
							" C TCP_SOCKET TCPIP_TCP_ServerOpen( IP_ADDRESS_TYPE addType TCP_PORT localPort IP_MULTI_ADDRESS* localAddress ); ",
							" Description Provides a unified method for opening TCP server sockets Sockets are created at the TCP module initialization and can be claimed with this function and freed using TCPIP_TCP_Close ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description addType The type of address being used Example: IP_ADDRESS_TYPE_IPV4 localPort TCP port to listen on for connections localAddress Local address to use Use 0 if listening on any network interface ",
							" Returns INVALID_SOCKET - No sockets of the specified type were available to be opened TCP_SOCKET handle - Save this handle and use it when calling all other TCP APIs ",
							" Remarks Sockets and user threads protection For efficiency reasons there is NO PROTECTION for each individual API call except to Open and Close sockets What it means is that: The user application should close all its sockets before issuing a stack/if down command The stack manager takes care of the internally used sockets A socket can NOT be used concurrently from multiple threads It's ok to pass a socket from one thread to another as long as there's is no access from more than one thread at a time ",
							" TCPIP_TCP_SIGNAL_FUNCTION Type ",
							" C typedef void (* TCPIP_TCP_SIGNAL_FUNCTION)(TCP_SOCKET hTCP TCPIP_NET_HANDLE hNet TCPIP_TCP_SIGNAL_TYPE sigType const void* param); ",
							" Description Type: TCPIP_TCP_SIGNAL_FUNCTION Prototype of a TCP signal handler Socket user can register a handler for the TCP socket Once an TCP event occurs the registered handler will be called ",
							" Parameters Parameters Description hTCP TCP socket to be used hNet The network interface on which the event has occurred sigType Type of TCP signal that has occurred param Additional parameter that has been specified at the handler registration call This is user supplied and is not used by the TCP module ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" TCPIP_TCP_SIGNAL_HANDLE Type ",
							" C typedef const void* TCPIP_TCP_SIGNAL_HANDLE; ",
							" Description Type: TCPIP_TCP_SIGNAL_HANDLE A handle that a socket client can use after the signal handler has been registered ",
							" TCPIP_TCP_SIGNAL_TYPE Enumeration ",
							" C typedef enum { TCPIP_TCP_SIGNAL_TX_DONE = 0x0001 TCPIP_TCP_SIGNAL_TX_DATA_DONE = 0x0002 TCPIP_TCP_SIGNAL_TX_SPACE = 0x0004 TCPIP_TCP_SIGNAL_TX_RST = 0x0008 TCPIP_TCP_SIGNAL_ESTABLISHED = 0x0100 TCPIP_TCP_SIGNAL_RX_DATA = 0x0200 TCPIP_TCP_SIGNAL_RX_FIN = 0x0400 TCPIP_TCP_SIGNAL_RX_RST = 0x0800 TCPIP_TCP_SIGNAL_KEEP_ALIVE_TMO = 0x1000 TCPIP_TCP_SIGNAL_IF_DOWN = 0x2000 TCPIP_TCP_SIGNAL_IF_CHANGE = 0x4000 } TCPIP_TCP_SIGNAL_TYPE; ",
							" Description Enumeration: TCPIP_TCP_SIGNAL_TYPE Description of the signals/events that a TCP socket can generate ",
							" Members Members Description TCPIP_TCP_SIGNAL_TX_DONE = 0x0001 A TCP packet was successfully transmitted on the interface This may indicate or not that new data can be sent with this socket Note 1: The TCP buffer space is controlled by the TCP state machine; The fact that a packet was transmitted doesn't necessarily mean that new data can be written into the socket buffer: 2: The packet may be an ACK only packet retry packet etc and does not free any writing space in the socket buffer 3: A new socket writing space may not be available because the other party has not acknowledged the data it was sent so far Therefore the information carried by this signal has limited usage 4: This notification is the result of an user action (explicit call to TCPIP_TCP_Flush) or as a result of the internal TCP state machine TCPIP_TCP_SIGNAL_TX_DATA_DONE = 0x0002 A TCP data packet carrying valid payload was successfully transmitted on the interface This may indicate or not that new data can be sent with this socket TCPIP_TCP_SIGNAL_TX_SPACE = 0x0004 New TX space is available in the socket TX buffer This event signals that the remote party has acknowledged some data and as a result TX buffer space is available TCPIP_TCP_SIGNAL_TX_RST = 0x0008 Reset sent to the remote host and connection is reset TCPIP_TCP_SIGNAL_ESTABLISHED = 0x0100 Socket established a connection (client or server socket) TCPIP_TCP_SIGNAL_RX_DATA = 0x0200 A data packet was successfully received and there is data available for this socket TCPIP_TCP_SIGNAL_RX_FIN = 0x0400 Remote host finished its data and sent a FIN TCPIP_TCP_SIGNAL_RX_RST = 0x0800 Remote host reset the connection TCPIP_TCP_SIGNAL_KEEP_ALIVE_TMO = 0x1000 Keep alive has timed out; Connection to the remote host has been aborted TCPIP_TCP_SIGNAL_IF_DOWN = 0x2000 Associated interface is going down; sockets connected on this interface will be disconnected but still alive TCPIP_TCP_SIGNAL_IF_CHANGE = 0x4000 Associated interface has changed address sockets connected on this interface will be disconnected but still alive ",
							" Remarks These signals are used in the socket event handling notification functions It is possible that multiple flags are set as part of the same notification The signals are 16 bits wide ",
							" TCPIP_TCP_SignalHandlerDeregister Function ",
							" C bool TCPIP_TCP_SignalHandlerDeregister( TCP_SOCKET s TCPIP_TCP_SIGNAL_HANDLE hSig ); ",
							" Description This function deregisters the TCP socket signal handler ",
							" Preconditions hSig valid TCP handle ",
							" Parameters Parameters Description s The TCP socket hSig A handle returned by a previous call to TCPIP_TCP_SignalHandlerRegister ",
							" Returns True - If the call succeeds False - If no such handler is registered ",
							" Remarks None ",
							" TCPIP_TCP_SignalHandlerRegister Function ",
							" C TCPIP_TCP_SIGNAL_HANDLE TCPIP_TCP_SignalHandlerRegister( TCP_SOCKET s TCPIP_TCP_SIGNAL_TYPE sigMask TCPIP_TCP_SIGNAL_FUNCTION handler const void* hParam ); ",
							" Description This function registers a TCP socket signal handler The TCP module will call the registered handler when a TCP signal (TCPIP_TCP_SIGNAL_TYPE) occurs ",
							" Preconditions TCP valid socket ",
							" Parameters Parameters Description s The TCP socket sigMask Mask of signals to be reported handler SIgnal handler to be called when a TCP event occurs hParam Parameter to be used in the handler call This is user supplied and is not used by the TCP module ",
							" Returns Returns a valid handle if the call succeeds Returns a null handle if the call failed (null handler no such socket existent handler) ",
							" Remarks Only one signal handler per socket is supported A new handler does not override the existent one Instead TCPIP_TCP_SignalHandlerDeregister has to be explicitly called The handler has to be short and fast It is meant for setting an event flag not for lengthy processing The hParam is passed by the client For multi-threaded systems the TCP/IP packet dispatch does not occur on the user thread The signal handler will be called on a different thread context It is essential that this handler is non blocking and really fast For multi-threaded systems once set it is not recommended to change the signal handler at run time Synchronization between user threads and packet dispatch threads could be difficult If really need to be changed make sure that the old handler could still be called and it should be valid until the new one is taken into account TCPIP_TCP_SignalHandlerDeregister needs to be called before registering another handler ",
							" TCPIP_TCP_SocketInfoGet Function ",
							" C bool TCPIP_TCP_SocketInfoGet( TCP_SOCKET hTCP TCP_SOCKET_INFO* pInfo ); ",
							" Description Fills the provided TCP_SOCKET_INFO structure associated with this socket This contains the IP addresses and port numbers for both the local and remote endpoints ",
							" Preconditions TCP is initialized and the socket is connected ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns True - If the call succeeded False - If no such socket exists or the socket is not open ",
							" Remarks None ",
							" TCPIP_TCP_SocketNetGet Function ",
							" C TCPIP_NET_HANDLE TCPIP_TCP_SocketNetGet( TCP_SOCKET hTCP ); ",
							" Description This function returns the interface handle associated to a TCP socket ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ClientOpen()/TCPIP_TCP_ServerOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP The TCP socket ",
							" Returns The handle of the local interface this socket is bound to ",
							" Remarks The returned handle could be NULL if the socket is invalid or the socket is not currently connected ",
							" TCPIP_TCP_SocketNetSet Function ",
							" C bool TCPIP_TCP_SocketNetSet( TCP_SOCKET hTCP TCPIP_NET_HANDLE hNet ); ",
							" Description This function sets the network interface for an TCP socket ",
							" Preconditions TCP socket should have been opened with TCPIP_TCP_ClientOpen()/TCPIP_TCP_ServerOpen() hTCP - valid socket ",
							" Parameters Parameters Description hTCP The TCP socket hNet Interface handle ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks An invalid hNet can be passed (0) so that the current network interface selection will be cleared ",
							" TCPIP_TCP_SocketsNumberGet Function ",
							" C int TCPIP_TCP_SocketsNumberGet(); ",
							" Description This function returns the number of created TCP sockets This is the maximum number of sockets that can be opened at any moment as it's been passed as parameter when TCP module was created ",
							" Preconditions TCP properly initialized ",
							" Returns The number of TCP sockets ",
							" TCPIP_TCP_SocketTraceSet Function ",
							" C bool TCPIP_TCP_SocketTraceSet( TCP_SOCKET sktNo bool enable ); ",
							" Description This function enables or disables the trace status of the specified socket The trace functionality needs to be enabled in the TCP module for this function to succeed Currently when socket trace is enabled the current socket state transitions are displayed at the system console ",
							" Preconditions TCP properly initialized ",
							" Parameters Parameters Description sktNo Socket to enable/disable trace enable Boolean to enable/disable socket trace ",
							" Returns True - If the operation succeeded False - If there was an error (no such socket tracing not enabled etc ) ",
							" Remarks None ",
							" TCPIP_TCP_STATE Enumeration ",
							" C typedef enum { TCPIP_TCP_STATE_LISTEN TCPIP_TCP_STATE_SYN_SENT TCPIP_TCP_STATE_SYN_RECEIVED TCPIP_TCP_STATE_ESTABLISHED TCPIP_TCP_STATE_FIN_WAIT_1 TCPIP_TCP_STATE_FIN_WAIT_2 TCPIP_TCP_STATE_CLOSING TCPIP_TCP_STATE_TIME_WAIT TCPIP_TCP_STATE_CLOSE_WAIT TCPIP_TCP_STATE_LAST_ACK TCPIP_TCP_STATE_CLIENT_WAIT_DISCONNECT TCPIP_TCP_STATE_CLIENT_WAIT_CONNECT TCPIP_TCP_STATE_KILLED } TCPIP_TCP_STATE; ",
							" Description Enumeration: TCPIP_TCP_STATE Enumeration describing the possible states of a TCP socket ",
							" Members Members Description TCPIP_TCP_STATE_LISTEN Socket is listening for connections TCPIP_TCP_STATE_SYN_SENT A SYN has been sent awaiting an SYN+ACK TCPIP_TCP_STATE_SYN_RECEIVED A SYN has been received awaiting an ACK TCPIP_TCP_STATE_ESTABLISHED Socket is connected and connection is established TCPIP_TCP_STATE_FIN_WAIT_1 FIN WAIT state 1 TCPIP_TCP_STATE_FIN_WAIT_2 FIN WAIT state 2 TCPIP_TCP_STATE_CLOSING Socket is closing TCPIP_TCP_STATE_TIME_WAIT 2MSL state TCPIP_TCP_STATE_CLOSE_WAIT Waiting to close the socket TCPIP_TCP_STATE_LAST_ACK The final ACK has been sent TCPIP_TCP_STATE_CLIENT_WAIT_DISCONNECT Client socket lost connection waiting for app close/disconnect TCPIP_TCP_STATE_CLIENT_WAIT_CONNECT Client socket waiting for connection TCPIP_TCP_STATE_KILLED Socket is killed; debug reporting state ",
							" TCPIP_TCP_StringPut Function ",
							" C const uint8_t* TCPIP_TCP_StringPut( TCP_SOCKET hTCP const uint8_t* Data ); ",
							" Description This function writes a null-terminated string to a TCP socket The null-terminator is not copied to the socket ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to which data is to be written data Pointer to the string to be written ",
							" Returns Pointer to the byte following the last byte written to the socket If this pointer does not dereference to a NULL byte the buffer became full or the socket is not connected ",
							" Remarks The return value of this function differs from that of TCPIP_TCP_ArrayPut To write long strings in a single state initialize the *data pointer to the first byte then call this function repeatedly (breaking to the main stack loop after each call) until the return value dereferences to a NULL byte Save the return value as the new starting *data pointer otherwise ",
							" TCPIP_TCP_Task Function ",
							" C void TCPIP_TCP_Task(); ",
							" Description This function performs TCP module tasks in the TCP/IP stack ",
							" Preconditions The TCP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_TCP_WasReset Function ",
							" C bool TCPIP_TCP_WasReset( TCP_SOCKET hTCP ); ",
							" Description This function is a self-clearing semaphore indicating whether or not a socket has been reset since the previous call This function indicates that a RST was received from the remote node a TCPIP_TCP_Disconnect was called or the socket was somehow re-initalized It also returns true just after the socket was opened ",
							" Preconditions TCP is initialized ",
							" Parameters Parameters Description hTCP The socket to check ",
							" Returns None ",
							" Remarks A server socket upon receiving a RST signal will go to listen state A client socket will be closed when RST is received The info that the FIN was received could be also obtained by registering a signal with the socket (the preferred way) ",
							" Telnet Module Telnet which runs over a TCP connection provides bidirectional interactive communication between two nodes on the Internet or on a Local Area Network The Telnet code included with Harmony TCP/IP stack is a demonstration of the possible utilization of a Telnet server module The server listens for a Telnet connection When a client attempts to make one the server will prompt the client for a username and password and if the correct one is provided it will_connect_the client The server registers itself with the system command processor and acts as a communication channel capable of issuing commands and receiving replies From this moment on the Telnet connection can be used for various system and TCP/IP related commands just as the regular system console is used The commands currently implemented and processed by the command processor can be dynamically updated new commands can be added etc See the tcpip_commands c file for the list of TCP/IP-related commands Based on this skeleton Telnet code completely new behavior can be implemented for the Telnet server Abstraction Model Currently the Telnet TCP/IP Library runs in the background as a server and does not expose any API functions It serves incoming connections by sending the received data string to the command processor which outputs each command reply to the Telnet channel TCPIP TELNET telnet_flow Library Interface Name Description Macros  TCPIP_TELNET_MAX_CONNECTIONS Maximum number of Telnet connections TCPIP_TELNET_LISTEN_PORT Port on which the telnet server is listening Default is TCPIP_TELNET_SERVER_PORT (23) or TCPIP_TELNET_SERVER_SECURE_PORT (992) Adjust as needed TCPIP_TELNET_SKT_RX_BUFF_SIZE Size of the telnet socket RX buffer If long messages are sent over the telnet connection the socket should have a large enough buffer to receive the data Leave 0 for default TCP RX buffer size TCPIP_TELNET_SKT_TX_BUFF_SIZE Size of the telnet socket TX buffer if long messages are sent over the telnet connection the socket should have a large enough buffer to write the data at once Leave 0 for default TCP TX buffer size TCPIP_TELNET_PRINT_BUFF_SIZE Size of the internal print buffer This buffer is used when the telnet console printf style function is called Adjust based on the length of the messages to be formatted with print statements This buffer is created in the automatic stack Make sure that there's enough stack space for this buffer TCPIP_TELNET_LINE_BUFF_SIZE Size of the internal line buffer This buffer is used for receiving and assembling the password authentication and regular characters Adjust based on the length of the commands sent to the telnet server This buffer is created in the automatic stack Make sure that there's enough stack space for this buffer TCPIP_TELNET_TASK_TICK_RATE telnet task rate milliseconds The default value is 100 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_TELNET_USERNAME_SIZE Maximum size of the internal buffer to store the user name Adjust based on the length of the user names allowed for the telnet connections A buffer of this size if allocated for each connection to store the login user name Longer user names will be truncated to this size TCPIP_TELNET_OBSOLETE_AUTHENTICATION telnet obsolete authentication method disable/enable If false This is the default and the PREFERRED case The telnet module will call a registrated callback to authenticate the users Is is the preferred authentication method It requires the run time registration of an authentication handler Until the moment the authentication handler is registered any login attempts will fail If true The old OBSOLETE authentication method using the build symbols TCPIP_TELNET_USERNAME and TCPIP_TELNET_PASSWORD is used This method is DEPRECATED and it will be eventually removed It is recommended that you leave the setting to false TCPIP_TELNET_AUTHENTICATION_CONN_INFO Use the telnet connection information data as part of the authentication callback If false no connection info data is provided to the authentication callback This is useful for the default case when all connections will use the same username/password If true the authentication callback will contain the connection info data to allow different processing based on the source of the authentication request This flag is relevant only when TCPIP_TELNET_OBSOLETE_AUTHENTICATION == false TCPIP_TELNET_USERNAME Default Telnet user name DEPRECATED this is used only when there's no authentication callback defined Use only when TCPIP_TELNET_OBSOLETE_AUTHENTICATION == true TCPIP_TELNET_PASSWORD Default Telnet password DEPRECATED this is used only when there's no authentication callback defined Use only when TCPIP_TELNET_OBSOLETE_AUTHENTICATION == true Functions  TCPIP_TELNET_Task Standard TCP/IP stack module task function TCPIP_TELNET_AuthenticationDeregister Deregisters a previously registered authentication handler TCPIP_TELNET_AuthenticationRegister Sets a new telnet authentication handler TCPIP_TELNET_ConnectionInfoGet Gets information about a telnet connection TCPIP_TELNET_ConnectionsGet Gets the number of the telnet connections Data Types and Constants  TCPIP_TELNET_MODULE_CONFIG telnet module run time configuration/initialization data TCPIP_TELNET_AUTH_HANDLER Pointer to a function (handler) that will get called to process telnet authentication TCPIP_TELNET_CONN_INFO telnet connection information TCPIP_TELNET_FLAGS telnet configuration flags TCPIP_TELNET_HANDLE Defines a telnet handle TCPIP_TELNET_STATE Telnet connection state ",
							" TCPIP_TELNET_AUTH_HANDLER Type ",
							" C typedef bool (* TCPIP_TELNET_AUTH_HANDLER)(const char* user const char* password const TCPIP_TELNET_CONN_INFO* pInfo const void* hParam); ",
							" Description Telnet authentication callback Pointer to a function that will be called by the telnet module when a login operation is ongoing and user authentication needs to be performed ",
							" Preconditions None ",
							" Members Members Description user The user name entered as part of the login process password The password entered as part of the login process pInfo Pointer to a TCPIP_TELNET_CONN_INFO carrying specific connection information to help in the authentication process hParam Parameter that was passed at the time of the handler registration ",
							" Returns True - If the authentication is successful and the telnet connection should be allowed False - If the authentication failed and the connection should be aborted ",
							" Remarks The handler is called in the telnet context The handler should be kept as short as possible as it shouldn't block This is the PREFERRED method of authenticating the telnet connection Until the moment the authentication handler is registered any login attempts will fail The pInfo will be NULL if the telnet module is initialized with TCPIP_TELNET_AUTHENTICATION_INFO == true ",
							" TCPIP_TELNET_AuthenticationDeregister Function ",
							" C bool TCPIP_TELNET_AuthenticationDeregister( TCPIP_TELNET_HANDLE authHandle ); ",
							" Description This function removes a authentication handler ",
							" Preconditions Telnet properly initialized ",
							" Parameters Parameters Description authHandler TCPIP_TELNET_HANDLE obtained by a call to TCPIP_TELNET_AuthenticationRegister() ",
							" Returns True - If the operation succeeded False - If the operation failed ",
							" Remarks The build should have TCPIP_TELNET_OBSOLETE_AUTHENTICATION == false ",
							" Example TCPIP_TELNET_HANDLE myHandle = TCPIP_TELNET_AuthenticationRegister(myAuthHandler myParam ); // process incoming login requests // now we're done with it // no more users will be able to login TCPIP_TELNET_AuthenticationDeregister(myHandle); ",
							" TCPIP_TELNET_AuthenticationRegister Function ",
							" C TCPIP_TELNET_HANDLE TCPIP_TELNET_AuthenticationRegister( TCPIP_TELNET_AUTH_HANDLER authHandler const void* handlerParam ); ",
							" Description This function registers a new authentication handler telnet module will call the handler when an user tries to login and needs to be authenticated ",
							" Preconditions Telnet properly initialized ",
							" Parameters Parameters Description authHandler The handler which will be called for authentication handlerParam Handler parameter that will be called with the handler unused by telnet ",
							" Returns A valid TCPIP_TELNET_HANDLE - If the operation succeeded NULL - If the operation failed ",
							" Remarks Currently only one authentication handler is supported by the telnet module The call will fail if a handler is already registered Use TCPIP_TELNET_AuthenticationDeregister() first This is the PREFERRED authentication method If there's no registrated handler any login attempt will fail The build should have TCPIP_TELNET_OBSOLETE_AUTHENTICATION == false ",
							" Example TCPIP_TELNET_HANDLE authHandle = TCPIP_TELNET_AuthenticationRegister( myAuthHandler myParam ); ",
							" TCPIP_TELNET_CONN_INFO Structure ",
							" C typedef struct { uint16_t connIx; uint16_t state; int16_t presSkt; int16_t tcpSkt; TCP_SOCKET_INFO tcpInfo; } TCPIP_TELNET_CONN_INFO; ",
							" Description Structure: TCPIP_TELNET_CONN_INFO Gets information about a telnet connection ",
							" Members Members Description connIx Telnet connection index: [0 TCPIP_TELNET_MODULE_CONFIG::nConnections - 1 state TCPIP_TELNET_STATE: Current telnet connection state presSkt NET_PRES_SKT_HANDLE_T: connection presentation socket tcpSkt TCP_SOCKET: underlying transport socket tcpInfo Transport socket information ",
							" TCPIP_TELNET_ConnectionInfoGet Function ",
							" C bool TCPIP_TELNET_ConnectionInfoGet( uint16_t connIx TCPIP_TELNET_CONN_INFO* pInfo ); ",
							" Description This function gets information about a telnet connection ",
							" Preconditions The Telnet module should have been initialized ",
							" Parameters Parameters Description connIx Index of the connection to get the info for Valid range is  pInfo Pointer to a TCPIP_TELNET_CONN_INFO to be filled with connection data Could be NULL if not needed ",
							" Returns True - If the connIx is a valid telnet connection number False - Otherwise ",
							" Remarks None ",
							" TCPIP_TELNET_ConnectionsGet Function ",
							" C uint16_t TCPIP_TELNET_ConnectionsGet(); ",
							" Description This function gets the number of the telnet connections ",
							" Preconditions The Telnet module should have been initialized ",
							" Returns Number of telnet connections: the initialization parameter TCPIP_TELNET_MODULE_CONFIG::nConnections; ",
							" Remarks None ",
							" TCPIP_TELNET_FLAGS Enumeration ",
							" C typedef enum { TCPIP_TELNET_FLAG_NONE = 0x0000 TCPIP_TELNET_FLAG_NO_DELAY = 0x0001 TCPIP_TELNET_FLAG_PASS_CONTROL_CHARS = 0x0002 } TCPIP_TELNET_FLAGS; ",
							" Description Enumeration: TCPIP_TELNET_FLAGS Flags for the configuration of the telnet module ",
							" Members Members Description TCPIP_TELNET_FLAG_NONE = 0x0000 No flag set TCPIP_TELNET_FLAG_NO_DELAY = 0x0001 Create the telnet sockets with NO_DELAY option TCPIP_TELNET_FLAG_PASS_CONTROL_CHARS = 0x0002 Pass the telnet commands options controls etc within the messages to the console by default they are removed and only printable characters are sent to the console Enable only for debug or special purposes ",
							" Remarks Only 16 bits are supported ",
							" TCPIP_TELNET_HANDLE Type ",
							" C typedef const void* TCPIP_TELNET_HANDLE; ",
							" Description Type: TCPIP_TELNET_HANDLE Definition of an processing handle used for registration of callbacks with the telnet module ",
							" TCPIP_TELNET_MODULE_CONFIG Structure ",
							" C typedef struct { uint16_t nConnections; uint16_t sktTxBuffSize; uint16_t sktRxBuffSize; uint16_t listenPort; uint16_t configFlags; } TCPIP_TELNET_MODULE_CONFIG; ",
							" Description Structure: TCPIP_TELNET_MODULE_CONFIG Telnet module configuration/initialization ",
							" Members Members Description nConnections Number of simultaneous telnet connections allowed sktTxBuffSize Size of TX buffer for the associated socket; leave 0 for default sktRxBuffSize Size of RX buffer for the associated socket; leave 0 for default listenPort Telnet listening port: 23 992 etc configFlags TCPIP_TELNET_FLAGS configuration flags ",
							" TCPIP_TELNET_STATE Enumeration ",
							" C typedef enum { TCPIP_TELNET_IDLE = 0 TCPIP_TELNET_GET_LOGIN TCPIP_TELNET_GET_PASSWORD TCPIP_TELNET_AUTHENTICATED TCPIP_TELNET_CONNECTED } TCPIP_TELNET_STATE; ",
							" Description Enumeration: TCPIP_TELNET_STATE Enumeration describing the possible states of a telnet connection ",
							" TCPIP_TELNET_Task Function ",
							" C void TCPIP_TELNET_Task(); ",
							" Description This function performs Telnet module tasks in the TCP/IP stack ",
							" Preconditions The Telnet module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TFTP Client Module The TCP/IP Stack Library Trivial File Transfer Protocol (TFTP) module is a simple protocol used to transfer files The TFTP client module supports reading and writing of files (or mail) from/to a remote server Note: The TFTP client module cannot list directories and currently has no provisions for user authentication Abstraction Model tftp_diagram TFTP Client Server Communication TFTP Write Request (WRQ) The following diagram illustrates a write request TCPIP TFTP WRQ TFTP Read Request (RRQ) The following diagram illustrates a read request TCPIP TFTP RRQ Library Interface Name Description Macros  TCPIP_TFTPC_ARP_TIMEOUT The number of seconds to wait before declaring a TIMEOUT error on PUT TCPIP_TFTPC_CMD_PROCESS_TIMEOUT The number of seconds to wait before declaring a TIMEOUT in seconds error on GET or PUT command processing TCPIP_TFTPC_DEFAULT_IF The default TFTP interface for multi-homed hosts TCPIP_TFTPC_FILENAME_LEN The maximum value for the file name size TCPIP_TFTPC_HOSTNAME_LEN The maximum TFTP host name length size TCPIP_TFTPC_MAX_RETRIES The number of attempts before declaring a TIMEOUT error TCPIP_TFTPC_TASK_TICK_RATE The TFTP client task rate in milliseconds The default value is 100 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_TFTPC_USER_NOTIFICATION allow TFTP client user notification if enabled the TCPIP_TFTPC_HandlerRegister/TCPIP_TFTPC_HandlerDeRegister functions exist and can be used TFTP_CONFIG_H This is macro TFTP_CONFIG_H  Functions  TCPIP_TFTPC_GetEventNotification Get the details of the TFTP client file mode communication event details TCPIP_TFTPC_HandlerDeRegister Deregisters a previously registered TFTP Client handler TCPIP_TFTPC_HandlerRegister Registers a TFTPC Handler TCPIP_TFTPC_SetCommand TFTP client command operation configuration TCPIP_TFTPC_SetServerAddress Set the Server IP address for TFTP Client TCPIP_TFTPC_Task Standard TCP/IP stack module task function Data Types and Constants  _TFTP_CMD_TYPE File command mode used for TFTP PUT and GET commands TCPIP_TFTP_CMD_TYPE File command mode used for TFTP PUT and GET commands TCPIP_TFTPC_MODULE_CONFIG Placeholder for TFTP Client module configuration __TFTPC_H This is macro __TFTPC_H TCPIP_TFTPC_EVENT_HANDLER TFTPC event handler prototype TCPIP_TFTPC_EVENT_TYPE TFTP client Event Type TCPIP_TFTPC_HANDLE TFTPC handle TCPIP_TFTPC_OPERATION_RESULT Standard error codes for TFTP PUT and GET command operation ",
							" __TFTPC_H Macro ",
							" C #define __TFTPC_H ",
							" Description This is macro __TFTPC_H ",
							" TCPIP_TFTP_CMD_TYPE Enumeration ",
							" C typedef enum _TFTP_CMD_TYPE { TFTP_CMD_PUT_TYPE = 0 TFTP_CMD_GET_TYPE TFTP_CMD_NONE } TCPIP_TFTP_CMD_TYPE; ",
							" Description Enumeration: TCPIP_TFTP_CMD_TYPE These enum values are issued from the command line ",
							" Members |Members |Description | |TFTP_CMD_PUT_TYPE = 0 |TFTP client issues a PUT command to write a file to the server | |TFTP_CMD_GET_TYPE |TFTP client issues a GET command to read the file from the server | ",
							" TCPIP_TFTPC_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_TFTPC_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_TFTPC_EVENT_TYPE evType void *buf uint32_t bufLen const void* param); ",
							" Description Type: TCPIP_TFTPC_EVENT_HANDLER Prototype of a TFTPC event handler Clients can register a handler with the TFTP service Once an TFTP event occurs the TFTP Client service will be called the registered handler The handler has to be short and fast It is meant for setting an event flag not for lengthy processing buf - Buffer is used to provide the memory Pointer buf type need to be typecasted to char* while processing bufLen - The number of bytes present in the buffer ",
							" TCPIP_TFTPC_EVENT_TYPE Enumeration ",
							" C typedef enum { TFTPC_EVENT_NONE = 0 TFTPC_EVENT_PUT_REQUEST = 0x0001 TFTPC_EVENT_GET_REQUEST = 0x0002 TFTPC_EVENT_ACKED = 0x0004 TFTP_EVENT_DATA_RECEIVED = 0x0008 TFTPC_EVENT_DECLINE = 0x0010 TFTPC_EVENT_TIMEOUT = 0x0020 TFTPC_EVENT_COMPLETED = 0x0040 TFTPC_EVENT_CONN_LOST = 0x0080 TFTPC_EVENT_CONN_ESTABLISHED = 0x0100 TFTPC_EVENT_SERVICE_DISABLED = 0x0200 TFTPC_EVENT_BUSY = 0x0400 } TCPIP_TFTPC_EVENT_TYPE; ",
							" Description Enumeration: TCPIP_TFTPC_EVENT_TYPE None ",
							" Members Members Description TFTPC_EVENT_NONE = 0 TFTP no event TFTPC_EVENT_PUT_REQUEST = 0x0001 TFTP PUT request sent TFTPC_EVENT_GET_REQUEST = 0x0002 TFTP GET request sent TFTPC_EVENT_ACKED = 0x0004 TFTP request acknowledge was received TFTP_EVENT_DATA_RECEIVED = 0x0008 TFTP client received data for GET request TFTPC_EVENT_DECLINE = 0x0010 TFTP file PUT or GET communication declined due to bad PDU TFTPC_EVENT_TIMEOUT = 0x0020 TFTP server timeout TFTPC_EVENT_COMPLETED = 0x0040 TFTP file PUT or GET completed TFTPC_EVENT_CONN_LOST = 0x0080 Connection the the TFTP server lost TFTPC_EVENT_CONN_ESTABLISHED = 0x0100 Connection re-established TFTPC_EVENT_SERVICE_DISABLED = 0x0200 TFTP service disabled TFTPC_EVENT_BUSY = 0x0400 TFTP client communication is going on ",
							" TCPIP_TFTPC_GetEventNotification Function ",
							" C TCPIP_TFTPC_EVENT_TYPE TCPIP_TFTPC_GetEventNotification(); ",
							" Description This function returns the event type TCPIP_TFTPC_EVENT_TYPE for different modes of TFTP file communication ",
							" Preconditions The TFTP client module must be initialized ",
							" Returns TCPIP_TFTPC_EVENT_TYPE: It will be OR of different events ",
							" TCPIP_TFTPC_HANDLE Type ",
							" C typedef const void* TCPIP_TFTPC_HANDLE; ",
							" Description Type: TCPIP_TFTPC_HANDLE A handle that a client can use after the event handler has been registered ",
							" TCPIP_TFTPC_HandlerDeRegister Function ",
							" C bool TCPIP_TFTPC_HandlerDeRegister( TCPIP_TFTPC_HANDLE hDhcp ); ",
							" Description This function deregisters the TFTP client event handler ",
							" Preconditions The TFTP client module must be initialized ",
							" Preconditions The TFTP client module must be initialized ",
							" Parameters Parameters Description htftpc A handle returned by a previous call to TCPIP_TFTPC_HandlerRegister ",
							" Returns True - If the call succeeds False - If no such handler is registered ",
							" TCPIP_TFTPC_HandlerRegister Function ",
							" C TCPIP_TFTPC_HANDLE TCPIP_TFTPC_HandlerRegister( TCPIP_NET_HANDLE hNet TCPIP_TFTPC_EVENT_HANDLER handler const void* hParam ); ",
							" Description This function registers a TFTPC event handler The TFTP client module will call the registered handler when a TFTP client event (TCPIP_TFTPC_EVENT_TYPE) occurs ",
							" Preconditions The TFTP client module must be initialized ",
							" Parameters Parameters Description hNet Interface handle Use hNet == 0 to register on all interface available handler Handler to be called when a TFTP client event occurs hParam Parameter to be used in the handler call This is user supplied and is not used by the DHCP module ",
							" Returns A valid handle if the call succeeds A null handle if the call failed (out of memory for example) ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing The hParam is passed by the client and will be used by the DHCP when the notification is made It is used for per-thread content of if more modules for example share the same handler and need a way to differentiate the callback ",
							" TCPIP_TFTPC_MODULE_CONFIG Structure ",
							" C typedef struct { const char* tftpc_interface; uint32_t tftpc_reply_timeout; } TCPIP_TFTPC_MODULE_CONFIG; ",
							" Description Structure: TCPIP_TFTPC_MODULE_CONFIG This structure is a placeholder for TFTP client module configuration ",
							" Members |Members |Description | |tftpc_reply_timeout |Time-out for the server reply in seconds | ",
							" TCPIP_TFTPC_OPERATION_RESULT Enumeration ",
							" C typedef enum { TFTPC_ERROR_NONE = 0 TFTPC_ERROR_FILE_NOT_FOUND = -1 TFTPC_ERROR_BUSY = -2 TFTPC_ERROR_DISK_FULL = -3 TFTPC_ERROR_INVALID_OPERATION = -4 TFTPC_ERROR_UNKNOWN_TID = -5 TFTPC_ERROR_FILE_EXISTS = -6 TFTPC_ERROR_NO_SUCH_USE = -7 TFTPC_ERROR_DNS_RESOLVE_ERR = -8 TFTPC_ERROR_INVALID_INTERFACE = -9 TFTPC_ERROR_INVALID_FILE_LENGTH = -10 TFTPC_ERROR_INVALID_SERVER_ADDR = -11 } TCPIP_TFTPC_OPERATION_RESULT; ",
							" Description Enumeration: TCPIP_TFTPC_OPERATION_RESULT This enumeration defines the standard error codes for TFTP PUT and GET command operation ",
							" Members Members Description TFTPC_ERROR_FILE_NOT_FOUND = -1 TFTP client file not found TFTPC_ERROR_BUSY = -2 TFTP client is busy when one file PUT or GET transfer is going on TFTPC_ERROR_DISK_FULL = -3 TFTP client buffer full TFTPC_ERROR_INVALID_OPERATION = -4 TFTP client invalid command operation TFTPC_ERROR_UNKNOWN_TID = -5 TfTP ID error TFTPC_ERROR_FILE_EXISTS = -6 TFTP client file already exists TFTPC_ERROR_NO_SUCH_USE = -7 TFTP client not in use TFTPC_ERROR_DNS_RESOLVE_ERR = -8 TFTP client DNS resolve error TFTPC_ERROR_INVALID_INTERFACE = -9 TFTP client interface error TFTPC_ERROR_INVALID_FILE_LENGTH = -10 TFTP client file length is more than the expected size which should be the size of SYS_FS_FILE_NAME_LEN TFTPC_ERROR_INVALID_SERVER_ADDR = -11 Invali Server Address ",
							" TCPIP_TFTPC_SetCommand Function ",
							" C TCPIP_TFTPC_OPERATION_RESULT TCPIP_TFTPC_SetCommand( IP_MULTI_ADDRESS* mAddr IP_ADDRESS_TYPE ipType TCPIP_TFTP_CMD_TYPE cmdType const char * fileName ); ",
							" Description This function is used to set the client mode server and file name The file name is accessed as per the TFTP command mode ",
							" Preconditions The TCP/IP stack should have been initialized ",
							" Parameters Parameters Description mAddr Server address ipType IP address type either IPv4 or IPv6 type cmdType GET or PUT command fileName File to be processed ",
							" Returns TFTPC_ERROR_BUSY - TFTP client is busy for one file processing retry later when there is a TFTP operation going on the other operation has to wait until the TFTP operation is completed TFTPC_ERROR_INVALID_FILE_LENGTH - File length should not be more than TCPIP_TFTPC_FILENAME_LEN TFTPC_ERROR_NONE - Successful command operation ",
							" Remarks None ",
							" TCPIP_TFTPC_SetServerAddress Function ",
							" C void TCPIP_TFTPC_SetServerAddress( IP_MULTI_ADDRESS* ipAddr IP_ADDRESS_TYPE ipType ); ",
							" Description This function is used to set the TFTP server address (either it will be IPv4 address or IPv5 address) This address will be used for either GET or PUT mode of TFTP client operation ",
							" Preconditions The TFTP client module must be initialized ",
							" Parameters Parameters Description ipAddr Pointer to the server address ipType Type of address: IPv4/IPv6 ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_TFTPC_Task Function ",
							" C void TCPIP_TFTPC_Task(); ",
							" Description This function performs TFTP module tasks in the TCP/IP stack ",
							" Preconditions The TFTP module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TFTP Server Module The TCP/IP Stack Library Trivial File Transfer Protocol (TFTP) module is a simple protocol used to transfer files The TFTP server waits for client requests to read and write files Abstraction Model The TFTP communication is based on a client/server model The process of transferring a file consists of three main phases In highly generalized terms these phases are: Initial Connection: The TFTP client establishes the connection by sending an initial request to the server The server responds back to the client and the connection is effectively opened Data Transfer: Once the connection has been established the client and server exchange TFTP messages One device sends data and the other sends acknowledgments Connection Termination: When the last TFTP message containing data has been sent and acknowledged the connection is terminated TFT_client_server_comm How the Library Works Any transfer begins with a request from a client to read or write a file If the server grants the request the connection is opened and the file is sent usually in fixed length blocks of 512 bytes Each data packet contains one block of data and must be acknowledged by an acknowledgment packet before the next packet can be sent A data packet of less than 512 bytes signals termination of a transfer If a packet gets lost in the network the intended recipient will time out and may retransmit the last packet (which may be data or an acknowledgment) thus causing the sender of the lost packet to retransmit that lost packet TFTP Transfer Set up To set up a TFTP transfer a TFTP client device can request (get) files from the server and also transfer (put) files to the server The File System on the server is transparent Currently the Microchip Harmony devices support MPFS or FAT file systems The Microchip TFTP server implementation allows the user to start and stop the service dynamically by using the TFTP Application Programming Interface ( API) function TFTP Transfer Options The following options are supported in the current TFTP server implementation (see RFC 2348 2349): TFTP Option Name TFTP Option Code (Used in Request Messages) Description Block Size blksize The option allows the Client and the Server to send data blocks of a size different than 512 bytes Timeout Interval interval The option permits the client /server to agree on a specified number of seconds to use for their retransmission Transfer Size tsize The option allows the side receiving the file to determine the ultimate size of the transfer before it begins TFTP Client Server Communication TFTP Write Request (WRQ) The following diagram illustrates a write request TFT_client_write_req TFTP Read Request (RRQ) The following diagram illustrates a read request TFT_client_read_req Flow chart for the TFTP server processing incoming requests TFT_server_read_write_flowchart Library Interface Name Description Macros  TCPIP_TFTPS_CLIENT_NUMBER The number of Clients requests will be processed for the TFTP server stack TCPIP_TFTPS_DEFAULT_BLOCK_SIZE The maximum value for the file name size Even though the RFC allows blocks of up to 65464 bytes In practice the limit is set to 1468 bytes: the size of an Ethernet MTU minus the headers of TFTP (4 bytes) UDP (8 bytes) and IP (20 bytes) TCPIP_TFTPS_DEFAULT_FILESIZE The maximum size for a file in bytes to be accepted TFTP Opcode defined by RFC 2347 TCPIP_TFTPS_DEFAULT_TIMEOUT This time is used during the TFTP retransmission and TFTP Client wait for these many seconds before retransmitting TCPIP_TFTPS_RETRANSMIT_COUNT The number of attempts to retransmit the previous packet before declaring a TIMEOUT error TCPIP_TFTPS_TASK_TICK_RATE The TFTP server task rate in milliseconds The default value is 100 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE TCPIP_TFTPS_FILENAME_LEN The default length of the file name is defined to 64 bytes TCPIP_TFTPS_USER_NOTIFICATION allow TFTP Server user notification if enabled the TCPIP_TFTPS_HandlerRegister/TCPIP_TFTPS_HandlerDeRegister functions exist and can be used Functions  TCPIP_TFTPS_ClientsNumber Determines the number of clients running for this server TCPIP_TFTPS_Disable Disables the TFTP server for the specified interface TCPIP_TFTPS_Enable Enables the TFTP server for the specified interface TCPIP_TFTPS_HandlerDeRegister De-registers a previously registered TFTP Server handler TCPIP_TFTPS_HandlerRegister Registers a TFTP Server Handler TCPIP_TFTPS_IsEnabled Determines if a TFTP server is active or not TCPIP_TFTPS_Task Standard TCP/IP stack module task function Data Types and Constants  TCPIP_TFTPS_EVENT_TYPE List of events for the TFTPS module TCPIP_TFTPS_RESULT Provides a list of possible results for the TFTPS module TCPIP_TFTPS_MODULE_CONFIG Placeholder for TFTPS Module Configuration TCPIP_TFTPS_EVENT_HANDLER Notification handler that can be called when there is a TFTP process for a client TCPIP_TFTPS_HANDLE TFTP server handle ",
							" TCPIP_TFTPS_CLIENT_NUMBER Macro ",
							" C #define TCPIP_TFTPS_CLIENT_NUMBER (2ul) ",
							" Description The number of Clients requests will be processed for the TFTP server stack ",
							" TCPIP_TFTPS_ClientsNumber Function ",
							" C uint8_t TCPIP_TFTPS_ClientsNumber(); ",
							" Returns number of active clients ",
							" Description This function determines the number of active clients running for this TFTP server The maximum possible clients will be as per the value of TCPIP_TFTPS_CLIENT_NUMBER ",
							" Remarks None ",
							" Preconditions The TFTPS module should have been initialized ",
							" TCPIP_TFTPS_DEFAULT_BLOCK_SIZE Macro ",
							" C #define TCPIP_TFTPS_DEFAULT_BLOCK_SIZE (32) ",
							" Description The maximum value for the file name size Even though the RFC allows blocks of up to 65464 bytes In practice the limit is set to 1468 bytes: the size of an Ethernet MTU minus the headers of TFTP (4 bytes) UDP (8 bytes) and IP (20 bytes) ",
							" TCPIP_TFTPS_DEFAULT_FILESIZE Macro ",
							" C #define TCPIP_TFTPS_DEFAULT_FILESIZE (64000) ",
							" Description The maximum size for a file in bytes to be accepted TFTP Opcode defined by RFC 2347 ",
							" TCPIP_TFTPS_DEFAULT_TIMEOUT Macro ",
							" C #define TCPIP_TFTPS_DEFAULT_TIMEOUT (10) ",
							" Description This time is used during the TFTP retransmission and TFTP Client wait for these many seconds before retransmitting ",
							" TCPIP_TFTPS_Disable Function ",
							" C bool TCPIP_TFTPS_Disable(TCPIP_NET_HANDLE hNet); ",
							" Returns true - if successful false - if unsuccessful ",
							" Description This function disables the TFTP server for the specified interface ",
							" Remarks None ",
							" Preconditions The TFTPS module should have been initialized ",
							" Parameters Parameters Description hNet Interface for which to disable ",
							" TCPIP_TFTPS_Enable Function ",
							" C bool TCPIP_TFTPS_Enable(TCPIP_NET_HANDLE hNet IP_ADDRESS_TYPE ipType); ",
							" Returns true - if successful false - if unsuccessful if server open fails for this interface ",
							" Description This function enables the TFTP server for the specified interface and it opens the TFTP server with specific IP address TYPE ",
							" Remarks None ",
							" Preconditions The TFTPS module should have been initialized ",
							" Parameters Parameters Description hNet Interface to enable ipType Interface address type Depends on the enum type of IP_ADDRESS_TYPE bool TCPIP_TFTPS_Enable( TCPIP_NET_HANDLE hNet IP_ADDRESS_TYPE ipType) ",
							" TCPIP_TFTPS_EVENT_HANDLER Type ",
							" C typedef void (* TCPIP_TFTPS_EVENT_HANDLER)(TCPIP_NET_HANDLE hNet TCPIP_TFTPS_EVENT_TYPE evType const char* name const void* param); ",
							" Description Type: TCPIP_TFTPS_EVENT_HANDLER The format of a notification handler registered with the TFTP server module Once an TFTP server event occurs the TFTP server service will be called for the registered handler ",
							" Remarks If pNetIf == 0 the notification is called for events on any interface ",
							" Parameters Parameters Description hNet the interface on which the DNS event occurred evType the TFTP server reported event name the host name associated with the event param additional user parameter - see TCPIP_TFTPS_HandlerRegister   ",
							" TCPIP_TFTPS_EVENT_TYPE Enumeration ",
							" C typedef enum { TCPIP_TFTPS_EVENT_NONE = 0 TCPIP_TFTPS_EVENT_READ_COMPLETED = 1 TCPIP_TFTPS_EVENT_WRITE_COMPLETED = 2 TCPIP_TFTPS_EVENT_IF_ERROR = -1 TCPIP_TFTPS_EVENT_SKT_ERROR = -2 TCPIP_TFTPS_EVENT_CONNECTION_FAILURE = -3 TCPIP_TFTPS_EVENT_SAME_REQUEST_RCVD = -4 } TCPIP_TFTPS_EVENT_TYPE; ",
							" Members Members Description TCPIP_TFTPS_EVENT_NONE = 0 invalid event TCPIP_TFTPS_EVENT_READ_COMPLETED = 1 send notification after file READ communication completion TCPIP_TFTPS_EVENT_WRITE_COMPLETED = 2 send notification after file WRITE communication completion error events TCPIP_TFTPS_EVENT_IF_ERROR = -1 could not select a valid interface TCPIP_TFTPS_EVENT_SKT_ERROR = -2 could not bind the socket to the interface or timeout on the socket TX TCPIP_TFTPS_EVENT_CONNECTION_FAILURE = -3 connection failure TCPIP_TFTPS_EVENT_SAME_REQUEST_RCVD = -4 EVENT when same client request received from same port and same IP address ",
							" Description TCPIP_TFTPS_EVENT_TYPE Enumeration Provides a list of run time TFTPS events ",
							" Remarks None ",
							" TCPIP_TFTPS_FILENAME_LEN Macro ",
							" C #define TCPIP_TFTPS_FILENAME_LEN 64 ",
							" Description The default length of the file name is defined to 64 bytes ",
							" TCPIP_TFTPS_HANDLE Type ",
							" C typedef const void* TCPIP_TFTPS_HANDLE; ",
							" Description Type: TCPIP_TFTPS_HANDLE A handle that a application needs to use when de-registering a notification handler ",
							" Remarks This handle can be used by the application after the event handler has been registered ",
							" TCPIP_TFTPS_HandlerDeRegister Function ",
							" C bool TCPIP_TFTPS_HandlerDeRegister(TCPIP_TFTPS_HANDLE hTftps); ",
							" Returns true - if the call succeeds false - if no such handler is registered ",
							" Description This function de-registers the TFTP server module event handler ",
							" Preconditions The TFTP Server module must be initialized ",
							" Parameters Parameters Description hTftps A handle returned by a previous call to TCPIP_TFTPS_HandlerRegister ",
							" TCPIP_TFTPS_HandlerRegister Function ",
							" C TCPIP_TFTPS_HANDLE TCPIP_TFTPS_HandlerRegister(TCPIP_NET_HANDLE hNet TCPIP_TFTPS_EVENT_HANDLER handler const void* hParam); ",
							" Returns Returns a valid handle if the call succeeds Returns null handle if the call failed (out of memory for example) ",
							" Description This function registers a TFTP Server event handler The TFTP Server module will call the registered handler when a TFTP Server event (TCPIP_TFTPS_EVENT_TYPE) occurs during the File transfer process ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" Preconditions The TFTP Server module must be initialized ",
							" Parameters Parameters Description hNet Interface handle Use hNet == 0 to register on all interfaces available handler Handler to be called when a DNS client event occurs hParam Pointer to non-volatile ASCIIZ string to be used in the handler call It is used as a domain/host name If not NULL a TFTP Server module notification will be delivered only for a file name resolution that matches the hParam If the hParam == 0 then the notification is triggered for any host name resolution   ",
							" TCPIP_TFTPS_IsEnabled Function ",
							" C bool TCPIP_TFTPS_IsEnabled(); ",
							" Returns true : if connection is established false: if server open fails ",
							" Description This function determines if a TFTP server socket connection is established and ready to receive packet from the different client ",
							" Remarks None ",
							" Preconditions The TFTPS module should have been initialized ",
							" TCPIP_TFTPS_MODULE_CONFIG Structure ",
							" C typedef struct { const char* mountPath; } TCPIP_TFTPS_MODULE_CONFIG; ",
							" Members Members Description const char* mountPath; The TFTP server will access files located under this top directory No access is possible above this directory As a good practice to follow use something like: \"/mnt_point/tftps/\" to limit an external user access to this only directory in the file system when accessing files ",
							" Description Placeholder for TFTPS Module Configuration ",
							" TCPIP_TFTPS_RESULT Enumeration ",
							" C typedef enum { TFTPS_RES_OK TFTPS_RES_PROGRESS TFTPS_RES_IS_NOT_READY = -1 TFTPS_RES_BUSY = -2 TFTPS_RES_TSTAMP_ERROR = -3 TFTPS_RES_TSTAMP_STALE = -4 TFTPS_RES_SKT_ERR = -5 TFTPS_RES_SKT_BIND_ERR = -6 TFTPS_RES_CONN_ERR = -7 TFTPS_RES_MEMORY_ALLOC_ERR = -8 TFTPS_RES_ILLIGAL_OPERN = -9 TFTPS_RES_CLIENT_ERROR = -10 TFTPS_RES_RECEIVE_ERROR = -11 TFTPS_RES_NO_CLIENT_CB = -12 TFTPS_RES_RCVD_FROM_SAME_CLIENT = -13 TFTPS_RES_FILE_LENGTH_ERROR = -14 TFTPS_RES_FILE_NOT_FOUND_ERROR = -15 TFTPS_RES_TRANSFERMODE_NOT_SUPPORTED = -16 } TCPIP_TFTPS_RESULT; ",
							" Members Members Description TFTPS_RES_OK the operation was successful TFTPS_RES_PROGRESS an TFTPS operation is in progress TFTPS_RES_IS_NOT_READY = -1 If the TFTP Server is not ready TFTPS_RES_BUSY = -2 module is busy TFTPS_RES_TSTAMP_ERROR = -3 no timestamp is available server not contacted TFTPS_RES_TSTAMP_STALE = -4 timestamp is stale there's no recent timestamp TFTPS_RES_SKT_ERR = -5 TFTP server socket could not be opened TFTPS_RES_SKT_BIND_ERR = -6 TFTP server socket bind failed TFTPS_RES_CONN_ERR = -7 Illegal TFTP Operation and TFTP connection error TFTPS_RES_MEMORY_ALLOC_ERR = -8 TFTP Client socket UDP Memory error TFTPS_RES_ILLIGAL_OPERN = -9 TFTP server illegal operation TFTPS_RES_CLIENT_ERROR = -10 TFTP server receives Client error code data TFTPS_RES_RECEIVE_ERROR = -11 TFTP Server has not received any data TFTPS_RES_NO_CLIENT_CB = -12 No client control block is available TFTPS_RES_RCVD_FROM_SAME_CLIENT = -13 When receive a request from same client with same port which is process TFTPS_RES_FILE_LENGTH_ERROR = -14 Invalid file name length error TFTPS_RES_FILE_NOT_FOUND_ERROR = -15 File not found in the File system TFTPS_RES_TRANSFERMODE_NOT_SUPPORTED = -16 Transfer mode not supported ",
							" Description TCPIP_TFTPS_RESULT Enumeration Provides a list of possible TFTPS results ",
							" Remarks None ",
							" TCPIP_TFTPS_RETRANSMIT_COUNT Macro ",
							" C #define TCPIP_TFTPS_RETRANSMIT_COUNT (3u) ",
							" Description The number of attempts to retransmit the previous packet before declaring a TIMEOUT error ",
							" TCPIP_TFTPS_Task Function ",
							" C void TCPIP_TFTPS_Task(); ",
							" Returns None ",
							" Description This function performs TFTPS module tasks in the TCP/IP stack ",
							" Remarks None ",
							" Preconditions The TFTPS module should have been initialized Section ",
							" TCPIP_TFTPS_TASK_TICK_RATE Macro ",
							" C #define TCPIP_TFTPS_TASK_TICK_RATE (60) ",
							" Description The TFTP server task rate in milliseconds The default value is 100 milliseconds The lower the rate (higher the frequency) the higher the module priority and higher module performance can be obtained The value cannot be lower than the TCPIP_STACK_TICK_RATE ",
							" TCPIP_TFTPS_USER_NOTIFICATION Macro ",
							" C #define TCPIP_TFTPS_USER_NOTIFICATION false ",
							" Description allow TFTP Server user notification if enabled the TCPIP_TFTPS_HandlerRegister/TCPIP_TFTPS_HandlerDeRegister functions exist and can be used ",
							" UDP Module UDP is a standard transport layer_protocol described in RFC 768 It provides fast but unreliable data-gram based transfers over networks and forms the foundation SNTP SNMP DNS and many other protocol standards Abstraction Model This module provides software abstraction of the UDP module existent in any TCP/IP Stack implementation It allows a user to UDP network traffic by opening and using UDP sockets tcpip_stack_diagram How the Library Works Connections over UDP should be thought of as data-gram based transfers Each packet is a separate entity the application should expect some packets to arrive out-of-order or even fail to reach the destination node This is in contrast to TCP in which the connection is thought of as a stream and network errors are automatically corrected These tradeoffs in reliability are made for an increase in throughput In general UDP transfers operate two to three times faster than those made over TCP UDP sockets have their own TX buffers Once the transmit buffer has valid data it is the socket_user's responsibility to send the data over the network calling the corresponding TCPIP_UDP_Flush function There is no state machine within the UDP module to automatically take care of the data transmission On the receive side a UDP socket_does not have its own RX buffer; however it will use the RX buffer that was allocated by the corresponding MAC driver for receiving a network packet What this means is that the user of the UDP socket_will have to consume that pending RX data (or discard it) because eventually the stack will run out of memory for other incoming traffic The following flow diagram provides an overview for the use of the UDP module: TCPIP UDP udp_diagram Server/listening sockets are opened using TCPIP_UDP_ServerOpen Client sockets are opened using TCPIP_UDP_ClientOpen A client socket_needs to have a remote address specified before it can transmit data Once the socket_is opened you can immediately begin transmitting data To transmit a segment call TCPIP_UDP_PutIsReady to determine how many bytes can be written Then use any of the TCPIP_UDP_ArrayPut family of functions to write data to the_socket Once all data has been written call TCPIP_UDP_Flush to build and transmit the packet Since each UDP socket_has its own TX buffer the sequence previously described can be executed in multiple steps That data that is written in the socket_is persistent and it will be stored until TCPIP_UDP_Flush is called Library Interface Name Description Macros  TCPIP_UDP_MAX_SOCKETS Maximum number of UDP sockets that can be opened simultaneously These sockets will be created when the module is initialized TCPIP_UDP_SOCKET_DEFAULT_RX_QUEUE_LIMIT The maximum number of RX packets that can be queued by an UDP socket at a certain time Note that UDP sockets do not use their own RX buffers but instead use the network driver supplied packets and a timely processing is critical to avoid packet memory starvation for the whole stack This symbol sets the maximum number of UDP buffers/packets that can be queued for a UDP socket at a certain time Once this limit is reached further incoming packets are silently discarded Adjust depending on the number of RX buffers that are available for the stack and the more TCPIP_UDP_SOCKET_DEFAULT_TX_QUEUE_LIMIT The maximum number of TX packets that can be queued by an UDP socket at a certain time For sockets that need to transfer a lot of data (Iperf for example) especially on slow connections this limit prevents running out of memory because the MAC/PHY transfer cannot keep up with the UDP packet allocation rate imposed by the application Adjust depending on the TCPIP_UDP_SOCKET_DEFAULT_TX_SIZE the connection speed and the amount of memory available to the stack TCPIP_UDP_SOCKET_DEFAULT_TX_SIZE Default socket TX buffer size Note that this setting affects all UDP sockets that are created and together with TCPIP_UDP_MAX_SOCKETS has a great impact on the heap size that's used by the stack (see TCPIP_STACK_DRAM_SIZE setting) When large TX bufferrs are needed probably a dynamic per socket approach is a better choice (see TCPIP_UDP_OptionsSet function) TCPIP_UDP_SOCKET_POOL_BUFFER_SIZE Size of the buffers in the UDP pool Any UDP socket that is enabled to use the pool and has the TX size = than this size can use a buffer from the pool Note that this setting together with TCPIP_UDP_SOCKET_POOL_BUFFERS has impact on the heap size that's used by the stack (see TCPIP_STACK_DRAM_SIZE setting) TCPIP_UDP_SOCKET_POOL_BUFFERS Number of buffers in the private UDP pool These are preallocated buffers that are to be used by UDP sockets only This improves the UDP socket throughput and is meant only for UDP sockets that have to sustain high TX traffic rate However this memory is not returned to the stack heap it always belongs to UDP A socket needs to have an option set in order to use the buffers pool (see the UDPSetOptions()) Use 0 to disable the feature TCPIP_UDP_USE_POOL_BUFFERS enable the build of the pre-allocated pool buffers option TCPIP_UDP_USE_RX_CHECKSUM Check incoming packets to have proper checksum TCPIP_UDP_USE_TX_CHECKSUM Calculate and transmit a checksum when sending data Checksum is not mandatory for UDP packets but is highly recommended This will affect the UDP TX performance TCPIP_UDP_COMMANDS TCPIP UDP info commands Enables/Disables the UDP command feature This setting will add a UDP \"info\" command to the TCP/IP command menu allowing a run time inspection of the UDP sockets Set the value to 1 to enable 0 to disable the feature TCPIP_UDP_EXTERN_PACKET_PROCESS This setting enables/disables the processing of the RX packets by an external handler The user of the UDP can register an external function to process the incoming packets If true the functionality is built in and could be used by the application If false the functionality does not exist and the generated code is slightly smaller Socket Management Functions  TCPIP_UDP_ServerOpen Opens a UDP socket as a server TCPIP_UDP_ClientOpen Opens a UDP socket as a client TCPIP_UDP_IsOpened Determines if a socket was opened TCPIP_UDP_IsConnected Determines if a socket has an established connection TCPIP_UDP_Bind Bind a socket to an address type local port and address This function is meant primarily for client sockets TCPIP_UDP_RemoteBind Bind a socket to an address type remote port and address This function is meant primarily for server sockets TCPIP_UDP_Close Closes a UDP socket and frees the handle TCPIP_UDP_OptionsGet Allows getting the options for a socket such as current RX/TX buffer size etc TCPIP_UDP_OptionsSet Allows setting options to a socket like adjust RX/TX buffer size etc TCPIP_UDP_SocketInfoGet Returns information about a selected UDP socket TCPIP_UDP_SocketNetGet Gets the network interface of an UDP socket TCPIP_UDP_SocketNetSet Sets the network interface for an UDP socket TCPIP_UDP_TxOffsetSet Moves the pointer within the TX buffer TCPIP_UDP_SourceIPAddressSet Sets the source IP address of a socket TCPIP_UDP_BcastIPV4AddressSet Sets the broadcast IP address of a socket Allows an UDP socket to send broadcasts TCPIP_UDP_DestinationIPAddressSet Sets the destination IP address of a socket TCPIP_UDP_DestinationPortSet Sets the destination port of a socket TCPIP_UDP_Disconnect Disconnects a UDP socket and re-initializes it TCPIP_UDP_SignalHandlerDeregister Deregisters a previously registered UDP socket signal handler TCPIP_UDP_SignalHandlerRegister Registers a UDP socket signal handler TCPIP_UDP_Task Standard TCP/IP stack module task function TCPIP_UDP_SocketsNumberGet Returns the number of existent UDP sockets TCPIP_UDP_PacketHandlerDeregister Deregisters a previously registered packet handler TCPIP_UDP_PacketHandlerRegister Sets a new packet processing handler Transmit Data Transfer Functions  TCPIP_UDP_PutIsReady Determines how many bytes can be written to the UDP socket TCPIP_UDP_TxPutIsReady Determines how many bytes can be written to the UDP socket TCPIP_UDP_ArrayPut Writes an array of bytes to the UDP socket TCPIP_UDP_StringPut Writes a null-terminated string to the UDP socket TCPIP_UDP_Put Writes a byte to the UDP socket TCPIP_UDP_TxCountGet Returns the amount of bytes written into the UDP socket TCPIP_UDP_Flush Transmits all pending data in a UDP socket Receive Data Transfer Functions  TCPIP_UDP_GetIsReady Determines how many bytes can be read from the UDP socket TCPIP_UDP_ArrayGet Reads an array of bytes from the UDP socket TCPIP_UDP_Get Reads a byte from the UDP socket TCPIP_UDP_RxOffsetSet Moves the read pointer within the socket RX buffer TCPIP_UDP_Discard Discards any remaining RX data from a UDP socket Data Types and Constants  UDP_PORT Defines a type for a UDP port number UDP_SOCKET Provides a handle to a UDP Socket UDP_SOCKET_BCAST_TYPE UDP broadcast types UDP_SOCKET_INFO Information about a UDP socket UDP_SOCKET_OPTION UDP socket options INVALID_UDP_SOCKET Indicates a UDP socket that is not valid TCPIP_UDP_MODULE_CONFIG UDP module run time configuration/initialization data TCPIP_UDP_SIGNAL_FUNCTION UDP Signal Handler TCPIP_UDP_SIGNAL_HANDLE UDP socket handle TCPIP_UDP_SIGNAL_TYPE UDP run-time signal types UDP_MULTICAST_FLAGS UDP multicast options/flags UDP_OPTION_MULTICAST_DATA Data structure used to set a socket multicast options TCPIP_UDP_PACKET_HANDLER Pointer to a function(handler) that will get called to process an incoming UDP packet TCPIP_UDP_PROCESS_HANDLE Defines a UDP packet processing handle ",
							" TCPIP_UDP_ArrayGet Function ",
							" C uint16_t TCPIP_UDP_ArrayGet(UDP_SOCKET hUDP uint8_t * cData uint16_t wDataLen); ",
							" Returns The number of bytes successfully read from the UDP buffer If this value is less than wDataLen then the buffer was emptied and no more data is available ",
							" Description This function reads an array of bytes from the UDP socket while adjusting the current read pointer and decrementing the remaining bytes available TCPIP_UDP_GetIsReady should be used before calling this function to get the number of the available bytes in the socket ",
							" Remarks For discarding a number of bytes in the RX buffer the TCPIP_UDP_RxOffsetSet() can also be used The UDP socket queues incoming RX packets in an internal queue This call will try to retrieve the bytes from the current processing packet but it won't advance the processed packet TCPIP_UDP_GetIsReady should be called to advance the processed RX packet TCPIP_UDP_Discard should be called when done processing the current RX packet ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle cData The buffer to receive the bytes being read If NULL the bytes are simply discarded wDataLen Number of bytes to be read from the socket   ",
							" TCPIP_UDP_ArrayPut Function ",
							" C uint16_t TCPIP_UDP_ArrayPut(UDP_SOCKET hUDP const uint8_t * cData uint16_t wDataLen); ",
							" Returns The number of bytes successfully placed in the UDP transmit buffer If this value is less than wDataLen then the buffer became full and the input was truncated ",
							" Description This function writes an array of bytes to the UDP socket while incrementing the socket write pointer TCPIP_UDP_PutIsReady should be used before calling this function to verify that there is room in the socket buffer ",
							" Remarks The return value could be 0 if there is no TX buffer available (for example the socket has TX data queued and the TCPIP_UDP_PutIsReady has not been called or the TX buffer allocation failed) The return value could be than wDataLen depending on the size and the available space of the socket TX buffer ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket cData - valid pointer ",
							" Parameters Parameters Description hUDP UDP socket handle cData The array to write to the socket wDataLen Number of bytes from cData to be written   ",
							" TCPIP_UDP_BcastIPV4AddressSet Function ",
							" C bool TCPIP_UDP_BcastIPV4AddressSet(UDP_SOCKET hUDP UDP_SOCKET_BCAST_TYPE bcastType TCPIP_NET_HANDLE hNet); ",
							" Returns true - Indicates success false - Indicates failure: invalid socket invalid socket address type a broadcast for the specified interface could not be obtained invalid broadcast type specified ",
							" Description It sets the broadcast address for the socket ",
							" Remarks This function allows changing of the destination IPv4 address dynamically However the call will fail if the socket was previously set to broadcast using the TCPIP_UDP_OptionsSet call TCPIP_UDP_OptionsSet takes precedence ",
							" Preconditions UDP initialized UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket ",
							" Parameters Parameters Description hUDP the UDP socket bcastType Type of broadcast hNet handle of an interface to use for the network directed broadcast Not used for network limited broadcast   ",
							" TCPIP_UDP_Bind Function ",
							" C bool TCPIP_UDP_Bind(UDP_SOCKET hUDP IP_ADDRESS_TYPE addType UDP_PORT localPort IP_MULTI_ADDRESS* localAddress); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Sockets don't need specific binding it is done automatically by the stack However specific binding can be requested using this function Works for both client and server sockets For a server socket it will restrict accepting connections of a specific type on a specific interface only For a client socket it will force a specific address type and a local port and interface ",
							" Remarks If address type IP_ADDRESS_TYPE_ANY is used the localAddress parameter won't be used and the socket won't change the local address However for the call to succeed socket must have been created with IP_ADDRESS_TYPE_ANY type and must not be currently bound to a IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 type If address type IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 is used then the socket type will be changed accordingly and the localAddress will be used if provided The socket will be bound to this type of address For the call to succeed the socket must currently have the type IP_ADDRESS_TYPE_ANY or to match the addType parameter If localAddress is the valid address of a network interface and addType = IP_ADDRESS_TYPE_ANY then the call will enforce UDP_OPTION_STRICT_NET on the socket If localPort is 0 the stack will assign a unique local port (if the socket doesn't already have a unique local port) In order to change dynamically the type of address the socket must have been created with a IP_ADDRESS_TYPE_ANY type and not currently bound to a different address type TCPIP_UDP_Disconnect could be issued to remove a previous IP type binding ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket ",
							" Parameters Parameters Description hUDP The socket to bind addType The type of address being used Valid values are IP_ADDRESS_TYPE_ANY/IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 localPort The local port to bind to localAddress Local address to use   ",
							" TCPIP_UDP_ClientOpen Function ",
							" C UDP_SOCKET TCPIP_UDP_ClientOpen(IP_ADDRESS_TYPE addType UDP_PORT remotePort IP_MULTI_ADDRESS* remoteAddress); ",
							" Returns INVALID_SOCKET - No sockets of the specified type were available to be opened A UDP_SOCKET handle - Save this handle and use it when calling all other UDP APIs ",
							" Description Provides a unified method for opening UDP client sockets ",
							" Remarks Sockets and user threads protection For efficiency reasons there is NO PROTECTION for each individual API call except to Open and Close sockets What it means is that: the user application should close all its sockets before issuing a stack/if down command The stack manager takes care of the internally used sockets A socket can NOT be used concurrently from multiple threads It's ok to pass a socket from one thread to another as long as there's is no access from more than one thread at a time ",
							" Preconditions UDP is initialized ",
							" Parameters Parameters Description IP_ADDRESS_TYPE addType The type of address being used Example: IP_ADDRESS_TYPE_IPV4 or IP_ADDRESS_TYPE_IPV6 It can also be IP_ADDRESS_TYPE_ANY if the type of the socket will be specified later (using TCPIP_UDP_Bind TCPIP_UDP_RemoteBind) UDP_PORT remotePort The remote UDP port to which a connection should be made The local port for client sockets will be automatically picked by the UDP module IP_MULTI_ADDRESS* remoteAddress The remote address to connect to Not used if addType == IP_ADDRESS_TYPE_ANY Can be NULL if later set by a call to TCPIP_UDP_RemoteBind   ",
							" TCPIP_UDP_Close Function ",
							" C bool TCPIP_UDP_Close(UDP_SOCKET hUDP); ",
							" Returns true - If the call succeeded false - If the call failed (no such socket) ",
							" Description Closes a UDP socket and frees the handle Call this function to release a socket and return it to the pool for use by future communications ",
							" Remarks Always close the socket when no longer in use This will free the allocated resources including the TX buffers ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP The socket handle to be released ",
							" TCPIP_UDP_COMMANDS Macro ",
							" C #define TCPIP_UDP_COMMANDS 0 ",
							" Description TCPIP UDP info commands Enables/Disables the UDP command feature This setting will add a UDP \"info\" command to the TCP/IP command menu allowing a run time inspection of the UDP sockets Set the value to 1 to enable 0 to disable the feature ",
							" Remarks to have the UDP commands available the TCP/IP commands need to be enabled ",
							" TCPIP_UDP_DestinationIPAddressSet Function ",
							" C bool TCPIP_UDP_DestinationIPAddressSet(UDP_SOCKET hUDP IP_ADDRESS_TYPE addType IP_MULTI_ADDRESS* remoteAddress); ",
							" Returns true - Indicates success false - Indicates failure: invalid socket invalid socket address type socket is of broadcast type ",
							" Description It sets the IP destination address This allows changing the IP destination address dynamically ",
							" Remarks The call will fail if the socket was previously set to broadcast using the TCPIP_UDP_OptionsSet call TCPIP_UDP_OptionsSet takes precedence The call will fail if remoteAddress is 0 The destination IP address will not be changed ",
							" Preconditions UDP initialized UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket remoteAddress - valid address pointer ",
							" Parameters Parameters Description hUDP the UDP socket addType Type of address: IPv4/IPv6 remoteAddress pointer to an address to use   ",
							" TCPIP_UDP_DestinationPortSet Function ",
							" C bool TCPIP_UDP_DestinationPortSet(UDP_SOCKET s UDP_PORT remotePort); ",
							" Returns true - Indicates success false - Indicates an invalid socket ",
							" Description This function sets the destination port which allows changing the destination port dynamically ",
							" Remarks The destination remote port will always be changed even if remotePort == 0 It will not change the UDP_OPTION_STRICT_PORT on the socket ",
							" Preconditions UDP initialized UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP the UDP socket remotePort destination port to use   ",
							" TCPIP_UDP_Discard Function ",
							" C uint16_t TCPIP_UDP_Discard(UDP_SOCKET hUDP); ",
							" Returns Number of discarded bytes if any ",
							" Description This function discards any remaining received data in the UDP socket ",
							" Remarks The UDP socket queues incoming RX packets in an internal queue This call will discard the remaining bytes (if any) in the current RX packet and will advance the RX packet to be processed to the next queued packet This function should be normally called after retrieving the available bytes with TCPIP_UDP_ArrayGet When data available calling it repeatedly will discard one pending RX packet at a time Note that a call to TCPIP_UDP_Discard is not needed if all bytes are retrieved with TCPIP_UDP_ArrayGet and then TCPIP_UDP_GetIsReady is called ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP socket handle ",
							" TCPIP_UDP_Disconnect Function ",
							" C bool TCPIP_UDP_Disconnect(UDP_SOCKET hUDP bool flushRxQueue); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Disconnects a UDP socket and re-initializes it Call this function to return the socket to its initial open state and to use it for future communication This function is meant especially for server sockets that could listen on multiple interfaces and on both IPv4 and IPv6 networks When a server socket received an inbound IPv4 connection it will be bound to IPv4 connections until it's closed or disconnected Same is true for IPv6 connections ",
							" Remarks The call will try to maintain as much as possible from the socket state For a server socket the remote port will be cleared unless a TCPIP_UDP_RemoteBind() was performed If the remote port is cleared a new TCPIP_UDP_RemoteBind or TCPIP_UDP_DestinationPortSet operation will be needed if the remote port needs to be maintained For a client socket the remote port is maintained This will free the allocated TX buffers if the socket was opened with IP_ADDRESS_TYPE_ANY All the pending RX packets will be cleared when flushRxQueue is set Otherwise the packets will be kept and will be available for next read operations Note that if the RX pending packets exist and are not flushed the socket will be bound immediately to the connection corresponding to the pending packet in the queue ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket ",
							" Parameters Parameters Description hUDP The socket handle to be disconnected flushRxQueue boolean to flush the pending RX queue   ",
							" TCPIP_UDP_EXTERN_PACKET_PROCESS Macro ",
							" C #define TCPIP_UDP_EXTERN_PACKET_PROCESS true ",
							" Description This setting enables/disables the processing of the RX packets by an external handler The user of the UDP can register an external function to process the incoming packets If true the functionality is built in and could be used by the application If false the functionality does not exist and the generated code is slightly smaller ",
							" TCPIP_UDP_Flush Function ",
							" C uint16_t TCPIP_UDP_Flush(UDP_SOCKET hUDP); ",
							" Returns The number of bytes that currently were in the socket TX buffer and have been flushed Otherwise 0 if the packet could not be transmitted: invalid socket invalid remote address no route to the remote host could be found ",
							" Description This function builds a UDP packet with the pending TX data and marks it for transmission over the network interface There is no UDP state machine to send the socket data automatically The UDP socket client must call this function to actually send the data over the network ",
							" Remarks Note that a UDP socket must be flushed to send data over the network There is no UDP state machine (auto transmit) for UDP sockets ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle ",
							" TCPIP_UDP_Get Function ",
							" C uint16_t TCPIP_UDP_Get(UDP_SOCKET hUDP uint8_t * v); ",
							" Description This function reads a single byte from the UDP socket while decrementing the remaining RX buffer length TCPIP_UDP_GetIsReady should be used before calling this function to get the number of bytes available in the socket ",
							" Remarks This function is very inefficient and its usage is discouraged A buffered approach (TCPIP_UDP_ArrayGet) is preferred See the previous notes for TCPIP_UDP_ArrayGet function ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP socket handle v The buffer to receive the data being read   ",
							" TCPIP_UDP_GetIsReady Function ",
							" C uint16_t TCPIP_UDP_GetIsReady(UDP_SOCKET hUDP); ",
							" Returns The number of bytes that can be read from this socket ",
							" Description This function will return the number of bytes that are available in the specified UDP socket RX buffer ",
							" Remarks The UDP socket queues incoming RX packets in an internal queue If currently there is no RX packet processed (as a result of retrieving all available bytes with TCPIP_UDP_ArrayGet for example) this call will advance the RX packet to be processed to the next queued packet If a RX packet is currently processed the call will return the number of bytes left to be read from this packet ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle ",
							" TCPIP_UDP_IsConnected Function ",
							" C bool TCPIP_UDP_IsConnected(UDP_SOCKET hUDP); ",
							" Description This function determines if a socket has an established connection to a remote node Call this function after calling TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen to determine when the connection is set up and ready for use ",
							" Remarks An UDP server or client socket can always send data as long as it has a valid destination address even if there's no remote socket connected to it This function will return true if the socket is opened and currently has a valid destination Note that this is true if a client socket was opened with a remote host address a socket received data from a remote host or a explicit remote bind was done ",
							" Preconditions None ",
							" Parameters Parameters Description hUDP The socket to check ",
							" TCPIP_UDP_IsOpened Macro ",
							" C #define TCPIP_UDP_IsOpened(hUDP) TCPIP_UDP_IsConnected(hUDP) ",
							" Description This function determines if a socket was opened ",
							" Remarks This is a backward compatibility call ",
							" Preconditions None ",
							" Parameters Parameters Description Description  hUDP The socket to check   ",
							" TCPIP_UDP_MAX_SOCKETS Macro ",
							" C #define TCPIP_UDP_MAX_SOCKETS (10) ",
							" Description Maximum number of UDP sockets that can be opened simultaneously These sockets will be created when the module is initialized ",
							" TCPIP_UDP_MODULE_CONFIG Structure ",
							" C typedef struct { uint16_t nSockets; uint16_t sktTxBuffSize; uint16_t poolBuffers; uint16_t poolBufferSize; } TCPIP_UDP_MODULE_CONFIG; ",
							" Members Members Description uint16_t nSockets; number of sockets to be created uint16_t sktTxBuffSize; default size of the socket TX buffer uint16_t poolBuffers; number of buffers in the pool; 0 if none uint16_t poolBufferSize; size of the buffers in the pool; all equal ## Description Structure: TCPIP_UDP_MODULE_CONFIG UDP module configuration/initialization ",
							" TCPIP_UDP_OptionsGet Function ",
							" C bool TCPIP_UDP_OptionsGet(UDP_SOCKET hUDP UDP_SOCKET_OPTION option void* optParam); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Various options can be retrieved at the socket level This function provides compatibility with BSD implementations ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket ",
							" Parameters Parameters Description hUDP socket to get options for option specific option to get optParam pointer to an area that will receive the option value; this is option dependent on the size of the area has to be large enough UDP_OPTION_STRICT_PORT - pointer to boolean UDP_OPTION_STRICT_NET - pointer to boolean UDP_OPTION_STRICT_ADDRESS - pointer to boolean UDP_OPTION_BROADCAST - pointer to UDP_SOCKET_BCAST_TYPE UDP_OPTION_BUFFER_POOL - pointer to boolean UDP_OPTION_TX_BUFF - pointer to a 16 bit value to receive bytes of the TX buffer UDP_OPTION_TX_QUEUE_LIMIT - pointer to an 8 bit value to receive the TX queue limit UDP_OPTION_RX_QUEUE_LIMIT - pointer to an 8 bit value to receive the RX queue limit UDP_OPTION_RX_AUTO_ADVANCE - pointer to boolean UDP_OPTION_TX_TTL - pointer to an 8 bit value to receive the TTL value UDP_OPTION_MULTICAST - pointer to a UDP_MULTICAST_FLAGS value to receive the current socket settings UDP_OPTION_TOS - pointer to an 8 bit value to receive the TOS UDP_OPTION_DF - pointer to boolean - true: no fragmentation allowed; false: fragmentation allowed ",
							" TCPIP_UDP_OptionsSet Function ",
							" C bool TCPIP_UDP_OptionsSet(UDP_SOCKET hUDP UDP_SOCKET_OPTION option void* optParam); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Various options can be set at the socket level ",
							" Remarks Changing the UDP_OPTION_BUFFER_POOL will discard the data in the current socket buffer UDP_OPTION_TX_BUFF - 16-bit value in bytes of the TX buffer the UDP_OPTION_TX_BUFF will discard the data in the current socket buffer UDP_OPTION_TX_QUEUE_LIMIT - 8-bit value of the TX queue limit UDP_OPTION_RX_QUEUE_LIMIT - 8-bit value of the RX queue limit UDP_OPTION_RX_AUTO_ADVANCE - boolean enable/disable UDP_OPTION_TX_TTL - 8-bit value of TTL UDP_OPTION_MULTICAST - pointer to a UDP_OPTION_MULTICAST_DATA structure UDP_OPTION_TOS - 8-bit value of the TOS UDP_OPTION_DF - boolean - true: no fragmentation allowed; false: fragmentation allowed This function provides the run-time functionality required to implement some of the standard BSD socket options API ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket ",
							" Parameters Parameters Description hUDP socket to set options for option specific option to be set optParam the option value; this is option dependent: - UDP_OPTION_STRICT_PORT - boolean enable/disable - UDP_OPTION_STRICT_NET - boolean enable/disable - UDP_OPTION_STRICT_ADDRESS - boolean enable/disable - UDP_OPTION_BROADCAST -UDP_SOCKET_BCAST_TYPE - UDP_OPTION_BUFFER_POOL - boolean enable/disable   ",
							" TCPIP_UDP_PACKET_HANDLER Type ",
							" C typedef bool (* TCPIP_UDP_PACKET_HANDLER)(TCPIP_NET_HANDLE hNet struct _tag_TCPIP_MAC_PACKET* rxPkt const void* hParam); ",
							" Returns true - if the packet is processed by the external handler In this case the UDP module will no longer process the packet false - the packet needs to be processed internally by the UDP as usual ",
							" Description UDP packet handler Pointer Pointer to a function that will be called by the UDP module when a RX packet is available ",
							" Remarks The packet handler is called in the UDP context The handler should be kept as short as possible as it affects the processing of all the other UDP RX traffic Before calling the external packet handler the rxPkt- pktFlags has the bit 9 (value 0x0200) set for an IPv6 packet cleared for IPv4 the rxPkt- pTransportLayer points to an UDP_HEADER data structure the rxPkt- pNetLayer points to an IPV4_HEADER/IPV6_HEADER data structure the rxPkt- pktIf points to the interface receiving the packet the first data segment segLen is adjusted to store the size of the UDP data Important When the packet handler returns true once it's done processing the packet it needs to acknowledge it i e return to the owner which is the MAC driver serving the network interface This means that the packet acknowledge function needs to be called with a proper acknowledge parameter and the QUEUED flag needs to be cleared if needed: if((*rxPkt- ackFunc)(rxPkt rxPkt- ackParam)) { rxPkt- pktFlags = ~TCPIP_MAC_PKT_FLAG_QUEUED; } Failure to do that will result in memory leaks and starvation of the MAC driver See the tcpip_mac h for details ",
							" Preconditions None ",
							" Parameters Parameters Description hNet network handle on which the packet has arrived rxPkt pointer to incoming packet hParam user passed parameter when handler was registered   ",
							" TCPIP_UDP_PacketHandlerDeregister Function ",
							" C C bool TCPIP_UDP_PacketHandlerDeregister(TCPIP_UDP_PROCESS_HANDLE pktHandle); ",
							" Returns true - if the operation succeeded false - if the operation failed ",
							" Description This function removes a packet processing handler ",
							" Remarks Exists only if TCPIP_UDP_EXTERN_PACKET_PROCESS is true ",
							" Preconditions UDP properly initialized ",
							" Example TCPIP_UDP_PROCESS_HANDLE myHandle = TCPIP_UDP_PacketHandlerRegister(myPacketHandler myParam ); // process incoming packets // now we're done with it TCPIP_UDP_PacketHandlerDeregister(myHandle); ",
							" Parameters Parameters Description pktHandle TCPIP packet handle obtained by a call to TCPIP_UDP_PacketHandlerRegister ",
							" TCPIP_UDP_PacketHandlerRegister Function ",
							" C TCPIP_UDP_PROCESS_HANDLE TCPIP_UDP_PacketHandlerRegister(TCPIP_UDP_PACKET_HANDLER pktHandler const void* handlerParam); ",
							" Returns a valid TCPIP_UDP_PROCESS_HANDLE - if the operation succeeded NULL - if the operation failed ",
							" Description This function registers a new packet processing handler The caller can use the handler to be notified of incoming packets and given a chance to examine/process them ",
							" Remarks Currently only one packet handler is supported for the UDP module The call will fail if a handler is already registered Use TCPIP_UDP_PacketHandlerDeregister first Exists only if TCPIP_UDP_EXTERN_PACKET_PROCESS is true ",
							" Preconditions UDP properly initialized ",
							" Example TCPIP_UDP_PROCESS_HANDLE pktHandle = TCPIP_UDP_PacketHandlerRegister( myPktHandler myParam ); ",
							" Parameters Parameters Description pktHandler the packet handler which will be called for an incoming packet handlerParam packet handler parameter   ",
							" TCPIP_UDP_PROCESS_HANDLE Type ",
							" C typedef const void* TCPIP_UDP_PROCESS_HANDLE; ",
							" Description Type: TCPIP_UDP_PROCESS_HANDLE Definition of an packet processing handle used for packet processing registration by the UDP clients ",
							" TCPIP_UDP_Put Function ",
							" C uint16_t TCPIP_UDP_Put(UDP_SOCKET hUDP uint8_t v); ",
							" Description This function writes a single byte to the UDP socket while incrementing the socket write pointer TCPIP_UDP_PutIsReady could be used before calling this function to verify that there is room in the socket buffer ",
							" Remarks This function is very inefficient and its use is discouraged A buffered approach (TCPIP_UDP_ArrayPut) is preferred ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle v The byte to be loaded into the transmit buffer   ",
							" TCPIP_UDP_PutIsReady Function ",
							" C uint16_t TCPIP_UDP_PutIsReady(UDP_SOCKET hUDP); ",
							" Returns The number of bytes that can be written to this socket ",
							" Description This function determines how many bytes can be written to the specified UDP socket This function performs TX buffer allocation for the socket ",
							" Remarks If the current socket TX buffer is in use (in traffic) this function will allocate a new TX buffer Otherwise the current TX buffer will be used The function SHOULD be called before using TCPIP_UDP_ArrayPut for the first time or after any TCPIP_UDP_Flush There is no harm in calling it everytime before any TCPIP_UDP_ArrayPut (except the overhead) ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle ",
							" TCPIP_UDP_RemoteBind Function ",
							" C bool TCPIP_UDP_RemoteBind(UDP_SOCKET hUDP IP_ADDRESS_TYPE addType UDP_PORT remotePort IP_MULTI_ADDRESS* remoteAddress); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Sockets don't need specific remote binding they should accept connections on any incoming interface Therefore the binding is done automatically by the stack However specific remote binding can be requested using this function For a server socket it can be used to restrict accepting connections from a specific remote host For a client socket it will just change the default binding done when the socket was opened ",
							" Remarks If address type IP_ADDRESS_TYPE_ANY is used the remoteAddress parameter won't be used and the socket won't change the remote destination address However for the call to succeed socket must have been created with IP_ADDRESS_TYPE_ANY type and must not be currently bound to a IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 type If address type IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 is used then the socket type will be changed accordingly and the remoteAddress will be used if provided The socket will be bound to this type of address For the call to succeed the socket must currently have the type IP_ADDRESS_TYPE_ANY or to match the addType parameter If the remoteAddress = 0 and addType = IP_ADDRESS_TYPE_ANY the call will enforce UDP_OPTION_STRICT_ADDRESS on the socket The remote port is always changed even if remotePort == 0 It will enforce UDP_OPTION_STRICT_PORT on the socket In order to change dynamically the type of address the socket must have been created with a IP_ADDRESS_TYPE_ANY type and not currently bound to a different address type TCPIP_UDP_Disconnect could be issued to remove a previous IP type binding If the socket is a server socket and is bound to a remote port the TCPIP_UDP_Disconnect won't remove the port binding ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP The socket to bind addType The type of address being used Valid values are IP_ADDRESS_TYPE_ANY/IP_ADDRESS_TYPE_IPV4/IP_ADDRESS_TYPE_IPV6 remotePort The remote port to bind to remoteAddress Remote address to use   ",
							" TCPIP_UDP_RxOffsetSet Function ",
							" C void TCPIP_UDP_RxOffsetSet(UDP_SOCKET hUDP uint16_t rOffset); ",
							" Returns None ",
							" Description This function allows the user to specify the read location within the socket RX buffer Future calls to TCPIP_UDP_Get and TCPIP_UDP_ArrayGet will read data from the indicated location forward ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle wOffset Offset from beginning of UDP packet data payload to place the read pointer   ",
							" TCPIP_UDP_ServerOpen Function ",
							" C UDP_SOCKET TCPIP_UDP_ServerOpen(IP_ADDRESS_TYPE addType UDP_PORT localPort IP_MULTI_ADDRESS* localAddress); ",
							" Returns INVALID_SOCKET - No sockets of the specified type were available to be opened or parameter error A UDP_SOCKET handle - Save this handle and use it when calling all other UDP APIs ",
							" Description Provides a unified method for opening UDP server sockets ",
							" Remarks Sockets and user threads protection For efficiency reasons there is NO PROTECTION for each individual API call except to Open and Close sockets What it means is that: the user application should close all its sockets before issuing a stack/if down command The stack manager takes care of the internally used sockets A socket can NOT be used concurrently from multiple threads It's ok to pass a socket from one thread to another as long as there's is no access from more than one thread at a time ",
							" Preconditions UDP is initialized ",
							" Example IP_ADDRESS_TYPE_IPV4 or IP_ADDRESS_TYPE_IPV6 It can be IP_ADDRESS_TYPE_ANY and the server socket will accept any incoming type of connection UDP_PORT localPort - UDP port on which to listen for connections IP_MULTI_ADDRESS* localAddress - Pointer to a local IP address to use This needs to be the valid IP address of a local interface the server is to listen on or NULL if any incoming interface will do ",
							" Parameters Parameters Description IP_ADDRESS_TYPE addType The type of address being used   ",
							" TCPIP_UDP_SIGNAL_FUNCTION Type ",
							" C typedef void (* TCPIP_UDP_SIGNAL_FUNCTION)(UDP_SOCKET hUDP TCPIP_NET_HANDLE hNet TCPIP_UDP_SIGNAL_TYPE sigType const void* param); ",
							" Description Type: TCPIP_UDP_SIGNAL_FUNCTION Prototype of a UDP signal handler Socket user can register a handler for the UDP socket Once an UDP signals occurs the registered handler will be called ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" Parameters Parameters Description hUDP UDP socket to be used hNet the network interface on which the event has occurred sigType type of UDP signal that has occurred param additional parameter that can has been specified at the handler registration call Currently not used and it will be null ",
							" TCPIP_UDP_SIGNAL_HANDLE Type ",
							" C typedef const void* TCPIP_UDP_SIGNAL_HANDLE; ",
							" Description Type: TCPIP_UDP_SIGNAL_HANDLE A handle that a socket client can use after the signal handler has been registered ",
							" TCPIP_UDP_SIGNAL_TYPE Enumeration ",
							" C typedef enum { TCPIP_UDP_SIGNAL_TX_DONE = 0x0001 TCPIP_UDP_SIGNAL_RX_DATA = 0x0100 TCPIP_UDP_SIGNAL_IF_DOWN = 0x2000 TCPIP_UDP_SIGNAL_IF_CHANGE = 0x4000 } TCPIP_UDP_SIGNAL_TYPE; ",
							" Members Members Description TCPIP_UDP_SIGNAL_TX_DONE = 0x0001 A data packet was successfully transmitted on the interface There may be available buffer space to send new data TCPIP_UDP_SIGNAL_RX_DATA = 0x0100 A data packet was successfully received and there is data available for this socket TCPIP_UDP_SIGNAL_IF_DOWN = 0x2000 associated interface is going down; sockets connected on this interface will be disconnected but still alive TCPIP_UDP_SIGNAL_IF_CHANGE = 0x4000 associated interface has changed address sockets connected on this interface will be disconnected but still alive ",
							" Description Enumeration: TCPIP_UDP_SIGNAL_TYPE Description of the signals/events that a UDP socket can generate ",
							" Remarks These signals are used in the socket event handling notification functions Currently a UDP notification doesn't set multiple flags as the TX and RX events are handled separately The signals are 16 bits wide ",
							" TCPIP_UDP_SignalHandlerDeregister Function ",
							" C bool TCPIP_UDP_SignalHandlerDeregister(UDP_SOCKET s TCPIP_UDP_SIGNAL_HANDLE hSig); ",
							" Returns true - if the call succeeds false - if no such handler is registered ",
							" Description Deregisters the UDP socket signal handler ",
							" Preconditions hSig valid UDP signal handle ",
							" Parameters Parameters Description s The UDP socket hSig A handle returned by a previous call to TCPIP_UDP_SignalHandlerRegister   ",
							" TCPIP_UDP_SignalHandlerRegister Function ",
							" C TCPIP_UDP_SIGNAL_HANDLE TCPIP_UDP_SignalHandlerRegister(UDP_SOCKET s TCPIP_UDP_SIGNAL_TYPE sigMask TCPIP_UDP_SIGNAL_FUNCTION handler const void* hParam); ",
							" Returns ",
							" Returns a valid handle if the call succeeds or a null handle if the call failed (null handler no such socket existent handler) ",
							" Description This function registers a UDP socket signal handler The UDP module will call the registered handler when a UDP signal (TCPIP_UDP_SIGNAL_TYPE) occurs ",
							" Remarks Only one signal handler per socket is supported A new handler does not override the existent one Instead TCPIP_UDP_SignalHandlerDeregister has to be explicitly called The handler has to be short and fast It is meant for setting an event flag not for lengthy processing The hParam is passed by the client but is currently not used and should be 0 For multi-threaded systems the TCP/IP packet dispatch does not occur on the user thread The signal handler will be called on a different thread context It is essential that this handler is non blocking and really fast For multi-threaded systems once set it is not recommended to change the signal handler at run time Synchronization between user threads and packet dispatch threads could be difficult If really need to be changed make sure that the old handler could still be called and it should be valid until the new one is taken into account TCPIP_UDP_SignalHandlerDeregister needs to be called before registering another handler ",
							" Preconditions UDP valid socket ",
							" Parameters Parameters Description s The UDP socket sigMask mask of signals to be reported handler signal handler to be called when a UDP signal occurs hParam Parameter to be used in the handler call This is user supplied and is not used by the UDP module Currently not used and it should be null   ",
							" TCPIP_UDP_SOCKET_DEFAULT_RX_QUEUE_LIMIT Macro ",
							" C #define TCPIP_UDP_SOCKET_DEFAULT_RX_QUEUE_LIMIT 3 ",
							" Description The maximum number of RX packets that can be queued by an UDP socket at a certain time Note that UDP sockets do not use their own RX buffers but instead use the network driver supplied packets and a timely processing is critical to avoid packet memory starvation for the whole stack This symbol sets the maximum number of UDP buffers/packets that can be queued for a UDP socket at a certain time Once this limit is reached further incoming packets are silently discarded Adjust depending on the number of RX buffers that are available for the stack and the amount of memory available to the stack ",
							" TCPIP_UDP_SOCKET_DEFAULT_TX_QUEUE_LIMIT Macro ",
							" C #define TCPIP_UDP_SOCKET_DEFAULT_TX_QUEUE_LIMIT 3 ",
							" Description The maximum number of TX packets that can be queued by an UDP socket at a certain time For sockets that need to transfer a lot of data (Iperf for example) especially on slow connections this limit prevents running out of memory because the MAC/PHY transfer cannot keep up with the UDP packet allocation rate imposed by the application Adjust depending on the TCPIP_UDP_SOCKET_DEFAULT_TX_SIZE the connection speed and the amount of memory available to the stack ",
							" TCPIP_UDP_SOCKET_DEFAULT_TX_SIZE Macro ",
							" C #define TCPIP_UDP_SOCKET_DEFAULT_TX_SIZE 512 ",
							" Description Default socket TX buffer size Note that this setting affects all UDP sockets that are created and together with TCPIP_UDP_MAX_SOCKETS has a great impact on the heap size that's used by the stack (see TCPIP_STACK_DRAM_SIZE setting) When large TX bufferrs are needed probably a dynamic per socket approach is a better choice (see TCPIP_UDP_OptionsSet function) ",
							" TCPIP_UDP_SOCKET_POOL_BUFFER_SIZE Macro ",
							" C #define TCPIP_UDP_SOCKET_POOL_BUFFER_SIZE 512 ",
							" Description Size of the buffers in the UDP pool Any UDP socket that is enabled to use the pool and has the TX size = than this size can use a buffer from the pool Note that this setting together with TCPIP_UDP_SOCKET_POOL_BUFFERS has impact on the heap size that's used by the stack (see TCPIP_STACK_DRAM_SIZE setting) ",
							" TCPIP_UDP_SOCKET_POOL_BUFFERS Macro ",
							" C #define TCPIP_UDP_SOCKET_POOL_BUFFERS 4 ",
							" Description Number of buffers in the private UDP pool These are preallocated buffers that are to be used by UDP sockets only This improves the UDP socket throughput and is meant only for UDP sockets that have to sustain high TX traffic rate However this memory is not returned to the stack heap it always belongs to UDP A socket needs to have an option set in order to use the buffers pool (see the UDPSetOptions()) Use 0 to disable the feature ",
							" TCPIP_UDP_SocketInfoGet Function ",
							" C bool TCPIP_UDP_SocketInfoGet(UDP_SOCKET hUDP UDP_SOCKET_INFO* pInfo); ",
							" Returns true - if the call succeeded false - if no such socket or invalid pInfo ",
							" Description This function will fill a user passed UDP_SOCKET_INFO structure with current status of the selected socket ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen()/TCPIP_UDP_ClientOpen()() hUDP - valid socket pInfo -valid address of a UDP_SOCKET_INFO structure ",
							" Parameters Parameters Description UDP_SOCKET hUDP Socket for which information is to be obtained UDP_SOCKET_INFO* pInfo pointer to UDP_SOCKET_INFO to receive socket information   ",
							" TCPIP_UDP_SocketNetGet Function ",
							" C TCPIP_NET_HANDLE TCPIP_UDP_SocketNetGet(UDP_SOCKET hUDP); ",
							" Returns Handle of the interface that socket currently uses ",
							" Description This function returns the interface handle of an UDP socket ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP The UDP socket ",
							" TCPIP_UDP_SocketNetSet Function ",
							" C bool TCPIP_UDP_SocketNetSet(UDP_SOCKET hUDP TCPIP_NET_HANDLE hNet); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description This function sets the network interface for an UDP socket ",
							" Remarks A NULL hNet can be passed (0) so that the current socket network interface selection will be cleared If the hNet = 0 it will enforce UDP_OPTION_STRICT_NET on the socket ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP The UDP socket hNet interface handle   ",
							" TCPIP_UDP_SocketsNumberGet Function ",
							" C int TCPIP_UDP_SocketsNumberGet(); ",
							" Returns The number of UDP sockets ",
							" Description This function returns the number of created UDP sockets This is the maximum number of sockets that can be opened at any moment as it's been passed as parameter when UDP module was created ",
							" Preconditions UDP module properly initialized ",
							" TCPIP_UDP_SourceIPAddressSet Function ",
							" C bool TCPIP_UDP_SourceIPAddressSet(UDP_SOCKET hUDP IP_ADDRESS_TYPE addType IP_MULTI_ADDRESS* localAddress); ",
							" Returns true - Indicates success false - Indicates failure: invalid socket invalid socket address type unspecified localAddress ",
							" Description This function sets the IP source address which allows changing the source P address dynamically ",
							" Remarks The call will fail if localAddress is 0 The source IP address will not be changed ",
							" Preconditions UDP initialized UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket localAddress - valid address pointer ",
							" Parameters Parameters Description hUDP the UDP socket addType Type of address: IPv4/IPv6 localAddress pointer to an address to use   ",
							" TCPIP_UDP_StringPut Function ",
							" C const uint8_t* TCPIP_UDP_StringPut(UDP_SOCKET hUDP const uint8_t * strData); ",
							" Returns A pointer to the byte following the last byte written Note that this is different than the TCPIP_UDP_ArrayPut functions If this pointer does not dereference to a NULL byte then the buffer became full and the input data was truncated ",
							" Description This function writes a null-terminated string to the UDP socket while incrementing the socket write pointer TCPIP_UDP_PutIsReady could be used before calling this function to verify that there is room in the socket buffer ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket strData -valid pointer ",
							" Parameters Parameters Description hUDP UDP socket handle strData Pointer to the string to be written to the socket   ",
							" TCPIP_UDP_Task Function ",
							" C void TCPIP_UDP_Task(); ",
							" Returns None ",
							" Description This function performs UDP module tasks in the TCP/IP stack ",
							" Remarks None ",
							" Preconditions The UDP module should have been initialized ",
							" TCPIP_UDP_TxCountGet Function ",
							" C uint16_t TCPIP_UDP_TxCountGet(UDP_SOCKET hUDP); ",
							" Description This function returns the amount of bytes written into the UDP socket i e the current position of the write pointer ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle ",
							" TCPIP_UDP_TxOffsetSet Function ",
							" C bool TCPIP_UDP_TxOffsetSet(UDP_SOCKET hUDP uint16_t wOffset bool relative); ",
							" Returns true - if the offset was valid and the write pointer has been moved false - if the offset was not valid ",
							" Description This function allows the write location within the TX buffer to be specified Future calls to TCPIP_UDP_Put TCPIP_UDP_ArrayPut TCPIP_UDP_StringPut etc will write data from the indicated location ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle wOffset Offset in the UDP packet data payload to move the write pointer relative if true the wOffset is added to the current write pointer else the wOffset is from the beginning of the UDP buffer   ",
							" TCPIP_UDP_TxPutIsReady Function ",
							" C uint16_t TCPIP_UDP_TxPutIsReady(UDP_SOCKET hUDP unsigned short count); ",
							" Returns The number of bytes that can be written to this socket ",
							" Description This function returns the number of bytes that can be written to the specified UDP socket ",
							" Remarks The function won't increase the size of the UDP TX buffer If this is needed use TCPIP_UDP_OptionsSet The count variable is not used This function is deprecated and it will be eventually removed The function is identical to the TCPIP_UDP_PutIsReady and maintained for backward compatibility only ",
							" Preconditions UDP socket should have been opened with TCPIP_UDP_ServerOpen/TCPIP_UDP_ClientOpen hUDP - valid socket ",
							" Parameters Parameters Description hUDP UDP socket handle count Number of bytes requested   ",
							" TCPIP_UDP_USE_POOL_BUFFERS Macro ",
							" C #define TCPIP_UDP_USE_POOL_BUFFERS false ",
							" Description enable the build of the pre-allocated pool buffers option ",
							" TCPIP_UDP_USE_RX_CHECKSUM Macro ",
							" C #define TCPIP_UDP_USE_RX_CHECKSUM ",
							" Description Check incoming packets to have proper checksum ",
							" TCPIP_UDP_USE_TX_CHECKSUM Macro ",
							" C #define TCPIP_UDP_USE_TX_CHECKSUM ",
							" Description Calculate and transmit a checksum when sending data Checksum is not mandatory for UDP packets but is highly recommended This will affect the UDP TX performance ",
							" UDP_MULTICAST_FLAGS Enumeration ",
							" C typedef enum { UDP_MCAST_FLAG_LOOSE_NET_SOURCE_PORT = 0x0001 UDP_MCAST_FLAG_IGNORE_SOURCE_ADD = 0x0002 UDP_MCAST_FLAG_IGNORE_SOURCE_PORT = 0x0004 UDP_MCAST_FLAG_IGNORE_UNICAST = 0x0008 UDP_MCAST_FLAG_LOOP = 0x0010 UDP_MCAST_FLAG_DISABLE_SOURCE_CHECK = 0x0020 UDP_MCAST_FLAG_DEFAULT = (UDP_MCAST_FLAG_LOOSE_NET_SOURCE_PORT | UDP_MCAST_FLAG_IGNORE_SOURCE_ADD | UDP_MCAST_FLAG_IGNORE_SOURCE_PORT | UDP_MCAST_FLAG_IGNORE_UNICAST) } UDP_MULTICAST_FLAGS; ",
							" Members Members Description UDP_MCAST_FLAG_LOOSE_NET_SOURCE_PORT = 0x0001 Union of the UDP_OPTION_STRICT_NET UDP_OPTION_STRICT_ADDRESS and UDP_OPTION_STRICT_PORT This is the default behavior for a multicast socket The same bahvior can be obtained by setting individual options It is the default behavior of a newly created server socket but not for a client socket UDP_MCAST_FLAG_IGNORE_SOURCE_ADD = 0x0002 Ignore the source address of a packet and reply to the currently set (multicast) destination address Normally a socket would reply to the sender of the packet But probably this is not what you want for multicast This option allows the socket to reply to the multicast group instead no matter from what source it received the multicast traffic This option is disabled by default when a socket is created and should be enforced when needed UDP_MCAST_FLAG_IGNORE_SOURCE_PORT = 0x0004 Ignore the source port of a packet and reply to the currently set destination port Normally a socket would reply to the sender of the packet using the source port of the sender This option allows the socket to reply using the current destination/remote port no matter the source port of the received multicast traffic - which would be the expected behavior from a multicast socket This option is disabled by default when a socket is created and should be enforced when needed UDP_MCAST_FLAG_IGNORE_UNICAST = 0x0008 Ignore a packet if its destination is not multicast UDP_MCAST_FLAG_LOOP = 0x0010 When set the multicast packets sent by the UDP socket will be routed on the internal multicast interface as well Default is cleared Applies only to sockets sending multicast traffic UDP_MCAST_FLAG_DISABLE_SOURCE_CHECK = 0x0020 Disables/enables the checking of the source of multicast traffic that reaches a socket The IGMPv3 mandates that the multicast traffic should be passed to a socket only if that socked subscribed for multicast from that source However for high rate data streams that may place an overhead and consume additional CPU power for doing this check for each and every incoming packet This option allows the user to bypass this run time check By default the source check is enabled -recommended setting Applies only to sockets receiving multicast traffic ",
							" Description Enumeration: UDP_SOCKET_MULTICAST_FLAGS List of options to be set for a multicast socket ",
							" Remarks These options are meant for sockets carrying multicast traffic Multiple flags can be set 16 bits only supported ",
							" UDP_OPTION_MULTICAST_DATA Structure ",
							" C typedef struct { UDP_MULTICAST_FLAGS flagsMask; UDP_MULTICAST_FLAGS flagsValue; } UDP_OPTION_MULTICAST_DATA; ",
							" Members Members Description UDP_MULTICAST_FLAGS flagsMask; mask of flags to be touched (changed) by the operation UDP_MULTICAST_FLAGS flagsValue; new value of flags to be changed to for the flags that are touched according to the mask ",
							" Description Structure: UDP_OPTION_MULTICAST_DATA Allows the multicast options configuration of a socket ",
							" Remarks Using the mask and value members multiple flags can be set and cleared in one single operations The TCPIP_UDP_OptionsSet() operation for UDP_OPTION_MULTICAST will apply the folowing to the socket flags: flags = ~flagsMask; // clear all flags touched by mask flags |= (flagsValue flagsMask); // set the corresponding flags that are set in flagsValue All others will remain cleared ",
							" Example // set the flag UDP_MCAST_FLAG_LOOP: UDP_OPTION_MULTICAST_DATA mcastData; mcastData flagsMask = UDP_MCAST_FLAG_LOOP; // specify the flag to touch mcastData flagsValue = UDP_MCAST_FLAG_LOOP; // new value for the flag: TCPIP_UDP_OptionsSet(hUdp UDP_OPTION_MULTICAST mcastData); // clear the flag UDP_MCAST_FLAG_LOOP: mcastData flagsMask = UDP_MCAST_FLAG_LOOP; // specify the flag to touch mcastData flagsValue = 0; // new value for the flag: TCPIP_UDP_OptionsSet(hUdp UDP_OPTION_MULTICAST mcastData); // set UDP_MCAST_FLAG_LOOP and UDP_MCAST_FLAG_DISABLE_SOURCE_CHECK // clear UDP_MCAST_FLAG_IGNORE_SOURCE_ADD and UDP_MCAST_FLAG_IGNORE_SOURCE_PORT mcastData flagsMask = UDP_MCAST_FLAG_LOOP | UDP_MCAST_FLAG_DISABLE_SOURCE_CHECK | UDP_MCAST_FLAG_IGNORE_SOURCE_ADD | UDP_MCAST_FLAG_IGNORE_SOURCE_PORT; // flags to touch mcastData flagsValue = UDP_MCAST_FLAG_LOOP | UDP_MCAST_FLAG_DISABLE_SOURCE_CHECK ; // value with bits set for the first 2 flags cleared for the others TCPIP_UDP_OptionsSet(hUdp UDP_OPTION_MULTICAST mcastData); ",
							" Zeroconf Module Zero configuration (Zeroconf) provides a mechanism to ease the configuration of a device on a network It also provides for a more human-like naming convention instead of relying on IP addresses alone Zeroconf also goes by the names Bonjour (Apple) and Avahi (Linux) and is an IETF standard Abstraction Model Zeroconf Software Abstraction Model: TCPIP ZEROCONF Abstraction Model Bonjour Service Model: TCPIP ZEROCONF Bonjour Service Enabling Zeroconf can be enabled in the MPLAB Harmony Configurator or by setting the following two defines in system_config h file: TCPIP_STACK_USE_ZEROCONF_LINK_LOCAL TCPIP_STACK_USE_ZEROCONF_MDNS_SD Link Local (Zeroconf) The first component of Zeroconf is the ability to self-assign an IP address to each member of a network Normally a DHCP server would handle such situations However in cases where no DHCP server exists Zeroconf enabled devices negotiate unique IP addresses amongst themselves mDNS The second component of Zeroconf is the ability to self-assign human-readable hostnames for themselves Multicast DNS provides a local network the ability to have the features of a DNS server Users can use easily remembered hostnames to accesses the devices on the network In the event that devices elect to use the same hostname as in the IP address resolution each of the devices will auto-negotiate new names for themselves (usually by appending a number to the end of the name) Service Discovery The last component of Zeroconf is service discovery All Zeroconf devices can broadcast what services they provide For instance a printer can broadcast that it has printing services available A thermostat can broadcast that it has an HVAC control service Other interested parties on the network who are looking for certain services can then see a list of devices that have the capability of providing the service and_connect_directly to it This further eliminates the need to know whether something exists on a network (and what its IP or hostname is) As an end-user all you would need to do is query the network if a certain service exists and easily_connect_to it Zeroconf Enabled Environments All Apple products have Zeroconf enabled by default On Windows you'll need to download the Safari web browser and during the install enable support for Bonjour Note that in the Safari browser you can browse and see a list of all Bonjour enabled devices and click through to them automatically Library Interface Name Description Multicast DNS Functions  TCPIP_MDNS_ServiceDeregister DNS Service Discovery function for end-user to deregister a service advertisement which was previously registered with the TCPIP_MDNS_ServiceRegister function TCPIP_MDNS_ServiceRegister DNS Service Discovery function for end-users to register a service advertisement The service is associated with all interfaces TCPIP_MDNS_ServiceUpdate DNS-Service Discovery function for end-user to update the service advertisement which was previously registered with TCPIP_MDNS_ServiceRegister TCPIP_MDNS_Task Standard TCP/IP stack module task function Link Local Functions  TCPIP_ZCLL_Disable Disables Zero Configuration on the specified interface TCPIP_ZCLL_Enable Enables Zero Configuration on the specified interface TCPIP_ZCLL_IsEnabled Returns whether or not an interface is enabled for zero configuration TCPIP_ZCLL_Task Standard TCP/IP stack module task function Data Types and Constants  ZCLL_MODULE_CONFIG Placeholder for Zero Configuration Link Layer module configuration MDNSD_ERR_CODE void DisplayHostName(uint8_t *HostName); ",
							" MDNSD_ERR_CODE Enumeration ",
							" C typedef enum { MDNSD_SUCCESS = 0 MDNSD_ERR_BUSY = 1 MDNSD_ERR_CONFLICT = 2 MDNSD_ERR_INVAL = 3 } MDNSD_ERR_CODE; ",
							" Description void DisplayHostName(uint8_t *HostName); ",
							" Members Members Description MDNSD_ERR_BUSY = 1 Already being used for another service MDNSD_ERR_CONFLICT = 2 Name conflict MDNSD_ERR_INVAL = 3 Invalid parameter ",
							" TCPIP_MDNS_ServiceDeregister Function ",
							" C MDNSD_ERR_CODE TCPIP_MDNS_ServiceDeregister( TCPIP_NET_HANDLE netH ); ",
							" Description This function is used by end-user application to deregister DNS service discovery on a local network When this gets invoked by end-user DNS SD stack sends out Good-Bye packets to update all peer machines that service will no longer be present All peer machines remove the corresponding entry from the browser list This is the last function that needs to be invoked by the end-user application to free the DNS SD stack for some other application ",
							" Preconditions TCPIP_MDNS_ServiceRegister must be invoked before this call ",
							" Parameters Parameters Description netH Handle of the network to be deregistered ",
							" Returns MDNSD_ERR_CODE - Returns an error code to indicate whether or not registration is successful: MDNSD_SUCCESS - Returns on success of call MDNSD_ERR_INVAL - When the input parameters are invalid or if the function is invoked in an invalid state ",
							" Remarks None ",
							" TCPIP_MDNS_ServiceRegister Function ",
							" C MDNSD_ERR_CODE TCPIP_MDNS_ServiceRegister( TCPIP_NET_HANDLE netH const char * srv_name const char * srv_type uint16_t port const uint8_t * txt_record uint8_t auto_rename void (*call_back)(char *name MDNSD_ERR_CODE err void *context) void * context ); ",
							" Description This function is used by end-user application to announce its service on local network All peer machines that are compliant with Multicast DNS and DNS Service Discovery protocol can detect the announcement and lists out an entry in the Service Browser list The end-user selects an entry to connect to this service Ultimately this is an aid to end-user to discover any service of interest on a local network This is the first function that needs to be invoked by end-user application Presently Multicast-DNS and Service discovery stack supports only single service advertisement Once the application wants to terminate the service it has to invoke TCPIP_MDNS_ServiceDeregister() function to free the DNS SD stack for some other application ",
							" Preconditions None ",
							" Parameters Parameters Description netH Handle of the network to be registered srv_name Service name which is being advertised srv_type For a HTTP-Service it's \"__http _tcp local\" __http Application protocol proceeded with an underscore _tcp Lower-layer protocol on which service runs local To represent service is on local-network For iTunes Music Sharing \"_daap _tcp local\" For a Printing Service \"_ipp _tcp local\" Refer to http://www dns-sd org/ServiceTypes html for more service types port Port number on which service is running txt_len For additional information about service like default page (e g \"index htm\") for HTTP-service Length of such additional information txt_record String of additional information (e g \"index htm\") for HTTP service auto_rename A flag to indicate DNS-SD stack whether to rename the service automatically or not If this is set to '0' Callback parameter will be used to indicate the conflict error and user has to select different name and re-register with this function If this is set to '1' service-name will be automatically renamed with numerical suffix callback Callback function which is user-application defined This callback gets invoked on completion of service advertisement If an service name-conflict error is detected and auto_rename is set to '0' callback gets invoked with MDNSD_ERR_CONFLICT as error-code context Opaque context (pointer to opaque data) which needs to be used in callback function ",
							" Returns MDNSD_ERR_CODE - Returns Error-code to indicate whether or not registration is successful: MDNSD_SUCCESS - returns on success of call MDNSD_ERR_BUSY - When already some other service is being advertised using this DNS SD stack MDNSD_ERR_INVAL - Invalid parameter ",
							" TCPIP_MDNS_ServiceUpdate Function ",
							" C MDNSD_ERR_CODE TCPIP_MDNS_ServiceUpdate( TCPIP_NET_HANDLE netH uint16_t port const uint8_t * txt_record ); ",
							" Description This function is used by the end-user application to update its service which was previously registered With this function the end-user application updates the port number on which the service is running It can also update the additional information of service For example the default page can be updated to new page and corresponding page name can be input to this function to update all peer machines The modified service will be announced with new contents on local network This is an optional function and should be invoked only if it is necessary ",
							" Preconditions TCPIP_MDNS_ServiceRegister must be invoked before this call ",
							" Parameters Parameters Description netH Handle of the network to perform the service update port Port number on which service is running txt_record String of additional information (e g \"index htm\") for HTTP-service ",
							" Returns MDNSD_ERR_CODE - Returns error-code to indicate whether or not registration is successful: MDNSD_SUCCESS - returns on success of call MDNSD_ERR_INVAL - When the input parameters are invalid or if the function is invoked in invalid state ",
							" TCPIP_MDNS_Task Function ",
							" C void TCPIP_MDNS_Task(); ",
							" Description This function performs MDNS module tasks in the TCP/IP stack ",
							" Preconditions MDNS module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" TCPIP_ZCLL_Disable Function ",
							" C bool TCPIP_ZCLL_Disable( TCPIP_NET_HANDLE hNet ); ",
							" Description This API is used by end-user application to disable zero configuration on a specific interface ",
							" Preconditions The TCP/IP stack must be initialized before calling this function ",
							" Parameters Parameters Description hNet Handle of the network to be disabled ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks None ",
							" TCPIP_ZCLL_Enable Function ",
							" C bool TCPIP_ZCLL_Enable( TCPIP_NET_HANDLE hNet ); ",
							" Description This API is used by end-user application to enable zero configuration on a specific interface ",
							" Preconditions The TCP/IP stack must be initialized before calling this function ",
							" Parameters Parameters Description hNet Handle of the network to be enabled ",
							" Returns True - Indicates success False - Indicates failure ",
							" Remarks None ",
							" TCPIP_ZCLL_IsEnabled Function ",
							" C bool TCPIP_ZCLL_IsEnabled( TCPIP_NET_HANDLE hNet ); ",
							" Description This API is used by end-user application check whether or not an interface is enabled for zero configuration ",
							" Preconditions The TCP/IP stack must be initialized before calling this function ",
							" Parameters Parameters Description hNet Handle of the network to be examined ",
							" Returns True - Interface is enable for zero configuration False - Interface is not enabled for zero configuration ",
							" Remarks None ",
							" TCPIP_ZCLL_Task Function ",
							" C void TCPIP_ZCLL_Task(); ",
							" Description This function performs ZCLL module tasks in the TCP/IP stack ",
							" Preconditions The ZCLL module should have been initialized ",
							" Returns None ",
							" Remarks None ",
							" ZCLL_MODULE_CONFIG Structure ",
							" C typedef struct { void* reserved; } ZCLL_MODULE_CONFIG; ",
							" Description Placeholder for zero configuration link layer module configuration ",
							" ENC28J60 Driver Library The ENC28J60 External MAC and PHY is an external module connected through a Serial Peripheral Interface (SPI) to host microcontroller This driver interfaces with the SPI driver to communicate with the external device to implement a complete Ethernet node in a system The following are some of the key features of this module: Supports 10 Mbps physical-to-physical layer Ethernet data transfer Full-Duplex and Half-Duplex operation Broadcast Multicast and Unicast packets Hardware flow control for both Full and Half-Duplex mode Fully configurable interrupts Configurable receive packet filtering using: 64-bit Hash Table 64-byte Pattern Match Magic Packet™ Filtering Supports Packet Payload Checksum calculation CRC Check Supports SPI interface Abstraction Model The ENC28J60 Driver library has several different layers to it as illustrated in the following figure The interface layer has two main sections that are used the most often: The Tasks function and the TCP/IP Send and Receive functions The Tasks function manages the internal state machine which detects resets and then configures the ENC28J60 External MAC It also handles the monitoring of the hardware status sending and receiving packets The TCP/IP Send and Receive functions interact with the RAM-based queue of packets that are queued to send and packets that have been queued waiting for pick-up by the stack The main state machine does not interface directly to the SPI bus but instead interfaces to a virtual bus abstraction layer that allows for the replacement of the specific underlying bus implementation DRV ENC28J60 Abstraction Model Configuring the SPI Driver The ENC2J60 hardware requires a specific configuration of the SPI driver to work correctly Inside the MHC SPI Driver configuration be sure to select: Run the SPI at frequencies of at least 8 MHz Clock mode of DRV_SPI_CLOCK_MODE_IDLE_LOW_EDGE_FALL Input phase of SPI_INPUT_SAMPLING_PHASE_AT_END SPI Configuration Library Interface Name Description System Interaction Functions  DRV_ENC28J60_Deinitialize Deinitializes the ENC28J60 Driver Instance DRV_ENC28J60_Initialize Initializes the ENC28J60 Driver Instance with the configuration data DRV_ENC28J60_Process Additional processing that happens outside the tasks function DRV_ENC28J60_Reinitialize Reinitializes the instance of the ENC28J60 driver DRV_ENC28J60_SetMacCtrlInfo This function sets the MAC control information for the driver DRV_ENC28J60_StackInitialize This function initializes the driver with a TCPIP_MAC_INIT object DRV_ENC28J60_Tasks Main task function for the driver Client Level Functions  DRV_ENC28J60_Close Closes a client handle to the driver DRV_ENC28J60_ConfigGet Gets the current configuration DRV_ENC28J60_LinkCheck This function returns the status of the link DRV_ENC28J60_Open This function is called by the client to open a handle to a driver instance DRV_ENC28J60_ParametersGet Get the parameters of the device DRV_ENC28J60_PowerMode This function sets the power mode of the device DRV_ENC28J60_RegisterStatisticsGet Get the register statistics DRV_ENC28J60_StatisticsGet Retrieve the devices statistics DRV_ENC28J60_Status Gets the current status of the driver Receive Functions  DRV_ENC28J60_PacketRx Receive a packet from the driver DRV_ENC28J60_RxFilterHashTableEntrySet This function adds an entry to the hash table Transmit Functions  DRV_ENC28J60_PacketTx This function queues a packet for transmission Event Functions  DRV_ENC28J60_EventAcknowledge Acknowledges an event DRV_ENC28J60_EventMaskSet Sets the event mask DRV_ENC28J60_EventPendingGet Gets the current events Data Types and Constants  DRV_ENC28J60_Configuration Defines the data required to initialize or reinitialize the ENC28J60 Driver DRV_ENC28J60_MDIX_TYPE Defines the enumeration for controlling the MDIX select DRV_ENC28J60_MACObject This is variable DRV_ENC28J60_MACObject ",
							" DRV_ENC28J60_CLIENT_INSTANCES_IDXx Macro ",
							" C #define DRV_ENC28J60_CLIENT_INSTANCES_IDXx 1 ",
							" Description ENC28J60 maximum number of clients For example DRV_ENC28J60_CLIENT_INSTANCES_IDX0 selects the maximum number of clients the ENC28J60 driver can support at run-time for instance 0 ",
							" Remarks The instance number is suffixed with DRV_ENC28J60_CLIENT_INSTANCES_IDX ",
							" DRV_ENC28J60_Close Function ",
							" C void DRV_ENC28J60_Close(DRV_HANDLE handle); ",
							" Returns None ",
							" Description ENC28J60 Close This function closes a handle to the driver If it is the last client open the driver will send an RX Disable command to the ENC hardware and move to the closed state ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description handle The successfully opened handle ",
							" DRV_ENC28J60_ConfigGet Function ",
							" C size_t DRV_ENC28J60_ConfigGet(DRV_HANDLE hMac void* configBuff size_t buffSize size_t* pConfigSize); ",
							" Returns Number of bytes copied to the buffer ",
							" Description ENC28J60 Get Configuration Gets the current configuration ",
							" Remarks This function does nothing in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle configBuff location to copy the configuration too buffSize buffer size pConfigSize configuration size needed   ",
							" DRV_ENC28J60_Configuration Type ",
							" C typedef struct _DRV_ENC28J60_Configuration DRV_ENC28J60_Configuration; ",
							" Description ENC28J60 Driver Initialization Data This data type defines the data required to initialize or reinitialize the ENC28J60 driver If the driver is built statically the members of this data structure are statically over-ridden by static override definitions in the system_config h file ",
							" Remarks None ",
							" DRV_ENC28J60_Deinitialize Function ",
							" C void DRV_ENC28J60_Deinitialize(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description ENC28J60 Deinitialization This function deallocates any resources allocated by the initialization function ",
							" Preconditions The driver had to be successfully initialized with DRV_ENC28J60_Initialize ",
							" Parameters Parameters Description Object the valid object returned from DRV_ENC28J60_Initialize ",
							" DRV_ENC28J60_EventAcknowledge Function ",
							" C bool DRV_ENC28J60_EventAcknowledge(DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents); ",
							" Returns true - if successful false - if not successful ",
							" Description ENC28J60 Acknowledge Event This function acknowledges an event ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle macEvents the events to acknowledge ",
							" DRV_ENC28J60_EventMaskSet Function ",
							" C bool DRV_ENC28J60_EventMaskSet(DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents bool enable); ",
							" Returns true - if the mask could be set false - if the mast could not be set ",
							" Description ENC28J60 Set Event Mask Sets the event mask to what is passed in ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle macEvents the mask to enable or disable enable to enable or disable events ",
							" DRV_ENC28J60_EventPendingGet Function ",
							" C TCPIP_MAC_EVENT DRV_ENC28J60_EventPendingGet(DRV_HANDLE hMac); ",
							" Returns TCPIP_MAC_EV_NONE - Returned on an error List of events - Returned on event other than an error ",
							" Description ENC28J60 Get Events This function gets the current events ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENC28J60_Initialize Function ",
							" C SYS_MODULE_OBJ DRV_ENC28J60_Initialize(SYS_MODULE_INDEX index SYS_MODULE_INIT * init); ",
							" Returns Valid handle to the driver instance - If successful SYS_MODULE_OBJ_INVALID - If unsuccessful ",
							" Description ENC28J60 Initialization This function initializes the ENC28J60 Driver with configuration data passed into it by either the system_init function or by the DRV_ENC28J60_StackInitialize function Calling this function alone is not enough to initialize the driver DRV_ENC28J60_SetMacCtrlInfo must be called with valid data before the driver is ready to be opened ",
							" Preconditions None ",
							" Parameters Parameters Description index This is the index of the driver instance to be initialized The definition DRV_ENC28J60_NUM_DRV_INSTANCES controls how many instances are available init This is a pointer to a DRV_ENC28J60_CONFIG structure ",
							" DRV_ENC28J60_INSTANCES_NUMBER Macro ",
							" C #define DRV_ENC28J60_INSTANCES_NUMBER 1 ",
							" Description enc28j60 hardware instance configuration This definition selects the maximum number of hardware instances that can be supported by the dynamic driver ",
							" Remarks Mandatory definition ",
							" DRV_ENC28J60_LinkCheck Function ",
							" C bool DRV_ENC28J60_LinkCheck(DRV_HANDLE hMac); ",
							" Returns true - if the link is active false - all other times ",
							" Description ENC28J60 Link Check This function checks the status of the link and returns it to the caller ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENC28J60_MDIX_TYPE Type ",
							" C typedef enum DRV_ENC28J60_MDIX_TYPE@1 DRV_ENC28J60_MDIX_TYPE; ",
							" Description ENC28J60 Driver MDIX Control type This type defines the enumeration for controlling the MDIX select ",
							" Remarks None ",
							" DRV_ENC28J60_Open Function ",
							" C DRV_HANDLE DRV_ENC28J60_Open(SYS_MODULE_INDEX index DRV_IO_INTENT intent); ",
							" Returns Returns a valid handle - If successful INVALID_HANDLE - If unsuccessful ",
							" Description ENC28J60 Open The client will call this function to open a handle to the driver When the first instance is opened than the driver will send the RX enabled command to the ENC hardware ",
							" Preconditions The driver had to be successfully initialized with DRV_ENC28J60_Initialize ",
							" Parameters Parameters Description index This is the index of the driver instance to be initialized The definition DRV_ENC28J60_NUM_DRV_INSTANCES controls how many instances are available intent The intent to use when opening the driver Only exclusive is supported     ",
							" DRV_ENC28J60_PacketRx Function ",
							" C TCPIP_MAC_PACKET* DRV_ENC28J60_PacketRx(DRV_HANDLE hMac TCPIP_MAC_RES* pRes const TCPIP_MAC_PACKET_RX_STAT** ppPktStat); ",
							" Returns Pointer to a valid packet - if successful NULL - if unsuccessful ",
							" Description ENC28J60 Receive Packet This function retrieves a packet from the driver The packet needs to be acknowledged with the linked acknowledge function so it can be reused ",
							" Remarks ppPktStat is ignored in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pRes the result of the operation ppPktStat pointer to the receive statistics ",
							" DRV_ENC28J60_PacketTx Function ",
							" C TCPIP_MAC_RES DRV_ENC28J60_PacketTx(DRV_HANDLE hMac TCPIP_MAC_PACKET * ptrPacket); ",
							" Returns TCPIP_MAC_RES_OP_ERR - if the client handle is invalid TCPIP_MAC_RES_IS_BUSY - if the driver is not in the run state TCPIP_MAC_RES_QUEUE_TX_FULL - if there are no free descriptors TCPIP_MAC_RES_OK - on successful queuing of the packet ",
							" Description ENC28J60 Packet Transmit This function will take a packet and add it to the queue for transmission When the packet has finished transmitting the driver will call the packets acknowledge function When that acknowledge function is complete the driver will forget about the packet ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ptrPacket pointer to the packet ",
							" DRV_ENC28J60_ParametersGet Function ",
							" C TCPIP_MAC_RES DRV_ENC28J60_ParametersGet(DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OK - if the hMac is valid ",
							" Description ENC28J60 Get Parameters Get the parameters of the device which includes that it is an Ethernet device and what it's MAC address is Users of the ENC28J60 must generate a unique MAC address for each controller used The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pMacParams pointer to put the parameters ",
							" DRV_ENC28J60_PowerMode Function ",
							" C bool DRV_ENC28J60_PowerMode(DRV_HANDLE hMac TCPIP_MAC_POWER_MODE pwrMode); ",
							" Returns false - This functionality is not supported in this version of the driver ",
							" Description ENC28J60 Power Mode This function sets the power mode of the ENC28J60 ",
							" Remarks This functionality is not implemented in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pwrMode the power mode to set ",
							" DRV_ENC28J60_Process Function ",
							" C TCPIP_MAC_RES DRV_ENC28J60_Process(DRV_HANDLE hMac); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENC28J60 Process This function does additional processing that is not done inside the tasks function ",
							" Remarks This function does nothing in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENC28J60_RegisterStatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_ENC28J60_RegisterStatisticsGet(DRV_HANDLE hMac TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries int nEntries int* pHwEntries); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENC28J60 Get Register Statistics Get the device specific statistics ",
							" Remarks Statistics are not planned for the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pRegEntries  nEntries  pHwEntries  ",
							" DRV_ENC28J60_Reinitialize Function ",
							" C void DRV_ENC28J60_Reinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description ENC28J60 Reinitialization This function will deinitialize and initialize the driver instance As with DRV_ENC28J60_Initialize DRV_ENC28J60_SetMacCtrlInfo must be called for the driver to be useful ",
							" Remarks This function is not planned to be implemented for the first release ",
							" Preconditions The driver had to be successfully initialized with DRV_ENC28J60_Initialize ",
							" DRV_ENC28J60_RxFilterHashTableEntrySet Function ",
							" C TCPIP_MAC_RES DRV_ENC28J60_RxFilterHashTableEntrySet(DRV_HANDLE hMac const TCPIP_MAC_ADDR* DestMACAddr); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENC28J60 Receive Filter Hash Table Entry Set This function adds to the MAC's hash table for hash table matching ",
							" Remarks This functionality is not implemented in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle DestMACAddr MAC address to add to the hash table ",
							" DRV_ENC28J60_SetMacCtrlInfo Function ",
							" C void DRV_ENC28J60_SetMacCtrlInfo(SYS_MODULE_OBJ object TCPIP_MAC_MODULE_CTRL * init); ",
							" Returns None ",
							" Description ENC28J60 Set MAC Control Information This function is used to pass in the TCPIP_MAC_CONTROL_INIT information that is used for allocation and deallocation of memory event signaling etc This function is needed to be called so that the driver can enter initialization state when the tasks function is called ",
							" Preconditions The driver had to be successfully initialized with ENC28J60_Initialize ",
							" DRV_ENC28J60_StackInitialize Function ",
							" C SYS_MODULE_OBJ DRV_ENC28J60_StackInitialize(SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns Returns a valid handle to the driver instance - If successful SYS_MODULE_OBJ_INVALID - If unsuccessful ",
							" Description ENC28J60 Stack Initialization This function is used by the TCP/IP stack to fully initialize the driver with both the ENC28J60 specific configuration and the MAC control information With this function there is no need to call DRV_ENC28J60_SetMacCtrlInfo ",
							" Preconditions None ",
							" Parameters Parameters Description index This is the index of the driver instance to be initialized The definition DRV_ENC28J60_NUM_DRV_INSTANCES controls how many instances are available init This is a pointer to a TCPIP_MAC_INIT structure ",
							" DRV_ENC28J60_StatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_ENC28J60_StatisticsGet(DRV_HANDLE hMac TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENC28J60 Get Statistics Get the current statistics stored in the driver ",
							" Remarks Statistics are not planned for the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENC28J60_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENC28J60_Status Function ",
							" C SYS_STATUS DRV_ENC28J60_Status(SYS_MODULE_OBJ obect); ",
							" Returns SYS_STATUS_ERROR - if an invalid handle has been passed in SYS_STATUS_UNINITIALIZED - if the driver has not completed initialization SYS_STATUS_BUSY - if the driver is closing and moving to the closed state SYS_STATUS_READY - if the driver is ready for client commands ",
							" Description ENC28J60 Status This function will get the status of the driver instance ",
							" Preconditions The driver had to be successfully initialized with DRV_ENC28J60_Initialize() ",
							" Parameters Parameters Description object The object valid passed back to DRV_ENC28J60_Initialize() ",
							" DRV_ENC28J60_Tasks Function ",
							" C void DRV_ENC28J60_Tasks(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description ENC28J60 Tasks This function will execute the main state machine for the ENC28J60 driver ",
							" Preconditions The driver had to be successfully initialized with DRV_ENC28J60_Initialize ",
							" Parameters Parameters Description object The object valid passed back to DRV_ENC28J60_Initialize ",
							" ENCx24J600 Driver Library The ENCx24J600 External MAC is an external module to the PIC32 that is connected through a SPI or PSP interface This driver interfaces with the SPI driver to communicate with the external device to implement a complete Ethernet node in a system The following are some of the key features of this module: Supports 10/100 Ethernet Full-Duplex and Half-Duplex operation Broadcast Multicast and Unicast packets Manual and automatic flow control Supports Auto-MDIX Fully configurable interrupts Configurable receive packet filtering using: 64-bit Hash Table 64-byte Pattern Match Magic Packet™ Filtering Runt Packet Detection and Filtering Supports Packet Payload Checksum calculation CRC Check Supports SPI interface Abstraction Model The ENCx24J600 Driver library has several different layers to it as illustrated in the following figure The interface layer has two main sections that are used the most often: The Tasks function and the TCP/IP Send and Receive functions The Tasks function manages the internal state machine which detects resets and then configures the ENCx24J600 External MAC It also handles the monitoring of the hardware status sending and receiving packets The TCP/IP Send and Receive functions interact with the RAM-based queue of packets that are queued to send and packets that have been queued waiting for pick-up by the stack The main state machine does not interface directly to the SPI bus but instead interfaces to a virtual bus abstraction layer that allows for the replacement of the specific underlying bus implementation DRV ENCX24J600 Abstraction Model Configuring the SPI Driver The ENC hardware requires a specific configuration of the SPI driver to work correctly Inside the MHC SPI Driver configuration be sure to select: SPI clock rate of 14000000 or less With a PB clock of 80 MHz 13333333 is the clock rate Clock mode of DRV_SPI_CLOCK_MODE_IDLE_LOW_EDGE_FALL Input phase of SPI_INPUT_SAMPLING_PHASE_AT_END Recommended Settings Interrupt Driver mode Enhanced Buffer mode DMA mode enabled: DMA block transfer size of at least 1600 bytes Size of DMA buffer for dummy data of at least 1600 bytes Ensure when setting up DMA in interrupt mode that the DMA interrupts are a higher priority than the SPI Driver interrupt SPI Configuration Library Interface Name Description System Interaction FunctionsFunctions  DRV_ENCX24J600_Deinitialize Deinitializes the ENCx24J600 Driver Instance DRV_ENCX24J600_Initialize Initializes the ENCx24J600 Driver Instance with the configuration data DRV_ENCX24J600_Reinitialize Reinitializes the instance of the ENCX24J600 driver DRV_ENCX24J600_Tasks Main task function for the driver DRV_ENCX24J600_SetMacCtrlInfo This function sets the MAC control information for the driver DRV_ENCX24J600_StackInitialize This function initializes the driver with a TCPIP_MAC_INIT object DRV_ENCX24J600_Process Additional processing that happens outside the tasks function Client Level FunctionsFunctions  DRV_ENCX24J600_Close Closes a client handle to the driver DRV_ENCX24J600_ConfigGet Gets the current configuration DRV_ENCX24J600_LinkCheck This function returns the status of the link DRV_ENCX24J600_Open This function is called by the client to open a handle to a driver instance DRV_ENCX24J600_ParametersGet Get the parameters of the device DRV_ENCX24J600_PowerMode This function sets the power mode of the device DRV_ENCX24J600_RegisterStatisticsGet Get the register statistics DRV_ENCX24J600_StatisticsGet Retrieve the devices statistics DRV_ENCX24J600_Status Gets the current status of the driver Receive FunctionsFunctions  DRV_ENCX24J600_PacketRx Receive a packet from the driver DRV_ENCX24J600_RxFilterHashTableEntrySet This function adds an entry to the hash table Transmit FunctionsFunctions  DRV_ENCX24J600_PacketTx This function queues a packet for transmission Event FunctionsFunctions  DRV_ENCX24J600_EventAcknowledge Acknowledges an event DRV_ENCX24J600_EventMaskSet Sets the event mask DRV_ENCX24J600_EventPendingGet Gets the current events Data Types and ConstantsTypes  DRV_ENCX24J600_Configuration Defines the data required to initialize or reinitialize the ENCX24J600 Driver DRV_ENCX24J600_MDIX_TYPE Defines the enumeration for controlling the MDIX select ",
							" DRV_ENCX24J600_CLIENT_INSTANCES_IDXx Macro ",
							" C #define DRV_ENCX24J600_CLIENT_INSTANCES_IDXx 1 ",
							" Description ENCX24J600 maximum number of clients For example DRV_ENC28J60_CLIENT_INSTANCES_IDX0 selects the maximum number of clients the ENCX24J600 driver can support at run-time for instance 0 ",
							" Remarks The instance number is suffixed with DRV_ENCX24J600_CLIENT_INSTANCES_IDX ",
							" DRV_ENCX24J600_Close Function ",
							" C void DRV_ENCX24J600_Close(DRV_HANDLE handle); ",
							" Returns None ",
							" Description ENCX24J600 Close This function closes a handle to the driver If it is the last client open the driver will send an RX Disable command to the ENC hardware and move to the closed state ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description handle The successfully opened handle ",
							" DRV_ENCX24J600_ConfigGet Function ",
							" C size_t DRV_ENCX24J600_ConfigGet(DRV_HANDLE hMac void* configBuff size_t buffSize size_t* pConfigSize); ",
							" Returns Number of bytes copied to the buffer ENCX24J600 Get Configuration Gets the current configuration ",
							" Remarks This function does nothing in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle configBuff location to copy the configuration too buffSize buffer size pConfigSize configuration size needed ",
							" DRV_ENCX24J600_Configuration Type ",
							" C typedef struct _DRV_ENCX24J600_Configuration DRV_ENCX24J600_Configuration; ",
							" Description ENCX24J600 Driver Initialization Data This data type defines the data required to initialize or reinitialize the ENCX24J600 driver If the driver is built statically the members of this data structure are statically over-ridden by static override definitions in the system_config h file ",
							" Remarks None ",
							" DRV_ENCX24J600_Deinitialize Function ",
							" C void DRV_ENCX24J600_Deinitialize(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description ENCX24J600 Deinitialization This function deallocates any resources allocated by the initialization function ",
							" Preconditions The driver had to be successfully initialized with DRV_ENCX24J600_Initialize ",
							" Parameters Parameters Description Object the valid object returned from DRV_ENCX24J600_Initialize ",
							" DRV_ENCX24J600_EventAcknowledge Function ",
							" C bool DRV_ENCX24J600_EventAcknowledge(DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents); ",
							" Returns true - if successful false - if not successful ",
							" Description ENCX24J600 Acknowledge Event This function acknowledges an event The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle macEvents the events to acknowledge ",
							" DRV_ENCX24J600_EventMaskSet Function ",
							" C bool DRV_ENCX24J600_EventMaskSet(DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents bool enable); ",
							" Returns true - if the mask could be set false - if the mast could not be set ",
							" Description ENCX24J600 Set Event Mask Sets the event mask to what is passed in ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle macEvents the mask to enable or disable enable to enable or disable events ",
							" DRV_ENCX24J600_EventPendingGet Function ",
							" C TCPIP_MAC_EVENT DRV_ENCX24J600_EventPendingGet(DRV_HANDLE hMac); ",
							" Returns TCPIP_MAC_EV_NONE - Returned on an error List of events - Returned on event other than an error ",
							" Description ENCX24J600 Get Events This function gets the current events ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENCX24J600_Initialize Function ",
							" C SYS_MODULE_OBJ DRV_ENCX24J600_Initialize(SYS_MODULE_INDEX index SYS_MODULE_INIT * init); ",
							" Returns Valid handle to the driver instance - If successful SYS_MODULE_OBJ_INVALID - If unsuccessful ",
							" Description ENCX24J600 Initialization This function initializes the ENCx24J600 Driver with configuration data passed into it by either the system_init function or by the DRV_ENCX24J600_StackInitialize function Calling this function alone is not enough to initialize the driver DRV_ENCX24J600_SetMacCtrlInfo must be called with valid data before the driver is ready to be opened ",
							" Preconditions None ",
							" Parameters Parameters Description init This is a pointer to a DRV_ENX24J600_CONFIG structure ",
							" DRV_ENCX24J600_INSTANCES_NUMBER Macro ",
							" C #define DRV_ENCX24J600_INSTANCES_NUMBER 1 ",
							" Description ENCX24J600 hardware instance configuration This definition selects the maximum number of hardware instances that can be supported by the dynamic driver ",
							" Remarks Mandatory definition ",
							" DRV_ENCX24J600_LinkCheck Function ",
							" C bool DRV_ENCX24J600_LinkCheck(DRV_HANDLE hMac); ",
							" Returns true - if the link is active false - all other times ",
							" Description ENCX24J600 Link Check This function checks the status of the link and returns it to the caller ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENCX24J600_MDIX_TYPE Type ",
							" C typedef enum DRV_ENCX24J600_MDIX_TYPE@1 DRV_ENCX24J600_MDIX_TYPE; ",
							" Description ENCX24J600 Driver MDIX Control type This type defines the enumeration for controlling the MDIX select ",
							" Remarks None ",
							" DRV_ENCX24J600_Open Function ",
							" C DRV_HANDLE DRV_ENCX24J600_Open(SYS_MODULE_INDEX index DRV_IO_INTENT intent); ",
							" Returns Returns a valid handle - If successful INVALID_HANDLE - If unsuccessful ",
							" Description The client will call this function to open a handle to the driver When the first instance is opened than the driver will send the RX enabled command to the ENC hardware ",
							" Preconditions The driver had to be successfully initialized with DRV_ENCX24J600_Initialize ",
							" Parameters Parameters Description index This is the index of the driver instance to be initialized The definition DRV_ENCX24J600_NUM_DRV_INSTANCES controls how many instances are available intent The intent to use when opening the driver Only exclusive is supported ",
							" DRV_ENCX24J600_PacketRx Function ",
							" C TCPIP_MAC_PACKET* DRV_ENCX24J600_PacketRx(DRV_HANDLE hMac TCPIP_MAC_RES* pRes const TCPIP_MAC_PACKET_RX_STAT** ppPktStat); ",
							" Returns Pointer to a valid packet - if successful NULL - if unsuccessful ",
							" Description ENCX24J600 Receive Packet This function retrieves a packet from the driver The packet needs to be acknowledged with the linked acknowledge function so it can be reused ",
							" Remarks ppPktStat is ignored in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pRes the result of the operation ppPktStat pointer to the receive statistics ",
							" DRV_ENCX24J600_PacketTx Function ",
							" C TCPIP_MAC_RES DRV_ENCX24J600_PacketTx(DRV_HANDLE hMac TCPIP_MAC_PACKET * ptrPacket); ",
							" Returns TCPIP_MAC_RES_OP_ERR - if the client handle is invalid TCPIP_MAC_RES_IS_BUSY - if the driver is not in the run state TCPIP_MAC_RES_QUEUE_TX_FULL - if there are no free descriptors TCPIP_MAC_RES_OK - on successful queuing of the packet ",
							" Description ENCX24J600 Packet Transmit This function will take a packet and add it to the queue for transmission When the packet has finished transmitting the driver will call the packets acknowledge function When that acknowledge function is complete the driver will forget about the packet ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ptrPacket pointer to the packet ",
							" DRV_ENCX24J600_ParametersGet Function ",
							" C TCPIP_MAC_RES DRV_ENCX24J600_ParametersGet(DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OK - if the hMac is valid ",
							" Description ENCX24J600 Get Parameters Get the parameters of the device which includes that it is an Ethernet device and what it's MAC address is ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pMacParams pointer to put the parameters ",
							" DRV_ENCX24J600_PowerMode Function ",
							" C bool DRV_ENCX24J600_PowerMode(DRV_HANDLE hMac TCPIP_MAC_POWER_MODE pwrMode); ",
							" Returns false - This functionality is not supported in this version of the driver ",
							" Description ENCX24J600 Power Mode This function sets the power mode of the ENCX24J600 ",
							" Remarks This functionality is not implemented in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pwrMode the power mode to set ",
							" DRV_ENCX24J600_Process Function ",
							" C TCPIP_MAC_RES DRV_ENCX24J600_Process(DRV_HANDLE hMac); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENCX24J600 Process This function does additional processing that is not done inside the tasks function ",
							" Remarks This function does nothing in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENCX24J600_RegisterStatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_ENCX24J600_RegisterStatisticsGet(DRV_HANDLE hMac TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries int nEntries int* pHwEntries); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENCX24J600 Get Register Statistics Get the device specific statistics ",
							" Remarks Statistics are not planned for the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle pRegEntries  nEntries  pHwEntries  ",
							" DRV_ENCX24J600_Reinitialize Function ",
							" C void DRV_ENCX24J600_Reinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description ENCX24J600 Reinitialization This function will deinitialize and initialize the driver instance As with DRV_ENCX24J600_Initialize DRV_ENCX24J600_SetMacCtrlInfo must be called for the driver to be useful ",
							" Remarks This function is not planned to be implemented for the first release ",
							" Preconditions The driver had to be successfully initialized with DRV_ENCX24J600_Initialize ",
							" DRV_ENCX24J600_RxFilterHashTableEntrySet Function ",
							" C TCPIP_MAC_RES DRV_ENCX24J600_RxFilterHashTableEntrySet(DRV_HANDLE hMac const TCPIP_MAC_ADDR* DestMACAddr); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENCX24J600 Receive Filter Hash Table Entry Set This function adds to the MAC's hash table for hash table matching ",
							" Remarks This functionality is not implemented in the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle DestMACAddr MAC address to add to the hash table ",
							" DRV_ENCX24J600_SetMacCtrlInfo Function ",
							" C void DRV_ENCX24J600_SetMacCtrlInfo(SYS_MODULE_OBJ object TCPIP_MAC_MODULE_CTRL * init); ",
							" Returns None ",
							" Description ENCX24J600 Set MAC Control Information This function is used to pass in the TCPIP_MAC_CONTROL_INIT information that is used for allocation and deallocation of memory event signaling etc This function is needed to be called so that the driver can enter initialization state when the tasks function is called ",
							" Preconditions The driver had to be successfully initialized with DRV_ENCX24J600_Initialize ",
							" DRV_ENCX24J600_StackInitialize Function ",
							" C C SYS_MODULE_OBJ DRV_ENCX24J600_StackInitialize(SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns Returns a valid handle to the driver instance - If successful SYS_MODULE_OBJ_INVALID - If unsuccessful ",
							" Description ENCX24J600 Stack Initialization This function is used by the TCP/IP stack to fully initialize the driver with both the ENCX24J600 specific configuration and the MAC control information With this function there is no need to call DRV_ENCX24J600_SetMacCtrlInfo ",
							" Preconditions None ",
							" Parameters Parameters Description init This is a pointer to a TCPIP_MAC_INIT structure ",
							" DRV_ENCX24J600_StatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_ENCX24J600_StatisticsGet(DRV_HANDLE hMac TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics); ",
							" Returns TCPIP_MAC_RES_TYPE_ERR - if the hMac is invalid TCPIP_MAC_RES_OP_ERR - if the hMac is valid ",
							" Description ENCX24J600 Get Statistics Get the current statistics stored in the driver ",
							" Remarks Statistics are not planned for the first release ",
							" Preconditions The client had to be successfully opened with DRV_ENCX24J600_Open ",
							" Parameters Parameters Description hMac the successfully opened handle ",
							" DRV_ENCX24J600_Status Function ",
							" C SYS_STATUS DRV_ENCX24J600_Status(SYS_MODULE_OBJ obect); ",
							" Returns SYS_STATUS_ERROR - if an invalid handle has been passed in SYS_STATUS_UNINITIALIZED - if the driver has not completed initialization SYS_STATUS_BUSY - if the driver is closing and moving to the closed state SYS_STATUS_READY - if the driver is ready for client commands ",
							" Description ENCX24J600 Status This function will get the status of the driver instance The driver had to be successfully initialized with DRV_ENCX24J600_Initialize() ",
							" Parameters Parameters Description object The object valid passed back to DRV_ENCX24J600_Initialize() ",
							" DRV_ENCX24J600_Tasks Function ",
							" C void DRV_ENCX24J600_Tasks(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description ENCX24J600 Tasks This function will execute the main state machine for the ENCX24J600 driver ",
							" Preconditions The driver had to be successfully initialized with DRV_ENCX24J600_Initialize ",
							" Parameters Parameters Description object The object valid passed back to DRV_ENCX24J600_Initialize ",
							" Ethernet GMAC Driver Library The Ethernet Media Access Controller (GMAC) module implements a 10/100 Mbps Ethernet MAC compatible with the IEEE 802 3 standard The GMAC can operate in either half or full duplex mode at all supported speeds Embedded Characteristics Compatible with IEEE Standard 802 3 10 100 Mbps operation Full and half duplex operation at all supported speeds of operation Statistics Counter Registers for RMON/MIB MII interface to the physical layer Integrated physical coding Direct memory access (DMA) interface to external memory Support for 6 priority queues in DMA 8 KB transmit RAM and 4 KB receive RAM Programmable burst length and endianism for DMA Interrupt generation to signal receive and transmit completion errors or other events Automatic pad and cyclic redundancy check (CRC) generation on transmitted frames Automatic discard of frames received with errors Receive and transmit IP TCP and UDP checksum offload Both IPv4 and IPv6 packet types supported Address checking logic for four specific 48-bit addresses four type IDs promiscuous mode hash matching of unicast and multicast destination addresses and Wake-on-LAN Management Data Input/Output (MDIO) interface for physical layer management Support for jumbo frames up to 10240 Bytes Full duplex flow control with recognition of incoming pause frames and hardware generation of transmitted pause frames Half duplex flow control by forcing collisions on incoming frames Support for 802 1Q VLAN tagging with recognition of incoming VLAN and priority tagged frames Support for 802 1Qbb priority-based flow control Programmable Inter Packet Gap (IPG) Stretch Recognition of IEEE 1588 PTP frames IEEE 1588 time stamp unit (TSU) Support for 802 1AS timing and synchronization Supports 802 1Qav traffic shaping on two highest priority queues Abstraction Model The Ethernet Controller provides the modules needed to implement a 10/100 Mbps Ethernet node using an external Ethernet PHY chip The PHY chip provides a digital-analog interface as part of the Physical Layer and the controller provides the Media Access Controller (MAC)_layer above the PHY As shown in figure below the Ethernet Controller consists of the following modules: Media Access Control (MAC) block: Responsible for implementing the MAC functions of the Ethernet IEEE 802 3 Specification Flow Control (FC) block: Responsible for control of the transmission of PAUSE frames (Reception of PAUSE frames is handled within the MAC ) RX Filter (RXF) block: This module performs filtering on every receive packet to determine whether each packet should be accepted or rejected TX DMA/TX Buffer Management Engine: The TX DMA and TX Buffer Management engines perform data transfers from the memory (using descriptor tables) to the MAC Transmit Interface RX DMA/RX Buffer Management Engine: The RX DMA and RX Buffer Management engines transfer receive packets from the MAC to the memory (using descriptor tables) ETHC_Block For completeness we also need to look at the interface diagram of a representative Ethernet PHY As shown in Figure 2 the PHY has two interfaces one for configuring and managing the PHY (SMI/MIIM) and another for transmit and receive data (RMII or MII) The SMI/MIIM interface is the responsibility of the Ethernet PHY Driver Library When setting up the Ethernet PHY this Ethernet driver calls primitives from the Ethernet PHY Driver library The RMII/MII data interface is the responsibility of the Ethernet MAC Driver Library (this library) SMSC LAN8720 Block Diagram Library Interface Name Description Client Level Functions  DRV_GMAC_Close Closes a client instance of the PIC32 MAC Driver DRV_GMAC_Open Opens a client instance of the PIC32 MAC Driver DRV_GMAC_Deinitialize Deinitializes the PIC32 Ethernet MAC DRV_GMAC_Initialize Initializes the PIC32 Ethernet MAC DRV_GMAC_Reinitialize Reinitializes the PIC32 Ethernet MAC Receive Functions  DRV_GMAC_PacketRx This is the MAC receive function DRV_GMAC_RxFilterHashTableEntrySet Sets the current MAC hash table receive filter Transmit Functions  DRV_GMAC_PacketTx MAC driver transmit function Event Functions  DRV_GMAC_EventAcknowledge Acknowledges and re-enables processed events DRV_GMAC_EventMaskSet Enables/disables the MAC events DRV_GMAC_EventPendingGet Returns the currently pending events Other Functions  DRV_GMAC_ConfigGet Gets the current MAC driver configuration DRV_GMAC_LinkCheck Checks current link status DRV_GMAC_ParametersGet MAC parameter get function DRV_GMAC_PowerMode Selects the current power mode for the Ethernet MAC DRV_GMAC_Process MAC periodic processing function DRV_GMAC_RegisterStatisticsGet Gets the current MAC hardware statistics registers DRV_GMAC_Status Provides the current status of the MAC driver module DRV_GMAC_StatisticsGet Gets the current MAC statistics DRV_GMAC_Tasks Maintains the EThernet MAC driver's state machine Data Types and Constants  DRV_GMAC_INDEX_COUNT Number of valid Ethernet driver indices _DRV_GMAC_H This is macro _DRV_GMAC_H   ",
							" DRV_GMAC_Close Function ",
							" C void DRV_GMAC_Close(DRV_HANDLE hMac); ",
							" Returns None ",
							" Description This function closes a client instance of the PIC32 MAC Driver ",
							" Remarks None ",
							" Preconditions DRV_GMAC_Open() should have been called ",
							" Parameters Parameters Description hMac valid MAC handle obtained by a call to DRV_GMAC_Open ",
							" DRV_GMAC_ConfigGet Function ",
							" C size_t DRV_GMAC_ConfigGet(DRV_HANDLE hMac void* configBuff size_t buffSize size_t* pConfigSize); ",
							" Returns number of bytes copied into the supplied storage buffer ",
							" Description This function will get the current MAC driver configuration and store it into a supplied buffer ",
							" Remarks None ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_Deinitialize Function ",
							" C void DRV_GMAC_Deinitialize(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function supports teardown of the PIC32 Ethernet MAC (opposite of set up) Used by tcpip_module_manager ",
							" Remarks This function deinitializes the Ethernet controller the MAC and the associated PHY It should be called to be release any resources allocated by the initialization and return the MAC and the PHY to the idle/power down state ",
							" Preconditions DRV_GMAC_Initialize must have been called to set up the driver ",
							" DRV_GMAC_EventAcknowledge Function ",
							" C bool DRV_GMAC_EventAcknowledge(DRV_HANDLE hMac TCPIP_MAC_EVENT tcpAckEv); ",
							" Returns true if events acknowledged false if no events to be acknowledged ",
							" Description This function acknowledges and re-enables processed events Multiple events can be ORed together as they are processed together The events acknowledged by this function should be the events that have been retrieved from the stack by calling DRV_GMAC_EventPendingGet() or have been passed to the stack by the driver using the registered notification handler and have been processed and have to be re-enabled ",
							" Remarks All events should be acknowledged in order to be re-enabled Some events are fatal errors and should not be acknowledged ( TCPIP_MAC_EV_RX_BUSERR TCPIP_MAC_EV_TX_BUSERR) Driver/stack re-initialization is needed under such circumstances Some events are just system/application behavior and they are intended only as simple info (TCPIP_MAC_EV_RX_OVFLOW TCPIP_MAC_EV_RX_BUFNA TCPIP_MAC_EV_TX_ABORT TCPIP_MAC_EV_RX_ACT) The TCPIP_MAC_EV_RX_FWMARK and TCPIP_MAC_EV_RX_EWMARK events are part of the normal flow control operation (if auto flow control was enabled) They should be enabled alternatively if needed The events are persistent They shouldn't be re-enabled unless they have been processed and the condition that generated them was removed Re-enabling them immediately without proper processing will have dramatic effects on system performance ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_EventMaskSet Function ",
							" C bool DRV_GMAC_EventMaskSet(DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents bool enable); ",
							" Returns always true operation succeeded ",
							" Description This is a function that enables or disables the events to be reported to the Ethernet MAC client (TCP/IP stack) All events that are to be enabled will be added to the notification process All events that are to be disabled will be removed from the notification process The stack has to catch the events that are notified and process them After that the stack should call DRV_GMAC_EventAcknowledge() so that the events can be re-enable The stack should process at least the following transfer events: TCPIP_MAC_EV_RX_PKTPEND TCPIP_MAC_EV_RX_DONE TCPIP_MAC_EV_TX_DONE ",
							" Remarks The event notification system enables the user of the TCP/IP stack to call into the stack for processing only when there are relevant events rather than being forced to periodically call from within a loop If the notification events are nil the interrupt processing will be disabled Otherwise the event notification will be enabled and the interrupts relating to the requested events will be enabled Note that once an event has been caught by the stack ISR (and reported if a notification handler is in place) it will be disabled until the DRV_GMAC_EventAcknowledge() is called ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" Example DRV_GMAC_EventMaskSet( hMac TCPIP_MAC_EV_RX_OVFLOW | TCPIP_MAC_EV_RX_BUFNA true ); ",
							" DRV_GMAC_EventPendingGet Function ",
							" C TCPIP_MAC_EVENT DRV_GMAC_EventPendingGet(DRV_HANDLE hMac); ",
							" Returns The currently stack pending events ",
							" Description This function returns the currently pending Ethernet MAC events Multiple events will be ORed together as they accumulate The stack should perform processing whenever a transmission related event (TCPIP_MAC_EV_RX_PKTPEND TCPIP_MAC_EV_TX_DONE) is present The other non critical events may not be managed by the stack and passed to an user They will have to be eventually acknowledged if re-enabling is needed ",
							" Remarks This is the preferred method to get the current pending MAC events The stack maintains a proper image of the events from their occurrence to their acknowledgment Even with a notification handler in place it's better to use this function to get the current pending events rather than using the events passed by the notification handler which could be stale The events are persistent They shouldn't be re-enabled unless they have been processed and the condition that generated them was removed Re-enabling them immediately without proper processing will have dramatic effects on system performance The returned value is just a momentary value The pending events can change any time ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" Example TCPIP_MAC_EVENT currEvents = DRV_GMAC_EventPendingGet( hMac); ",
							" DRV_GMAC_INDEX_COUNT Macro ",
							" C #define DRV_GMAC_INDEX_COUNT GMAC_NUMBER_OF_MODULES ",
							" Description Ethernet Driver Module Index Count This constant identifies number of valid Ethernet driver indices ",
							" Remarks This constant should be used in place of hard-coded numeric literals This value is derived from part-specific header files defined as part of the peripheral libraries _DRV_GMAC_H Macro File ",
							" DRV_GMAC_Initialize Function ",
							" C SYS_MODULE_OBJ DRV_GMAC_Initialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns a valid handle to a driver object if successful SYS_MODULE_OBJ_INVALID if initialization failed ",
							" Description This function supports the initialization of the PIC32 Ethernet MAC Used by tcpip_module_manager ",
							" Remarks This function initializes the Ethernet controller the MAC and the associated PHY It should be called to be able to schedule any Ethernet transmit or receive operation ",
							" Preconditions None ",
							" DRV_GMAC_LinkCheck Function ",
							" C bool DRV_GMAC_LinkCheck(DRV_HANDLE hMac); ",
							" Returns true - If the link is up false - If the link is not up ",
							" Description This function checks the link status of the associated network interface ",
							" Remarks The function will automatically perform a MAC reconfiguration if the link went up after being down and the PHY auto negotiation is enabled ",
							" Preconditions DRV_GMAC_Initialize must have been called to set up the driver DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" Example Parameters ",
							" Parameters Parameters Description hMac Ethernet MAC client handle ",
							" DRV_GMAC_Open Function ",
							" C DRV_HANDLE DRV_GMAC_Open(const SYS_MODULE_INDEX drvIndex const DRV_IO_INTENT intent); ",
							" Returns DRV_HANDLE - handle (pointer) to MAC client 0 if call failed ",
							" Description This function opens a client instance of the PIC32 MAC Driver Used by tcpip_module_manager ",
							" Remarks The intent parameter is not used in the current implementation and is maintained only for compatibility with the generic driver Open function signature ",
							" Preconditions DRV_GMAC_Initialize() should have been called ",
							" DRV_GMAC_PacketRx Function ",
							" C TCPIP_MAC_PACKET* DRV_GMAC_PacketRx(DRV_HANDLE hMac TCPIP_MAC_RES* pRes const TCPIP_MAC_PACKET_RX_STAT** ppPktStat); ",
							" Returns a valid pointer to an available RX packet 0 if no packet pending/available ",
							" Description This function will return a packet if such a pending packet exists Additional information about the packet is available by providing the pRes and ppPktStat fields ",
							" Remarks Once a pending packet is available in the MAC driver internal RX queues this function will dequeue the packet and hand it over to the MAC driver's client - i e the stack - for further processing The flags for a RX packet are updated by the MAC driver: TCPIP_MAC_PKT_FLAG_RX will be set TCPIP_MAC_PKT_FLAG_UNICAST is set if that packet is a unicast packet TCPIP_MAC_PKT_FLAG_BCAST is set if that packet is a broadcast packet TCPIP_MAC_PKT_FLAG_MCAST is set if that packet is a multicast packet TCPIP_MAC_PKT_FLAG_QUEUED is set TCPIP_MAC_PKT_FLAG_SPLIT is set if the packet has multiple data segments The MAC driver dequeues and return to the caller just one single packet That is the packets are not chained The packet buffers are allocated by the Ethernet MAC driver itself Once the higher level layers in the stack are done with processing the RX packet they have to call the corresponding packet acknowledgment function that tells the MAC driver that it can resume control of that packet Once the stack modules are done processing the RX packets and the acknowledge function is called the MAC driver will reuse the RX packets The MAC driver may use the DRV_GMAC_Process() for obtaining new RX packets if needed ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_PacketTx Function ",
							" C TCPIP_MAC_RES DRV_GMAC_PacketTx(DRV_HANDLE hMac TCPIP_MAC_PACKET * ptrPacket); ",
							" Returns TCPIP_MAC_RES_OK if success a TCPIP_MAC_RES error value if failed ",
							" Description This is the MAC transmit function Using this function a packet is submitted to the MAC driver for transmission ",
							" Remarks The MAC driver supports internal queuing A packet is rejected only if it's not properly formatted Otherwise it will be scheduled for transmission and queued internally if needed Once the packet is scheduled for transmission the MAC driver will set the TCPIP_MAC_PKT_FLAG_QUEUED flag so that the stack is aware that this packet is under processing and cannot be modified Once the packet is transmitted the TCPIP_MAC_PKT_FLAG_QUEUED will be cleared the proper packet acknowledgment result (ackRes) will be set and the packet acknowledgment function (ackFunc) will be called ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle Example Function TCPIP_MAC_RES DRV_GMAC_PacketTx(DRV_HANDLE hMac TCPIP_MAC_PACKET * ptrPacket); d) Event Functions ",
							" DRV_GMAC_ParametersGet Function ",
							" C TCPIP_MAC_RES DRV_GMAC_ParametersGet(DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams); ",
							" Returns TCPIP_MAC_RES_OK if pMacParams updated properly a TCPIP_MAC_RES error code if processing failed for some reason ",
							" Description MAC Parameter Get function TCPIP_MAC_RES DRV_GMAC_ParametersGet(DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams); This is a function that returns the run time parameters of the MAC driver ",
							" Remarks None ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_PowerMode Function ",
							" C bool DRV_GMAC_PowerMode(DRV_HANDLE hMac TCPIP_MAC_POWER_MODE pwrMode); ",
							" Returns true if the call succeeded false if the call failed ",
							" Description This function sets the power mode for the Ethernet MAC ",
							" Remarks This function is not currently supported by the Ethernet MAC and will always return true ",
							" Preconditions DRV_GMAC_Initialize must have been called to set up the driver DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_Process Function ",
							" C TCPIP_MAC_RES DRV_GMAC_Process(DRV_HANDLE hMac); ",
							" Returns TCPIP_MAC_RES_OK if all processing went on OK a TCPIP_MAC_RES error code if processing failed for some reason ",
							" Description This is a function that allows for internal processing by the MAC driver It is meant for processing that cannot be done from within ISR Normally this function will be called in response to an TX and/or RX event signaled by the driver This is specified by the MAC driver at initialization time using TCPIP_MAC_MODULE_CTRL ",
							" Remarks The MAC driver may use the DRV_GMAC_Process() for: Processing its pending TX queues RX buffers replenishing functionality If the number of packets in the RX queue falls below a specified limit the MAC driver may use this function to allocate some extra RX packets Similarly if there are too many allocated RX packets the MAC driver can free some of them ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" Example Parameters ",
							" Parameters Parameters Description hMac Ethernet MAC client handle ",
							" DRV_GMAC_RegisterStatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_GMAC_RegisterStatisticsGet(DRV_HANDLE hMac TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries int nEntries int* pHwEntries); ",
							" Returns TCPIP_MAC_RES_OK if all processing went on OK TCPIP_MAC_RES_OP_ERR error code if function not supported by the driver ",
							" Description This function will get the current value of the statistic registers of the associated MAC controller ",
							" Remarks The reported values are info only and change dynamically ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_Reinitialize Function ",
							" C void DRV_GMAC_Reinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description This function supports re-initialization of the PIC32 Ethernet MAC (opposite of set up) ",
							" Remarks This function is not supported yet ",
							" Preconditions DRV_GMAC_Initialize must have been called to set up the driver ",
							" DRV_GMAC_RxFilterHashTableEntrySet Function ",
							" C TCPIP_MAC_RES DRV_GMAC_RxFilterHashTableEntrySet(DRV_HANDLE hMac const TCPIP_MAC_ADDR* DestMACAddr); ",
							" Returns TCPIP_MAC_RES_OK if success a TCPIP_MAC_RES error value if failed ",
							" Description This function sets the MAC hash table filtering to allow packets sent to DestMACAddr to be received It calculates a CRC-32 using polynomial 0x4C11DB7 over the 6 byte MAC address and then using bits 28:23 of the CRC will set the appropriate bits in the hash table filter registers ( ETHHT0-ETHHT1) The function will enable/disable the Hash Table receive filter if needed ",
							" Remarks Sets the appropriate bit in the ETHHT0/1 registers to allow packets sent to DestMACAddr to be received and enabled the Hash Table receive filter There is no way to individually remove destination MAC addresses from the hash table since it is possible to have a hash collision and therefore multiple MAC addresses relying on the same hash table bit A workaround is to have the stack store each enabled MAC address and to perform the comparison at run time A call to DRV_GMAC_RxFilterHashTableEntrySet() using a 00-00-00-00-00-00 destination MAC address which will clear the entire hash table and disable the hash table filter This will allow the receive of all packets regardless of their destination ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" DRV_GMAC_StatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_GMAC_StatisticsGet(DRV_HANDLE hMac TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics); ",
							" Returns TCPIP_MAC_RES_OK if all processing went on OK TCPIP_MAC_RES_OP_ERR error code if function not supported by the driver ",
							" Description This function will get the current value of the statistic counters maintained by the MAC driver ",
							" Remarks The reported values are info only and change dynamically ",
							" Preconditions DRV_GMAC_Initialize() should have been called DRV_GMAC_Open() should have been called to obtain a valid handle ",
							" Example Function TCPIP_MAC_RES DRV_GMAC_StatisticsGet(DRV_HANDLE hMac TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics); ",
							" DRV_GMAC_Status Function ",
							" C SYS_STATUS DRV_GMAC_Status(SYS_MODULE_OBJ object); ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Description This function provides the current status of the MAC driver module ",
							" Remarks None ",
							" Preconditions The DRV_GMAC_Initialize function must have been called before calling this function ",
							" Example Parameters ",
							" Parameters Parameters Description object Driver object handle returned from DRV_GMAC_Initialize ",
							" DRV_GMAC_Tasks Function ",
							" C void DRV_GMAC_Tasks(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function is used to maintain the driver's internal state machine ",
							" Remarks None ",
							" Preconditions The DRV_GMAC_Initialize routine must have been called for the specified MAC driver instance ",
							" Ethernet MAC Driver Library The PIC32 Ethernet Controller is a bus master module that interfaces with an off-chip PHY to implement a complete Ethernet node in a system The following are some of the key features of this module: Supports 10/100 Ethernet Full-Duplex and Half-Duplex operation Broadcast Multicast and Unicast packets Manual and automatic flow control Supports Auto-MDIX enabled PHYs Reduced Media Independent Interface (RMII) and Media Independent Interface (MII) PHY data interfaces Performance statistics metrics in hardware RAM descriptor based DMA operation for both receive and transmit path Fully configurable interrupts Configurable receive packet filtering using: 64-bit Hash Table 64-byte Pattern Match Magic Packet™ Filtering Runt Packet Detection and Filtering Supports Packet Payload Checksum calculation CRC Check Support for the Serial Management Interface (SMI) (also known as the MIIM interface) is provided by the Ethernet PHY Driver Library Abstraction Model The Ethernet Controller provides the modules needed to implement a 10/100 Mbps Ethernet node using an external Ethernet PHY chip The PHY chip provides a digital-analog interface as part of the Physical Layer and the controller provides the Media Access Controller (MAC)_layer above the PHY As shown in figure below the Ethernet Controller consists of the following modules: Media Access Control (MAC) block: Responsible for implementing the MAC functions of the Ethernet IEEE 802 3 Specification Flow Control (FC) block: Responsible for control of the transmission of PAUSE frames (Reception of PAUSE frames is handled within the MAC ) RX Filter (RXF) block: This module performs filtering on every receive packet to determine whether each packet should be accepted or rejected TX DMA/TX Buffer Management Engine: The TX DMA and TX Buffer Management engines perform data transfers from the memory (using descriptor tables) to the MAC Transmit Interface RX DMA/RX Buffer Management Engine: The RX DMA and RX Buffer Management engines transfer receive packets from the MAC to the memory (using descriptor tables) ETHC_Block For completeness we also need to look at the interface diagram of a representative Ethernet PHY As shown in figure below the PHY has two interfaces one for configuring and managing the PHY (SMI/MIIM) and another for transmit and receive data (RMII or MII) The SMI/MIIM interface is the responsibility of the Ethernet PHY Driver Library When setting up the Ethernet PHY this Ethernet driver calls primitives from the Ethernet PHY Driver library The RMII/MII data interface is the responsibility of the Ethernet MAC Driver Library (this library) SMSC LAN8720 Block Diagram Library Interface Name Description Client Level Functions  DRV_ETHMAC_PIC32MACClose Closes a client instance of the PIC32 MAC Driver DRV_ETHMAC_PIC32MACConfigGet Gets the current MAC driver configuration DRV_ETHMAC_PIC32MACDeinitialize Deinitializes the PIC32 Ethernet MAC DRV_ETHMAC_PIC32MACInitialize Initializes the PIC32 Ethernet MAC DRV_ETHMAC_PIC32MACLinkCheck Checks current link status DRV_ETHMAC_PIC32MACOpen Opens a client instance of the PIC32 MAC Driver DRV_ETHMAC_PIC32MACParametersGet MAC parameter get function DRV_ETHMAC_PIC32MACPowerMode Selects the current power mode for the Ethernet MAC DRV_ETHMAC_PIC32MACProcess MAC periodic processing function DRV_ETHMAC_PIC32MACStatisticsGet Gets the current MAC statistics DRV_ETHMAC_PIC32MACStatus Provides the current status of the MAC driver module DRV_ETHMAC_PIC32MACReinitialize Reinitializes the PIC32 Ethernet MAC DRV_ETHMAC_PIC32MACRegisterStatisticsGet Gets the current MAC hardware statistics registers Receive Functions DRV_ETHMAC_PIC32MACPacketRx This is the MAC receive function DRV_ETHMAC_PIC32MACRxFilterHashTableEntrySet Sets the current MAC hash table receive filter Transmit Functions DRV_ETHMAC_PIC32MACPacketTx MAC driver transmit function Event Functions  DRV_ETHMAC_PIC32MACEventAcknowledge Acknowledges and re-enables processed events DRV_ETHMAC_PIC32MACEventMaskSet Enables/disables the MAC events DRV_ETHMAC_PIC32MACEventPendingGet Returns the currently pending events Other Functions  DRV_ETHMAC_Tasks_ISR Ethernet MAC driver interrupt function DRV_ETHMAC_PIC32MACTasks Maintains the EThernet MAC driver's state machine Data Types and Constants  DRV_ETHMAC_INDEX_COUNT Number of valid Ethernet driver indices DRV_ETHMAC_INDEX_0 Ethernet driver index definitions DRV_ETHMAC_INDEX_1 This is macro DRV_ETHMAC_INDEX_1 ",
							" DRV_ETHMAC_INDEX_0 Macro ",
							" C #define DRV_ETHMAC_INDEX_0 0 #define DRV_ETHMAC_INDEX_1 1 ",
							" Description Ethernet Driver Module Index Numbers These constants provide Ethernet driver index definitions ",
							" Remarks These constants should be used in place of hard-coded numeric literals These values should be passed into the MAC initialization routines to identify the driver instance in use ",
							" DRV_ETHMAC_INDEX_COUNT Macro ",
							" C #define DRV_ETHMAC_INDEX_COUNT ETH_NUMBER_OF_MODULES ",
							" Description Ethernet Driver Module Index Count This constant identifies number of valid Ethernet driver indices ",
							" Remarks This constant should be used in place of hard-coded numeric literals This value is derived from part-specific header files defined as part of the peripheral libraries ",
							" DRV_ETHMAC_PIC32MACConfigGet Function ",
							" C size_t DRV_ETHMAC_PIC32MACConfigGet(DRV_HANDLE hMac void* configBuff size_t buffSize size_t* pConfigSize); ",
							" Returns number of bytes copied into the supplied storage buffer ",
							" Description This function will get the current MAC driver configuration and store it into a supplied buffer ",
							" Remarks None ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACDeinitialize Function ",
							" C void DRV_ETHMAC_PIC32MACDeinitialize(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function supports teardown of the PIC32 Ethernet MAC (opposite of set up) Used by tcpip_module_manager ",
							" Remarks This function deinitializes the Ethernet controller the MAC and the associated PHY It should be called to be release any resources allocated by the initialization and return the MAC and the PHY to the idle/power down state ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize must have been called to set up the driver ",
							" Example Function void DRV_ETHMAC_PIC32MACDeinitialize(SYS_MODULE_OBJ object); ",
							" DRV_ETHMAC_PIC32MACEventAcknowledge Function ",
							" C bool DRV_ETHMAC_PIC32MACEventAcknowledge(DRV_HANDLE hMac TCPIP_MAC_EVENT tcpAckEv); ",
							" Returns true if events acknowledged false if no events to be acknowledged ",
							" Description This function acknowledges and re-enables processed events Multiple events can be ORed together as they are processed together The events acknowledged by this function should be the events that have been retrieved from the stack by calling DRV_ETHMAC_PIC32MACEventPendingGet() or have been passed to the stack by the driver using the registered notification handler and have been processed and have to be re-enabled ",
							" Remarks All events should be acknowledged in order to be re-enabled Some events are fatal errors and should not be acknowledged ( TCPIP_MAC_EV_RX_BUSERR TCPIP_MAC_EV_TX_BUSERR) Driver/stack re-initialization is needed under such circumstances Some events are just system/application behavior and they are intended only as simple info (TCPIP_MAC_EV_RX_OVFLOW TCPIP_MAC_EV_RX_BUFNA TCPIP_MAC_EV_TX_ABORT TCPIP_MAC_EV_RX_ACT) The TCPIP_MAC_EV_RX_FWMARK and TCPIP_MAC_EV_RX_EWMARK events are part of the normal flow control operation (if auto flow control was enabled) They should be enabled alternatively if needed The events are persistent They shouldn't be re-enabled unless they have been processed and the condition that generated them was removed Re-enabling them immediately without proper processing will have dramatic effects on system performance ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" Example DRV_ETHMAC_PIC32MACEventAcknowledge( hMac stackNewEvents ); ",
							" DRV_ETHMAC_PIC32MACEventMaskSet Function ",
							" C bool DRV_ETHMAC_PIC32MACEventMaskSet(DRV_HANDLE hMac TCPIP_MAC_EVENT macEvents bool enable); ",
							" Returns always true operation succeeded ",
							" Description This is a function that enables or disables the events to be reported to the Ethernet MAC client (TCP/IP stack) All events that are to be enabled will be added to the notification process All events that are to be disabled will be removed from the notification process The stack has to catch the events that are notified and process them After that the stack should call DRV_ETHMAC_PIC32MACEventAcknowledge() so that the events can be re-enable The stack should process at least the following transfer events: TCPIP_MAC_EV_RX_PKTPEND TCPIP_MAC_EV_RX_DONE TCPIP_MAC_EV_TX_DONE ",
							" Remarks The event notification system enables the user of the TCP/IP stack to call into the stack for processing only when there are relevant events rather than being forced to periodically call from within a loop If the notification events are nil the interrupt processing will be disabled Otherwise the event notification will be enabled and the interrupts relating to the requested events will be enabled Note that once an event has been caught by the stack ISR (and reported if a notification handler is in place) it will be disabled until the DRV_ETHMAC_PIC32MACEventAcknowledge() is called ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" Example DRV_ETHMAC_PIC32MACEventMaskSet( hMac TCPIP_MAC_EV_RX_OVFLOW | TCPIP_MAC_EV_RX_BUFNA true ); ",
							" DRV_ETHMAC_PIC32MACEventPendingGet Function ",
							" C TCPIP_MAC_EVENT DRV_ETHMAC_PIC32MACEventPendingGet(DRV_HANDLE hMac); ",
							" Returns The currently stack pending events ",
							" Description This function returns the currently pending Ethernet MAC events Multiple events will be ORed together as they accumulate The stack should perform processing whenever a transmission related event (TCPIP_MAC_EV_RX_PKTPEND TCPIP_MAC_EV_TX_DONE) is present The other non critical events may not be managed by the stack and passed to an user They will have to be eventually acknowledged if re-enabling is needed ",
							" Remarks This is the preferred method to get the current pending MAC events The stack maintains a proper image of the events from their occurrence to their acknowledgment Even with a notification handler in place it's better to use this function to get the current pending events rather than using the events passed by the notification handler which could be stale The events are persistent They shouldn't be re-enabled unless they have been processed and the condition that generated them was removed Re-enabling them immediately without proper processing will have dramatic effects on system performance The returned value is just a momentary value The pending events can change any time ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" Example TCPIP_MAC_EVENT currEvents = DRV_ETHMAC_PIC32MACEventPendingGet( hMac); ",
							" DRV_ETHMAC_PIC32MACInitialize Function ",
							" C C SYS_MODULE_OBJ DRV_ETHMAC_PIC32MACInitialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns a valid handle to a driver object if successful SYS_MODULE_OBJ_INVALID if initialization failed ",
							" Description This function supports the initialization of the PIC32 Ethernet MAC Used by tcpip_module_manager ",
							" Remarks This function initializes the Ethernet controller the MAC and the associated PHY It should be called to be able to schedule any Ethernet transmit or receive operation ",
							" Preconditions None ",
							" Example Function SYS_MODULE_OBJ DRV_ETHMAC_PIC32MACInitialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" DRV_ETHMAC_PIC32MACLinkCheck Function ",
							" C bool DRV_ETHMAC_PIC32MACLinkCheck(DRV_HANDLE hMac); ",
							" Returns true - If the link is up false - If the link is not up ",
							" Description This function checks the link status of the associated network interface ",
							" Remarks The function will automatically perform a MAC reconfiguration if the link went up after being down and the PHY auto negotiation is enabled ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize must have been called to set up the driver DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" Example ",
							" Parameters Parameters Description hMac Ethernet MAC client handle ",
							" DRV_ETHMAC_PIC32MACOpen Function ",
							" C DRV_HANDLE DRV_ETHMAC_PIC32MACOpen(const SYS_MODULE_INDEX drvIndex const DRV_IO_INTENT intent); ",
							" Returns DRV_HANDLE - handle (pointer) to MAC client 0 if call failed ",
							" Description This function opens a client instance of the PIC32 MAC Driver Used by tcpip_module_manager ",
							" Remarks The intent parameter is not used in the current implementation and is maintained only for compatibility with the generic driver Open function signature ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called ",
							" DRV_ETHMAC_PIC32MACPacketRx Function ",
							" C TCPIP_MAC_PACKET* DRV_ETHMAC_PIC32MACPacketRx(DRV_HANDLE hMac TCPIP_MAC_RES* pRes const TCPIP_MAC_PACKET_RX_STAT** ppPktStat); ",
							" Returns a valid pointer to an available RX packet 0 if no packet pending/available ",
							" Description This function will return a packet if such a pending packet exists Additional information about the packet is available by providing the pRes and ppPktStat fields ",
							" Remarks Once a pending packet is available in the MAC driver internal RX queues this function will dequeue the packet and hand it over to the MAC driver's client - i e the stack - for further processing The flags for a RX packet are updated by the MAC driver: TCPIP_MAC_PKT_FLAG_RX will be set TCPIP_MAC_PKT_FLAG_UNICAST is set if that packet is a unicast packet TCPIP_MAC_PKT_FLAG_BCAST is set if that packet is a broadcast packet TCPIP_MAC_PKT_FLAG_MCAST is set if that packet is a multicast packet TCPIP_MAC_PKT_FLAG_QUEUED is set TCPIP_MAC_PKT_FLAG_SPLIT is set if the packet has multiple data segments The MAC driver dequeues and return to the caller just one single packet That is the packets are not chained The packet buffers are allocated by the Ethernet MAC driver itself Once the higher level layers in the stack are done with processing the RX packet they have to call the corresponding packet acknowledgment function that tells the MAC driver that it can resume control of that packet Once the stack modules are done processing the RX packets and the acknowledge function is called the MAC driver will reuse the RX packets The MAC driver may use the DRV_ETHMAC_PIC32MACProcess() for obtaining new RX packets if needed ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACPacketTx Function ",
							" C TCPIP_MAC_RES DRV_ETHMAC_PIC32MACPacketTx(DRV_HANDLE hMac TCPIP_MAC_PACKET * ptrPacket); ",
							" Returns TCPIP_MAC_RES_OK if success a TCPIP_MAC_RES error value if failed ",
							" Description This is the MAC transmit function Using this function a packet is submitted to the MAC driver for transmission ",
							" Remarks The MAC driver supports internal queuing A packet is rejected only if it's not properly formatted Otherwise it will be scheduled for transmission and queued internally if needed Once the packet is scheduled for transmission the MAC driver will set the TCPIP_MAC_PKT_FLAG_QUEUED flag so that the stack is aware that this packet is under processing and cannot be modified Once the packet is transmitted the TCPIP_MAC_PKT_FLAG_QUEUED will be cleared the proper packet acknowledgment result (ackRes) will be set and the packet acknowledgment function (ackFunc) will be called ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACParametersGet Function ",
							" C TCPIP_MAC_RES DRV_ETHMAC_PIC32MACParametersGet(DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams); ",
							" Returns TCPIP_MAC_RES_OK if pMacParams updated properly a TCPIP_MAC_RES error code if processing failed for some reason ",
							" Description MAC Parameter Get function TCPIP_MAC_RES DRV_ETHMAC_PIC32MACParametersGet(DRV_HANDLE hMac TCPIP_MAC_PARAMETERS* pMacParams); This is a function that returns the run time parameters of the MAC driver ",
							" Remarks None ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACPowerMode Function ",
							" C bool DRV_ETHMAC_PIC32MACPowerMode(DRV_HANDLE hMac TCPIP_MAC_POWER_MODE pwrMode); ",
							" Returns true if the call succeeded false if the call failed ",
							" Description This function sets the power mode for the Ethernet MAC ",
							" Remarks This function is not currently supported by the Ethernet MAC and will always return true ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize must have been called to set up the driver DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" Example Function bool DRV_ETHMAC_PIC32MACPowerMode( DRV_HANDLE hMac TCPIP_MAC_POWER_MODE pwrMode ) ",
							" DRV_ETHMAC_PIC32MACProcess Function ",
							" C TCPIP_MAC_RES DRV_ETHMAC_PIC32MACProcess(DRV_HANDLE hMac); ",
							" Returns TCPIP_MAC_RES_OK if all processing went on OK a TCPIP_MAC_RES error code if processing failed for some reason ",
							" Description This is a function that allows for internal processing by the MAC driver It is meant for processing that cannot be done from within ISR Normally this function will be called in response to an TX and/or RX event signaled by the driver This is specified by the MAC driver at initialization time using TCPIP_MAC_MODULE_CTRL ",
							" Remarks The MAC driver may use the DRV_ETHMAC_PIC32MACProcess() for: Processing its pending TX queues RX buffers replenishing functionality If the number of packets in the RX queue falls below a specified limit the MAC driver may use this function to allocate some extra RX packets Similarly if there are too many allocated RX packets the MAC driver can free some of them ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" Example Parameters ",
							" Parameters Parameters Description hMac Ethernet MAC client handle ",
							" DRV_ETHMAC_PIC32MACRegisterStatisticsGet Function ",
							" C C TCPIP_MAC_RES DRV_ETHMAC_PIC32MACRegisterStatisticsGet(DRV_HANDLE hMac TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries int nEntries int* pHwEntries); ",
							" Returns TCPIP_MAC_RES_OK if all processing went on OK TCPIP_MAC_RES_OP_ERR error code if function not supported by the driver ",
							" Description This function will get the current value of the statistic registers of the associated MAC controller ",
							" Remarks The reported values are info only and change dynamically ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACReinitialize Function ",
							" C void DRV_ETHMAC_PIC32MACReinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description This function supports re-initialization of the PIC32 Ethernet MAC (opposite of set up) ",
							" Remarks This function is not supported yet ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize must have been called to set up the driver Example Function void DRV_ETHMAC_PIC32MACReinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" DRV_ETHMAC_PIC32MACRxFilterHashTableEntrySet Function ",
							" C drv_ethmac h TCPIP_MAC_RES DRV_ETHMAC_PIC32MACRxFilterHashTableEntrySet(DRV_HANDLE hMac const TCPIP_MAC_ADDR* DestMACAddr); ",
							" Returns TCPIP_MAC_RES_OK if success a TCPIP_MAC_RES error value if failed ",
							" Description This function sets the MAC hash table filtering to allow packets sent to DestMACAddr to be received It calculates a CRC-32 using polynomial 0x4C11DB7 over the 6 byte MAC address and then using bits 28:23 of the CRC will set the appropriate bits in the hash table filter registers ( ETHHT0-ETHHT1) The function will enable/disable the Hash Table receive filter if needed ",
							" Remarks Sets the appropriate bit in the ETHHT0/1 registers to allow packets sent to DestMACAddr to be received and enabled the Hash Table receive filter There is no way to individually remove destination MAC addresses from the hash table since it is possible to have a hash collision and therefore multiple MAC addresses relying on the same hash table bit A workaround is to have the stack store each enabled MAC address and to perform the comparison at run time A call to DRV_ETHMAC_PIC32MACRxFilterHashTableEntrySet() using a 00-00-00-00-00-00 destination MAC address which will clear the entire hash table and disable the hash table filter This will allow the receive of all packets regardless of their destination ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACStatisticsGet Function ",
							" C TCPIP_MAC_RES DRV_ETHMAC_PIC32MACStatisticsGet(DRV_HANDLE hMac TCPIP_MAC_RX_STATISTICS* pRxStatistics TCPIP_MAC_TX_STATISTICS* pTxStatistics); ",
							" Returns TCPIP_MAC_RES_OK if all processing went on OK TCPIP_MAC_RES_OP_ERR error code if function not supported by the driver ",
							" Description This function will get the current value of the statistic counters maintained by the MAC driver ",
							" Remarks The reported values are info only and change dynamically ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called DRV_ETHMAC_PIC32MACOpen() should have been called to obtain a valid handle ",
							" DRV_ETHMAC_PIC32MACStatus Function ",
							" C SYS_STATUS DRV_ETHMAC_PIC32MACStatus(SYS_MODULE_OBJ object); ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Description This function provides the current status of the MAC driver module ",
							" Remarks None ",
							" Preconditions The DRV_ETHMAC_PIC32MACInitialize function must have been called before calling this function ",
							" Example Parameters ",
							" Parameters Parameters Description object Driver object handle returned from DRV_ETHMAC_PIC32MACInitialize ",
							" DRV_ETHMAC_PIC32MACTasks Function ",
							" C void DRV_ETHMAC_PIC32MACTasks(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function is used to maintain the driver's internal state machine ",
							" Remarks None ",
							" Preconditions The DRV_ETHMAC_PIC32MACInitialize routine must have been called for the specified MAC driver instance ",
							" DRV_ETHMAC_Tasks_ISR Function ",
							" C void DRV_ETHMAC_Tasks_ISR(SYS_MODULE_OBJ macIndex); ",
							" Returns None ",
							" Description This is the Ethernet MAC driver interrupt service routine It processes the Ethernet related interrupts and notifies the events to the driver user (the TCP/IP stack) ",
							" Remarks None ",
							" Preconditions DRV_ETHMAC_PIC32MACInitialize() should have been called The TCP/IP stack event notification should be enabled ",
							" Ethernet PHY Driver Library This library provides a software abstraction for configuring external Ethernet PHY devices for use with the on-chip Ethernet Controller Supported Ethernet PHYs: KSZ8041 KSZ8061 KSZ8081 KSZ8091 KSZ8863 LAN8700 LAN8720 LAN8740 LAN9303 Using the Library The user of this driver is the MPLAB Harmony TCP/IP Stack through its Ethernet MAC driver This Ethernet PHY driver is not intended as a system wide driver that the application or other system modules may use It is intended for the sole use of the MPLAB Harmony TCP/IP stack and implements the PHY driver required by the Ethernet MAC However the user can have access to the PHY registers by using the MIIM Driver This topic describes the basic architecture and functionality of the Ethernet PHY driver and is meant for advanced users or TCP/IP Stack driver developers Abstraction Model To understand how this library works you must first understand how an external Ethernet PHY interfaces with the Ethernet Controller As shown in Figure 1 the PHY has two interfaces: The management interface for configuration/control of the PHY known as the Media Independent Interface Management (MIIM) or Serial Management Interface (SMI) The transmit and receive data interface which could be the Media Independent Interface (MIIM) or the Reduced Media Independent Interface (RMII) SMSC LAN8720 Block Diagram The block diagram also shows an interrupt signal (nINT) going to an external interrupt pin on the host device and signals going to on-board LEDs to show link state and link activity The SMI or MIIM interface controls the PHY This control interface is standardized for all PHYs by Clause 22 of the 802 3 standard It provides up to 32 16-bit registers on the PHY The following table provides a summary of all 32 registers Consult the data sheet for the PHY device for the specific bit fields in each register Register Address Register Name Register Type 0 Control Basic 1 Status Basic 2 3 PHY Identifier Extended 4 Auto-Negotiation Advertisement Extended 5 Auto-Negotiation Link Partner Base Page Ability Extended 6 Auto-Negotiation Expansion Extended 7 Auto-Negotiation Next Page Transmit Extended 8 Auto-Negotiation Link Partner Received Next Page Extended 9 MASTER-SLAVE Control Register Extended 10 MASTER-SLAVE Status Register Extended 11-14 Reserved Extended 15 Extended Status Reserved 16-31 Vendor Specific Extended Library Interface Name Description Macros  DRV_ETHPHY_CLIENTS_NUMBER Selects the maximum number of clients DRV_ETHPHY_INDEX Ethernet PHY static index selection DRV_ETHPHY_INSTANCES_NUMBER Selects the maximum number of hardware instances that can be supported by the dynamic driver DRV_ETHPHY_PERIPHERAL_ID Defines an override of the peripheral ID DRV_ETHPHY_NEG_DONE_TMO Value of the PHY negotiation complete time out as per IEEE 802 3 spec DRV_ETHPHY_NEG_INIT_TMO Value of the PHY negotiation initiation time out as per IEEE 802 3 spec DRV_ETHPHY_RESET_CLR_TMO Value of the PHY Reset self clear time out as per IEEE 802 3 spec System Level Functions  DRV_ETHPHY_Initialize Initializes the Ethernet PHY driver DRV_ETHPHY_Deinitialize Deinitializes the specified instance of the Ethernet PHY driver module DRV_ETHPHY_Reinitialize Reinitializes the driver and refreshes any associated hardware settings DRV_ETHPHY_Status Provides the current status of the Ethernet PHY driver module DRV_ETHPHY_Tasks Maintains the driver's state machine and implements its ISR DRV_ETHPHY_Setup Initializes Ethernet PHY configuration and set up procedure Client Level Functions  DRV_ETHPHY_Open Opens the specified Ethernet PHY driver instance and returns a handle to it DRV_ETHPHY_Close Closes an opened instance of the Ethernet PHY driver DRV_ETHPHY_ClientStatus Gets the current client-specific status the Ethernet PHY driver DRV_ETHPHY_Reset Immediately resets the Ethernet PHY DRV_ETHPHY_ClientOperationAbort Aborts a current client operation initiated by the Ethernet PHY driver DRV_ETHPHY_ClientOperationResult Gets the result of a client operation initiated by the Ethernet PHY driver Vendor Functions  DRV_ETHPHY_VendorDataGet Returns the current value of the vendor data DRV_ETHPHY_VendorDataSet Returns the current value of the vendor data DRV_ETHPHY_VendorSMIReadResultGet Reads the result of a previous vendor initiated SMI read transfer with DRV_ETHPHY_VendorSMIReadStart DRV_ETHPHY_VendorSMIReadStart Starts a vendor SMI read transfer Data will be available with DRV_ETHPHY_VendorSMIReadResultGet DRV_ETHPHY_VendorSMIWriteStart Starts a vendor SMI write transfer Other Functions  DRV_ETHPHY_LinkStatusGet Returns the current link status DRV_ETHPHY_PhyAddressGet Returns the PHY address DRV_ETHPHY_HWConfigFlagsGet Returns the current Ethernet PHY hardware MII/RMII and ALTERNATE/DEFAULT configuration flags DRV_ETHPHY_RestartNegotiation Restarts auto-negotiation of the Ethernet PHY link DRV_ETHPHY_NegotiationIsComplete Returns the results of a previously initiated Ethernet PHY negotiation DRV_ETHPHY_NegotiationResultGet Returns the result of a completed negotiation Data Types and Constants  DRV_ETHPHY_CLIENT_STATUS Identifies the client-specific status of the Ethernet PHY driver DRV_ETHPHY_INIT Contains all the data necessary to initialize the Ethernet PHY device DRV_ETHPHY_INDEX_0 Ethernet PHY driver index definitions DRV_ETHPHY_INDEX_1 This is macro DRV_ETHPHY_INDEX_1 DRV_ETHPHY_INDEX_COUNT Number of valid Ethernet PHY driver indices DRV_ETHPHY_NEGOTIATION_RESULT Contains all the data necessary to get the Ethernet PHY negotiation result DRV_ETHPHY_SETUP Contains all the data necessary to set up the Ethernet PHY device DRV_ETHPHY_VENDOR_MDIX_CONFIGURE Pointer to function that configures the MDIX mode for the Ethernet PHY DRV_ETHPHY_VENDOR_MII_CONFIGURE Pointer to function to configure the Ethernet PHY in one of the MII/RMII operation modes DRV_ETHPHY_VENDOR_SMI_CLOCK_GET Pointer to a function to return the SMI/MIIM maximum clock speed in Hz of the Ethernet PHY DRV_ETHPHY_OBJECT_BASE_TYPE Identifies the base interface of a Ethernet PHY driver DRV_ETHPHY_CONFIG_FLAGS Defines configuration options for the Ethernet PHY DRV_ETHPHY_LINK_STATUS Defines the possible status flags of PHY Ethernet link DRV_ETHPHY_OBJECT Identifies the interface of a Ethernet PHY vendor driver DRV_ETHPHY_OBJECT_BASE Identifies the base interface of a Ethernet PHY driver DRV_ETHPHY_VENDOR_WOL_CONFIGURE Pointer to a function to configure the PHY WOL functionality _DRV_ETHPHY_CONFIG_H This is macro _DRV_ETHPHY_CONFIG_H _DRV_ETHPHY_H This is macro _DRV_ETHPHY_H DRV_ETHPHY_RESET_FUNCTION Pointer to a function to perform an additional PHY reset DRV_ETHPHY_RESULT Defines the possible results of Ethernet operations that can succeed or fail DRV_ETHPHY_INTERFACE_INDEX Defines the index type for a PHY interface DRV_ETHPHY_INTERFACE_TYPE Defines the type of interface a PHY supports ",
							" DRV_ETHPHY_CLIENT_STATUS Enumeration ",
							" C C typedef enum { DRV_ETHPHY_CLIENT_STATUS_ERROR DRV_ETHPHY_CLIENT_STATUS_CLOSED DRV_ETHPHY_CLIENT_STATUS_BUSY DRV_ETHPHY_CLIENT_STATUS_READY } DRV_ETHPHY_CLIENT_STATUS; ",
							" Description Ethernet PHY Driver Client Status This enumeration identifies the client-specific status of the Ethernet PHY driver DRV_ETHPHY_CLIENT_STATUS_ERROR - Unspecified error condition DRV_ETHPHY_CLIENT_STATUS_CLOSED - Client is not open DRV_ETHPHY_CLIENT_STATUS_BUSY - An operation is currently in progress DRV_ETHPHY_CLIENT_STATUS_READY - Up and running no operations running ",
							" Remarks None ",
							" DRV_ETHPHY_ClientOperationAbort Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_ClientOperationAbort(DRV_HANDLE handle); ",
							" Returns DRV_ETHPHY_RESULT value describing the current operation result: DRV_ETHPHY_RES_OK for success; operation has been aborted an DRV_ETHPHY_RESULT error code if the operation failed ",
							" Description Aborts a current client operation initiated by the Ethernet PHY driver ",
							" Remarks None ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid opened device handle A driver operation was started ",
							" DRV_ETHPHY_ClientOperationResult Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_ClientOperationResult(DRV_HANDLE handle); ",
							" Returns DRV_ETHPHY_RESULT value describing the current operation result: DRV_ETHPHY_RES_OK for success; operation has been completed successfully DRV_ETHPHY_RES_PENDING operation is in progress an DRV_ETHPHY_RESULT error code if the operation failed ",
							" Description Returns the result of a client operation initiated by the Ethernet PHY driver ",
							" Remarks This function will not block for hardware access and will immediately return the current status This function returns the result of the last driver operation It will return DRV_ETHPHY_RES_PENDING if an operation is still in progress Otherwise a DRV_ETHPHY_RESULT describing the operation outcome ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid opened device handle A driver operation was started and completed ",
							" DRV_ETHPHY_CLIENTS_NUMBER Macro ",
							" C #define DRV_ETHPHY_CLIENTS_NUMBER 1 ",
							" Description Ethernet PHY Maximum Number of Clients This definition select the maximum number of clients that the Ethernet PHY driver can support at run time Not defining it means using a single client ",
							" Remarks The MAC driver is the only client of the PHY driver and the number of clients should always be 1 ",
							" DRV_ETHPHY_ClientStatus Function ",
							" C DRV_ETHPHY_CLIENT_STATUS DRV_ETHPHY_ClientStatus(DRV_HANDLE handle); ",
							" Returns DRV_ETHPHY_CLIENT_STATUS value describing the current status of the driver ",
							" Description This function gets the client-specific status of the Ethernet PHY driver associated with the given handle ",
							" Remarks This function will not block for hardware access and will immediately return the current status This function has to be used to check that a driver operation has completed It will return DRV_ETHPHY_CLIENT_STATUS_BUSY when an operation is in progress It will return DRV_ETHPHY_CLIENT_STATUS_READY when the operation has completed ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid opened device handle } ",
							" DRV_ETHPHY_Close Function ",
							" C void DRV_ETHPHY_Close(DRV_HANDLE handle); ",
							" Returns None ",
							" Description This function closes an opened instance of the Ethernet PHY driver invalidating the handle ",
							" Remarks After calling this routine the handle passed in \"handle\" must not be used with any of the remaining driver routines A new handle must be obtained by calling DRV_ETHPHY_Open before the caller may use the driver again Usually there is no need for the driver client to verify that the Close operation has completed ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called for the specified Ethernet PHY driver instance DRV_ETHPHY_Open must have been called to obtain a valid opened device handle ",
							" DRV_ETHPHY_CONFIG_FLAGS Enumeration ",
							" C typedef enum { DRV_ETHPHY_CFG_RMII DRV_ETHPHY_CFG_MII DRV_ETHPHY_CFG_ALTERNATE DRV_ETHPHY_CFG_DEFAULT DRV_ETHPHY_CFG_AUTO } DRV_ETHPHY_CONFIG_FLAGS; ",
							" Members Members Description DRV_ETHPHY_CFG_RMII RMII data interface in configuration fuses DRV_ETHPHY_CFG_MII MII data interface in configuration fuses DRV_ETHPHY_CFG_ALTERNATE Configuration fuses is ALT DRV_ETHPHY_CFG_DEFAULT Configuration fuses is DEFAULT DRV_ETHPHY_CFG_AUTO Use the fuses configuration to detect if you are RMII/MII and ALT/DEFAULT configuration ",
							" Description Ethernet PHY Configuration Flags This enumeration defines configuration options for the Ethernet PHY Used by: DRV_ETHPHY_MIIConfigure DRV_ETHPHY_INIT structure DRV_ETHPHY_Setup Returned by: DRV_ETHPHY_HWConfigFlagsGet ",
							" DRV_ETHPHY_Deinitialize Function ",
							" C void DRV_ETHPHY_Deinitialize(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function deinitializes the specified instance of the Ethernet PHY driver module disabling its operation (and any hardware) and invalidates all of the internal data ",
							" Remarks Once the Initialize operation has been called the Deinitialize operation must be called before the Initialize operation can be called again ",
							" Preconditions The DRV_ETHPHY_Initialize function must have been called before calling this routine and a valid SYS_MODULE_OBJ must have been returned ",
							" DRV_ETHPHY_HWConfigFlagsGet Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_HWConfigFlagsGet(DRV_HANDLE handle DRV_ETHPHY_CONFIG_FLAGS* pFlags); ",
							" Returns DRV_ETHPHY_RES_OK - if the configuration flags successfully stored at pFlags DRV_ETHPHY_RESULT error code otherwise ",
							" Description This function returns the current Ethernet PHY hardware MII/RMII and ALTERNATE/DEFAULT configuration flags from the Device Configuration Fuse bits ",
							" Remarks None ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" Parameters Parameters Description pFlags address to store the hardware configuration ",
							" DRV_ETHPHY_INDEX_0 Macro ",
							" C #define DRV_ETHPHY_INDEX_0 0 #define DRV_ETHPHY_INDEX_1 1 ",
							" Description Ethernet PHY Driver Module Index Numbers These constants provide the Ethernet PHY driver index definitions ",
							" Remarks These constants should be used in place of hard-coded numeric literals These values should be passed into the DRV_ETHPHY_Initialize and DRV_ETHPHY_Open routines to identify the driver instance in use ",
							" DRV_ETHPHY_INDEX_COUNT Macro ",
							" C #define DRV_ETHPHY_INDEX_COUNT 1 ",
							" Description Ethernet PHY Driver Module Index Count This constant identifies the number of valid Ethernet PHY driver indices ",
							" Remarks This constant should be used in place of hard-coded numeric literals This value is derived from part-specific header files defined as part of the peripheral libraries ",
							" DRV_ETHPHY_INIT Structure ",
							" C struct DRV_ETHPHY_INIT { SYS_MODULE_INIT moduleInit; uintptr_t ethphyId; uint16_t phyAddress; DRV_ETHPHY_CONFIG_FLAGS phyFlags; const DRV_ETHPHY_OBJECT* pPhyObject; DRV_ETHPHY_RESET_FUNCTION resetFunction; const struct DRV_MIIM_OBJECT_BASE* pMiimObject; const struct DRV_MIIM_INIT* pMiimInit; SYS_MODULE_INDEX miimIndex; }; ",
							" Members Members Description SYS_MODULE_INIT moduleInit; System module initialization uintptr_t ethphyId; Identifies peripheral (PLIB-level) ID uint16_t phyAddress; PHY address as configured on the board All PHYs respond to address 0 DRV_ETHPHY_CONFIG_FLAGS phyFlags; PHY configuration const DRV_ETHPHY_OBJECT* pPhyObject; Non-volatile pointer to the PHY object providing vendor functions for this PHY DRV_ETHPHY_RESET_FUNCTION resetFunction; Function to be called when the PHY is reset/initialized Could be NULL if no special reset functionality needed - default const struct DRV_MIIM_OBJECT_BASE* pMiimObject; Non-volatile pointer to the DRV_MIIM object providing MIIM access for this PHY Could be NULL if the MIIM driver is not used const struct DRV_MIIM_INIT* pMiimInit; Non-volatile pointer to the DRV_MIIM initialization data Could be NULL if the MIIM driver is not used SYS_MODULE_INDEX miimIndex; MIIM module index to be used Not needed if the MIIM driver is not used ",
							" Description Ethernet PHY Device Driver Initialization Data This data structure contains all the data necessary to initialize the Ethernet PHY device ",
							" Remarks A pointer to a structure of this format containing the desired initialization data must be passed into the DRV_ETHPHY_Initialize routine ",
							" DRV_ETHPHY_Initialize Function ",
							" C SYS_MODULE_OBJ DRV_ETHPHY_Initialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns a valid handle to a driver object if successful SYS_MODULE_OBJ_INVALID if initialization failed ",
							" Description This function initializes the Ethernet PHY driver making it ready for clients to open and use it ",
							" Remarks This function must be called before any other Ethernet PHY routine is called This function should only be called once during system initialization unless DRV_ETHPHY_Deinitialize is called to deinitialize the driver instance The returned object must be passed as argument to DRV_ETHPHY_Reinitialize DRV_ETHPHY_Deinitialize DRV_ETHPHY_Tasks and DRV_ETHPHY_Status routines ",
							" Preconditions None ",
							" Example DRV_ETHPHY_INIT init; SYS_MODULE_OBJ objectHandle; // Populate the Ethernet PHY initialization structure init phyId = ETHPHY_ID_0; // Populate the Ethernet PHY initialization structure init phyId = ETHPHY_ID_2; init pPhyObject = DRV_ETHPHY_OBJECT_SMSC_LAN8720; // Do something objectHandle = DRV_ETHPHY_Initialize(DRV_ETHPHY_INDEX_0 (SYS_MODULE_INIT*) init); if (SYS_MODULE_OBJ_INVALID == objectHandle) { // Handle error } ",
							" DRV_ETHPHY_INSTANCES_NUMBER Macro ",
							" C #define DRV_ETHPHY_INSTANCES_NUMBER 1 ",
							" Description Ethernet PHY hardware instance configuration This definition selects the maximum number of hardware instances that can be supported by the dynamic driver Not defining it means using a static driver ",
							" Remarks None ",
							" DRV_ETHPHY_INTERFACE_INDEX Enumeration ",
							" C typedef enum { DRV_ETHPHY_INF_IDX_ALL_EXTERNAL DRV_ETHPHY_INF_IDX_PORT_0 DRV_ETHPHY_INF_IDX_PORT_1 DRV_ETHPHY_INF_IDX_PORT_2 DRV_ETHPHY_INF_IDX_PORT_3 DRV_ETHPHY_INF_IDX_PORT_4 DRV_ETHPHY_INF_IDX_PORT_5 } DRV_ETHPHY_INTERFACE_INDEX; ",
							" Members Members Description DRV_ETHPHY_INF_IDX_ALL_EXTERNAL All External Interfaces DRV_ETHPHY_INF_IDX_PORT_0 Port 0 interface DRV_ETHPHY_INF_IDX_PORT_1 Port 1 interface DRV_ETHPHY_INF_IDX_PORT_2 Port 2 interface DRV_ETHPHY_INF_IDX_PORT_3 Port 3 interface DRV_ETHPHY_INF_IDX_PORT_4 Port 4 interface DRV_ETHPHY_INF_IDX_PORT_5 Port 5 interface ",
							" Description Ethernet PHY Interface Index This enumeration defines the index type supported by the PHY Used by: DRV_ETHPHY_PhyAddressGet DRV_ETHPHY_RestartNegotiation DRV_ETHPHY_NegotiationIsComplete DRV_ETHPHY_LinkStatusGet ",
							" DRV_ETHPHY_INTERFACE_TYPE Enumeration ",
							" C typedef enum { DRV_ETHPHY_INF_TYPE_EXTERNAL DRV_ETHPHY_INF_TYPE_INTERNAL DRV_ETHPHY_INF_TYPE_NOT_SUPPORTED } DRV_ETHPHY_INTERFACE_TYPE; ",
							" Members Members Description DRV_ETHPHY_INF_TYPE_EXTERNAL External Interface DRV_ETHPHY_INF_TYPE_INTERNAL Internal Interface DRV_ETHPHY_INF_TYPE_NOT_SUPPORTED Not Supported ",
							" Description Ethernet PHY Interface Type This enumeration defines the type of interface supported by the PHY Returned by: DRV_ETHPHY_GetInterfaceType ",
							" DRV_ETHPHY_LINK_STATUS Enumeration ",
							" C typedef enum { DRV_ETHPHY_LINK_ST_DOWN DRV_ETHPHY_LINK_ST_UP DRV_ETHPHY_LINK_ST_LP_NEG_UNABLE DRV_ETHPHY_LINK_ST_REMOTE_FAULT DRV_ETHPHY_LINK_ST_PDF DRV_ETHPHY_LINK_ST_LP_PAUSE DRV_ETHPHY_LINK_ST_LP_ASM_DIR DRV_ETHPHY_LINK_ST_NEG_TMO DRV_ETHPHY_LINK_ST_NEG_FATAL_ERR } DRV_ETHPHY_LINK_STATUS; ",
							" Members Members Description DRV_ETHPHY_LINK_ST_DOWN No connection to the LinkPartner DRV_ETHPHY_LINK_ST_UP Link is up DRV_ETHPHY_LINK_ST_LP_NEG_UNABLE LP non negotiation able DRV_ETHPHY_LINK_ST_REMOTE_FAULT LP fault during negotiation DRV_ETHPHY_LINK_ST_PDF Parallel Detection Fault encountered (when DRV_ETHPHY_LINK_ST_LP_NEG_UNABLE) DRV_ETHPHY_LINK_ST_LP_PAUSE LP supports symmetric pause DRV_ETHPHY_LINK_ST_LP_ASM_DIR LP supports asymmetric TX/RX pause operation DRV_ETHPHY_LINK_ST_NEG_TMO LP not there DRV_ETHPHY_LINK_ST_NEG_FATAL_ERR An unexpected fatal error occurred during the negotiation ",
							" Description Ethernet PHY Device Link Status Codes This enumeration defines the flags describing the status of the PHY Ethernet link ",
							" Remarks Multiple flags can be set ",
							" DRV_ETHPHY_LinkStatusGet Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_LinkStatusGet(DRV_HANDLE handle DRV_ETHPHY_INTERFACE_INDEX portIndex DRV_ETHPHY_LINK_STATUS* pLinkStat bool refresh); ",
							" Returns DRV_ETHPHY_RES_PENDING for ongoing in progress operation an DRV_ETHPHY_RESULT error code if the link status get procedure failed ",
							" Description This function returns the current link status ",
							" Remarks This function reads the Ethernet PHY to get current link status If refresh is specified then if the link is down a second read will be performed to return the current link status Use DRV_ETHPHY_ClientStatus() and DRV_ETHPHY_ClientOperationResult() to check when the operation was completed and its outcome ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" DRV_ETHPHY_NEG_DONE_TMO Macro ",
							" C #define DRV_ETHPHY_NEG_DONE_TMO (2000) ",
							" Description Ethernet PHY Negotiation Complete time out This definition sets the time out of the PHY negotiation complete in ms ",
							" Remarks See IEEE 802 3 Clause 28 Table 28-9 autoneg_wait_timer value (max 1s) ",
							" DRV_ETHPHY_NEG_INIT_TMO Macro ",
							" C #define DRV_ETHPHY_NEG_INIT_TMO (1) ",
							" Description Ethernet PHY Negotiation Initiation time out This definition sets the time out of the PHY negotiation initiation in ms ",
							" Remarks None ",
							" DRV_ETHPHY_NEGOTIATION_RESULT Structure ",
							" C typedef struct { DRV_ETHPHY_LINK_STATUS linkStatus; TCPIP_ETH_OPEN_FLAGS linkFlags; TCPIP_ETH_PAUSE_TYPE pauseType; } DRV_ETHPHY_NEGOTIATION_RESULT; ",
							" Members Members Description DRV_ETHPHY_LINK_STATUS linkStatus; link status after a completed negotiation TCPIP_ETH_OPEN_FLAGS linkFlags; the negotiation result flags TCPIP_ETH_PAUSE_TYPE pauseType; pause type supported by the link partner ",
							" Description Ethernet PHY Device Driver Negotiation result Data Contains all the data necessary to get the Ethernet PHY negotiation result ",
							" Remarks A pointer to a structure of this format must be passed into the DRV_ETHPHY_NegotiationResultGet routine ",
							" DRV_ETHPHY_NegotiationIsComplete Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_NegotiationIsComplete(DRV_HANDLE handle DRV_ETHPHY_INTERFACE_INDEX portIndex bool waitComplete); ",
							" Returns DRV_ETHPHY_RES_PENDING operation is ongoing an DRV_ETHPHY_RESULT error code if the procedure failed ",
							" Description This function returns the results of a previously initiated Ethernet PHY negotiation ",
							" Remarks Use DRV_ETHPHY_ClientStatus() and DRV_ETHPHY_ClientOperationResult() to check when the operation was completed and its outcome When operation is completed but negotiation has failed DRV_ETHPHY_ClientOperationResult will return: DRV_ETHPHY_RES_NEGOTIATION_INACTIVE if no negotiation in progress DRV_ETHPHY_RES_NEGOTIATION_NOT_STARTED if negotiation not yet started yet (means time out if waitComplete was requested) DRV_ETHPHY_RES_NEGOTIATION_ACTIVE if negotiation ongoing (means time out if waitComplete was requested) See also DRV_ETHPHY_NegotiationResultGet ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY DRV_ETHPHY_RestartNegotiation should have been called ",
							" DRV_ETHPHY_NegotiationResultGet Function ",
							" C C DRV_ETHPHY_RESULT DRV_ETHPHY_NegotiationResultGet(DRV_HANDLE handle DRV_ETHPHY_INTERFACE_INDEX portIndex DRV_ETHPHY_NEGOTIATION_RESULT* pNegResult); ",
							" Returns DRV_ETHPHY_RES_PENDING operation is ongoing an DRV_ETHPHY_RESULT error code if the procedure failed ",
							" Description This function returns the PHY negotiation data gathered after a completed negotiation ",
							" Remarks Use DRV_ETHPHY_ClientStatus() and DRV_ETHPHY_ClientOperationResult() to check when the operation was completed and its outcome When operation is completed but negotiation has failed DRV_ETHPHY_ClientOperationResult will return: DRV_ETHPHY_RES_NEGOTIATION_INACTIVE if no negotiation in progress DRV_ETHPHY_RES_NEGOTIATION_NOT_STARTED if negotiation not yet started yet (means time out if waitComplete was requested) DRV_ETHPHY_RES_NEGOTIATION_ACTIVE if negotiation ongoing The returned value for the negotiation flags is valid only if the negotiation was completed successfully ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DR_ETHPHY_Setup must have been called to properly configure the PHY DRV_ETHPHY_RestartNegotiation and DRV_ETHPHY_NegotiationIsComplete should have been called ",
							" DRV_ETHPHY_OBJECT Structure ",
							" C typedef struct { DRV_ETHPHY_VENDOR_MII_CONFIGURE miiConfigure; DRV_ETHPHY_VENDOR_MDIX_CONFIGURE mdixConfigure; DRV_ETHPHY_VENDOR_SMI_CLOCK_GET smiClockGet; DRV_ETHPHY_VENDOR_WOL_CONFIGURE wolConfigure; } DRV_ETHPHY_OBJECT; ",
							" Members Members Description DRV_ETHPHY_VENDOR_MII_CONFIGURE miiConfigure; PHY driver function to configure the operation mode: MII/RMII DRV_ETHPHY_VENDOR_MDIX_CONFIGURE mdixConfigure; PHY driver function to configure the MDIX mode DRV_ETHPHY_VENDOR_SMI_CLOCK_GET smiClockGet; PHY driver function to get the SMI clock rate DRV_ETHPHY_VENDOR_WOL_CONFIGURE wolConfigure; PHY driver function to configure the WOL functionality ",
							" Description Ethernet PHY Driver Vendor Object This data structure identifies the required interface of the Ethernet PHY driver Any PHY vendor driver has to export this interface ",
							" Remarks The PHY driver consists of 2 modules: the main/base PHY driver which uses standard IEEE PHY registers the vendor specific functionality This object provides vendor specific functionality Every PHY driver has to expose this vendor specific functionality as part of its interface ",
							" DRV_ETHPHY_OBJECT_BASE Structure ",
							" C typedef struct DRV_ETHPHY_OBJECT_BASE_TYPE { } DRV_ETHPHY_OBJECT_BASE; ",
							" Description Ethernet PHY Driver Base Object This data structure identifies the required interface of the Ethernet PHY driver Any dynamic PHY driver has to export this interface ",
							" Remarks The PHY driver consists of 2 modules: the main/base PHY driver which uses standard IEEE PHY registers the vendor specific functionality This object provides the base functionality Every dynamic PHY driver has to expose this basic functionality as part of its interface See above the description of each function that's part of the base PHY driver ",
							" DRV_ETHPHY_Open Function ",
							" C DRV_HANDLE DRV_ETHPHY_Open(const SYS_MODULE_INDEX drvIndex const DRV_IO_INTENT intent); ",
							" Returns valid open-instance handle if successful (a number identifying both the caller and the module instance) DRV_HANDLE_INVALID if an error occurs ",
							" Description This function opens the specified Ethernet PHY driver instance and provides a handle that must be provided to all other client-level operations to identify the caller and the instance of the driver ",
							" Remarks The handle returned is valid until the DRV_ETHPHY_Close routine is called This function will NEVER block waiting for hardware The intent parameter is not used The PHY driver implements a non-blocking behavior ",
							" Preconditions The DRV_ETHPHY_Initialize function must have been called before calling this function } ",
							" DRV_ETHPHY_PERIPHERAL_ID Macro ",
							" C #define DRV_ETHPHY_PERIPHERAL_ID ETHPHY_ID_1 ",
							" Description Ethernet PHY Peripheral ID Selection Defines an override of the peripheral ID using macros ",
							" Remarks Some devices also support ETHPHY_ID_0 ",
							" DRV_ETHPHY_PhyAddressGet Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_PhyAddressGet(DRV_HANDLE handle DRV_ETHPHY_INTERFACE_INDEX portIndex int* pPhyAddress); ",
							" Returns DRV_ETHPHY_RES_OK - operation successful and the PHY address stored at DRV_ETHPHY_RES_HANDLE_ERR - passed in handle was invalid pPhyAddress ",
							" Description This function returns the current PHY address as set by the DRV_ETHPHY_Setup procedure ",
							" Remarks None ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" DRV_ETHPHY_Reinitialize Function ",
							" C void DRV_ETHPHY_Reinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description This function reinitializes the driver and refreshes any associated hardware settings using the initialization data given but it will not interrupt any ongoing operations ",
							" Remarks This function can be called multiple times to reinitialize the module This operation can be used to refresh any supported hardware registers as specified by the initialization data or to change the power state of the module ",
							" Preconditions The DRV_ETHPHY_Initialize function must have been called before calling this routine and a valid SYS_MODULE_OBJ must have been returned ",
							" Example DRV_ETHPHY_INIT init; SYS_MODULE_OBJ objectHandle; // Populate the Ethernet PHY initialization structure init phyId = ETHPHY_ID_2; init pPhyObject = DRV_ETHPHY_OBJECT_SMSC_LAN8720; ",
							" DRV_ETHPHY_Reset Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_Reset(DRV_HANDLE handle bool waitComplete); ",
							" Returns DRV_ETHPHY_RES_PENDING for ongoing in progress operation DRV_ETHPHY_RES_OPERATION_ERR - invalid parameter or operation in the current context ",
							" Description This function immediately resets the Ethernet PHY optionally waiting for a reset to complete ",
							" Remarks Use DRV_ETHPHY_ClientStatus() and DRV_ETHPHY_ClientOperationResult() to check when the operation was completed and its outcome When operation is completed but failed DRV_ETHPHY_ClientOperationResult will return: DRV_ETHPHY_RES_DTCT_ERR if the PHY failed to respond ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" DRV_ETHPHY_RESET_CLR_TMO Macro ",
							" C #define DRV_ETHPHY_RESET_CLR_TMO (500) ",
							" Description Ethernet PHY Reset self clear time out This definition sets the time out of the PHY Reset self clear in ms ",
							" Remarks See IEEE 802 3 Clause 22 Table 22-7 and paragraph \"22 2 4 1 1 Reset\" (max 0 5s) ",
							" DRV_ETHPHY_RESET_FUNCTION Type ",
							" C typedef void (* DRV_ETHPHY_RESET_FUNCTION)(const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj); ",
							" Returns None ",
							" Description Pointer to Function: typedef void (* DRV_ETHPHY_RESET_FUNCTION) ( const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj); This type describes a pointer to a function that is called by the driver before starting the detection and initialization process to the PHY - as a result of the DRV_ETHPHY_Setup call ",
							" Remarks The PHY driver will call this function as part of its detection and initialization procedure It can be used for implementing extra steps that the user needs before the driver starts talking to the PHY For example if a hard reset needs to be applied to the PHY The function should be short and not block It is meant just for short I/O operations not for lengthy processing ",
							" Preconditions None ",
							" DRV_ETHPHY_RestartNegotiation Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_RestartNegotiation(DRV_HANDLE handle DRV_ETHPHY_INTERFACE_INDEX portIndex); ",
							" Returns DRV_ETHPHY_RES_PENDING operation has been scheduled successfully an DRV_ETHPHY_RESULT error code if the procedure failed ",
							" Description This function restarts auto-negotiation of the Ethernet PHY link ",
							" Remarks Use DRV_ETHPHY_ClientStatus() and DRV_ETHPHY_ClientOperationResult() to check when the operation was completed and its outcome ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" DRV_ETHPHY_RESULT Enumeration ",
							" C typedef enum { } DRV_ETHPHY_RESULT; ",
							" Description Ethernet PHY Driver Operation Result * PHY Driver Operation Result Codes This enumeration defines the possible results of any of the PHY driver operations that have the possibility of failing This result should be checked to ensure that the operation achieved the desired result ",
							" DRV_ETHPHY_SETUP Structure ",
							" C typedef struct { int phyAddress; TCPIP_ETH_OPEN_FLAGS openFlags; DRV_ETHPHY_CONFIG_FLAGS configFlags; TCPIP_ETH_PAUSE_TYPE macPauseType; DRV_ETHPHY_RESET_FUNCTION resetFunction; } DRV_ETHPHY_SETUP; ",
							" Members Members Description int phyAddress; the address the PHY is configured for TCPIP_ETH_OPEN_FLAGS openFlags; the capability flags: FD/HD 100/100Mbps etc DRV_ETHPHY_CONFIG_FLAGS configFlags; configuration flags: MII/RMII I/O setup TCPIP_ETH_PAUSE_TYPE macPauseType; MAC requested pause type DRV_ETHPHY_RESET_FUNCTION resetFunction; If NULL function to be called when the PHY is reset/initialized ",
							" Description Ethernet PHY Device Driver Set up Data This data structure contains all the data necessary to configure the Ethernet PHY device ",
							" Remarks A pointer to a structure of this format containing the desired initialization data must be passed into the DRV_ETHPHY_Setup routine ",
							" DRV_ETHPHY_Status ",
							" C SYS_STATUS DRV_ETHPHY_Status(SYS_MODULE_OBJ object); ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Description This function provides the current status of the Ethernet PHY driver module ",
							" Remarks Any value greater than SYS_STATUS_READY is also a normal running state in which the driver is ready to accept new operations SYS_STATUS_BUSY - Indicates that the driver is busy with a previous system level operation and cannot start another SYS_STATUS_ERROR - Indicates that the driver is in an error state Any value less than SYS_STATUS_ERROR is also an error state SYS_MODULE_DEINITIALIZED - Indicates that the driver has been deinitialized The this operation can be used to determine when any of the driver's module level operations has completed If the status operation returns SYS_STATUS_BUSY the a previous operation has not yet completed Once the status operation returns SYS_STATUS_READY any previous operations have completed The value of SYS_STATUS_ERROR is negative (-1) Any value less than that is also an error state This function will NEVER block waiting for hardware If the Status operation returns an error value the error may be cleared by calling the reinitialize operation If that fails the deinitialize operation will need to be called followed by the initialize operation to return to normal operations ",
							" Preconditions The DRV_ETHPHY_Initialize function must have been called before calling this function ",
							" Parameters Parameters Description object Driver object handle returned from DRV_ETHPHY_Initialize ",
							" DRV_ETHPHY_Tasks Function ",
							" C void DRV_ETHPHY_Tasks(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function is used to maintain the driver's internal state machine and implement its ISR for interrupt-driven implementations ",
							" Remarks This function is normally not called directly by an application It is called by the system's Tasks routine (SYS_Tasks) This function will never block or access any resources that may cause it to block ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called for the specified Ethernet PHY driver instance ",
							" Example SYS_MODULE_OBJ object; // Returned from DRV_ETHPHY_Initialize while (true) { DRV_ETHPHY_Tasks (object); // Do other tasks } ",
							" DRV_ETHPHY_VENDOR_MDIX_CONFIGURE Type ",
							" C typedef DRV_ETHPHY_RESULT (* DRV_ETHPHY_VENDOR_MDIX_CONFIGURE)(const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle TCPIP_ETH_OPEN_FLAGS oFlags); ",
							" Returns DRV_ETHPHY_RES_OK - if success operation complete DRV_ETHPHY_RES_PENDING - if function needs to be called again 0 - on failure: configuration not supported or some other error ",
							" Description Pointer To Function: typedef DRV_ETHPHY_RESULT (* DRV_ETHPHY_VENDOR_MDIX_CONFIGURE) ( const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle TCPIP_ETH_OPEN_FLAGS oFlags ); This type describes a pointer to a function that configures the MDIX mode for the Ethernet PHY This configuration function is PHY specific and every PHY driver has to provide their own implementation ",
							" Remarks The PHY driver consists of 2 modules: the main/base PHY driver which uses standard IEEE PHY registers the vendor specific functionality This function provides vendor specific functionality Every PHY driver has to expose this vendor specific function as part of its interface Traditionally the name used for this function is DRV_EXTPHY_MDIXConfigure but any name can be used The function can use all the vendor specific functions to store/retrieve specific data or start SMI transactions (see Vendor Interface Routines) The function should not block but return DRV_ETHPHY_RES_PENDING if waiting for SMI transactions ",
							" Preconditions Communication to the PHY should have been established ",
							" DRV_ETHPHY_VENDOR_MII_CONFIGURE Type ",
							" C typedef DRV_ETHPHY_RESULT (* DRV_ETHPHY_VENDOR_MII_CONFIGURE)(const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle DRV_ETHPHY_CONFIG_FLAGS cFlags); ",
							" Returns DRV_ETHPHY_RES_OK - if success operation complete DRV_ETHPHY_RES_PENDING - if function needs to be called again 0 - on failure: configuration not supported or some other error ",
							" Description Pointer To Function: typedef DRV_ETHPHY_RESULT (* DRV_ETHPHY_VENDOR_MII_CONFIGURE) (const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle DRV_ETHPHY_CONFIG_FLAGS cFlags ); This type describes a pointer to a function that configures the Ethernet PHY in one of the MII/RMII operation modes This configuration function is PHY specific and every PHY driver has to provide their own implementation ",
							" Remarks The PHY driver consists of 2 modules: the main/base PHY driver which uses standard IEEE PHY registers the vendor specific functionality This function provides vendor specific functionality Every PHY driver has to expose this vendor specific function as part of its interface Traditionally the name used for this function is DRV_EXTPHY_MIIConfigure but any name can be used The PHY driver will call the vendor set up functions after the communication to the PHY has been established The function can use all the vendor specific functions to store/retrieve specific data or start SMI transactions (see Vendor Interface Routines) The function should not block but return DRV_ETHPHY_RES_PENDING if waiting for SMI transactions ",
							" Preconditions Communication to the PHY should have been established ",
							" DRV_ETHPHY_VENDOR_SMI_CLOCK_GET Type ",
							" C typedef unsigned int (* DRV_ETHPHY_VENDOR_SMI_CLOCK_GET)(const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle); ",
							" Returns The maximum SMI/MIIM clock speed as an unsigned integer ",
							" Description Pointer to Function: typedef unsigned int (* DRV_ETHPHY_VENDOR_SMI_CLOCK_GET) ( const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle ); This type describes a pointer to a function that returns the SMI/MIIM maximum clock speed in Hz of the Ethernet PHY This configuration function is PHY specific and every PHY driver has to provide their own implementation ",
							" Remarks The PHY driver consists of 2 modules: the main/base PHY driver which uses standard IEEE PHY registers the vendor specific functionality This function provides vendor specific functionality Every PHY driver has to expose this vendor specific function as part of its interface This value is PHY specific All PHYs are requested to support 2 5 MHz Traditionally the name used for this function is DRV_EXTPHY_SMIClockGet but any name can be used The PHY driver will call the vendor set up functions after the communication to the PHY has been established The function should not block but return immediately The function cannot start SMI transactions and cannot use the vendor specific functions to store/retrieve specific data (see Vendor Interface Routines) ",
							" Preconditions Communication to the PHY should have been established ",
							" DRV_ETHPHY_VENDOR_WOL_CONFIGURE Type ",
							" C typedef void (* DRV_ETHPHY_VENDOR_WOL_CONFIGURE)(const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle unsigned char bAddr[]); ",
							" Returns None ",
							" Description Pointer to Function: typedef void (* DRV_ETHPHY_VENDOR_WOL_CONFIGURE) ( const struct DRV_ETHPHY_OBJECT_BASE_TYPE* pBaseObj DRV_HANDLE handle unsigned char bAddr ); This type describes a pointer to a function that configures the PHY WOL functionality of the Ethernet PHY Configures the WOL of the PHY with a Source MAC address or a 6 byte magic packet mac address This configuration function is PHY specific and every PHY driver has to provide their own implementation ",
							" Remarks The PHY driver consists of 2 modules: the main/base PHY driver which uses standard IEEE PHY registers the vendor specific functionality This function provides vendor specific functionality Every PHY driver has to expose this vendor specific function as part of its interface Traditionally the name used for this function is DRV_EXTPHY_WOLConfiguration but any name can be used The PHY driver will call the vendor set up functions after the communication to the PHY has been established The function can use all the vendor specific functions to store/retrieve specific data or start SMI transactions (see Vendor Interface Routines) The function should not block but return DRV_ETHPHY_RES_PENDING if waiting for SMI transactions This feature is not currently supported for all PHYs ",
							" Preconditions Communication to the PHY should have been established ",
							" DRV_ETHPHY_VendorDataGet Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_VendorDataGet(DRV_HANDLE handle uint32_t* pVendorData); ",
							" Returns DRV_ETHPHY_RES_OK - if the vendor data is stored at the pVendorData address DRV_ETHPHY_RES_HANDLE_ERR - handle error ",
							" Description This function returns the current value of the vendor data Each DRV_ETHPHY client object maintains data that could be used for vendor specific operations This routine allows retrieving of the vendor specific data ",
							" Remarks The PHY driver will clear the vendor specific data before any call to a vendor specific routine Otherwise the PHY driver functions do not touch this value The DRV_ETHPHY_VendorDataSet can be used for writing data into this field Currently only a 32 bit value is supported The function is intended for implementing vendor specific functions like DRV_EXTPHY_MIIConfigure and DRV_EXTPHY_MDIXConfigure that need a way of maintaining their own data and state machine ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" DRV_ETHPHY_VendorDataSet Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_VendorDataSet(DRV_HANDLE handle uint32_t vendorData); ",
							" Returns DRV_ETHPHY_RES_OK - if the vendor data is stored in the client object DRV_ETHPHY_RES_HANDLE_ERR - handle error ",
							" Description This function returns the current value of the vendor data Each DRV_ETHPHY client object maintains data that could be used for vendor specific operations This routine allows retrieving of the vendor specific data ",
							" Remarks The PHY driver will clear the vendor specific data before any call to a vendor specific routine Otherwise the PHY driver functions do not touch this value The DRV_ETHPHY_VendorDataGet can be used for reading data into this field Currently only a 32 bit value is supported The function is intended for implementing vendor specific functions like DRV_EXTPHY_MIIConfigure and DRV_EXTPHY_MDIXConfigure that need a way of maintaining their own data and state machine ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup must have been called to properly configure the PHY ",
							" DRV_ETHPHY_VendorSMIReadResultGet Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_VendorSMIReadResultGet(DRV_HANDLE handle uint16_t* pSmiRes); ",
							" Returns DRV_ETHPHY_RES_OK - transaction complete and result deposited at pSmiRes DRV_ETHPHY_RES_PENDING - if the vendor transaction is still ongoing The call needs to be retried 0 - some error and the DRV_EXTPHY_MIIConfigure/DRV_EXTPHY_MDIXConfigure has to return error to be aborted by the DRV_ETHPHY_Setup ",
							" Description This function will return the data of a SMI read transfer ",
							" Remarks The function is intended for implementing vendor SMI transfers within DRV_EXTPHY_MIIConfigure and DRV_EXTPHY_MDIXConfigure It has to be called from within the DRV_EXTPHY_MIIConfigure or DRV_EXTPHY_MDIXConfigure functions (which are called in turn by the DRV_ETHPHY_Setup procedure) otherwise the call will fail The DRV_ETHPHY_RES_OK and DRV_ETHPHY_RES_PENDING significance is changed from the general driver API ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup is in progress and configures the PHY The vendor implementation of the DRV_EXTPHY_MIIConfigure/DRV_EXTPHY_MDIXConfigure is running and a SMI transfer is needed DRV_ETHPHY_VendorSMIReadStart should have been called to initiate a transfer ",
							" DRV_ETHPHY_VendorSMIReadStart Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_VendorSMIReadStart(DRV_HANDLE handle uint16_t rIx int phyAddress); ",
							" Returns DRV_ETHPHY_RES_OK - the vendor transaction is started DRV_ETHPHY_VendorSMIReadResultGet() needs to be called for the transaction to complete and to retrieve the result DRV_ETHPHY_RES_PENDING - the SMI bus is busy and the call needs to be retried 0 - some error and the DRV_EXTPHY_MIIConfigure/DRV_EXTPHY_MDIXConfigure has to return error to be aborted by the DRV_ETHPHY_Setup ",
							" Description This function will start a SMI read transfer ",
							" Remarks The function is intended for implementing vendor SMI transfers within DRV_EXTPHY_MIIConfigure and DRV_EXTPHY_MDIXConfigure It has to be called from within the DRV_EXTPHY_MIIConfigure or DRV_EXTPHY_MDIXConfigure functions (which are called in turn by the DRV_ETHPHY_Setup procedure) otherwise the call will fail The DRV_ETHPHY_RES_OK and DRV_ETHPHY_RES_PENDING significance is changed from the general driver API ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup is in progress and configures the PHY The vendor implementation of the DRV_EXTPHY_MIIConfigure/DRV_EXTPHY_MDIXConfigure is running and a SMI transfer is needed ",
							" DRV_ETHPHY_VendorSMIWriteStart Function ",
							" C DRV_ETHPHY_RESULT DRV_ETHPHY_VendorSMIWriteStart(DRV_HANDLE handle uint16_t rIx uint16_t wData int phyAddress); ",
							" Returns DRV_ETHPHY_RES_OK - if the vendor SMI write transfer is started DRV_ETHPHY_RES_PENDING - the SMI bus was busy and the call needs to be retried 0 - some error and the DRV_EXTPHY_MIIConfigure/DRV_EXTPHY_MDIXConfigure has to return error to be aborted by the DRV_ETHPHY_Setup ",
							" Description This function will start a SMI write transfer ",
							" Remarks The function is intended for implementing vendor SMI transfers within DRV_EXTPHY_MIIConfigure and DRV_EXTPHY_MDIXConfigure It has to be called from within the DRV_EXTPHY_MIIConfigure or DRV_EXTPHY_MDIXConfigure functions (which are called in turn by the DRV_ETHPHY_Setup procedure) otherwise the call will fail The DRV_ETHPHY_RES_OK and DRV_ETHPHY_RES_PENDING significance is changed from the general driver API ",
							" Preconditions The DRV_ETHPHY_Initialize routine must have been called DRV_ETHPHY_Open must have been called to obtain a valid device handle DRV_ETHPHY_Setup is in progress and configures the PHY The vendor implementation of the DRV_EXTPHY_MIIConfigure/DRV_EXTPHY_MDIXConfigure is running and a SMI transfer is needed ",
							" MIIM Driver Library The MIIM Driver is implemented as a driver object that provides APIs for: Asynchronous read/write and scan operations for accessing the external PHY registers Notification when MIIM operations have completed Driver status information Possibility to query or abort an ongoing operation Abstraction Model The MIIM driver clients access PHY registers using the MIIM Driver API The driver abstracts out the hardware details of the MIIM interface and provides a PHY register access mechanism to the application The MIIM Driver provides read write and scan access to the PHY registers together with driver and operation status APIs The driver schedules operations requested by multiple clients and performs them sequentially informing the clients about the operations outcome The user can poll for a certain operation status or can register callbacks to be notified of the completion of a scheduled operation A scheduled operation can be aborted if not yet started MIIM_abstraction Library Interface Name Description Macros  _DRV_MIIM_CONFIG_H This is macro _DRV_MIIM_CONFIG_H _DRV_MIIM_H This is macro _DRV_MIIM_H DRV_MIIM_CLIENT_OP_PROTECTION Enables/Disables Client Operation Protection feature DRV_MIIM_COMMANDS Enables/Disables MIIM commands feature DRV_MIIM_INDEX_0 MIIM driver index definitions DRV_MIIM_INDEX_COUNT Number of valid MIIM driver indices DRV_MIIM_INSTANCE_CLIENTS Selects the maximum number of clients DRV_MIIM_INSTANCE_OPERATIONS Selects the maximum number of simultaneous operations for an instance DRV_MIIM_INSTANCES_NUMBER Selects the maximum number of hardware instances that can be supported by the dynamic driver Functions  DRV_MIIM_ClientStatus Gets the current client-specific status the MIIM driver DRV_MIIM_Close Closes an opened instance of the MIIM driver DRV_MIIM_Deinitialize Deinitializes the specified instance of the MIIM driver module DRV_MIIM_DeregisterCallback Deregisters an notification callback function for the client operations DRV_MIIM_Initialize Initializes the MIIM driver DRV_MIIM_Open Opens the specified MIIM driver instance and returns a handle to it DRV_MIIM_OperationAbort Aborts a current client operation initiated by the MIIM driver DRV_MIIM_OperationResult Gets the result of a client operation initiated by the MIIM driver DRV_MIIM_Read Initiates a SMI/MIIM read transaction DRV_MIIM_RegisterCallback Registers an notification callback function for the client operations DRV_MIIM_Reinitialize Reinitializes the driver and refreshes any associated hardware settings DRV_MIIM_Scan Initiates a SMI/MIIM scan (periodic read)transaction DRV_MIIM_Setup Sets up a MIIM client DRV_MIIM_Status Provides the current status of the MIIM driver module DRV_MIIM_Tasks Maintains the driver's state machine DRV_MIIM_Write Initiates a SMI/MIIM write transaction Enumerations  DRV_MIIM_CLIENT_STATUS Defines the possible results of operations that can succeed or fail DRV_MIIM_OPERATION_FLAGS List of flags that apply to a client operation DRV_MIIM_SETUP_FLAGS List of flags that apply to a client setup operation Structures  DRV_MIIM_INIT Contains all the data necessary to initialize the MIIM device DRV_MIIM_OBJECT_BASE Declaration of a MIIM base object DRV_MIIM_SETUP Contains all the data necessary to set up the MIIM device Types  DRV_MIIM_CALLBACK_HANDLE Handle that identifies a client registration operation DRV_MIIM_OPERATION_CALLBACK Notification function that will be called when a MIIM operation is completed and the driver client needs to be notified DRV_MIIM_OPERATION_HANDLE MIIM operation handle Variables  DRV_MIIM_OBJECT_BASE_Default The supported basic MIIM driver (DRV_MIIM_OBJECT_BASE) This object is implemented by default as using the standard MIIM interface It can be overwritten dynamically when needed ",
							" DRV_MIIM_CALLBACK_HANDLE Type ",
							" C typedef const void* DRV_MIIM_CALLBACK_HANDLE; ",
							" Description Type: MIIM Callback Registration handle A handle that a client obtains when calling DRV_MIIM_RegisterCallback It can be used to deregister the notification callback: DRV_MIIM_DeregisterCallback ",
							" Remarks A valid registration handle is not NULL An invalid registration handle == 0 ",
							" DRV_MIIM_CLIENT_OP_PROTECTION Macro ",
							" C #define DRV_MIIM_CLIENT_OP_PROTECTION 0 ",
							" Description MIIM client Operation Protection Because of the recirculation of the operation handles and client handles the possibility exists that a misbehaved client inadvertently gets the results of a previous completed operations that now belongs to a different client When this feature is enabled extra protection is added for an operation handle to uniquely identify a client that has started the operation and extra check is done that operation belongs to the client that asks for the result ",
							" Remarks Set the value to 1 to enable 0 to disable the feature Enabling this feature requires a small overhead in code and data size ",
							" DRV_MIIM_CLIENT_STATUS Enumeration ",
							" C typedef enum { DRV_MIIM_CLIENT_STATUS_ERROR DRV_MIIM_CLIENT_STATUS_READY } DRV_MIIM_CLIENT_STATUS; ",
							" Members Members Description DRV_MIIM_CLIENT_STATUS_ERROR Unspecified error condition Client does not exist DRV_MIIM_CLIENT_STATUS_READY Up and running can accept operations ",
							" Description MIIM Driver Operation Result * MIIM Driver Operation Result Codes This enumeration defines the possible results of any of the MIIM driver operations that have the possibility of failing This result should be checked to ensure that the operation achieved the desired result ",
							" DRV_MIIM_ClientStatus Function ",
							" C DRV_MIIM_CLIENT_STATUS DRV_MIIM_ClientStatus(DRV_HANDLE handle); ",
							" Returns DRV_MIIM_CLIENT_STATUS_READY - if the client handle represents a valid MIIM client DRV_MIIM_CLIENT_STATUS_ERROR - if the client handle is an invalid MIIM client ",
							" Description This function gets the client-specific status of the MIIM driver associated with the given handle ",
							" Remarks This function can be used to check that a client handle points to a valid MIIM client The MIIM driver queues operations so it will always return DRV_MIIM_CLIENT_STATUS_READY ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" DRV_MIIM_Close Function ",
							" C void DRV_MIIM_Close(DRV_HANDLE handle); ",
							" Returns None ",
							" Description This function closes an opened instance of the MIIM driver invalidating the handle ",
							" Remarks After calling this routine the handle passed in \"handle\" must not be used with any of the remaining driver routines A new handle must be obtained by calling DRV_MIIM_Open before the caller may use the driver again Usually there is no need for the driver client to verify that the Close operation has completed ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called for the specified MIIM driver instance DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" Example DRV_HANDLE handle; // Returned from DRV_MIIM_Open DRV_MIIM_Close(handle); ",
							" DRV_MIIM_COMMANDS Macro ",
							" C #define DRV_MIIM_COMMANDS 0 ",
							" Description MIIM PHY Commands Adds a MIIM command to the TCP/IP command menu allowing to read/write a PHY register ",
							" Remarks Set the value to 1 to enable 0 to disable the feature Currently the MIIM commands are integrated in the TCP/IP commands To have the MIIM commands available the TCP/IP commands need to be enabled ",
							" DRV_MIIM_Deinitialize Function ",
							" C void DRV_MIIM_Deinitialize(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function deinitializes the specified instance of the MIIM driver module disabling its operation (and any hardware)and invalidates all of the internal data ",
							" Remarks Once the Initialize operation has been called the Deinitialize operation must be called before the Initialize operation can be called again ",
							" Preconditions The DRV_MIIM_Initialize function must have been called before calling this routine and a valid SYS_MODULE_OBJ must have been returned ",
							" DRV_MIIM_DeregisterCallback Function ",
							" C DRV_MIIM_RESULT DRV_MIIM_DeregisterCallback(DRV_HANDLE handle DRV_MIIM_CALLBACK_HANDLE cbHandle); ",
							" Returns DRV_MIIM_RES_OK if the operation succeeded an error code otherwise ",
							" Description This function deregisters a previously registered client notification callback function ",
							" Remarks There is only one notification callback function available per client To register a new callback function use DRV_MIIM_DeregisterCallback first ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" DRV_MIIM_INDEX_0 Macro ",
							" C #define DRV_MIIM_INDEX_0 0 ",
							" Description MIIM Driver Module Index Numbers These constants provide the MIIM driver index definitions ",
							" Remarks These constants should be used in place of hard-coded numeric literals These values should be passed into the DRV_MIIM_Initialize and DRV_MIIM_Open routines to identify the driver instance in use ",
							" DRV_MIIM_INDEX_COUNT Macro ",
							" C #define DRV_MIIM_INDEX_COUNT 1 ",
							" Description MIIM Driver Module Index Count This constant identifies the number of valid MIIM driver indices ",
							" Remarks This constant should be used in place of hard-coded numeric literals This value is derived from part-specific header files defined as part of the peripheral libraries ",
							" DRV_MIIM_INIT Structure ",
							" C struct DRV_MIIM_INIT { SYS_MODULE_INIT moduleInit; uintptr_t ethphyId; }; ",
							" Members Members Description SYS_MODULE_INIT moduleInit; System module initialization uintptr_t ethphyId; Identifies peripheral (PLIB-level) ID ",
							" Description MIIM Device Driver Initialization Data This data structure contains all the data necessary to initialize the MIIM device ",
							" Remarks A pointer to a structure of this format containing the desired initialization data must be passed into the DRV_MIIM_Initialize routine ",
							" DRV_MIIM_Initialize Function ",
							" C SYS_MODULE_OBJ DRV_MIIM_Initialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns a valid handle to a driver object if successful SYS_MODULE_OBJ_INVALID if initialization failed ",
							" Description This function initializes the MIIM driver making it ready for clients to open and use it ",
							" Remarks This function must be called before any other MIIM routine is called This function should only be called once during system initialization unless DRV_MIIM_Deinitialize is called to deinitialize the driver instance The returned object must be passed as argument to DRV_MIIM_Reinitialize DRV_MIIM_Deinitialize DRV_MIIM_Tasks and DRV_MIIM_Status routines ",
							" Preconditions None ",
							" DRV_MIIM_INSTANCE_CLIENTS Macro ",
							" C #define DRV_MIIM_INSTANCE_CLIENTS 2 ",
							" Description MIIM number of clients This definition select the MIIM Maximum Number of Clients per instance ",
							" Remarks By default the 1st MIIM client is the DRV_ETHPHY An extra client is allowed ",
							" DRV_MIIM_INSTANCE_OPERATIONS Macro ",
							" C #define DRV_MIIM_INSTANCE_OPERATIONS 4 ",
							" Description MIIM instance operations This definition selects the maximum number of simultaneous operations that can be supported by this driver Note that this represents operations for all clients ",
							" Remarks None ",
							" DRV_MIIM_INSTANCES_NUMBER Macro ",
							" C #define DRV_MIIM_INSTANCES_NUMBER 1 ",
							" Description MIIM hardware instance configuration This definition selects the maximum number of hardware instances that can be supported by the dynamic driver Usually set to 1 ",
							" Remarks None ",
							" DRV_MIIM_OBJECT_BASE Structure ",
							" C struct DRV_MIIM_OBJECT_BASE { SYS_MODULE_OBJ (* DRV_MIIM_Initialize)(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); void (* DRV_MIIM_Reinitialize)(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); void (* DRV_MIIM_Deinitialize)(SYS_MODULE_OBJ object); SYS_STATUS (* DRV_MIIM_Status)(SYS_MODULE_OBJ object); void (* DRV_MIIM_Tasks)(SYS_MODULE_OBJ object); DRV_HANDLE (* DRV_MIIM_Open)(const SYS_MODULE_INDEX drvIndex const DRV_IO_INTENT intent); DRV_MIIM_RESULT (* DRV_MIIM_Setup)(DRV_HANDLE handle const DRV_MIIM_SETUP* pSetUp); void (* DRV_MIIM_Close)(DRV_HANDLE handle); DRV_MIIM_CLIENT_STATUS (* DRV_MIIM_ClientStatus)(DRV_HANDLE handle); DRV_MIIM_CALLBACK_HANDLE (* DRV_MIIM_RegisterCallback)(DRV_HANDLE handle DRV_MIIM_OPERATION_CALLBACK cbFunction DRV_MIIM_RESULT* pRegResult); DRV_MIIM_RESULT (* DRV_MIIM_DeregisterCallback)(DRV_HANDLE handle DRV_MIIM_CALLBACK_HANDLE cbHandle); DRV_MIIM_OPERATION_HANDLE (* DRV_MIIM_Read)(DRV_HANDLE handle unsigned int rIx unsigned int phyAdd DRV_MIIM_OPERATION_FLAGS opFlags DRV_MIIM_RESULT* pOpResult); DRV_MIIM_OPERATION_HANDLE (* DRV_MIIM_Write)(DRV_HANDLE handle unsigned int rIx unsigned int phyAdd uint16_t wData DRV_MIIM_OPERATION_FLAGS opFlags DRV_MIIM_RESULT* pOpResult); DRV_MIIM_OPERATION_HANDLE (* DRV_MIIM_Scan)(DRV_HANDLE handle unsigned int rIx unsigned int phyAdd DRV_MIIM_OPERATION_FLAGS opFlags DRV_MIIM_RESULT* pOpResult); DRV_MIIM_RESULT (* DRV_MIIM_OperationResult)(DRV_HANDLE handle DRV_MIIM_OPERATION_HANDLE opHandle uint16_t* pOpData); DRV_MIIM_RESULT (* DRV_MIIM_OperationAbort)(DRV_HANDLE handle DRV_MIIM_OPERATION_HANDLE opHandle); }; ",
							" Description MIIM Driver Base Object This data structure identifies the required basic interface of the MIIM driver Any dynamic MIIM driver has to export this interface ",
							" Remarks This object provides the basic MIIM functionality Any derived driver can override the basic functionality while maintaining the required interface ",
							" DRV_MIIM_Open Function ",
							" C DRV_HANDLE DRV_MIIM_Open(const SYS_MODULE_INDEX drvIndex const DRV_IO_INTENT intent); ",
							" Returns valid open-instance handle if successful (a number identifying both the caller and the module instance) DRV_HANDLE_INVALID if an error occurs ",
							" Description This function opens the specified MIIM driver instance and provides a handle that must be provided to all other client-level operations to identify the caller and the instance of the driver ",
							" Remarks The handle returned is valid until the DRV_MIIM_Close routine is called This function will NEVER block waiting for hardware ",
							" Preconditions The DRV_MIIM_Initialize function must have been called before calling this function ",
							" Example DRV_HANDLE handle; handle = DRV_MIIM_Open(DRV_MIIM_INDEX_0 0); if (DRV_HANDLE_INVALID == handle) { // Unable to open the driver } ",
							" DRV_MIIM_OPERATION_CALLBACK Type ",
							" C typedef void (* DRV_MIIM_OPERATION_CALLBACK)(DRV_HANDLE cliHandle DRV_MIIM_OPERATION_HANDLE opHandle DRV_MIIM_RESULT opResult uint16_t opData); ",
							" Description Type: MIIM Driver Operation Complete Callback The format of an operation callback notification function registered with the MIIM driver ",
							" Remarks None ",
							" Parameters Parameters Description cliHandle the client handle This is the handle that identifies the client (obtained with DRV_MIIM_Open) that initiated the operation opHandle the operation handle This is the handle that identifies the operation (obtained with DRV_MIIM_Read DRV_MIIM_Write etc ) opResult operation result DRV_MIIM_RES_OK if operation completed successfully otherwise an error code opData operation specific data only if the result is DRV_MIIM_RES_OK For read/scan operation this is the MIIM read data For write operation this is that data that was written with MIIM ",
							" DRV_MIIM_OPERATION_FLAGS Enumeration ",
							" C typedef enum { DRV_MIIM_OPERATION_FLAG_NONE DRV_MIIM_OPERATION_FLAG_DISCARD } DRV_MIIM_OPERATION_FLAGS; ",
							" Members Members Description DRV_MIIM_OPERATION_FLAG_NONE No flag specified DRV_MIIM_OPERATION_FLAG_DISCARD Upon completion discard the operation result The client will not poll to check the result nor will need notification This allows dummy operations discarded as they complete ",
							" Description MIIM Driver Operation flags This enumeration identifies the operation-specific flags supported by the MIIM driver ",
							" Remarks Currently only 8 bit flags are supported Multiple flags can be simultaneously set ",
							" DRV_MIIM_OPERATION_HANDLE Type ",
							" C typedef const void* DRV_MIIM_OPERATION_HANDLE; ",
							" Description Type: DRV_MIIM_OPERATION_HANDLE A handle that identifies an operation started by a client This handle can be used by the client to query the operation status result etc It is also used when the operation complete notification occurs ",
							" Remarks A valid operation handle is not NULL An invalid operation handle == 0 ",
							" DRV_MIIM_OperationAbort Function ",
							" C DRV_MIIM_RESULT DRV_MIIM_OperationAbort(DRV_HANDLE handle DRV_MIIM_OPERATION_HANDLE opHandle); ",
							" Returns DRV_MIIM_RES_OK for success; operation has been aborted 0 - an error has occurred and the operation could not be completed ",
							" Description Aborts a current client operation initiated by the MIIM driver ",
							" Remarks This operation will stop/abort a scan operation started by DRV_MIIM_Scan ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle A driver operation was started ",
							" DRV_MIIM_OperationResult Function ",
							" C DRV_MIIM_RESULT DRV_MIIM_OperationResult(DRV_HANDLE handle DRV_MIIM_OPERATION_HANDLE opHandle uint16_t* pOpData); ",
							" Returns DRV_MIIM_RESULT value describing the current operation result: DRV_MIIM_RES_OK for success; operation has been completed successfully and pOpData updated DRV_MIIM_RES_PENDING operation is in progress an DRV_MIIM_RESULT error code if the operation failed ",
							" Description Returns the result of a client operation initiated by the MIIM driver ",
							" Remarks This function will not block for hardware access and will immediately return the current status This function returns the result of the last driver operation It will return DRV_MIIM_RES_PENDING if an operation is still in progress Otherwise a DRV_MIIM_RESULT describing the operation outcome Note that for a scan operation DRV_MIIM_RES_PENDING will be returned when there's no new scan data available DRV_MIIM_RES_OK means the scan data is fresh ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle A driver operation was started ",
							" DRV_MIIM_Read Function ",
							" C DRV_MIIM_OPERATION_HANDLE DRV_MIIM_Read(DRV_HANDLE handle unsigned int rIx unsigned int phyAdd DRV_MIIM_OPERATION_FLAGS opFlags DRV_MIIM_RESULT* pOpResult); ",
							" Returns A not NULL DRV_MIIM_OPERATION_HANDLE if the operation was successfully scheduled NULL if the operation failed More details in pOpResult ",
							" Description This function initiates a SMI/MIIM read transaction for a given MIIM register ",
							" Remarks If operation was scheduled successfully the result will be DRV_MIIM_RES_OK Otherwise an error code will be returned Upon the operation completion: If the operation is to be discarded (DRV_MIIM_OPERATION_FLAG_DISCARD is set) there will be no notification to the client The operation associated resources will be released If the operation is not to be discarded then: if the client has registered an operation notification callback (DRV_MIIM_RegisterCallback) then the callback will be called After that the operation associated resources will be released if there is no notification callback the MIIM driver will wait for the client to poll and read the operation result using DRV_MIIM_OperationResult() Only then the operation will be released A completed non-discardable operation will remain available for returning the result until the client is somehow notified of the operation result When polling is used DRV_MIIM_OperationResult() needs to be called to free the operation associated resources ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" DRV_MIIM_RegisterCallback Function ",
							" C DRV_MIIM_CALLBACK_HANDLE DRV_MIIM_RegisterCallback(DRV_HANDLE handle DRV_MIIM_OPERATION_CALLBACK cbFunction DRV_MIIM_RESULT* pRegResult); ",
							" Returns a valid DRV_MIIM_CALLBACK_HANDLE if the operation succeeded NULL otherwise ",
							" Description This function registers a client callback function The function will be called by the MIIM driver when a scheduled operation is completed ",
							" Remarks There is only one notification callback function available per client To register a new callback function use DRV_MIIM_DeregisterCallback first ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" DRV_MIIM_Reinitialize Function ",
							" C void DRV_MIIM_Reinitialize(SYS_MODULE_OBJ object const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description This function reinitializes the driver and refreshes any associated hardware settings using the initialization data given but it will not interrupt any ongoing operations ",
							" Remarks This function can be called multiple times to reinitialize the module This operation can be used to refresh any supported hardware registers as specified by the initialization data or to change the power state of the module This function is currently NOT IMPLEMENTED ",
							" Preconditions The DRV_MIIM_Initialize function must have been called before calling this routine and a valid SYS_MODULE_OBJ must have been returned ",
							" DRV_MIIM_Scan Function ",
							" C DRV_MIIM_OPERATION_HANDLE DRV_MIIM_Scan(DRV_HANDLE handle unsigned int rIx unsigned int phyAdd DRV_MIIM_OPERATION_FLAGS opFlags DRV_MIIM_RESULT* pOpResult); ",
							" Returns A not NULL DRV_MIIM_OPERATION_HANDLE if the operation was successfully scheduled NULL if the operation failed More details in pOpResult ",
							" Description This function initiates a SMI/MIIM scan transaction for a given MIIM register ",
							" Remarks If operation was scheduled successfully the result will be DRV_MIIM_RES_OK Otherwise an error code will be returned When a new scan result is available: If the operation is to be discarded (DRV_MIIM_OPERATION_FLAG_DISCARD is set) there will be no notification to the client If the operation is not to be discarded then: if the client has registered an operation notification callback (DRV_MIIM_RegisterCallback) then the notification callback will be called if there is no notification callback the MIIM driver will wait for the client to poll and read the operation result using DRV_MIIM_OperationResult() Only then the operation will be released A scheduled scan operation will remain active in the background and will be available for returning the scan results When polling is used DRV_MIIM_OperationResult()will return the latest scan result The operation associated resources will be released and scan stopped only when DRV_MIIM_OperationAbort() is called While scan is active all other transactions (including from other clients) will be inhibited Use carefully ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" DRV_MIIM_SETUP Structure ",
							" C C typedef struct { uint32_t hostClockFreq; uint32_t maxBusFreq; DRV_MIIM_SETUP_FLAGS setupFlags; } DRV_MIIM_SETUP; ",
							" Members Members Description uint32_t hostClockFreq; The clock frequency on which this MIIM module operates on Hz uint32_t maxBusFreq; The MIIM bus maximum supported frequency Hz This is a maximum value The actual generated value may differ DRV_MIIM_SETUP_FLAGS setupFlags; Setup flags ",
							" Description MIIM Device Driver Set up Data This data structure contains all the data necessary to configure the MIIM device ",
							" Remarks A pointer to a structure of this format containing the desired initialization data must be passed into the DRV_MIIM_Setup routine ",
							" DRV_MIIM_SETUP_FLAGS Enumeration ",
							" C typedef enum { DRV_MIIM_SETUP_FLAG_NONE DRV_MIIM_SETUP_FLAG_PREAMBLE_SUPPRESSED DRV_MIIM_SETUP_FLAG_PREAMBLE_DEFAULT DRV_MIIM_SETUP_FLAG_SCAN_ADDRESS_INCREMENT DRV_MIIM_SETUP_FLAG_SCAN_ADDRESS_DEFAULT } DRV_MIIM_SETUP_FLAGS; ",
							" Members Members Description DRV_MIIM_SETUP_FLAG_NONE No flag specified Default value DRV_MIIM_SETUP_FLAG_PREAMBLE_SUPPRESSED Suppress the normal 32 bit MIIM preamble field Some PHYs support suppressed preamble DRV_MIIM_SETUP_FLAG_PREAMBLE_DEFAULT Include the 32 bit MIIM preamble field Default operation DRV_MIIM_SETUP_FLAG_SCAN_ADDRESS_INCREMENT Scan operation will read across a range of PHY addresses Scan will start with address 1 through the address set in the scan operation DRV_MIIM_SETUP_FLAG_SCAN_ADDRESS_DEFAULT Scan operation will read just one PHY address Default operation ",
							" Description MIIM Driver Set up flags This enumeration identifies the setup specific flags supported by the MIIM driver ",
							" Remarks Multiple flags can be simultaneously set DRV_MIIM_OBJECT_BASE_Default Variable File drv_miim h const DRV_MIIM_OBJECT_BASE DRV_MIIM_OBJECT_BASE_Default; ",
							" Description The supported basic MIIM driver (DRV_MIIM_OBJECT_BASE) This object is implemented by default as using the standard MIIM interface It can be overwritten dynamically when needed ",
							" DRV_MIIM_Status Function ",
							" C SYS_STATUS DRV_MIIM_Status(SYS_MODULE_OBJ object); ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_BUSY - Indicates that a previous module operation for the specified module has not yet completed SYS_STATUS_ERROR - Indicates that the specified module is in an error state ",
							" Description This function provides the current status of the MIIM driver module ",
							" Remarks Any value greater than SYS_STATUS_READY is also a normal running state in which the driver is ready to accept new operations SYS_STATUS_BUSY - Indicates that the driver is busy with a previous system level operation and cannot start another SYS_STATUS_ERROR - Indicates that the driver is in an error state Any value less than SYS_STATUS_ERROR is also an error state SYS_MODULE_DEINITIALIZED - Indicates that the driver has been deinitialized If the status operation returns SYS_STATUS_BUSY the a previous system level operation has not yet completed Once the status operation returns SYS_STATUS_READY any previous operations have completed The value of SYS_STATUS_ERROR is negative (-1) Any value less than that is also an error state This function will NEVER block waiting for hardware If the Status operation returns an error value the error may be cleared by calling the reinitialize operation If that fails the deinitialize operation will need to be called followed by the initialize operation to return to normal operations ",
							" Preconditions The DRV_MIIM_Initialize function must have been called before calling this function ",
							" Example SYS_MODULE_OBJ object; // Returned from DRV_MIIM_Initialize SYS_STATUS status; status = DRV_MIIM_Status(object); if (SYS_STATUS_ERROR = status) { // Handle error } ",
							" Parameters Parameters Description object Driver object handle returned from DRV_MIIM_Initialize ",
							" DRV_MIIM_Tasks Function ",
							" C void DRV_MIIM_Tasks(SYS_MODULE_OBJ object); ",
							" Returns None ",
							" Description This function is used to maintain the driver's internal state machine ",
							" Remarks This function is normally not called directly by an application It is called by the system's Tasks routine (SYS_Tasks) This function will never block or access any resources that may cause it to block ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called for the specified MIIM driver instance ",
							" Example SYS_MODULE_OBJ object; // Returned from DRV_MIIM_Initialize while (true) { DRV_MIIM_Tasks (object); // Do other tasks } ",
							" DRV_MIIM_Write Function ",
							" C DRV_MIIM_OPERATION_HANDLE DRV_MIIM_Write(DRV_HANDLE handle unsigned int rIx unsigned int phyAdd uint16_t wData DRV_MIIM_OPERATION_FLAGS opFlags DRV_MIIM_RESULT* pOpResult); ",
							" Returns A not NULL DRV_MIIM_OPERATION_HANDLE if the operation was successfully scheduled NULL if the operation failed More details in pOpResult ",
							" Description This function initiates a SMI/MIIM write transaction for a given MIIM register ",
							" Remarks If operation was scheduled successfully the result will be DRV_MIIM_RES_OK Otherwise an error code will be returned Upon the operation completion: If the operation is to be discarded (DRV_MIIM_OPERATION_FLAG_DISCARD is set) there will be no notification to the client The operation associated resources will be released If the operation is not to be discarded then: if the client has registered an operation notification callback (DRV_MIIM_RegisterCallback) then the notification callback will be called After that the operation associated resources will be released if there is no notification callback the MIIM driver will wait for the client to poll and read the operation result using DRV_MIIM_OperationResult() Only then the operation will be released A completed non-discardable operation will remain available for returning the result until the client is somehow notified of the operation result When polling is used DRV_MIIM_OperationResult() needs to be called to free the operation associated resources A write operation normally uses DRV_MIIM_OPERATION_FLAG_DISCARD if it is not interested when the operation has completed ",
							" Preconditions The DRV_MIIM_Initialize routine must have been called DRV_MIIM_Open must have been called to obtain a valid opened device handle ",
							" Networking Presentation Layer The MPLAB Harmony Networking Presentation Layer is an abstracted middleware layer that provides an encrypted channel There are three interfaces for the layer: Client - this interface starts a network session and reads and writes clear text data Provider - this interface encrypts the clear text into cipher text and decrypts cipher text into clear text Transport - this interface transmits and receives the cipher text The linkage to the provider interface is done through function pointers to isolate it from the rest of MPLAB Harmony This allows for any provider to be used Please note that Microchip does not supply a commercially licensed TLS provider wolfSSL (formerly CyaSSL) is supported as a provider for evaluation purposes only The transport interface is abstracted to function pointers as well to allow for any transport to be used Currently only the MPLAB Harmony TCP/IP Stack is used as a transport; however other transports can be created such as UART transport which can be used instead The MPLAB Harmony Networking Presentation Layer has a Tasks function that is used to continuously call the provider's connect and accept functions until they run to success of failure thereby hiding this job from the application Abstraction Model NET PRES Abstraction Model Library Overview The Library Interface routines are divided into various sub-sections which address one of the blocks or the overall operation of the Networking Presentation Layer Library Interface Section Description System Functions Provides \"initialize\" functions and a \"tasks\" function for performing general presentation layer tasks Socket Functions Provides various socket-related functions for the purpose of connecting flushing and setting options among others Certificate Store Functions Provides certificate-related functions for the purpose of obtaining certificates and keys Configuring the Library The configuration of the Networking Presentation Layer is done as part of the MPLAB Harmony TCP/IP Stack configuration and specific NET_PRES parameters are generated in the configuration h This header file contains the configuration selection for the Networking Presentation Layer Based on the selections made the Networking Presentation Layer may support the selected features These configuration settings will apply to all instances of the Networking Presentation Layer This header can be placed anywhere; however the path of this header needs to be present in the include search path for a successful build Refer to the TCP/IP Demonstrations Help section for more details Library Interface This section describes the Application Programming Interface (API) functions of the Networking Presentation Layer Name Description System Functions  NET_PRES_Deinitialize Deinitializes the Network Presentation Layer Instance NET_PRES_Initialize Initializes the Network Presentation Layer sub-system with the configuration data NET_PRES_Reinitialize Reinitializes the instance of the presentation layer NET_PRES_Tasks MPLAB Harmony tasks function used for general presentation layer tasks NET_PRES_Status Provides the current status of the MPLAB Harmony Networking Presentation Layer Socket Functions  NET_PRES_SocketBind Binds a socket to a local address NET_PRES_SocketClose Disconnects an open socket and destroys the socket handle releasing the associated resources NET_PRES_SocketConnect Connects a client socket NET_PRES_SocketDiscard Discards any pending data in the RX FIFO NET_PRES_SocketDisconnect Disconnects an open socket NET_PRES_SocketEncryptSocket This function turns an insecure socket into a secure socket Details: This function will turn an unencrypted socket into an encrypted socket and starts encryption negotiation NET_PRES_SocketFlush Immediately transmits all pending TX data NET_PRES_SocketGetTransportHandle This function returns the transport layer handle Details: This function returns the transport layer handle for a valid socket NET_PRES_SocketInfoGet Obtains information about a currently open socket NET_PRES_SocketIsConnected Determines whether a socket has an established connection NET_PRES_SocketIsNegotiatingEncryption This function checks if encryption negotiation is still in progress NET_PRES_SocketIsOpenModeSupported Checks to see if a mode is supported by open NET_PRES_SocketIsSecure This function checks whether a connection is secure NET_PRES_SocketLastError This function returns the last error code for this socket Details: This function will return the last error code that was set for this socket and it will clear the current error code An error code is set whenever a socket operation fails for some missing functionality bad parameter etc NET_PRES_SocketOpen Opens a presentation socket NET_PRES_SocketOptionsGet Allows the options for a socket such as current RX/TX buffer size etc to be obtained NET_PRES_SocketOptionsSet Allows setting options to a socket like adjust RX/TX buffer size etc NET_PRES_SocketPeek Reads a specified number of data bytes from the RX buffer/FIFO without removing them from the buffer NET_PRES_SocketRead Reads an array of data bytes from a socket's RX buffer/FIFO NET_PRES_SocketReadIsReady Determines how many bytes can be read from the RX buffer NET_PRES_SocketRemoteBind Binds a socket to a remote local address NET_PRES_SocketSignalHandlerDeregister Deregisters a previously registered socket signal handler NET_PRES_SocketSignalHandlerRegister Registers a socket signal handler NET_PRES_SocketWasReset Self-clearing semaphore indicating socket reset NET_PRES_SocketWrite Takes a buffer and sends it to the encryption provider NET_PRES_SocketWriteIsReady Determines how much free space is available in the TX buffer Certificate Store Functions  NET_PRES_CertStoreGetCACerts This function gets the CA certificates from the store NET_PRES_CertStoreGetServerCert This function gets a server certificate and key from the certificate store Data Types and Constants  _NET_PRES_EncProviderObject Defines the data that the presentation layer needs from the provider _NET_PRES_TransportObject Defines the data that the transport layer needs to provide to the Networking Presentation Layer NET_PRES_INDEX Sets the type for the presentation layer index NET_PRES_INIT_DATA Initializes a Presentation layer NET_PRES_INST_DATA Initializes a Presentation layer NET_PRES_SIGNAL_FUNCTION MPLAB Harmony Networking Presentation Layer Signal function NET_PRES_SIGNAL_HANDLE Sets the type for the presentation layer signal handle NET_PRES_SKT_HANDLE_T Sets the type for the presentation layer socket handle NET_PRES_ADDRESS NET_PRES address NET_PRES_EncProviderConnect Connects the function to the provider NET_PRES_EncProviderConnectionClose Defines the close function to the provider NET_PRES_EncProviderDeinit Defines the deinitialization function for the provider NET_PRES_EncProviderInit Defines the initialization function to the encryption provider NET_PRES_EncProviderIsInitialized Determines whether the encryption provider has been initialized NET_PRES_EncProviderObject Defines the data that the presentation layer needs from the provider NET_PRES_EncProviderOpen Defines the open connection function to the provider NET_PRES_EncProviderRead Defines the read function to the provider NET_PRES_EncProviderWrite Defines the write function to the provider NET_PRES_EncSessionStatus Defines the enumeration for the state and status of the encrypted portion of a connection NET_PRES_SKT_ADDR_T NET_PRES address type NET_PRES_SKT_ERROR_T NET_PRES error type NET_PRES_SKT_OPTION_TYPE NET_PRES option type NET_PRES_SKT_PORT_T Sets the type for the presentation layer port NET_PRES_SKT_T NET_PRES socket type NET_PRES_TRANS_ADDR_T Defines a generic address structure to pass to the transport layer NET_PRES_TRANS_ADDRESS_TYPE Defines the enumeration for the type of address NET_PRES_TRANS_OPTION_T Defines the enumeration for the type of options NET_PRES_TransBind Binds a socket to a local address NET_PRES_TransBool Generic function prototype for functions that return a bool NET_PRES_TransClose Function prototype for functions that closes a socket NET_PRES_TransDiscard Function prototype for functions that clears a socket's RX buffer NET_PRES_TransHandlerRegister Function prototype that registers a handler with a socket NET_PRES_TransOpen Opens a presentation socket NET_PRES_TransOption Sets of gets a socket's options NET_PRES_TransPeek Function prototype for functions that peeks on the socket's buffer NET_PRES_TransportObject Defines the data that the transport layer needs to provide to the Networking Presentation Layer NET_PRES_TransRead Defines the read function provided by the transport layer NET_PRES_TransReady Defines the ready function provided by the transport layer NET_PRES_TransSignalHandlerDeregister Function prototype that deregisters a handler with a socket NET_PRES_TransSocketInfoGet Function prototype for functions that gets the information on a socket NET_PRES_TransWrite Defines the write function provided by the transport layer NET_PRES_INVALID_SOCKET Invalid socket indicator macro NET_PRES_CERTSTORE_H This is macro NET_PRES_CERTSTORE_H  NET_PRES_ENCRYPTION_PROVIDER_API_H This is macro NET_PRES_ENCRYPTION_PROVIDER_API_H  NET_PRES_SOCKET_API This is macro NET_PRES_SOCKET_API  NET_PRES_TRANSPORT_API_H This is macro NET_PRES_TRANSPORT_API_H  NET_PRES_H This is macro NET_PRES_H  NET_PRES_EncProviderReadReady Defines the read ready function to the provider NET_PRES_EncProviderWriteReady Defines the write ready function to the provider NET_PRES_TransIsPortDefaultSecured Checks to see if a port is encrypted by default NET_PRES_EncProviderMaxOutputSize Defines the maximum output size function to the provider NET_PRES_EncProviderOutputSize Defines the output size function to the provider ",
							" NET_PRES_ADDRESS Structure ",
							" C C typedef struct { uint8_t addr[16]; } NET_PRES_ADDRESS; ",
							" Description Enumeration: NET_PRES_ADDRESS Enumeration describing the NET_PRES address ",
							" Remarks None ",
							" NET_PRES_CertStoreGetCACerts Function ",
							" C bool NET_PRES_CertStoreGetCACerts(const uint8_t ** certPtr int32_t * certSize uint8_t certIndex); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Get CA Certificates function This function is used by client connections to retrieve the Certificate Authority certificates that are used to validate signatures on server certificates ",
							" Preconditions None ",
							" Parameters Parameters Description certPtr A pointer to the CA certificates certSize The size of the certificates certIndex Most likely '0' but this parameter is provided to select a different set of CA certificates ",
							" NET_PRES_CertStoreGetServerCert Function ",
							" C bool NET_PRES_CertStoreGetServerCert(const uint8_t ** serverCertPtr int32_t * serverCertSize const uint8_t ** serverKeyPtr int32_t * serverKeySize uint8_t certIndex); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Get Server Certificate and Key function This function is used by server connections to retrieve their certificate and private key Multiple server certificates can be stored in the certificate store for example one for a Web server and one for a mail server ",
							" Preconditions None ",
							" Parameters Parameters Description serverCertPtr A pointer to the server certificate serverCertSize The size of the server certificate serverKeyPtr A pointer to the server private key serverKeySize The size of the server private key certIndex Most likely '0' but this parameter is provided to select a different server certificate ",
							" NET_PRES_Deinitialize Function ",
							" C void NET_PRES_Deinitialize(SYS_MODULE_OBJ obj); ",
							" Returns None ",
							" Description Network Presentation Layer Deinitialization This function deallocates any resources allocated by the initialization function ",
							" Preconditions The layer must be successfully initialized with NET_PRES_Initialize ",
							" Parameters Parameters Description Object the valid object returned from NET_PRES_Initialize ",
							" NET_PRES_EncProviderConnect Type ",
							" C typedef NET_PRES_EncSessionStatus (* NET_PRES_EncProviderConnect)(void * providerData); ",
							" Returns NET_PRES_ENC_SS_CLIENT_NEGOTIATING - Client is still negotiating the connection NET_PRES_ENC_SS_SERVER_NEGOTIATING - Server is still negotiating the connection NET_PRES_ENC_SS_OPEN - Negotiation is complete and data can be securely transmitted NET_PRES_ENC_SS_FAILED - Negotiation failed ",
							" Description Presentation Encryption Provider Connect Prototype This function is used by the presentation layer to pump the encryption negotiation While negotiation is ongoing the presentation layer's task function will continue to call the function until negotiation ends ",
							" Preconditions A connection must have already been created ",
							" Parameters Parameters Description Description  providerData A pointer to the buffer that keeps the providerData returned from the Open call ",
							" NET_PRES_EncProviderConnectionClose Type ",
							" C typedef NET_PRES_EncSessionStatus (* NET_PRES_EncProviderConnectionClose)(void * providerData); ",
							" Returns NET_PRES_ENC_SS_CLOSING - Connection is closing function must be called again to pump the close NET_PRES_ENC_SS_CLOSED - The connection is closed and can be cleaned up ",
							" Description Presentation Encryption Provider Close Function Pointer Prototype This function pointer defines the close function It is called by the Networking Presentation Layer after a connection has been closed by the client ",
							" Preconditions A connection must have already been created ",
							" Parameters Parameters Description providerData A pointer to the buffer for the provider to keep connection specific data ",
							" NET_PRES_EncProviderDeinit Type ",
							" C typedef bool (* NET_PRES_EncProviderDeinit)(void); ",
							" Returns true - Deinitialization succeeded false - Deinitialization did not succeed ",
							" Description Presentation Encryption Provider Close Function Pointer Prototype This function pointer prototype defines the deinitialization function for the provider ",
							" Preconditions None ",
							" NET_PRES_EncProviderInit Type ",
							" C typedef bool (* NET_PRES_EncProviderInit)(struct _NET_PRES_TransportObject * transObject); ",
							" Returns true - Initialization succeeded false - Initialization did not succeed ",
							" Description Presentation Encryption Provider Initialization Function Pointer Prototype This function pointer prototype defines the initialization function to the encryption provider ",
							" Preconditions None ",
							" Parameters Parameters Description transObject This is a copy of the structure the transport layer provides to the presentation layer to read and write data ",
							" NET_PRES_EncProviderIsInitialized Type ",
							" C typedef bool (* NET_PRES_EncProviderIsInitialized)(void); ",
							" Returns true - The provider has been initialized false - The provider has not been initialized ",
							" Description Presentation Encryption Provider Is Initialized Pointer Prototype This function pointer determines whether the encryption provider has been initialized and informs the presentation layer ",
							" Preconditions A connection must have already been created and be in the open state ",
							" NET_PRES_EncProviderMaxOutputSize Type ",
							" C typedef int32_t (* NET_PRES_EncProviderMaxOutputSize)(void * providerData); ",
							" Returns Upon success the maximum output size will be returned Upon error 0 is returned: invalid function argument if the SSL/TLS handshake has not been completed yet ",
							" Description Presentation Encryption Provider Maximum Output Size Function Pointer Prototype This function pointer defines the maximum output size function Returns the maximum record layer size for plaintext data This will correspond to either the maximum SSL/TLS record size as specified by the protocol standard the maximum TLS fragment size as set by the TLS Max Fragment Length extension ",
							" Preconditions A connection must have already been created and be in the open state This function must be called after the SSL/TLS handshake has been completed ",
							" Parameters Parameters Description Description  providerData A pointer to the buffer for the provider to keep connection specific data ",
							" NET_PRES_EncProviderObject Structure ",
							" C typedef struct _NET_PRES_EncProviderObject { NET_PRES_EncProviderInit fpInit; NET_PRES_EncProviderDeinit fpDeinit; NET_PRES_EncProviderOpen fpOpen; NET_PRES_EncProviderConnect fpConnect; NET_PRES_EncProviderConnectionClose fpClose; NET_PRES_EncProviderWrite fpWrite; NET_PRES_EncProviderWriteReady fpWriteReady; NET_PRES_EncProviderRead fpRead; NET_PRES_EncProviderReadReady fpReadReady; NET_PRES_EncProviderRead fpPeek; NET_PRES_EncProviderIsInitialized fpIsInited; NET_PRES_EncProviderOutputSize fpOutputSize; NET_PRES_EncProviderMaxOutputSize fpMaxOutputSize; } NET_PRES_EncProviderObject; ",
							" Members Members Description NET_PRES_EncProviderInit fpInit; Function pointer to open/initialize the provider NET_PRES_EncProviderDeinit fpDeinit; Function pointer to close/deinitialize the provider NET_PRES_EncProviderOpen fpOpen; Function pointer to create a stream client connection NET_PRES_EncProviderConnect fpConnect; Function pointer to connect and pump the negotiation of a stream client connection NET_PRES_EncProviderConnectionClose fpClose; Function Pointer to close and clean up a connection NET_PRES_EncProviderWrite fpWrite; Function Pointer to write data to a connection NET_PRES_EncProviderWriteReady fpWriteReady; Function Pointer to check the connection write space NET_PRES_EncProviderRead fpRead; Function pointer to read data from a connection NET_PRES_EncProviderReadReady fpReadReady; Function pointer to return the available read data from a connection NET_PRES_EncProviderRead fpPeek; Function pointer to peek at data from a connection NET_PRES_EncProviderIsInitialized fpIsInited; Function pointer to check to determine if the provider has been initialized NET_PRES_EncProviderOutputSize fpOutputSize; Function pointer to get the output size NET_PRES_EncProviderMaxOutputSize fpMaxOutputSize; Function pointer to get the maximum output size ",
							" Description Presentation Encryption Provider Information Structure This data type is given to the presentation layer during initialization to provide information on the provider so it can be used during secure communications ",
							" Remarks None ",
							" NET_PRES_EncProviderOpen Type ",
							" C typedef bool (* NET_PRES_EncProviderOpen)(uintptr_t transHandle void * providerData); ",
							" Returns true - Create succeeded false - Create did not succeed ",
							" Description Presentation Encryption Provider Open Connection Prototype This function pointer prototype defines the open connection function to the provider ",
							" Preconditions None ",
							" Parameters Parameters Description transHandle The handle from the transport layer to use for this client providerData A pointer to the buffer for the provider to keep connection specific data ",
							" NET_PRES_EncProviderOutputSize Type ",
							" C typedef int32_t (* NET_PRES_EncProviderOutputSize)(void * providerData int32_t inSize); ",
							" Returns Upon success the requested size will be returned Upon error 0 is returned: if the input size is greater than the maximum TLS fragment size invalid function argument if the SSL/TLS handshake has not been completed yet ",
							" Description Presentation Encryption Provider Output Size Function Pointer Prototype This function pointer defines the output size function It is called by the presentation layer when the application wants to check how many bytes will be sent across the Transport layer given a specified plaintext input size ",
							" Preconditions A connection must have already been created and be in the open state This function must be called after the SSL/TLS handshake has been completed ",
							" Parameters Parameters Description providerData A pointer to the buffer for the provider to keep connection specific data inSize The requested plain text size to check for ",
							" NET_PRES_EncProviderRead Type ",
							" C typedef int32_t (* NET_PRES_EncProviderRead)(void * providerData uint8_t * buffer uint16_t size); ",
							" Returns The number of bytes transferred ",
							" Description Presentation Encryption Provider Read Function Pointer Prototype This function pointer defines the read function It is called by the presentation layer when the presentation client wants to read from a secured connection ",
							" Remarks If the supplied buffer is NULL the operation is ignored ",
							" Preconditions A connection must have already been created and be in the open state ",
							" Parameters Parameters Description providerData A pointer to the buffer for the provider to keep connection specific data buffer A pointer to the buffer that will be read from the provider count Size of the buffer ",
							" NET_PRES_EncProviderReadReady Type ",
							" C typedef int32_t (* NET_PRES_EncProviderReadReady)(void * providerData); ",
							" Returns The number of bytes ready to be read ",
							" Description Presentation Encryption Provider Read Ready Function Pointer Prototype This function pointer defines the read ready function It is called by the presentation layer when the presentation client wants to check whether read data is available from a secured connection ",
							" Preconditions A connection must have already been created and be in the open state ",
							" Parameters Parameters Description providerData A pointer to the buffer for the provider to keep connection specific data ",
							" NET_PRES_EncProviderWrite Type ",
							" C typedef int32_t (* NET_PRES_EncProviderWrite)(void * providerData const uint8_t * buffer uint16_t size); ",
							" Returns The number of bytes transferred ",
							" Description Presentation Encryption Provider Write Function Pointer Prototype This function pointer defines the write function It is called by the presentation layer when the application wants to write to a secured connection ",
							" Preconditions A connection must have already been created and be in the open state ",
							" Parameters Parameters Description providerData A pointer to the buffer for the provider to keep connection specific data buffer This is a pointer to the buffer that will be sent to the provider size This is the size of the buffer ",
							" NET_PRES_EncProviderWriteReady Type ",
							" C typedef uint16_t (* NET_PRES_EncProviderWriteReady)(void * providerData uint16_t reqSize uint16_t minSize); ",
							" Returns The number of bytes available in the output buffer: = reqSize if the requested space is available in the output buffer = minSize if there's at least this minimum space (minSize = 0) 0 requested (minimum) space cannot be granted ",
							" Description Presentation Encryption Provider Write Ready Function Pointer Prototype This function pointer defines the write ready function It is called by the presentation layer when the application wants to check the write space to a secured connection The function checks for the requested size If this is not available it checks for at least minimum size (if = 0) ",
							" Preconditions A connection must have already been created and be in the open state ",
							" Parameters Parameters Description providerData A pointer to the buffer for the provider to keep connection specific data reqSize The requested size to check for minSize Minimum size to check for Could be 0 if not used ",
							" NET_PRES_EncSessionStatus Enumeration ",
							" C typedef enum { NET_PRES_ENC_SS_UNKNOWN NET_PRES_ENC_SS_WAITING_TO_START_NEGOTIATION NET_PRES_ENC_SS_CLIENT_NEGOTIATING NET_PRES_ENC_SS_SERVER_NEGOTIATING NET_PRES_ENC_SS_OPEN NET_PRES_ENC_SS_FAILED NET_PRES_ENC_SS_CLOSING NET_PRES_ENC_SS_CLOSED } NET_PRES_EncSessionStatus; ",
							" Members Members Description NET_PRES_ENC_SS_UNKNOWN Presentation encryption is in an unknown/default state NET_PRES_ENC_SS_WAITING_TO_START_NEGOTIATION Presentation encryption has not started negotiation NET_PRES_ENC_SS_CLIENT_NEGOTIATING Presentation encryption client negotiation is in progress NET_PRES_ENC_SS_SERVER_NEGOTIATING Presentation encryption server negotiation is in progress NET_PRES_ENC_SS_OPEN Presentation encryption negotiation is complete and data can be sent/received NET_PRES_ENC_SS_FAILED Presentation encryption negotiation failed or some other failure NET_PRES_ENC_SS_CLOSING Presentation encryption is closing but connection needs to be pumped for final packets NET_PRES_ENC_SS_CLOSED Presentation encryption is closed provider data has been freed ",
							" Description MPLAB Harmony Networking Presentation Layer Encryption status type This enumeration defines the enumeration for the state and status of the encrypted portion of a connection ",
							" Remarks None ",
							" NET_PRES_INDEX Type ",
							" C typedef uint8_t NET_PRES_INDEX; ",
							" Description Net Presentation Index Type This data type sets the type for the presentation layer index ",
							" Remarks None ",
							" NET_PRES_INIT_DATA Structure ",
							" C C typedef struct { uint8_t numLayers; const NET_PRES_INST_DATA * pInitData; } NET_PRES_INIT_DATA; ",
							" Members Members Description uint8_t numLayers; Number of presentation layers const NET_PRES_INST_DATA * pInitData; Pointer to an array of pointers to presentation layer instance data ",
							" Description Net Presentation Initialization data Data type that initializes a Presentation layer ",
							" Remarks None ",
							" NET_PRES_Initialize Function ",
							" C SYS_MODULE_OBJ NET_PRES_Initialize(const SYS_MODULE_INDEX index const SYS_MODULE_INIT * const init); ",
							" Returns Valid handle to the presentation instance - If successful SYS_MODULE_OBJ_INVALID - If unsuccessful ",
							" Description Network Presentation Layer Initialization Initializes the Network Presentation Layer sub-system with the configuration data ",
							" Preconditions None ",
							" Parameters Parameters Description index This is the index of the network presentation layer instance to be initialized Since there is only one network presentation layer this parameter is ignored init This is a pointer to a NET_PRES_INIT_DATA structure ",
							" NET_PRES_INST_DATA Structure ",
							" C typedef struct { const struct _NET_PRES_TransportObject * pTransObject_ss; const struct _NET_PRES_TransportObject * pTransObject_sc; const struct _NET_PRES_TransportObject * pTransObject_ds; const struct _NET_PRES_TransportObject * pTransObject_dc; const struct _NET_PRES_EncProviderObject * pProvObject_ss; const struct _NET_PRES_EncProviderObject * pProvObject_sc; const struct _NET_PRES_EncProviderObject * pProvObject_ds; const struct _NET_PRES_EncProviderObject * pProvObject_dc; } NET_PRES_INST_DATA; ",
							" Members Members Description const struct _NET_PRES_TransportObject * pTransObject_ss; Pointer to the transport object that handles the stream server const struct _NET_PRES_TransportObject * pTransObject_sc; Pointer to the transport object that handles the stream client const struct _NET_PRES_TransportObject * pTransObject_ds; Pointer to the transport object that handles the datagram server const struct _NET_PRES_TransportObject * pTransObject_dc; Pointer to the transport object that handles the datagram client const struct _NET_PRES_EncProviderObject * pProvObject_ss; Pointer to the encryption provider object that handles the stream server const struct _NET_PRES_EncProviderObject * pProvObject_sc; Pointer to the encryption provider object that handles the stream client const struct _NET_PRES_EncProviderObject * pProvObject_ds; Pointer to the encryption provider object that handles the datagram server const struct _NET_PRES_EncProviderObject * pProvObject_dc; Pointer to the encryption provider object that handles the datagram client ",
							" Description Net Presentation Instance Initialization data This data type initializes a Presentation layer ",
							" Remarks None ",
							" NET_PRES_INVALID_SOCKET Macro ",
							" C C #define NET_PRES_INVALID_SOCKET (-1) ",
							" Description Macro: NET_PRES_INVALID_SOCKET Indicates that the socket is invalid or could not be opened ",
							" NET_PRES_Reinitialize Function ",
							" C void NET_PRES_Reinitialize(SYS_MODULE_OBJ obj const SYS_MODULE_INIT * const init); ",
							" Returns None ",
							" Description Network Presentation Layer Reinitialization This function will deinitialize and initialize the layer instance ",
							" Preconditions The layer must be successfully initialized with NET_PRES_Initialize ",
							" Parameters Parameters Description object The object valid passed back to NET_PRES_Initialize init The new initialization structure ",
							" NET_PRES_SIGNAL_FUNCTION Type ",
							" C typedef void (* NET_PRES_SIGNAL_FUNCTION)(NET_PRES_SKT_HANDLE_T handle NET_PRES_SIGNAL_HANDLE hNet uint16_t sigType const void* param); ",
							" Description Type: NET_PRES_SIGNAL_FUNCTION Prototype of a signal handler Socket user can register a handler for the socket Once an event occurs the registered handler will be called ",
							" Remarks The handler has to be short and fast It is meant for setting an event flag not for lengthy processing ",
							" Parameters Parameters Description handle The presentation socket to be used hNet The network interface on which the event has occurred sigType The type of signal that has occurred param An additional parameter that can has been specified at the handler registration call Currently not used and it will be null ",
							" NET_PRES_SIGNAL_HANDLE Type ",
							" C typedef const void* NET_PRES_SIGNAL_HANDLE; ",
							" Description Net Presentation Signal Handle Type This data type sets the type for the presentation layer signal handle ",
							" Remarks None ",
							" NET_PRES_SKT_ADDR_T Enumeration ",
							" C typedef enum { NET_PRES_SKT_ADDR_UNKNOWN } NET_PRES_SKT_ADDR_T; ",
							" Description Enumeration: NET_PRES_SKT_ADDR_T Enumeration describing all the possible NET_PRES address types ",
							" Remarks None ",
							" NET_PRES_SKT_ERROR_T Enumeration ",
							" C typedef enum { NET_PRES_SKT_OK = 0 NET_PRES_SKT_OP_NOT_SUPPORTED = -1 NET_PRES_SKT_OP_OUT_OF_HANDLES = -2 NET_PRES_SKT_OP_INVALID_INDEX = -3 NET_PRES_SKT_UNKNOWN_ERROR = -4 NET_PRES_SKT_INVALID_SOCKET = -5 NET_PRES_SKT_ENC_NEGO_FAILED = -6 NET_PRES_SKT_HANDLER_BUSY = -7 NET_PRES_SKT_HANDLER_ERROR = -8 NET_PRES_SKT_HANDLER_TRANSP_ERROR = -9 } NET_PRES_SKT_ERROR_T; ",
							" Members Members Description NET_PRES_SKT_OP_NOT_SUPPORTED = -1 Most likely the function is not supported by the socket type NET_PRES_SKT_HANDLER_BUSY = -7 a signal handler already registered NET_PRES_SKT_HANDLER_ERROR = -8 no such signal handler NET_PRES_SKT_HANDLER_TRANSP_ERROR = -9 transport layer signal operation failed ",
							" Description Enumeration: NET_PRES_SKT_ERROR_T Enumeration describing all the possible NET_PRES error types ",
							" Remarks None ",
							" NET_PRES_SKT_HANDLE_T Type ",
							" C typedef int16_t NET_PRES_SKT_HANDLE_T; ",
							" Description Net Presentation Socket Handle Type This data type sets the type for the presentation layer socket handle ",
							" Remarks None ",
							" NET_PRES_SKT_OPTION_TYPE Enumeration ",
							" C typedef enum { NET_PRES_SKT_OPT_UNKNOWN } NET_PRES_SKT_OPTION_TYPE; ",
							" Description Enumeration: NET_PRES_SKT_OPTION_TYPE Enumeration describing all the possible NET_PRES option types ",
							" Remarks None ",
							" NET_PRES_SKT_PORT_T Type ",
							" C typedef uint16_t NET_PRES_SKT_PORT_T; ",
							" Description Net Presentation Port Type This data type sets the type for the presentation layer port ",
							" Remarks None ",
							" NET_PRES_SKT_T Enumeration ",
							" C typedef enum { NET_PRES_SKT_CLIENT = 0x0001 NET_PRES_SKT_SERVER = 0x0002 NET_PRES_SKT_STREAM = 0x0004 NET_PRES_SKT_DATAGRAM = 0x0008 NET_PRES_SKT_UNENCRYPTED = 0x0010 NET_PRES_SKT_ENCRYPTED = 0x0020 NET_PRES_SKT_UNENCRYPTED_STREAM_CLIENT = (NET_PRES_SKT_UNENCRYPTED | NET_PRES_SKT_STREAM | NET_PRES_SKT_CLIENT) NET_PRES_SKT_UNENCRYPTED_STREAM_SERVER = (NET_PRES_SKT_UNENCRYPTED | NET_PRES_SKT_STREAM | NET_PRES_SKT_SERVER) NET_PRES_SKT_UNENCRYPTED_DATAGRAM_CLIENT = (NET_PRES_SKT_UNENCRYPTED | NET_PRES_SKT_DATAGRAM | NET_PRES_SKT_CLIENT) NET_PRES_SKT_UNENCRYPTED_DATAGRAM_SERVER = (NET_PRES_SKT_UNENCRYPTED | NET_PRES_SKT_DATAGRAM | NET_PRES_SKT_SERVER) NET_PRES_SKT_ENCRYPTED_STREAM_CLIENT = (NET_PRES_SKT_ENCRYPTED | NET_PRES_SKT_STREAM | NET_PRES_SKT_CLIENT) NET_PRES_SKT_ENCRYPTED_STREAM_SERVER = (NET_PRES_SKT_ENCRYPTED | NET_PRES_SKT_STREAM | NET_PRES_SKT_SERVER) NET_PRES_SKT_ENCRYPTED_DATAGRAM_CLIENT = (NET_PRES_SKT_ENCRYPTED | NET_PRES_SKT_DATAGRAM | NET_PRES_SKT_CLIENT) NET_PRES_SKT_ENCRYPTED_DATAGRAM_SERVER = (NET_PRES_SKT_ENCRYPTED | NET_PRES_SKT_DATAGRAM | NET_PRES_SKT_SERVER) NET_PRES_SKT_DEFAULT_STREAM_CLIENT = (NET_PRES_SKT_STREAM | NET_PRES_SKT_CLIENT) NET_PRES_SKT_DEFAULT_STREAM_SERVER = (NET_PRES_SKT_STREAM | NET_PRES_SKT_SERVER) NET_PRES_SKT_DEFAULT_DATAGRAM_CLIENT = (NET_PRES_SKT_DATAGRAM | NET_PRES_SKT_CLIENT) NET_PRES_SKT_DEFAULT_DATAGRAM_SERVER = (NET_PRES_SKT_DATAGRAM | NET_PRES_SKT_SERVER) } NET_PRES_SKT_T; ",
							" Description Enumeration: NET_PRES_SKT_T Enumeration describing all the possible NET_PRES socket types ",
							" Remarks None ",
							" NET_PRES_SocketBind Function ",
							" C bool NET_PRES_SocketBind(NET_PRES_SKT_HANDLE_T handle NET_PRES_SKT_ADDR_T addrType NET_PRES_SKT_PORT_T port NET_PRES_ADDRESS * addr); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description This function calls directly to the transport layer's bind function ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The socket to bind addType The type of address being used This is passed unaltered to the transport layer port The port to use This is passed unaltered to the transport layer addr The address to bind to This is passed unaltered to the transport layer ",
							" NET_PRES_SocketClose Function ",
							" C void NET_PRES_SocketClose(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns None ",
							" Description This function calls the encryption provider's close function and then calls the close function of the transport layer for the socket and frees the socket for reuse ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketConnect Function ",
							" C bool NET_PRES_SocketConnect(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description This function calls the transport layer's connect function directly if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketDiscard Function ",
							" C uint16_t NET_PRES_SocketDiscard(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns The number of bytes that have been discarded from the RX buffer ",
							" Description This function calls the transport layer's discard function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketDisconnect Function ",
							" C bool NET_PRES_SocketDisconnect(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description This function calls the transport layer's disconnect function directly if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketEncryptSocket Function ",
							" C bool NET_PRES_SocketEncryptSocket(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns true - If the call was successful false - If the call was unsuccessful ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketFlush Function ",
							" C uint16_t NET_PRES_SocketFlush(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns The number of flushed bytes 0 if no flushed bytes or an error occurred ",
							" Description This function calls the transport layer's flush function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketGetTransportHandle Function ",
							" C NET_PRES_SKT_HANDLE_T NET_PRES_SocketGetTransportHandle(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns A valid transport layer handle that can be casted into the proper type ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketInfoGet Function ",
							" C bool NET_PRES_SocketInfoGet(NET_PRES_SKT_HANDLE_T handle void * info); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description This function calls the transport layer's SocketInfoGet if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle info The buffer that the information gets written to ",
							" NET_PRES_SocketIsConnected Function ",
							" C bool NET_PRES_SocketIsConnected(NET_PRES_SKT_HANDLE_T handle); ",
							" Description This function determines whether a socket has an established connection to a remote node This function calls directly to the transport layer's IsConnected function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketIsNegotiatingEncryption Function ",
							" C bool NET_PRES_SocketIsNegotiatingEncryption(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns true - If the encryption negotiation is still ongoing false - If there is no ongoing negotiation ",
							" Description This function returns checks to see if an encrypted socket is still undergoing negotiation ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketIsOpenModeSupported Function ",
							" C bool NET_PRES_SocketIsOpenModeSupported(NET_PRES_INDEX index NET_PRES_SKT_T socketType); ",
							" Returns true - The mode is supported false - The mode is not supported ",
							" Description This function checks to see if a mode is supported by open ",
							" Preconditions The MPLAB Harmony Networking Presentation Layer is initialized ",
							" Parameters Parameters Description index Index of the presentation layer socketType The type of socket to mode to be checked ",
							" NET_PRES_SocketIsSecure Function ",
							" C bool NET_PRES_SocketIsSecure(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns true - If the communications is secure false - If the communications is not secure ",
							" Description This function returns whether or not the connection is secure It will return true if encryption negotiation was successful ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description Description    handle  The presentation layer socket handle ",
							" NET_PRES_SocketLastError Function ",
							" C NET_PRES_SKT_ERROR_T NET_PRES_SocketLastError(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns A NET_PRES_SKT_ERROR_T representing the last encountered error for this socket ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketOpen Function ",
							" C NET_PRES_SKT_HANDLE_T NET_PRES_SocketOpen(NET_PRES_INDEX index NET_PRES_SKT_T socketType NET_PRES_SKT_ADDR_T addrType NET_PRES_SKT_PORT_T port NET_PRES_ADDRESS * addr NET_PRES_SKT_ERROR_T* error); ",
							" Returns NET_PRES_INVALID_SOCKET - No sockets of the specified type were available to be opened NET_PRES_SKT_HANDLE_T handle - Returned when NET_PRES_INVALID_SOCKET is returned Save this handle and use it when calling all other presentation socket APIs ",
							" Description Provides a unified method for opening all presentation sockets types Sockets are created at the presentation layer module initialization and can be claimed with this function and freed using NET_PRES_SocketClose The presentation layer will call the corresponding open function in the transport layer and if encryption is specified the presentation layer will also handle encryption negotiation ",
							" Preconditions The MPLAB Harmony Networking Presentation Layer is initialized ",
							" Parameters Parameters Description index Index of the presentation layer socketType The type of socket to open addType The type of address being used This is passed unaltered to the transport layer port The port to listen or to send to This is passed unaltered to the transport layer addr Address to use This is passed unaltered to the transport layer error The extended error code of the function ",
							" NET_PRES_SocketOptionsGet Function ",
							" C bool NET_PRES_SocketOptionsGet(NET_PRES_SKT_HANDLE_T handle NET_PRES_SKT_OPTION_TYPE option void* optParam); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Various options can be obtained at the socket level This function calls directly to the transport layer's OptionGet function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The socket to set options for option The specific option to set this is passed unaltered to the transport layer optParam The option value which is passed unaltered to the transport layer ",
							" NET_PRES_SocketOptionsSet Function ",
							" C bool NET_PRES_SocketOptionsSet(NET_PRES_SKT_HANDLE_T handle NET_PRES_SKT_OPTION_TYPE option void* optParam); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Various options can be set at the socket level This function calls directly to the transport layer's OptionSet function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The socket to set options for option The specific option to be set this is passed unaltered to the transport layer optParam The option value this is passed unaltered to the transport layer ",
							" NET_PRES_SocketPeek Function ",
							" C uint16_t NET_PRES_SocketPeek(NET_PRES_SKT_HANDLE_T handle void * buffer uint16_t size); ",
							" Description If the socket is encrypted this function will call the encryption provider's peek function Otherwise this function calls the transport layer's peek function ",
							" Remarks None ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle buffer Destination to write the peeked data bytes size Length of bytes to peek from the RX FIFO and copy to the buffer ",
							" NET_PRES_SocketRead Function ",
							" C uint16_t NET_PRES_SocketRead(NET_PRES_SKT_HANDLE_T handle void * buffer uint16_t size); ",
							" Returns The number of bytes read from the socket If less than len the RX FIFO buffer became empty or the socket is not connected ",
							" Description This function reads an array of data bytes from a socket's RX buffer/FIFO The data is removed from the FIFO in the process If the connection is encrypted this function calls the encryption provider's read function otherwise it calls the transport layer's read function ",
							" Remarks For encrypted connections a null buffer is an invalid parameter For non encrypted connections if the supplied buffer is null the data is simply discarded ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle buffer The pointer to the array to store data that was read size The number of bytes to be read ",
							" NET_PRES_SocketReadIsReady Function ",
							" C uint16_t NET_PRES_SocketReadIsReady(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns The number of bytes available to be read from the TCP RX buffer ",
							" Description Call this function to determine how many bytes can be read from the RX buffer If this function returns zero the application must return to the main stack loop before continuing in order to wait for more data to arrive This function calls the transport layer's ReadIsReady function When using an encrypted connection the number of unencrypted bytes may turn out to be different than what this function returns ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketRemoteBind Function ",
							" C bool NET_PRES_SocketRemoteBind(NET_PRES_SKT_HANDLE_T handle NET_PRES_SKT_ADDR_T addrType NET_PRES_SKT_PORT_T port NET_PRES_ADDRESS * addr); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description This function calls directly to the transport layer's remote bind function ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The socket to bind addType The type of address being used This is passed unaltered to the transport layer port The port to use This is passed unaltered to the transport layer addr The address to bind to This is passed unaltered to the transport layer ",
							" NET_PRES_SocketSignalHandlerDeregister Function ",
							" C bool NET_PRES_SocketSignalHandlerDeregister(NET_PRES_SKT_HANDLE_T handle NET_PRES_SIGNAL_HANDLE hSig); ",
							" Returns true - If the call succeeds false - If no such handler is registered ",
							" Description This function calls the transport layer's deregister signal handler function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle hSig A handle returned by a previous call to TCPIP_TCP_SignalHandlerRegister ",
							" NET_PRES_SocketSignalHandlerRegister Function ",
							" C NET_PRES_SIGNAL_HANDLE NET_PRES_SocketSignalHandlerRegister(NET_PRES_SKT_HANDLE_T handle uint16_t sigMask NET_PRES_SIGNAL_FUNCTION handler const void* hParam); ",
							" Returns valid handle - Indicates the call succeeded null handle - Indicates the call failed (null handler no such socket existent handler) ",
							" Description This function calls the transport layer's register signal handle function directly if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle sigMask The mask of signals to be reported this parameter is passed to the transport layer directly handler signal handler to be called when an event occurs This parameter is passed to the transport layer directly hParam Parameter to be used in the handler call This parameter is passed to the transport layer directly ",
							" NET_PRES_SocketWasReset Function ",
							" C bool NET_PRES_SocketWasReset(NET_PRES_SKT_HANDLE_T handle); ",
							" Description This function is a self-clearing semaphore indicating whether or not a socket has been reset since the previous call This function calls directly to the transport layer's WasReset function if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle ",
							" NET_PRES_SocketWrite Function ",
							" C uint16_t NET_PRES_SocketWrite(NET_PRES_SKT_HANDLE_T handle const void * buffer uint16_t size); ",
							" Returns The number of bytes written to the socket If less than len the buffer became full or the socket is not connected ",
							" Description This function takes a buffer and sends it to the encryption provider for an encrypted socket or to the transport layer directly for an unencrypted socket ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle The presentation layer socket handle buffer The pointer to the array to be written size The number of bytes to be written ",
							" NET_PRES_SocketWriteIsReady Function ",
							" C uint16_t NET_PRES_SocketWriteIsReady(NET_PRES_SKT_HANDLE_T handle uint16_t reqSize uint16_t minSize); ",
							" Returns The number of bytes available in the TX buffer: = reqSize - If the requested space is available in the output buffer = minSize - I there's at least this minimum space (minSize = 0) 0 - Requested (minimum) space cannot be granted ",
							" Description This function calls the transport or the encryption layer's WriteIsReady if it exists ",
							" Preconditions A socket needs to have been opened by NET_PRES_SocketOpen ",
							" Parameters Parameters Description handle Presentation layer socket handle reqSize Write size to check for minSize Minimum size that could be guaranteed Could be '0' if not needed ",
							" NET_PRES_Status Function ",
							" C SYS_STATUS NET_PRES_Status(SYS_MODULE_OBJ object); ",
							" Returns SYS_STATUS_READY - Indicates that any previous module operation for the specified module has completed SYS_STATUS_UNINITIALIZED - Indicates the module has not been initialized SYS_STATUS_BUSY - Indicates that the module is busy and can't accept operations SYS_STATUS_ERROR - Indicates that there is a fatal error in the module ",
							" Description This function provides the current status of the MPLAB Harmony Net Presentation Layer ",
							" Remarks None ",
							" Preconditions The NET_PRES_Initialize function must have been called before calling this function Networking Presentation Layer Help Library Interface b) Socket Functions ",
							" Parameters Parameters Description object Layer object handle returned from NET_PRES_Initialize ",
							" NET_PRES_Tasks Function ",
							" C void NET_PRES_Tasks(SYS_MODULE_OBJ obj); ",
							" Returns None ",
							" Description MPLAB Harmony Networking Presentation Layer Tasks This function is called by the main loop It is used to pump encryption connections during negotiations ",
							" Preconditions The layer must be successfully initialized with NET_PRES_Initialize ",
							" Parameters Parameters Description object The valid object passed back to NET_PRES_Initialize ",
							" NET_PRES_TRANS_ADDR_T Structure ",
							" C typedef struct { uint8_t addr[16]; } NET_PRES_TRANS_ADDR_T; ",
							" Members Members Description uint8_t addr ; So far biggest for IPv6 ",
							" Description MPLAB Harmony Networking Presentation Transport Address Structure This data type is just a generic address structure The presentation layer does not do any processing on this data but instead passes it directly to the transport ",
							" Remarks None ",
							" NET_PRES_TRANS_ADDRESS_TYPE Enumeration ",
							" C typedef enum { NET_PRES_ADDRT_UNKNOWN } NET_PRES_TRANS_ADDRESS_TYPE; ",
							" Description MPLAB Harmony Networking Presentation Layer Address type Defines the enumeration for the type of address This enumeration is not used directly by the presentation layer and is used to enforce a consistent interface between layers ",
							" Remarks None ",
							" NET_PRES_TRANS_OPTION_T Enumeration ",
							" C typedef enum { NET_PRES_OPT_UNKNOWN } NET_PRES_TRANS_OPTION_T; ",
							" Description MPLAB Harmony Networking Presentation Layer Option type Defines the enumeration for the type of options This enumeration is not used directly by the presentation layer and is used to enforce a consistent interface between layers ",
							" Remarks None ",
							" NET_PRES_TransBind Type ",
							" C typedef bool (* NET_PRES_TransBind)(NET_PRES_SKT_HANDLE_T handle NET_PRES_TRANS_ADDRESS_TYPE addType NET_PRES_SKT_PORT_T port NET_PRES_ADDRESS * address); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Transport Layer Bind Function Pointer Prototype This function is called by the presentation layer when an application wants to bind a socket ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen addType The type of address being used This is passed unaltered to the transport layer port The port to use This is passed unaltered to the transport layer address The address to bind to This is passed unaltered to the transport layer ",
							" NET_PRES_TransBool Type ",
							" C typedef bool (* NET_PRES_TransBool)(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns The result is passed directly through from the transport layer to the application The meaning of the return is dependent on the transport function ",
							" Description Transport Layer Boolean Function Pointer Prototype This function is called by the presentation layer when it accesses a function that takes no parameters apart from the socket handle and returns a boolean ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen ",
							" NET_PRES_TransClose Type ",
							" C typedef void (* NET_PRES_TransClose)(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns None ",
							" Description Transport Layer Close Function Pointer Prototype This function is called by the presentation layer when the application wants to close a connection ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen ",
							" NET_PRES_TransDiscard Type ",
							" C typedef uint16_t (* NET_PRES_TransDiscard)(NET_PRES_SKT_HANDLE_T handle); ",
							" Returns The number of bytes discarded ",
							" Description Transport Layer Discard Function Pointer Prototype This function is called by the presentation layer when the application wants to discard the RX buffer in a socket ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen ",
							" NET_PRES_TransHandlerRegister Type ",
							" C typedef NET_PRES_SIGNAL_HANDLE (* NET_PRES_TransHandlerRegister)(NET_PRES_SKT_HANDLE_T handle uint16_t sigMask NET_PRES_SIGNAL_FUNCTION handler const void* hParam); ",
							" Returns The handle of a signal handler ",
							" Description Transport Layer Register Handler Function Pointer Prototype This function is called by the presentation layer when the application wants to register a handler function ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen sigMask The event mask handler The event handler function hParam Parameters passed to the handler function ",
							" NET_PRES_TransIsPortDefaultSecured Type ",
							" C typedef bool (* NET_PRES_TransIsPortDefaultSecured)(uint16_t port); ",
							" Returns true - The port is encrypted by default and the presentation layer will start negotiating encryption when it is connected false - The post is not encrypted by default ",
							" Description Presentation Layer Transport Layer Is Port Encrypted This function prototype is used by the presentation layer to determine if a port is encrypted by default or not when it is opened ",
							" Preconditions None ",
							" NET_PRES_TransOpen Type ",
							" C typedef NET_PRES_SKT_HANDLE_T (* NET_PRES_TransOpen)(NET_PRES_TRANS_ADDRESS_TYPE addType NET_PRES_SKT_PORT_T port NET_PRES_ADDRESS * address); ",
							" Returns NET_PRES_INVALID_SOCKET - No sockets of the specified type were available to be opened NET_PRES_SKT_HANDLE_T handle - Returned when NET_PRES_INVALID_SOCKET is returned Save this handle and use it when calling all other presentation socket APIs ",
							" Description Transport Layer Open Function Pointer Prototype This function is called by the presentation layer when an application wants to open a socket ",
							" Preconditions Transport layer must be initialized ",
							" Parameters Parameters Description addType The type of address being used This is passed unaltered to the transport layer port The port to listen or to send to This is passed unaltered to the transport layer address The address to use This is passed unaltered to the transport layer ",
							" NET_PRES_TransOption Type ",
							" C typedef bool (* NET_PRES_TransOption)(NET_PRES_SKT_HANDLE_T handle NET_PRES_TRANS_OPTION_T option void * optParam); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Transport Layer Option Function Pointer Prototype This function is called by the presentation layer when an application wants to get the current socket options or set them ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen option The option to set or get optParam The pointer to option specific information ",
							" NET_PRES_TransPeek Type ",
							" C typedef bool (* NET_PRES_TransPeek)(NET_PRES_SKT_HANDLE_T handle uint8_t *vBuffer uint16_t wLen uint16_t wStart); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Transport Layer Peek Function Pointer Prototype This function is called by the presentation layer when the application wants to peek into the buffer of an unencrypted socket ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen vBuffer The buffer location to put the information wLen The size of the buffer wStart Where to start peeking into the buffer This parameter is not used and will always be set to '0' ",
							" NET_PRES_TransportObject Structure ",
							" C typedef struct _NET_PRES_TransportObject { NET_PRES_TransOpen fpOpen; NET_PRES_TransBind fpLocalBind; NET_PRES_TransBind fpRemoteBind; NET_PRES_TransOption fpOptionGet; NET_PRES_TransOption fpOptionSet; NET_PRES_TransBool fpIsConnected; NET_PRES_TransBool fpWasReset; NET_PRES_TransBool fpWasDisconnected; NET_PRES_TransBool fpDisconnect; NET_PRES_TransBool fpConnect; NET_PRES_TransClose fpClose; NET_PRES_TransSocketInfoGet fpSocketInfoGet; NET_PRES_TransBool fpFlush; NET_PRES_TransPeek fpPeek; NET_PRES_TransDiscard fpDiscard; NET_PRES_TransHandlerRegister fpHandlerRegister; NET_PRES_TransSignalHandlerDeregister fpHandlerDeregister; NET_PRES_TransRead fpRead; NET_PRES_TransWrite fpWrite; NET_PRES_TransReady fpReadyToRead; NET_PRES_TransReady fpReadyToWrite; NET_PRES_TransIsPortDefaultSecured fpIsPortDefaultSecure; } NET_PRES_TransportObject; ",
							" Members Members Description NET_PRES_TransOpen fpOpen; Function pointer to the transport's open call NET_PRES_TransBind fpLocalBind; Function pointer to the transport's bind call NET_PRES_TransBind fpRemoteBind; Function pointer to the transport's remote bind call NET_PRES_TransOption fpOptionGet; Function call to the the transport's option get call NET_PRES_TransOption fpOptionSet; Function call to the the transport's option set call NET_PRES_TransBool fpIsConnected; Function call to the the transport's is connected call NET_PRES_TransBool fpWasReset; Function call to the the transport's was reset call NET_PRES_TransBool fpWasDisconnected; Function call to the the transport's was disconnected call NET_PRES_TransBool fpDisconnect; Function call to the the transport's disconnect call NET_PRES_TransBool fpConnect; Function call to the the transport's connect call NET_PRES_TransClose fpClose; Function call to the the transport's close call NET_PRES_TransSocketInfoGet fpSocketInfoGet; Function call to the the transport's get socket info call NET_PRES_TransBool fpFlush; Function call to the the transport's flush call NET_PRES_TransPeek fpPeek; Function call to the the transport's peek call NET_PRES_TransDiscard fpDiscard; Function call to the the transport's discard call NET_PRES_TransHandlerRegister fpHandlerRegister; Function call to the the transport's register handler call NET_PRES_TransSignalHandlerDeregister fpHandlerDeregister; Function call to the the transport's deregister handler call NET_PRES_TransRead fpRead; Function pointer to call when doing a read from a transport layer NET_PRES_TransWrite fpWrite; Function pointer to call when doing a write to a transport layer NET_PRES_TransReady fpReadyToRead; Function pointer to call when checking to see if there is data available to be read from a transport layer NET_PRES_TransReady fpReadyToWrite; Function pointer to call when checking to see if there is space available to be write to a transport layer NET_PRES_TransIsPortDefaultSecured fpIsPortDefaultSecure; Function pointer to call when checking to see if a port is secure by default ",
							" Description MPLAB Harmony Networking Presentation Transport Information Structure This data type defines the data required by the transport layer to effectively work with the Networking Presentation Layer The data is there to allow the Networking Presentation Layer to configure the provider to effectively use the transport layer ",
							" Remarks None ",
							" NET_PRES_TransRead Type ",
							" C typedef uint16_t (* NET_PRES_TransRead)(uintptr_t transHandle uint8_t* buffer uint16_t count); ",
							" Returns The number of data bytes copied by the transport channel into the buffer ",
							" Description Presentation Layer Transport Layer Read Function Pointer Prototype This function prototype is used to define the function that the Networking Presentation Layer will pass to the provider when it is initialized The provider will use this function when it needs to read from the transport layer ",
							" Preconditions None ",
							" Parameters Parameters Description transHandle This is the transport layer handle provided by the transport layer when a communications channel is open buffer This is a pointer to the buffer that the transport layer will copy data to count This is the size of the buffer ",
							" NET_PRES_TransReady Type ",
							" C typedef uint16_t (* NET_PRES_TransReady)(uintptr_t transHandle); ",
							" Returns true - The presentation layer can read or write to the transport layer false - The transport layer is busy and cannot accept reads or write ",
							" Description Presentation Layer Transport Layer Ready Function This function prototype is used to define the function that the Networking Presentation Layer will pass to the provider when it is initialized The provider will use this function when it needs to check if it can read or write to the layer ",
							" Preconditions None ",
							" Parameters Parameters Description transHandle This is the transport layer handle provided by the transport layer when a communications channel is open ",
							" NET_PRES_TransSignalHandlerDeregister Type ",
							" C typedef bool (* NET_PRES_TransSignalHandlerDeregister)(NET_PRES_SKT_HANDLE_T handle NET_PRES_SIGNAL_HANDLE hSig); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Transport Layer Deregister Handler Function Pointer Prototype This function is called by the presentation layer when the application wants to deregister a handler function ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen hSig The handler handle returned from NET_PRES_TransHandlerRegister ",
							" NET_PRES_TransSocketInfoGet Type ",
							" C typedef bool (* NET_PRES_TransSocketInfoGet)(NET_PRES_SKT_HANDLE_T handle void * info); ",
							" Returns true - Indicates success false - Indicates failure ",
							" Description Transport Layer Get Socket Info Function Pointer Prototype This function is called by the presentation layer when the application wants to get information on a socket ",
							" Preconditions A socket needs to have been opened by NET_PRES_TransOpen ",
							" Parameters Parameters Description handle The handle returned from NET_PRES_TransOpen info The socket information ",
							" NET_PRES_TransWrite Type ",
							" C typedef uint16_t (* NET_PRES_TransWrite)(uintptr_t transHandle const uint8_t* buffer uint16_t count); ",
							" Returns The number of data bytes accepted by the transport layer ",
							" Description Presentation Layer Transport Layer Write Function Pointer Prototype This function prototype is used to define the function that the Networking Presentation Layer will pass to the provider when it is initialized The provider will use this function when it needs to write to the transport layer ",
							" Preconditions None ",
							" Parameters Parameters Description transHandle This is the transport layer handle provided by the transport layer when a communications channel is open buffer This is a pointer to the buffer contains the data to be passed to the transport layer count This is the size of the buffer ",
							" TCPIP Configurator  MPLAB® TCP/IP Configurator is a graphical user interface for configuring Harmony TCP/IP Stack This enables user to graphically add TCP/IP functionality to Harmony project TCP/IP Configurator provides support to   Add TCP/IP Component to Harmony Project  Remove TCP/IP Component from Harmony Project  Configure TCP/IP Components  Visualize the complete TCP/IP configuration  Identify missing dependencies for TCP/IP Components   ",
							" Getting Started with TCP/IP Configurator   Open MPLAB X IDE  Open existing MCC project / Create MCC project  Start MCC   Select TCP/IP Configurator from plugin drop-down menu    TCP/IP Configurator starting with Overview   Click 'Application' to add Application Layer Components   Select from 'Available Components' Click '+' or drag and drop to add selected components   This window popup if Harmony Core module is not yet added to the project Click 'Yes' to add HarmonyCore   Add TCP/IP modules from different layers For example to add from Transport Layer select Transport   Add from Network Layer   Select Data Link Layer   Click '+' on Network Interface to add an interface   Add MAC and PHY Components   Connect MAC PHY and Network Interface (MIIM Driver should be added with PHY modules)   Select Basic Config layer to add components TCP/IP Core will be added by default   Select Configuration Summary to verify missing dependencies   Select Overview to verify the complete TCP/IP configuration   Select any added TCP/IP Components Configure the module from 'Configuration Options'   After completing TCP/IP Configuration switch to MCC project graph  Add dependencies like SYS_Console SYS_TIME SYS_COMMAND in Root Layer of project graph  Save Configuration   The user needs to configure all the modules outside TCP/IP Stack using project graph Other configurations required for any TCP/IP application demo to work are   Clock Configuration  Pin Configuration  System Heap Configuration  MPU Configuration for Non-Cacheable memory region This is applicable only for SAME70/V71 projects   After these configurations 'Generate' the code from MCC Build the code and program it to target board Now you are ready to test your TCP/IP application  The demos created using MHC can be migrated to TCP/IP Configurator Follow the steps to Migrate MHC based TCP/IP Demos to TCP/IP Configurator  ",
							" Migrate MHC based TCP/IP Demos to TCP/IP Configurator  Follow the steps to migrate existing TCP/IP application demo to work with TCP/IP Configurator   Open TCP/IP application demo to migrate in MPLAB X IDE  Open MCC project graph  (Only for SAME70/V71 projects) Clear user setting of GMAC descriptor for MPU in System configurations  Remove all TCP/IP Components in Driver Layer Group box (Note down any user configurations made in the removed components This is needed when adding these modules using TCP/IP Configurator)  Remove Driver Layer Group box  Remove all TCP/IP Components in Basic Configuration Layer Group box (Note down any user configurations made in the removed components This is needed when adding these modules using TCP/IP Configurator)  Open group boxes of TCP/IP Stack and remove 'Configurators': for example ‘TCP/IP Application Layer Configurator’ from TCPIP STACK/APPLICATION LAYER  Open TCP/IP Configurator from plugin drop-down menu  In Basic Config layer add TCP/IP Core and TCP/IP CMD modules Apply user settings to the modules if any  In Data Link layer add Network Interface by clicking '+' Drag and drop MAC and PHY modules Apply user settings to the modules if any  Make connections between Network Interface MAC and PHY  Open project graph in MCC  In root layer of project graph connect Console dependency on TCP/IP STACK to SYS_CONSOLE module  Save Configuration   "];

